id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/5408#issuecomment-654947753:321,Usability,clear,clearly,321,"This PR solves the problem of documenting our python requirements and adding a test that checks if we satisfy them at runtime. #5938 solves three main problems (plus a couple smaller things): a bug in an RDF tutorial, a bug in the vetoing of tutorials, and it adds a nice-to-have, namely having a single test fail that's clearly called ""test-if-numba-is-there"" rather than having all numba tests red. If what I said above is in the ballpark of correct, there is no conflict with #5938. so I still think this PR could go in modulo the missing requirements -- consider my approval conditional to agreeing on what should go in requirements.txt (i'll stay out of the discussion about whether pandas should be in there or not :D)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5408#issuecomment-654947753
https://github.com/root-project/root/pull/5411#issuecomment-617073790:338,Testability,test,tests,338,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5411-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5411#issuecomment-617073790
https://github.com/root-project/root/pull/5411#issuecomment-617073790:524,Testability,test,testReport,524,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5411-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5411#issuecomment-617073790
https://github.com/root-project/root/pull/5411#issuecomment-617073790:789,Testability,test,testReport,789,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5411-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5411#issuecomment-617073790
https://github.com/root-project/root/pull/5411#issuecomment-617073790:1038,Testability,test,testReport,1038,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5411-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5411#issuecomment-617073790
https://github.com/root-project/root/pull/5411#issuecomment-617073790:384,Usability,simpl,simple,384,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5411-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5411#issuecomment-617073790
https://github.com/root-project/root/pull/5411#issuecomment-617073790:570,Usability,simpl,simple,570,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5411-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5411#issuecomment-617073790
https://github.com/root-project/root/pull/5412#issuecomment-617073738:449,Testability,test,test,449,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/console).; ### Warnings:; - [2020-04-21T09:26:20.442Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/root/math/foam/test/testTFoam.cxx:14:23: warning: unused parameter 'nDim' [-Wunused-parameter] . ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617073738
https://github.com/root-project/root/pull/5412#issuecomment-617073738:454,Testability,test,testTFoam,454,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/console).; ### Warnings:; - [2020-04-21T09:26:20.442Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/root/math/foam/test/testTFoam.cxx:14:23: warning: unused parameter 'nDim' [-Wunused-parameter] . ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617073738
https://github.com/root-project/root/pull/5412#issuecomment-617073738:543,Testability,test,tests,543,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/console).; ### Warnings:; - [2020-04-21T09:26:20.442Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/root/math/foam/test/testTFoam.cxx:14:23: warning: unused parameter 'nDim' [-Wunused-parameter] . ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617073738
https://github.com/root-project/root/pull/5412#issuecomment-617073738:707,Testability,test,testReport,707,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/console).; ### Warnings:; - [2020-04-21T09:26:20.442Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/root/math/foam/test/testTFoam.cxx:14:23: warning: unused parameter 'nDim' [-Wunused-parameter] . ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617073738
https://github.com/root-project/root/pull/5412#issuecomment-617073738:956,Testability,test,testReport,956,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/console).; ### Warnings:; - [2020-04-21T09:26:20.442Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/root/math/foam/test/testTFoam.cxx:14:23: warning: unused parameter 'nDim' [-Wunused-parameter] . ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617073738
https://github.com/root-project/root/pull/5412#issuecomment-617073738:1227,Testability,test,testReport,1227,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/console).; ### Warnings:; - [2020-04-21T09:26:20.442Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/root/math/foam/test/testTFoam.cxx:14:23: warning: unused parameter 'nDim' [-Wunused-parameter] . ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617073738
https://github.com/root-project/root/pull/5412#issuecomment-617073738:1087,Usability,simpl,simple,1087,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/console).; ### Warnings:; - [2020-04-21T09:26:20.442Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/root/math/foam/test/testTFoam.cxx:14:23: warning: unused parameter 'nDim' [-Wunused-parameter] . ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617073738
https://github.com/root-project/root/pull/5412#issuecomment-617073738:1273,Usability,simpl,simple,1273,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/console).; ### Warnings:; - [2020-04-21T09:26:20.442Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/root/math/foam/test/testTFoam.cxx:14:23: warning: unused parameter 'nDim' [-Wunused-parameter] . ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617073738
https://github.com/root-project/root/pull/5412#issuecomment-617160440:338,Testability,test,tests,338,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617160440
https://github.com/root-project/root/pull/5412#issuecomment-617160440:524,Testability,test,testReport,524,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617160440
https://github.com/root-project/root/pull/5412#issuecomment-617160440:789,Testability,test,testReport,789,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617160440
https://github.com/root-project/root/pull/5412#issuecomment-617160440:1038,Testability,test,testReport,1038,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617160440
https://github.com/root-project/root/pull/5412#issuecomment-617160440:384,Usability,simpl,simple,384,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617160440
https://github.com/root-project/root/pull/5412#issuecomment-617160440:570,Usability,simpl,simple,570,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617160440
https://github.com/root-project/root/pull/5412#issuecomment-617254612:526,Testability,test,tests,526,Build failed on mac1015/cxx17.; Running Allocate node on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; Running Allocate node on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/console).; ### Failing tests:; - [projectroot.math.foam.test.gtest_math_foam_test_testTFoam](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.math.foam/test/gtest_math_foam_test_testTFoam/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617254612
https://github.com/root-project/root/pull/5412#issuecomment-617254612:559,Testability,test,test,559,Build failed on mac1015/cxx17.; Running Allocate node on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; Running Allocate node on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/console).; ### Failing tests:; - [projectroot.math.foam.test.gtest_math_foam_test_testTFoam](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.math.foam/test/gtest_math_foam_test_testTFoam/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617254612
https://github.com/root-project/root/pull/5412#issuecomment-617254612:675,Testability,test,testReport,675,Build failed on mac1015/cxx17.; Running Allocate node on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; Running Allocate node on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/console).; ### Failing tests:; - [projectroot.math.foam.test.gtest_math_foam_test_testTFoam](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.math.foam/test/gtest_math_foam_test_testTFoam/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617254612
https://github.com/root-project/root/pull/5412#issuecomment-617254612:708,Testability,test,test,708,Build failed on mac1015/cxx17.; Running Allocate node on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; Running Allocate node on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/console).; ### Failing tests:; - [projectroot.math.foam.test.gtest_math_foam_test_testTFoam](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.math.foam/test/gtest_math_foam_test_testTFoam/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617254612
https://github.com/root-project/root/pull/5412#issuecomment-617254612:925,Testability,test,testReport,925,Build failed on mac1015/cxx17.; Running Allocate node on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; Running Allocate node on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/console).; ### Failing tests:; - [projectroot.math.foam.test.gtest_math_foam_test_testTFoam](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.math.foam/test/gtest_math_foam_test_testTFoam/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617254612
https://github.com/root-project/root/pull/5412#issuecomment-617254612:1190,Testability,test,testReport,1190,Build failed on mac1015/cxx17.; Running Allocate node on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; Running Allocate node on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/console).; ### Failing tests:; - [projectroot.math.foam.test.gtest_math_foam_test_testTFoam](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.math.foam/test/gtest_math_foam_test_testTFoam/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617254612
https://github.com/root-project/root/pull/5412#issuecomment-617254612:1439,Testability,test,testReport,1439,Build failed on mac1015/cxx17.; Running Allocate node on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; Running Allocate node on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/console).; ### Failing tests:; - [projectroot.math.foam.test.gtest_math_foam_test_testTFoam](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.math.foam/test/gtest_math_foam_test_testTFoam/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617254612
https://github.com/root-project/root/pull/5412#issuecomment-617254612:785,Usability,simpl,simple,785,Build failed on mac1015/cxx17.; Running Allocate node on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; Running Allocate node on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/console).; ### Failing tests:; - [projectroot.math.foam.test.gtest_math_foam_test_testTFoam](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.math.foam/test/gtest_math_foam_test_testTFoam/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617254612
https://github.com/root-project/root/pull/5412#issuecomment-617254612:971,Usability,simpl,simple,971,Build failed on mac1015/cxx17.; Running Allocate node on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; Running Allocate node on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/console).; ### Failing tests:; - [projectroot.math.foam.test.gtest_math_foam_test_testTFoam](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.math.foam/test/gtest_math_foam_test_testTFoam/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617254612
https://github.com/root-project/root/pull/5413#issuecomment-617085149:338,Testability,test,tests,338,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5413-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5413#issuecomment-617085149
https://github.com/root-project/root/pull/5413#issuecomment-617085149:502,Testability,test,testReport,502,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5413-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5413#issuecomment-617085149
https://github.com/root-project/root/pull/5413#issuecomment-617085149:751,Testability,test,testReport,751,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5413-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5413#issuecomment-617085149
https://github.com/root-project/root/pull/5413#issuecomment-617085149:1022,Testability,test,testReport,1022,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5413-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5413#issuecomment-617085149
https://github.com/root-project/root/pull/5413#issuecomment-617085149:882,Usability,simpl,simple,882,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5413-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5413#issuecomment-617085149
https://github.com/root-project/root/pull/5413#issuecomment-617085149:1068,Usability,simpl,simple,1068,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5413-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5413#issuecomment-617085149
https://github.com/root-project/root/pull/5415#issuecomment-617102090:338,Testability,test,tests,338,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5415-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5415#issuecomment-617102090
https://github.com/root-project/root/pull/5415#issuecomment-617102090:502,Testability,test,testReport,502,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5415-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5415#issuecomment-617102090
https://github.com/root-project/root/pull/5415#issuecomment-617102090:751,Testability,test,testReport,751,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5415-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5415#issuecomment-617102090
https://github.com/root-project/root/pull/5415#issuecomment-617102090:1022,Testability,test,testReport,1022,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5415-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5415#issuecomment-617102090
https://github.com/root-project/root/pull/5415#issuecomment-617102090:882,Usability,simpl,simple,882,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5415-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5415#issuecomment-617102090
https://github.com/root-project/root/pull/5415#issuecomment-617102090:1068,Usability,simpl,simple,1068,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5415-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5415#issuecomment-617102090
https://github.com/root-project/root/pull/5417#issuecomment-617185813:397,Testability,test,tests,397,Build failed on mac1015/cxx17.; Running on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5417-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5417#issuecomment-617185813
https://github.com/root-project/root/pull/5417#issuecomment-617185813:583,Testability,test,testReport,583,Build failed on mac1015/cxx17.; Running on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5417-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5417#issuecomment-617185813
https://github.com/root-project/root/pull/5417#issuecomment-617185813:848,Testability,test,testReport,848,Build failed on mac1015/cxx17.; Running on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5417-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5417#issuecomment-617185813
https://github.com/root-project/root/pull/5417#issuecomment-617185813:1097,Testability,test,testReport,1097,Build failed on mac1015/cxx17.; Running on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5417-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5417#issuecomment-617185813
https://github.com/root-project/root/pull/5417#issuecomment-617185813:443,Usability,simpl,simple,443,Build failed on mac1015/cxx17.; Running on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5417-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5417#issuecomment-617185813
https://github.com/root-project/root/pull/5417#issuecomment-617185813:629,Usability,simpl,simple,629,Build failed on mac1015/cxx17.; Running on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5417-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5417#issuecomment-617185813
https://github.com/root-project/root/pull/5418#issuecomment-617355629:403,Testability,test,tests,403,Build failed on mac1015/cxx17.; Running on macphsft20.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5418-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5418#issuecomment-617355629
https://github.com/root-project/root/pull/5418#issuecomment-617355629:589,Testability,test,testReport,589,Build failed on mac1015/cxx17.; Running on macphsft20.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5418-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5418#issuecomment-617355629
https://github.com/root-project/root/pull/5418#issuecomment-617355629:854,Testability,test,testReport,854,Build failed on mac1015/cxx17.; Running on macphsft20.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5418-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5418#issuecomment-617355629
https://github.com/root-project/root/pull/5418#issuecomment-617355629:1103,Testability,test,testReport,1103,Build failed on mac1015/cxx17.; Running on macphsft20.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5418-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5418#issuecomment-617355629
https://github.com/root-project/root/pull/5418#issuecomment-617355629:449,Usability,simpl,simple,449,Build failed on mac1015/cxx17.; Running on macphsft20.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5418-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5418#issuecomment-617355629
https://github.com/root-project/root/pull/5418#issuecomment-617355629:635,Usability,simpl,simple,635,Build failed on mac1015/cxx17.; Running on macphsft20.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5418-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5418#issuecomment-617355629
https://github.com/root-project/root/pull/5423#issuecomment-617452035:411,Testability,test,tests,411,Build failed on mac1015/cxx17.; Running on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5423-mac1015-cxx17&date=2020-04-22).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5423#issuecomment-617452035
https://github.com/root-project/root/pull/5423#issuecomment-617452035:575,Testability,test,testReport,575,Build failed on mac1015/cxx17.; Running on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5423-mac1015-cxx17&date=2020-04-22).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5423#issuecomment-617452035
https://github.com/root-project/root/pull/5423#issuecomment-617452035:824,Testability,test,testReport,824,Build failed on mac1015/cxx17.; Running on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5423-mac1015-cxx17&date=2020-04-22).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5423#issuecomment-617452035
https://github.com/root-project/root/pull/5423#issuecomment-617452035:1095,Testability,test,testReport,1095,Build failed on mac1015/cxx17.; Running on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5423-mac1015-cxx17&date=2020-04-22).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5423#issuecomment-617452035
https://github.com/root-project/root/pull/5423#issuecomment-617452035:955,Usability,simpl,simple,955,Build failed on mac1015/cxx17.; Running on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5423-mac1015-cxx17&date=2020-04-22).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5423#issuecomment-617452035
https://github.com/root-project/root/pull/5423#issuecomment-617452035:1141,Usability,simpl,simple,1141,Build failed on mac1015/cxx17.; Running on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5423-mac1015-cxx17&date=2020-04-22).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5423#issuecomment-617452035
https://github.com/root-project/root/pull/5426#issuecomment-617692111:516,Usability,clear,clearing,516,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-1.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5426-ROOT-fedora30-cxx14&date=2020-04-22).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77828/console).; ### Warnings:; - [2020-04-22T09:54:00.538Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-04-22T10:03:39.303Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5426#issuecomment-617692111
https://github.com/root-project/root/pull/5426#issuecomment-617692111:795,Usability,clear,clearing,795,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-1.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5426-ROOT-fedora30-cxx14&date=2020-04-22).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77828/console).; ### Warnings:; - [2020-04-22T09:54:00.538Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-04-22T10:03:39.303Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5426#issuecomment-617692111
https://github.com/root-project/root/pull/5443#issuecomment-620030802:25,Integrability,depend,dependent,25,"@vgvassilev I think most dependent PRs are merged, so this PR could be simplified...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5443#issuecomment-620030802
https://github.com/root-project/root/pull/5443#issuecomment-620030802:71,Usability,simpl,simplified,71,"@vgvassilev I think most dependent PRs are merged, so this PR could be simplified...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5443#issuecomment-620030802
https://github.com/root-project/root/pull/5453#issuecomment-618903622:15,Usability,simpl,simple,15,"You called it ""simple"", you tricked us into reviewing! :P",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5453#issuecomment-618903622
https://github.com/root-project/root/pull/5466#issuecomment-624594499:413,Availability,avail,available,413,"@ntadej I tried to cherry-pick, but it only worked with three of the four fixes. Also, I only know that *merging* worked at the moment, but it's not clear whether it compiles or if tests work.; I will let it run and see, but to get the full fixes, you will have to wait for ROOT 6.22. The good news is that we will branch off the release candidate this week, so you could use the tag v6-22-00-rc1 or so when it's available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466#issuecomment-624594499
https://github.com/root-project/root/pull/5466#issuecomment-624594499:330,Deployability,release,release,330,"@ntadej I tried to cherry-pick, but it only worked with three of the four fixes. Also, I only know that *merging* worked at the moment, but it's not clear whether it compiles or if tests work.; I will let it run and see, but to get the full fixes, you will have to wait for ROOT 6.22. The good news is that we will branch off the release candidate this week, so you could use the tag v6-22-00-rc1 or so when it's available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466#issuecomment-624594499
https://github.com/root-project/root/pull/5466#issuecomment-624594499:181,Testability,test,tests,181,"@ntadej I tried to cherry-pick, but it only worked with three of the four fixes. Also, I only know that *merging* worked at the moment, but it's not clear whether it compiles or if tests work.; I will let it run and see, but to get the full fixes, you will have to wait for ROOT 6.22. The good news is that we will branch off the release candidate this week, so you could use the tag v6-22-00-rc1 or so when it's available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466#issuecomment-624594499
https://github.com/root-project/root/pull/5466#issuecomment-624594499:149,Usability,clear,clear,149,"@ntadej I tried to cherry-pick, but it only worked with three of the four fixes. Also, I only know that *merging* worked at the moment, but it's not clear whether it compiles or if tests work.; I will let it run and see, but to get the full fixes, you will have to wait for ROOT 6.22. The good news is that we will branch off the release candidate this week, so you could use the tag v6-22-00-rc1 or so when it's available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466#issuecomment-624594499
https://github.com/root-project/root/pull/5474#issuecomment-629037999:23,Deployability,update,update,23,"Great, thanks! Can you update the commit message (`git commit --amend; git push -f`) to include these findings? That makes the motivation for the change much clearer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5474#issuecomment-629037999
https://github.com/root-project/root/pull/5474#issuecomment-629037999:41,Integrability,message,message,41,"Great, thanks! Can you update the commit message (`git commit --amend; git push -f`) to include these findings? That makes the motivation for the change much clearer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5474#issuecomment-629037999
https://github.com/root-project/root/pull/5474#issuecomment-629037999:158,Usability,clear,clearer,158,"Great, thanks! Can you update the commit message (`git commit --amend; git push -f`) to include these findings? That makes the motivation for the change much clearer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5474#issuecomment-629037999
https://github.com/root-project/root/pull/5474#issuecomment-629076607:25,Deployability,update,update,25,"> Great, thanks! Can you update the commit message (`git commit --amend; git push -f`) to include these findings? That makes the motivation for the change much clearer!. Done. thanks @Axel-Naumann ! Is it OK like this now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5474#issuecomment-629076607
https://github.com/root-project/root/pull/5474#issuecomment-629076607:43,Integrability,message,message,43,"> Great, thanks! Can you update the commit message (`git commit --amend; git push -f`) to include these findings? That makes the motivation for the change much clearer!. Done. thanks @Axel-Naumann ! Is it OK like this now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5474#issuecomment-629076607
https://github.com/root-project/root/pull/5474#issuecomment-629076607:160,Usability,clear,clearer,160,"> Great, thanks! Can you update the commit message (`git commit --amend; git push -f`) to include these findings? That makes the motivation for the change much clearer!. Done. thanks @Axel-Naumann ! Is it OK like this now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5474#issuecomment-629076607
https://github.com/root-project/root/pull/5536#issuecomment-623916083:339,Testability,test,test,339,"Hi Stephan, I'm confused, #5530 does not seem to have those warnings anymore? Also, ROOT is simply able to read an old `RooRealProxy` into a new `RooTemplateProxy<RooAbsReal>` with no problem, no instructions needed other than. ```; #pragma read sourceClass=""RooRealProxy"" targetClass=""RooTemplateProxy<RooAbsReal>"";; ```. ?. Do we need a test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5536#issuecomment-623916083
https://github.com/root-project/root/pull/5536#issuecomment-623916083:92,Usability,simpl,simply,92,"Hi Stephan, I'm confused, #5530 does not seem to have those warnings anymore? Also, ROOT is simply able to read an old `RooRealProxy` into a new `RooTemplateProxy<RooAbsReal>` with no problem, no instructions needed other than. ```; #pragma read sourceClass=""RooRealProxy"" targetClass=""RooTemplateProxy<RooAbsReal>"";; ```. ?. Do we need a test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5536#issuecomment-623916083
https://github.com/root-project/root/pull/5536#issuecomment-623958983:375,Testability,test,test,375,"@eguiraud ; > Hi Stephan, I'm confused, #5530 does not seem to have those warnings anymore? Also, ROOT is simply able to read an old `RooRealProxy` into a new `RooTemplateProxy<RooAbsReal>` with no problem, no instructions needed other than; > ; > ```; > #pragma read sourceClass=""RooRealProxy"" targetClass=""RooTemplateProxy<RooAbsReal>"";; > ```; > ; > ?; > ; > Do we need a test?. Actually, #5530 *does have* this problem.; http://cdash.cern.ch/testDetails.php?test=85254326&build=868739. It's not fatal, since the typedef and the things that it's `typedef`ed to are strictly identical, so all tests proceed normally. However, the warning shows up.; A follow-up question of this is whether gtests should have a failregex or something so we see warnings popping up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5536#issuecomment-623958983
https://github.com/root-project/root/pull/5536#issuecomment-623958983:446,Testability,test,testDetails,446,"@eguiraud ; > Hi Stephan, I'm confused, #5530 does not seem to have those warnings anymore? Also, ROOT is simply able to read an old `RooRealProxy` into a new `RooTemplateProxy<RooAbsReal>` with no problem, no instructions needed other than; > ; > ```; > #pragma read sourceClass=""RooRealProxy"" targetClass=""RooTemplateProxy<RooAbsReal>"";; > ```; > ; > ?; > ; > Do we need a test?. Actually, #5530 *does have* this problem.; http://cdash.cern.ch/testDetails.php?test=85254326&build=868739. It's not fatal, since the typedef and the things that it's `typedef`ed to are strictly identical, so all tests proceed normally. However, the warning shows up.; A follow-up question of this is whether gtests should have a failregex or something so we see warnings popping up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5536#issuecomment-623958983
https://github.com/root-project/root/pull/5536#issuecomment-623958983:462,Testability,test,test,462,"@eguiraud ; > Hi Stephan, I'm confused, #5530 does not seem to have those warnings anymore? Also, ROOT is simply able to read an old `RooRealProxy` into a new `RooTemplateProxy<RooAbsReal>` with no problem, no instructions needed other than; > ; > ```; > #pragma read sourceClass=""RooRealProxy"" targetClass=""RooTemplateProxy<RooAbsReal>"";; > ```; > ; > ?; > ; > Do we need a test?. Actually, #5530 *does have* this problem.; http://cdash.cern.ch/testDetails.php?test=85254326&build=868739. It's not fatal, since the typedef and the things that it's `typedef`ed to are strictly identical, so all tests proceed normally. However, the warning shows up.; A follow-up question of this is whether gtests should have a failregex or something so we see warnings popping up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5536#issuecomment-623958983
https://github.com/root-project/root/pull/5536#issuecomment-623958983:595,Testability,test,tests,595,"@eguiraud ; > Hi Stephan, I'm confused, #5530 does not seem to have those warnings anymore? Also, ROOT is simply able to read an old `RooRealProxy` into a new `RooTemplateProxy<RooAbsReal>` with no problem, no instructions needed other than; > ; > ```; > #pragma read sourceClass=""RooRealProxy"" targetClass=""RooTemplateProxy<RooAbsReal>"";; > ```; > ; > ?; > ; > Do we need a test?. Actually, #5530 *does have* this problem.; http://cdash.cern.ch/testDetails.php?test=85254326&build=868739. It's not fatal, since the typedef and the things that it's `typedef`ed to are strictly identical, so all tests proceed normally. However, the warning shows up.; A follow-up question of this is whether gtests should have a failregex or something so we see warnings popping up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5536#issuecomment-623958983
https://github.com/root-project/root/pull/5536#issuecomment-623958983:106,Usability,simpl,simply,106,"@eguiraud ; > Hi Stephan, I'm confused, #5530 does not seem to have those warnings anymore? Also, ROOT is simply able to read an old `RooRealProxy` into a new `RooTemplateProxy<RooAbsReal>` with no problem, no instructions needed other than; > ; > ```; > #pragma read sourceClass=""RooRealProxy"" targetClass=""RooTemplateProxy<RooAbsReal>"";; > ```; > ; > ?; > ; > Do we need a test?. Actually, #5530 *does have* this problem.; http://cdash.cern.ch/testDetails.php?test=85254326&build=868739. It's not fatal, since the typedef and the things that it's `typedef`ed to are strictly identical, so all tests proceed normally. However, the warning shows up.; A follow-up question of this is whether gtests should have a failregex or something so we see warnings popping up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5536#issuecomment-623958983
https://github.com/root-project/root/pull/5582#issuecomment-638329846:35,Usability,simpl,simplified,35,All this circling to end up with a simplified TPoolManager,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582#issuecomment-638329846
https://github.com/root-project/root/pull/5612#issuecomment-628129578:180,Availability,failure,failures,180,"Thanks @bellenot ! I don't know what happened to [the PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81795/console), but I did not notice these failures, sorry about that. Can you please reduce the amount of ifdef'd code to:. ```cpp; #ifdef _WIN32; const std::string type = ""struct `private: virtual void __thiscall RDataFrameInterface_TypeUnknownToInterpreter_Test::TestBody(void)'::`2'::SimpleType"";; #else; const std::string type = ""RDataFrameInterface_TypeUnknownToInterpreter_Test::TestBody()::SimpleType"";; #endif; ```. and then simply use `type` in the error strings that we check?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5612#issuecomment-628129578
https://github.com/root-project/root/pull/5612#issuecomment-628129578:596,Availability,error,error,596,"Thanks @bellenot ! I don't know what happened to [the PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81795/console), but I did not notice these failures, sorry about that. Can you please reduce the amount of ifdef'd code to:. ```cpp; #ifdef _WIN32; const std::string type = ""struct `private: virtual void __thiscall RDataFrameInterface_TypeUnknownToInterpreter_Test::TestBody(void)'::`2'::SimpleType"";; #else; const std::string type = ""RDataFrameInterface_TypeUnknownToInterpreter_Test::TestBody()::SimpleType"";; #endif; ```. and then simply use `type` in the error strings that we check?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5612#issuecomment-628129578
https://github.com/root-project/root/pull/5612#issuecomment-628129578:223,Energy Efficiency,reduce,reduce,223,"Thanks @bellenot ! I don't know what happened to [the PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81795/console), but I did not notice these failures, sorry about that. Can you please reduce the amount of ifdef'd code to:. ```cpp; #ifdef _WIN32; const std::string type = ""struct `private: virtual void __thiscall RDataFrameInterface_TypeUnknownToInterpreter_Test::TestBody(void)'::`2'::SimpleType"";; #else; const std::string type = ""RDataFrameInterface_TypeUnknownToInterpreter_Test::TestBody()::SimpleType"";; #endif; ```. and then simply use `type` in the error strings that we check?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5612#issuecomment-628129578
https://github.com/root-project/root/pull/5612#issuecomment-628129578:571,Usability,simpl,simply,571,"Thanks @bellenot ! I don't know what happened to [the PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81795/console), but I did not notice these failures, sorry about that. Can you please reduce the amount of ifdef'd code to:. ```cpp; #ifdef _WIN32; const std::string type = ""struct `private: virtual void __thiscall RDataFrameInterface_TypeUnknownToInterpreter_Test::TestBody(void)'::`2'::SimpleType"";; #else; const std::string type = ""RDataFrameInterface_TypeUnknownToInterpreter_Test::TestBody()::SimpleType"";; #endif; ```. and then simply use `type` in the error strings that we check?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5612#issuecomment-628129578
https://github.com/root-project/root/pull/5615#issuecomment-628570271:985,Testability,test,tests,985,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5615-ROOT-fedora30-cxx14&date=2020-05-14).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82058/console).; ### Warnings:; - [2020-05-14T11:00:37.189Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-14T11:07:00.384Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.roottest_root_meta_expressiveErrorMessages](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82058/testReport/projectroot.roottest.root/meta/roottest_root_meta_expressiveErrorMessages/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615#issuecomment-628570271
https://github.com/root-project/root/pull/5615#issuecomment-628570271:1150,Testability,test,testReport,1150,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5615-ROOT-fedora30-cxx14&date=2020-05-14).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82058/console).; ### Warnings:; - [2020-05-14T11:00:37.189Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-14T11:07:00.384Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.roottest_root_meta_expressiveErrorMessages](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82058/testReport/projectroot.roottest.root/meta/roottest_root_meta_expressiveErrorMessages/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615#issuecomment-628570271
https://github.com/root-project/root/pull/5615#issuecomment-628570271:530,Usability,clear,clearing,530,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5615-ROOT-fedora30-cxx14&date=2020-05-14).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82058/console).; ### Warnings:; - [2020-05-14T11:00:37.189Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-14T11:07:00.384Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.roottest_root_meta_expressiveErrorMessages](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82058/testReport/projectroot.roottest.root/meta/roottest_root_meta_expressiveErrorMessages/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615#issuecomment-628570271
https://github.com/root-project/root/pull/5615#issuecomment-628570271:809,Usability,clear,clearing,809,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5615-ROOT-fedora30-cxx14&date=2020-05-14).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82058/console).; ### Warnings:; - [2020-05-14T11:00:37.189Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-14T11:07:00.384Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.roottest_root_meta_expressiveErrorMessages](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82058/testReport/projectroot.roottest.root/meta/roottest_root_meta_expressiveErrorMessages/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615#issuecomment-628570271
https://github.com/root-project/root/pull/5680#issuecomment-633400581:340,Deployability,install,installed,340,DrawClone draws in in the SelectedPad see https://root.cern/doc/master/classTObject.html#a7cd0f76ae1791c469f9472a9d4c8d6f9; It was initially meant to be used interactively to draw an object from a pad to the selected one.; The question is more: Why do we need DrawClone in these examples (a simple Draw should be fine) ? I do not have FITS installed right now. I will need to make a new ROOT install with it to try.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633400581
https://github.com/root-project/root/pull/5680#issuecomment-633400581:392,Deployability,install,install,392,DrawClone draws in in the SelectedPad see https://root.cern/doc/master/classTObject.html#a7cd0f76ae1791c469f9472a9d4c8d6f9; It was initially meant to be used interactively to draw an object from a pad to the selected one.; The question is more: Why do we need DrawClone in these examples (a simple Draw should be fine) ? I do not have FITS installed right now. I will need to make a new ROOT install with it to try.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633400581
https://github.com/root-project/root/pull/5680#issuecomment-633400581:291,Usability,simpl,simple,291,DrawClone draws in in the SelectedPad see https://root.cern/doc/master/classTObject.html#a7cd0f76ae1791c469f9472a9d4c8d6f9; It was initially meant to be used interactively to draw an object from a pad to the selected one.; The question is more: Why do we need DrawClone in these examples (a simple Draw should be fine) ? I do not have FITS installed right now. I will need to make a new ROOT install with it to try.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633400581
https://github.com/root-project/root/pull/5680#issuecomment-633401928:346,Deployability,install,installed,346,> DrawClone draws in in the SelectedPad see https://root.cern/doc/master/classTObject.html#a7cd0f76ae1791c469f9472a9d4c8d6f9; > It was initially meant to be used interactively to draw an object from a pad to the selected one.; > The question is more: Why do we need DrawClone in these examples (a simple Draw should be fine) ? I do not have FITS installed right now. I will need to make a new ROOT install with it to try. The problem is described at [link](https://root-forum.cern.ch/t/bug-report-drawclone/39558),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633401928
https://github.com/root-project/root/pull/5680#issuecomment-633401928:398,Deployability,install,install,398,> DrawClone draws in in the SelectedPad see https://root.cern/doc/master/classTObject.html#a7cd0f76ae1791c469f9472a9d4c8d6f9; > It was initially meant to be used interactively to draw an object from a pad to the selected one.; > The question is more: Why do we need DrawClone in these examples (a simple Draw should be fine) ? I do not have FITS installed right now. I will need to make a new ROOT install with it to try. The problem is described at [link](https://root-forum.cern.ch/t/bug-report-drawclone/39558),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633401928
https://github.com/root-project/root/pull/5680#issuecomment-633401928:297,Usability,simpl,simple,297,> DrawClone draws in in the SelectedPad see https://root.cern/doc/master/classTObject.html#a7cd0f76ae1791c469f9472a9d4c8d6f9; > It was initially meant to be used interactively to draw an object from a pad to the selected one.; > The question is more: Why do we need DrawClone in these examples (a simple Draw should be fine) ? I do not have FITS installed right now. I will need to make a new ROOT install with it to try. The problem is described at [link](https://root-forum.cern.ch/t/bug-report-drawclone/39558),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633401928
https://github.com/root-project/root/pull/5680#issuecomment-633408762:77,Usability,simpl,simply,77,Yes that's what is said in the DrawClone documentation. But what about using simply Draw instead of DrawClone in these examples ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633408762
https://github.com/root-project/root/pull/5680#issuecomment-633415717:79,Usability,simpl,simply,79,"> Yes that's what is said in the DrawClone documentation. But what about using simply Draw instead of DrawClone in these examples ?. In fact, the older version is using simple Draw without std::unique_ptr; the latest version is using std::unique_ptr instead of simple pointer, this would deconstruct at the end of program. so DrawClone must be used",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633415717
https://github.com/root-project/root/pull/5680#issuecomment-633415717:169,Usability,simpl,simple,169,"> Yes that's what is said in the DrawClone documentation. But what about using simply Draw instead of DrawClone in these examples ?. In fact, the older version is using simple Draw without std::unique_ptr; the latest version is using std::unique_ptr instead of simple pointer, this would deconstruct at the end of program. so DrawClone must be used",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633415717
https://github.com/root-project/root/pull/5680#issuecomment-633415717:261,Usability,simpl,simple,261,"> Yes that's what is said in the DrawClone documentation. But what about using simply Draw instead of DrawClone in these examples ?. In fact, the older version is using simple Draw without std::unique_ptr; the latest version is using std::unique_ptr instead of simple pointer, this would deconstruct at the end of program. so DrawClone must be used",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633415717
https://github.com/root-project/root/pull/5680#issuecomment-633416576:54,Usability,simpl,simple,54,What about DrawCopy instead of DrawClone (keeping the simple cd) ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633416576
https://github.com/root-project/root/pull/5680#issuecomment-633524404:56,Usability,simpl,simple,56,> What about DrawCopy instead of DrawClone (keeping the simple cd) ?. DrawCopy could only used with TH1::; The TImage and TGraph do not have member function of DrawCopy,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633524404
https://github.com/root-project/root/pull/5680#issuecomment-633535272:405,Safety,avoid,avoid,405,"DrawClone also create a new object object see line 225 [here](https://root.cern/doc/master/TObject_8cxx_source.html#l00219) . The problem with DrawClone is that it will go in the SelectedPad, not in the Pad define by cd()... They may coincide sometime but not always. So, I think it is better to make it clear a Clone is needed to avoir deletion. Then this object is drawn ... but the primary thing is to avoid deletion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633535272
https://github.com/root-project/root/pull/5680#issuecomment-633535272:304,Usability,clear,clear,304,"DrawClone also create a new object object see line 225 [here](https://root.cern/doc/master/TObject_8cxx_source.html#l00219) . The problem with DrawClone is that it will go in the SelectedPad, not in the Pad define by cd()... They may coincide sometime but not always. So, I think it is better to make it clear a Clone is needed to avoir deletion. Then this object is drawn ... but the primary thing is to avoid deletion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633535272
https://github.com/root-project/root/pull/5680#issuecomment-633546122:139,Safety,avoid,avoid,139,"> So, I think it is better to make it clear a Clone is needed to avoir deletion. Then this object is drawn ... but the primary thing is to avoid deletion. OK, then I think, the std::unique_ptr should not be used at least in this tutorial, I would close this pr and try another one",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633546122
https://github.com/root-project/root/pull/5680#issuecomment-633546122:38,Usability,clear,clear,38,"> So, I think it is better to make it clear a Clone is needed to avoir deletion. Then this object is drawn ... but the primary thing is to avoid deletion. OK, then I think, the std::unique_ptr should not be used at least in this tutorial, I would close this pr and try another one",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633546122
https://github.com/root-project/root/pull/5685#issuecomment-633304650:530,Usability,clear,clearing,530,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5685-ROOT-fedora30-cxx14&date=2020-05-24).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83317/console).; ### Warnings:; - [2020-05-24T21:12:13.842Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-24T21:18:34.559Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5685#issuecomment-633304650
https://github.com/root-project/root/pull/5685#issuecomment-633304650:809,Usability,clear,clearing,809,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5685-ROOT-fedora30-cxx14&date=2020-05-24).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83317/console).; ### Warnings:; - [2020-05-24T21:12:13.842Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-24T21:18:34.559Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5685#issuecomment-633304650
https://github.com/root-project/root/pull/5692#issuecomment-633509680:985,Testability,test,tests,985,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5692-ROOT-fedora30-cxx14&date=2020-05-25).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/console).; ### Warnings:; - [2020-05-25T10:19:25.159Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-25T10:26:03.641Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.functionTemplate.roottest_cling_functionTemplate_testcint](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.cling/functionTemplate/roottest_cling_functionTemplate_testcint/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_operator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/); - [projectroot.roottest.python.basic.roottest_python_basic_overloa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633509680
https://github.com/root-project/root/pull/5692#issuecomment-633509680:1161,Testability,test,testReport,1161,"/cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5692-ROOT-fedora30-cxx14&date=2020-05-25).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/console).; ### Warnings:; - [2020-05-25T10:19:25.159Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-25T10:26:03.641Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.functionTemplate.roottest_cling_functionTemplate_testcint](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.cling/functionTemplate/roottest_cling_functionTemplate_testcint/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_operator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633509680
https://github.com/root-project/root/pull/5692#issuecomment-633509680:1405,Testability,test,testReport,1405,"nsole).; ### Warnings:; - [2020-05-25T10:19:25.159Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-25T10:26:03.641Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.functionTemplate.roottest_cling_functionTemplate_testcint](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.cling/functionTemplate/roottest_cling_functionTemplate_testcint/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_operator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.cling.roottest_python_cling_cling](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cling/roottest_python_cling_cling/); - [projec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633509680
https://github.com/root-project/root/pull/5692#issuecomment-633509680:1629,Testability,test,testReport,1629,"rivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-25T10:26:03.641Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.functionTemplate.roottest_cling_functionTemplate_testcint](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.cling/functionTemplate/roottest_cling_functionTemplate_testcint/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_operator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.cling.roottest_python_cling_cling](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cling/roottest_python_cling_cling/); - [projectroot.roottest.python.cpp.roottest_python_cpp_cpp11](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_cpp11/); - [projectroot.roott",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633509680
https://github.com/root-project/root/pull/5692#issuecomment-633509680:1856,Testability,test,testReport,1856, tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.functionTemplate.roottest_cling_functionTemplate_testcint](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.cling/functionTemplate/roottest_cling_functionTemplate_testcint/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_operator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.cling.roottest_python_cling_cling](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cling/roottest_python_cling_cling/); - [projectroot.roottest.python.cpp.roottest_python_cpp_cpp11](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_cpp11/); - [projectroot.roottest.python.cpp.roottest_python_cpp_advanced](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_advanced/); - [projectroot.roottest.pyth,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633509680
https://github.com/root-project/root/pull/5692#issuecomment-633509680:2083,Testability,test,testReport,2083,te_testcint](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.cling/functionTemplate/roottest_cling_functionTemplate_testcint/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_operator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.cling.roottest_python_cling_cling](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cling/roottest_python_cling_cling/); - [projectroot.roottest.python.cpp.roottest_python_cpp_cpp11](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_cpp11/); - [projectroot.roottest.python.cpp.roottest_python_cpp_advanced](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_advanced/); - [projectroot.roottest.python.cpp.roottest_python_cpp_cpp](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_cpp/); - [projectroot.roottest.python.function.rootte,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633509680
https://github.com/root-project/root/pull/5692#issuecomment-633509680:2307,Testability,test,testReport,2307,.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_operator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.cling.roottest_python_cling_cling](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cling/roottest_python_cling_cling/); - [projectroot.roottest.python.cpp.roottest_python_cpp_cpp11](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_cpp11/); - [projectroot.roottest.python.cpp.roottest_python_cpp_advanced](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_advanced/); - [projectroot.roottest.python.cpp.roottest_python_cpp_cpp](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_cpp/); - [projectroot.roottest.python.function.roottest_python_function_function](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/function/roottest_python_function_function/). And 11 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633509680
https://github.com/root-project/root/pull/5692#issuecomment-633509680:2524,Testability,test,testReport,2524,.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_operator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.cling.roottest_python_cling_cling](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cling/roottest_python_cling_cling/); - [projectroot.roottest.python.cpp.roottest_python_cpp_cpp11](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_cpp11/); - [projectroot.roottest.python.cpp.roottest_python_cpp_advanced](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_advanced/); - [projectroot.roottest.python.cpp.roottest_python_cpp_cpp](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_cpp/); - [projectroot.roottest.python.function.roottest_python_function_function](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/function/roottest_python_function_function/). And 11 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633509680
https://github.com/root-project/root/pull/5692#issuecomment-633509680:2740,Testability,test,testReport,2740,.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_operator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.cling.roottest_python_cling_cling](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cling/roottest_python_cling_cling/); - [projectroot.roottest.python.cpp.roottest_python_cpp_cpp11](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_cpp11/); - [projectroot.roottest.python.cpp.roottest_python_cpp_advanced](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_advanced/); - [projectroot.roottest.python.cpp.roottest_python_cpp_cpp](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_cpp/); - [projectroot.roottest.python.function.roottest_python_function_function](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/function/roottest_python_function_function/). And 11 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633509680
https://github.com/root-project/root/pull/5692#issuecomment-633509680:2954,Testability,test,testReport,2954,.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_operator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.cling.roottest_python_cling_cling](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cling/roottest_python_cling_cling/); - [projectroot.roottest.python.cpp.roottest_python_cpp_cpp11](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_cpp11/); - [projectroot.roottest.python.cpp.roottest_python_cpp_advanced](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_advanced/); - [projectroot.roottest.python.cpp.roottest_python_cpp_cpp](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_cpp/); - [projectroot.roottest.python.function.roottest_python_function_function](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/function/roottest_python_function_function/). And 11 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633509680
https://github.com/root-project/root/pull/5692#issuecomment-633509680:3178,Testability,test,testReport,3178,.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_operator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.cling.roottest_python_cling_cling](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cling/roottest_python_cling_cling/); - [projectroot.roottest.python.cpp.roottest_python_cpp_cpp11](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_cpp11/); - [projectroot.roottest.python.cpp.roottest_python_cpp_advanced](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_advanced/); - [projectroot.roottest.python.cpp.roottest_python_cpp_cpp](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_cpp/); - [projectroot.roottest.python.function.roottest_python_function_function](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/function/roottest_python_function_function/). And 11 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633509680
https://github.com/root-project/root/pull/5692#issuecomment-633509680:530,Usability,clear,clearing,530,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5692-ROOT-fedora30-cxx14&date=2020-05-25).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/console).; ### Warnings:; - [2020-05-25T10:19:25.159Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-25T10:26:03.641Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.functionTemplate.roottest_cling_functionTemplate_testcint](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.cling/functionTemplate/roottest_cling_functionTemplate_testcint/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_operator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/); - [projectroot.roottest.python.basic.roottest_python_basic_overloa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633509680
https://github.com/root-project/root/pull/5692#issuecomment-633509680:809,Usability,clear,clearing,809,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5692-ROOT-fedora30-cxx14&date=2020-05-25).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/console).; ### Warnings:; - [2020-05-25T10:19:25.159Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-25T10:26:03.641Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.functionTemplate.roottest_cling_functionTemplate_testcint](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.cling/functionTemplate/roottest_cling_functionTemplate_testcint/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_operator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/); - [projectroot.roottest.python.basic.roottest_python_basic_overloa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633509680
https://github.com/root-project/root/pull/5692#issuecomment-633570667:985,Testability,test,tests,985,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5692-ROOT-fedora30-cxx14&date=2020-05-25).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83430/console).; ### Warnings:; - [2020-05-25T13:06:41.453Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-25T13:07:19.903Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.io.tuple.roottest_root_io_tuple_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83430/testReport/projectroot.roottest.root.io/tuple/roottest_root_io_tuple_make/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633570667
https://github.com/root-project/root/pull/5692#issuecomment-633570667:1139,Testability,test,testReport,1139,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5692-ROOT-fedora30-cxx14&date=2020-05-25).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83430/console).; ### Warnings:; - [2020-05-25T13:06:41.453Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-25T13:07:19.903Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.io.tuple.roottest_root_io_tuple_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83430/testReport/projectroot.roottest.root.io/tuple/roottest_root_io_tuple_make/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633570667
https://github.com/root-project/root/pull/5692#issuecomment-633570667:530,Usability,clear,clearing,530,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5692-ROOT-fedora30-cxx14&date=2020-05-25).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83430/console).; ### Warnings:; - [2020-05-25T13:06:41.453Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-25T13:07:19.903Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.io.tuple.roottest_root_io_tuple_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83430/testReport/projectroot.roottest.root.io/tuple/roottest_root_io_tuple_make/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633570667
https://github.com/root-project/root/pull/5692#issuecomment-633570667:809,Usability,clear,clearing,809,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5692-ROOT-fedora30-cxx14&date=2020-05-25).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83430/console).; ### Warnings:; - [2020-05-25T13:06:41.453Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-25T13:07:19.903Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.io.tuple.roottest_root_io_tuple_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83430/testReport/projectroot.roottest.root.io/tuple/roottest_root_io_tuple_make/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633570667
https://github.com/root-project/root/pull/5716#issuecomment-634560707:541,Availability,error,error,541,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5716-ROOT-fedora30-cxx14&date=2020-05-27).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83727/console).; ### Errors:; - [2020-05-27T10:02:25.808Z] FAILED: tree/dataframe/test/dataframe_splitcoll_arrayview ; - [2020-05-27T10:02:25.808Z] collect2: error: ld returned 1 exit status . ### Warnings:; - [2020-05-27T09:53:43.857Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-27T10:00:15.862Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5716#issuecomment-634560707
https://github.com/root-project/root/pull/5716#issuecomment-634560707:465,Testability,test,test,465,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5716-ROOT-fedora30-cxx14&date=2020-05-27).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83727/console).; ### Errors:; - [2020-05-27T10:02:25.808Z] FAILED: tree/dataframe/test/dataframe_splitcoll_arrayview ; - [2020-05-27T10:02:25.808Z] collect2: error: ld returned 1 exit status . ### Warnings:; - [2020-05-27T09:53:43.857Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-27T10:00:15.862Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5716#issuecomment-634560707
https://github.com/root-project/root/pull/5716#issuecomment-634560707:706,Usability,clear,clearing,706,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5716-ROOT-fedora30-cxx14&date=2020-05-27).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83727/console).; ### Errors:; - [2020-05-27T10:02:25.808Z] FAILED: tree/dataframe/test/dataframe_splitcoll_arrayview ; - [2020-05-27T10:02:25.808Z] collect2: error: ld returned 1 exit status . ### Warnings:; - [2020-05-27T09:53:43.857Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-27T10:00:15.862Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5716#issuecomment-634560707
https://github.com/root-project/root/pull/5716#issuecomment-634560707:985,Usability,clear,clearing,985,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5716-ROOT-fedora30-cxx14&date=2020-05-27).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83727/console).; ### Errors:; - [2020-05-27T10:02:25.808Z] FAILED: tree/dataframe/test/dataframe_splitcoll_arrayview ; - [2020-05-27T10:02:25.808Z] collect2: error: ld returned 1 exit status . ### Warnings:; - [2020-05-27T09:53:43.857Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-27T10:00:15.862Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5716#issuecomment-634560707
https://github.com/root-project/root/pull/5716#issuecomment-634773927:530,Usability,clear,clearing,530,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5716-ROOT-fedora30-cxx14&date=2020-05-27).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83783/console).; ### Warnings:; - [2020-05-27T15:48:29.537Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-27T15:54:50.524Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5716#issuecomment-634773927
https://github.com/root-project/root/pull/5716#issuecomment-634773927:809,Usability,clear,clearing,809,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5716-ROOT-fedora30-cxx14&date=2020-05-27).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83783/console).; ### Warnings:; - [2020-05-27T15:48:29.537Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-27T15:54:50.524Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5716#issuecomment-634773927
https://github.com/root-project/root/pull/5730#issuecomment-635523428:530,Usability,clear,clearing,530,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5730-ROOT-fedora30-cxx14&date=2020-05-28).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84017/console).; ### Warnings:; - [2020-05-28T18:07:04.046Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-28T18:14:42.664Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5730#issuecomment-635523428
https://github.com/root-project/root/pull/5730#issuecomment-635523428:809,Usability,clear,clearing,809,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5730-ROOT-fedora30-cxx14&date=2020-05-28).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84017/console).; ### Warnings:; - [2020-05-28T18:07:04.046Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-28T18:14:42.664Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5730#issuecomment-635523428
https://github.com/root-project/root/pull/5731#issuecomment-635541385:530,Usability,clear,clearing,530,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5731-ROOT-fedora30-cxx14&date=2020-05-28).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84033/console).; ### Warnings:; - [2020-05-28T19:00:02.821Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-28T19:00:44.651Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5731#issuecomment-635541385
https://github.com/root-project/root/pull/5731#issuecomment-635541385:809,Usability,clear,clearing,809,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5731-ROOT-fedora30-cxx14&date=2020-05-28).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84033/console).; ### Warnings:; - [2020-05-28T19:00:02.821Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-28T19:00:44.651Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5731#issuecomment-635541385
https://github.com/root-project/root/pull/5748#issuecomment-636110134:530,Usability,clear,clearing,530,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5748-ROOT-fedora30-cxx14&date=2020-05-29).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84258/console).; ### Warnings:; - [2020-05-29T17:37:04.729Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-29T17:45:09.837Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5748#issuecomment-636110134
https://github.com/root-project/root/pull/5748#issuecomment-636110134:809,Usability,clear,clearing,809,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5748-ROOT-fedora30-cxx14&date=2020-05-29).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84258/console).; ### Warnings:; - [2020-05-29T17:37:04.729Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-29T17:45:09.837Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5748#issuecomment-636110134
https://github.com/root-project/root/pull/5772#issuecomment-638171977:185,Deployability,release,release,185,"> if someone will still try use pyroot_experimental => CMake should help user to switch to pyroot option? . Do you think this is really necessary? Isn't it enough to say clearly in the release notes that `pyroot_experimental` does not exist anymore, and that `pyroot_legacy` has been added? It seems to me that otherwise we are carrying old options that we do not use anymore. But I don't know what has been the policy for deprecated CMake options in the past. > As well do we need to provide message that if user uses pyroot option, CMake should notify that it is ex pyroot_experimental?. But PyROOT experimental will cease to exist as such, we will have PyROOT (which will be a new one) and then the legacy. Again I think that release notes can help explain this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5772#issuecomment-638171977
https://github.com/root-project/root/pull/5772#issuecomment-638171977:729,Deployability,release,release,729,"> if someone will still try use pyroot_experimental => CMake should help user to switch to pyroot option? . Do you think this is really necessary? Isn't it enough to say clearly in the release notes that `pyroot_experimental` does not exist anymore, and that `pyroot_legacy` has been added? It seems to me that otherwise we are carrying old options that we do not use anymore. But I don't know what has been the policy for deprecated CMake options in the past. > As well do we need to provide message that if user uses pyroot option, CMake should notify that it is ex pyroot_experimental?. But PyROOT experimental will cease to exist as such, we will have PyROOT (which will be a new one) and then the legacy. Again I think that release notes can help explain this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5772#issuecomment-638171977
https://github.com/root-project/root/pull/5772#issuecomment-638171977:493,Integrability,message,message,493,"> if someone will still try use pyroot_experimental => CMake should help user to switch to pyroot option? . Do you think this is really necessary? Isn't it enough to say clearly in the release notes that `pyroot_experimental` does not exist anymore, and that `pyroot_legacy` has been added? It seems to me that otherwise we are carrying old options that we do not use anymore. But I don't know what has been the policy for deprecated CMake options in the past. > As well do we need to provide message that if user uses pyroot option, CMake should notify that it is ex pyroot_experimental?. But PyROOT experimental will cease to exist as such, we will have PyROOT (which will be a new one) and then the legacy. Again I think that release notes can help explain this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5772#issuecomment-638171977
https://github.com/root-project/root/pull/5772#issuecomment-638171977:170,Usability,clear,clearly,170,"> if someone will still try use pyroot_experimental => CMake should help user to switch to pyroot option? . Do you think this is really necessary? Isn't it enough to say clearly in the release notes that `pyroot_experimental` does not exist anymore, and that `pyroot_legacy` has been added? It seems to me that otherwise we are carrying old options that we do not use anymore. But I don't know what has been the policy for deprecated CMake options in the past. > As well do we need to provide message that if user uses pyroot option, CMake should notify that it is ex pyroot_experimental?. But PyROOT experimental will cease to exist as such, we will have PyROOT (which will be a new one) and then the legacy. Again I think that release notes can help explain this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5772#issuecomment-638171977
https://github.com/root-project/root/pull/5772#issuecomment-638212832:205,Availability,error,error,205,"IMO it's okay to remove `pyroot_experimental` without deprecation for 6.22: it was experimental until 6.22. It would certainly help users to check whether `pyroot_experimental` is set, and if so, issue an error message. A simple `if(pyroot_experimental) message(FATAL_ERROR ""pyroot_experimental is now called pyroot! Please reconfigure with -Dpyroot=On"")` will do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5772#issuecomment-638212832
https://github.com/root-project/root/pull/5772#issuecomment-638212832:211,Integrability,message,message,211,"IMO it's okay to remove `pyroot_experimental` without deprecation for 6.22: it was experimental until 6.22. It would certainly help users to check whether `pyroot_experimental` is set, and if so, issue an error message. A simple `if(pyroot_experimental) message(FATAL_ERROR ""pyroot_experimental is now called pyroot! Please reconfigure with -Dpyroot=On"")` will do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5772#issuecomment-638212832
https://github.com/root-project/root/pull/5772#issuecomment-638212832:254,Integrability,message,message,254,"IMO it's okay to remove `pyroot_experimental` without deprecation for 6.22: it was experimental until 6.22. It would certainly help users to check whether `pyroot_experimental` is set, and if so, issue an error message. A simple `if(pyroot_experimental) message(FATAL_ERROR ""pyroot_experimental is now called pyroot! Please reconfigure with -Dpyroot=On"")` will do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5772#issuecomment-638212832
https://github.com/root-project/root/pull/5772#issuecomment-638212832:222,Usability,simpl,simple,222,"IMO it's okay to remove `pyroot_experimental` without deprecation for 6.22: it was experimental until 6.22. It would certainly help users to check whether `pyroot_experimental` is set, and if so, issue an error message. A simple `if(pyroot_experimental) message(FATAL_ERROR ""pyroot_experimental is now called pyroot! Please reconfigure with -Dpyroot=On"")` will do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5772#issuecomment-638212832
https://github.com/root-project/root/pull/5791#issuecomment-640223995:191,Availability,error,error,191,"> Did you make sure it works for -Dcxxmodules=On?. How I can check it? I cannot compile current master when specifying `-Dcxxmodules=On`.; Same will be after I merge this PR. There is simple error which can be fixed in graf2s/mathtext/inc/mathrenderer.h, but it does not solve general compilation errors with cxxmodules. I test both on mac and linux platforms",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5791#issuecomment-640223995
https://github.com/root-project/root/pull/5791#issuecomment-640223995:297,Availability,error,errors,297,"> Did you make sure it works for -Dcxxmodules=On?. How I can check it? I cannot compile current master when specifying `-Dcxxmodules=On`.; Same will be after I merge this PR. There is simple error which can be fixed in graf2s/mathtext/inc/mathrenderer.h, but it does not solve general compilation errors with cxxmodules. I test both on mac and linux platforms",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5791#issuecomment-640223995
https://github.com/root-project/root/pull/5791#issuecomment-640223995:323,Testability,test,test,323,"> Did you make sure it works for -Dcxxmodules=On?. How I can check it? I cannot compile current master when specifying `-Dcxxmodules=On`.; Same will be after I merge this PR. There is simple error which can be fixed in graf2s/mathtext/inc/mathrenderer.h, but it does not solve general compilation errors with cxxmodules. I test both on mac and linux platforms",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5791#issuecomment-640223995
https://github.com/root-project/root/pull/5791#issuecomment-640223995:184,Usability,simpl,simple,184,"> Did you make sure it works for -Dcxxmodules=On?. How I can check it? I cannot compile current master when specifying `-Dcxxmodules=On`.; Same will be after I merge this PR. There is simple error which can be fixed in graf2s/mathtext/inc/mathrenderer.h, but it does not solve general compilation errors with cxxmodules. I test both on mac and linux platforms",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5791#issuecomment-640223995
https://github.com/root-project/root/pull/5898#issuecomment-647540602:53,Testability,log,logic,53,"Olivier, can you look over the PR? ; I tried to keep logic around `nostackb` - but it is not fully clear for me.; Changes already applied to master",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5898#issuecomment-647540602
https://github.com/root-project/root/pull/5898#issuecomment-647540602:99,Usability,clear,clear,99,"Olivier, can you look over the PR? ; I tried to keep logic around `nostackb` - but it is not fully clear for me.; Changes already applied to master",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5898#issuecomment-647540602
https://github.com/root-project/root/pull/5898#issuecomment-647544231:88,Usability,clear,clear,88,"Yes, that's a tricky part ... I hope your changes do not break anything. ... that's not clear just looking at the PR. Also I guess this way of handling the options comes from THisPainter. so to be consistent you might want to change it there too... but that's a much bigger thing .....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5898#issuecomment-647544231
https://github.com/root-project/root/pull/6007#issuecomment-656194773:73,Integrability,message,messages,73,"Wow, love this!. Random unsolicited feedback: ROOT convention for commit messages is to use the imperative mood and start with a capital letter ([we are not alone](https://chris.beams.io/posts/git-commit/)), and it might be useful to split the changes in different commits per repo subdirectories (tree, roofit, hist, math...) in case parts of this need to be reverted later for whatever reason.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-656194773
https://github.com/root-project/root/pull/6007#issuecomment-656194773:36,Usability,feedback,feedback,36,"Wow, love this!. Random unsolicited feedback: ROOT convention for commit messages is to use the imperative mood and start with a capital letter ([we are not alone](https://chris.beams.io/posts/git-commit/)), and it might be useful to split the changes in different commits per repo subdirectories (tree, roofit, hist, math...) in case parts of this need to be reverted later for whatever reason.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-656194773
https://github.com/root-project/root/pull/6007#issuecomment-669905387:952,Availability,mainten,maintenance,952,"> My guess: ClassDef needs to be changed to become ClassDefOverride for all classes that use override, or else warnings (you hinted at that already). AFAIK I tried to apply this already in many places. > In general I'm not sure how much we actually benefit from dressing this old code with some new clothes, also given the extensiveness of this change, which will create conflicts when backporting changes across this commit. Could we have a discussion on the benefit/cost ratio?. Well, that raises an even more general question: if there is little commitment to touch/refactor/maintain old code, what is your long term strategy for these parts of ROOT then? Will these old codes be deprecated/removed then? Code rot is a fact and it gets only worse over time. And so far I have the feeling ROOT will still be there in the next decade or the one after. And if these codes stay around than they should be maintained and improved occasionally. Of course maintenance takes resources. And I know that nobody ever has time to do it. But leaving everything as is in the face of possible improvements also has a cost that we pay be doing nothing. For this particular PR, if I jump into a header file, I do not know which methods are overriding something from a base class. But this knowledge helps me when reading new code. Now I pay the cost for having to look this information up in the inheritance hierarchy. In recent years we are lucky enough to even have automatic refactoring tools. They are far from perfect. But they are good. And applying them has very little cost for a moderate benefit. So I think at least those automatic refactorings should be applied to old code. Regular manual refactoring of production code would be even better, but I know I live in a dream world here ;). There is also the broken window theory, stating that code with bad quality encourages people working on it to also tolerate new code to be bad. I just started here in ROOT and I already heard from a few people that RO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-669905387
https://github.com/root-project/root/pull/6007#issuecomment-669905387:1899,Availability,toler,tolerate,1899,"d if these codes stay around than they should be maintained and improved occasionally. Of course maintenance takes resources. And I know that nobody ever has time to do it. But leaving everything as is in the face of possible improvements also has a cost that we pay be doing nothing. For this particular PR, if I jump into a header file, I do not know which methods are overriding something from a base class. But this knowledge helps me when reading new code. Now I pay the cost for having to look this information up in the inheritance hierarchy. In recent years we are lucky enough to even have automatic refactoring tools. They are far from perfect. But they are good. And applying them has very little cost for a moderate benefit. So I think at least those automatic refactorings should be applied to old code. Regular manual refactoring of production code would be even better, but I know I live in a dream world here ;). There is also the broken window theory, stating that code with bad quality encourages people working on it to also tolerate new code to be bad. I just started here in ROOT and I already heard from a few people that ROOT code is bad and I should have low expectations. So if we would improve the old code just a little we could also improve this mindset by a bit 👍 . So please consider to apply at least automatic refactorings!. > We cannot merge this as is. @bernhardmgruber what do you want to do with this? Can we close this, discuss, and then do what we converged on? I don't think this ""monster PR"" :-) will survive without conflicts for long, and it still needs a ton of work. @hageboeck mentioned somewhere to me that he would prefer to have smaller PRs just targeting subparts of ROOT, even if the changes are simple/automatic. I guess I could break up the PR into smaller pieces. And maybe just focus on the parts I am involved with the most. However, I would like to see clang-tidy checks enabled on the entire code at some point. So we can raise the quality bar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-669905387
https://github.com/root-project/root/pull/6007#issuecomment-669905387:569,Modifiability,refactor,refactor,569,"> My guess: ClassDef needs to be changed to become ClassDefOverride for all classes that use override, or else warnings (you hinted at that already). AFAIK I tried to apply this already in many places. > In general I'm not sure how much we actually benefit from dressing this old code with some new clothes, also given the extensiveness of this change, which will create conflicts when backporting changes across this commit. Could we have a discussion on the benefit/cost ratio?. Well, that raises an even more general question: if there is little commitment to touch/refactor/maintain old code, what is your long term strategy for these parts of ROOT then? Will these old codes be deprecated/removed then? Code rot is a fact and it gets only worse over time. And so far I have the feeling ROOT will still be there in the next decade or the one after. And if these codes stay around than they should be maintained and improved occasionally. Of course maintenance takes resources. And I know that nobody ever has time to do it. But leaving everything as is in the face of possible improvements also has a cost that we pay be doing nothing. For this particular PR, if I jump into a header file, I do not know which methods are overriding something from a base class. But this knowledge helps me when reading new code. Now I pay the cost for having to look this information up in the inheritance hierarchy. In recent years we are lucky enough to even have automatic refactoring tools. They are far from perfect. But they are good. And applying them has very little cost for a moderate benefit. So I think at least those automatic refactorings should be applied to old code. Regular manual refactoring of production code would be even better, but I know I live in a dream world here ;). There is also the broken window theory, stating that code with bad quality encourages people working on it to also tolerate new code to be bad. I just started here in ROOT and I already heard from a few people that RO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-669905387
https://github.com/root-project/root/pull/6007#issuecomment-669905387:1382,Modifiability,inherit,inheritance,1382,"ill create conflicts when backporting changes across this commit. Could we have a discussion on the benefit/cost ratio?. Well, that raises an even more general question: if there is little commitment to touch/refactor/maintain old code, what is your long term strategy for these parts of ROOT then? Will these old codes be deprecated/removed then? Code rot is a fact and it gets only worse over time. And so far I have the feeling ROOT will still be there in the next decade or the one after. And if these codes stay around than they should be maintained and improved occasionally. Of course maintenance takes resources. And I know that nobody ever has time to do it. But leaving everything as is in the face of possible improvements also has a cost that we pay be doing nothing. For this particular PR, if I jump into a header file, I do not know which methods are overriding something from a base class. But this knowledge helps me when reading new code. Now I pay the cost for having to look this information up in the inheritance hierarchy. In recent years we are lucky enough to even have automatic refactoring tools. They are far from perfect. But they are good. And applying them has very little cost for a moderate benefit. So I think at least those automatic refactorings should be applied to old code. Regular manual refactoring of production code would be even better, but I know I live in a dream world here ;). There is also the broken window theory, stating that code with bad quality encourages people working on it to also tolerate new code to be bad. I just started here in ROOT and I already heard from a few people that ROOT code is bad and I should have low expectations. So if we would improve the old code just a little we could also improve this mindset by a bit 👍 . So please consider to apply at least automatic refactorings!. > We cannot merge this as is. @bernhardmgruber what do you want to do with this? Can we close this, discuss, and then do what we converged on? I don",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-669905387
https://github.com/root-project/root/pull/6007#issuecomment-669905387:1464,Modifiability,refactor,refactoring,1464,"iscussion on the benefit/cost ratio?. Well, that raises an even more general question: if there is little commitment to touch/refactor/maintain old code, what is your long term strategy for these parts of ROOT then? Will these old codes be deprecated/removed then? Code rot is a fact and it gets only worse over time. And so far I have the feeling ROOT will still be there in the next decade or the one after. And if these codes stay around than they should be maintained and improved occasionally. Of course maintenance takes resources. And I know that nobody ever has time to do it. But leaving everything as is in the face of possible improvements also has a cost that we pay be doing nothing. For this particular PR, if I jump into a header file, I do not know which methods are overriding something from a base class. But this knowledge helps me when reading new code. Now I pay the cost for having to look this information up in the inheritance hierarchy. In recent years we are lucky enough to even have automatic refactoring tools. They are far from perfect. But they are good. And applying them has very little cost for a moderate benefit. So I think at least those automatic refactorings should be applied to old code. Regular manual refactoring of production code would be even better, but I know I live in a dream world here ;). There is also the broken window theory, stating that code with bad quality encourages people working on it to also tolerate new code to be bad. I just started here in ROOT and I already heard from a few people that ROOT code is bad and I should have low expectations. So if we would improve the old code just a little we could also improve this mindset by a bit 👍 . So please consider to apply at least automatic refactorings!. > We cannot merge this as is. @bernhardmgruber what do you want to do with this? Can we close this, discuss, and then do what we converged on? I don't think this ""monster PR"" :-) will survive without conflicts for long, and it stil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-669905387
https://github.com/root-project/root/pull/6007#issuecomment-669905387:1628,Modifiability,refactor,refactorings,1628,"r these parts of ROOT then? Will these old codes be deprecated/removed then? Code rot is a fact and it gets only worse over time. And so far I have the feeling ROOT will still be there in the next decade or the one after. And if these codes stay around than they should be maintained and improved occasionally. Of course maintenance takes resources. And I know that nobody ever has time to do it. But leaving everything as is in the face of possible improvements also has a cost that we pay be doing nothing. For this particular PR, if I jump into a header file, I do not know which methods are overriding something from a base class. But this knowledge helps me when reading new code. Now I pay the cost for having to look this information up in the inheritance hierarchy. In recent years we are lucky enough to even have automatic refactoring tools. They are far from perfect. But they are good. And applying them has very little cost for a moderate benefit. So I think at least those automatic refactorings should be applied to old code. Regular manual refactoring of production code would be even better, but I know I live in a dream world here ;). There is also the broken window theory, stating that code with bad quality encourages people working on it to also tolerate new code to be bad. I just started here in ROOT and I already heard from a few people that ROOT code is bad and I should have low expectations. So if we would improve the old code just a little we could also improve this mindset by a bit 👍 . So please consider to apply at least automatic refactorings!. > We cannot merge this as is. @bernhardmgruber what do you want to do with this? Can we close this, discuss, and then do what we converged on? I don't think this ""monster PR"" :-) will survive without conflicts for long, and it still needs a ton of work. @hageboeck mentioned somewhere to me that he would prefer to have smaller PRs just targeting subparts of ROOT, even if the changes are simple/automatic. I guess I co",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-669905387
https://github.com/root-project/root/pull/6007#issuecomment-669905387:1687,Modifiability,refactor,refactoring,1687,"and it gets only worse over time. And so far I have the feeling ROOT will still be there in the next decade or the one after. And if these codes stay around than they should be maintained and improved occasionally. Of course maintenance takes resources. And I know that nobody ever has time to do it. But leaving everything as is in the face of possible improvements also has a cost that we pay be doing nothing. For this particular PR, if I jump into a header file, I do not know which methods are overriding something from a base class. But this knowledge helps me when reading new code. Now I pay the cost for having to look this information up in the inheritance hierarchy. In recent years we are lucky enough to even have automatic refactoring tools. They are far from perfect. But they are good. And applying them has very little cost for a moderate benefit. So I think at least those automatic refactorings should be applied to old code. Regular manual refactoring of production code would be even better, but I know I live in a dream world here ;). There is also the broken window theory, stating that code with bad quality encourages people working on it to also tolerate new code to be bad. I just started here in ROOT and I already heard from a few people that ROOT code is bad and I should have low expectations. So if we would improve the old code just a little we could also improve this mindset by a bit 👍 . So please consider to apply at least automatic refactorings!. > We cannot merge this as is. @bernhardmgruber what do you want to do with this? Can we close this, discuss, and then do what we converged on? I don't think this ""monster PR"" :-) will survive without conflicts for long, and it still needs a ton of work. @hageboeck mentioned somewhere to me that he would prefer to have smaller PRs just targeting subparts of ROOT, even if the changes are simple/automatic. I guess I could break up the PR into smaller pieces. And maybe just focus on the parts I am involved with th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-669905387
https://github.com/root-project/root/pull/6007#issuecomment-669905387:2197,Modifiability,refactor,refactorings,2197,"ound than they should be maintained and improved occasionally. Of course maintenance takes resources. And I know that nobody ever has time to do it. But leaving everything as is in the face of possible improvements also has a cost that we pay be doing nothing. For this particular PR, if I jump into a header file, I do not know which methods are overriding something from a base class. But this knowledge helps me when reading new code. Now I pay the cost for having to look this information up in the inheritance hierarchy. In recent years we are lucky enough to even have automatic refactoring tools. They are far from perfect. But they are good. And applying them has very little cost for a moderate benefit. So I think at least those automatic refactorings should be applied to old code. Regular manual refactoring of production code would be even better, but I know I live in a dream world here ;). There is also the broken window theory, stating that code with bad quality encourages people working on it to also tolerate new code to be bad. I just started here in ROOT and I already heard from a few people that ROOT code is bad and I should have low expectations. So if we would improve the old code just a little we could also improve this mindset by a bit 👍 . So please consider to apply at least automatic refactorings!. > We cannot merge this as is. @bernhardmgruber what do you want to do with this? Can we close this, discuss, and then do what we converged on? I don't think this ""monster PR"" :-) will survive without conflicts for long, and it still needs a ton of work. @hageboeck mentioned somewhere to me that he would prefer to have smaller PRs just targeting subparts of ROOT, even if the changes are simple/automatic. I guess I could break up the PR into smaller pieces. And maybe just focus on the parts I am involved with the most. However, I would like to see clang-tidy checks enabled on the entire code at some point. So we can raise the quality bar just a little bit more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-669905387
https://github.com/root-project/root/pull/6007#issuecomment-669905387:2601,Usability,simpl,simple,2601,"ound than they should be maintained and improved occasionally. Of course maintenance takes resources. And I know that nobody ever has time to do it. But leaving everything as is in the face of possible improvements also has a cost that we pay be doing nothing. For this particular PR, if I jump into a header file, I do not know which methods are overriding something from a base class. But this knowledge helps me when reading new code. Now I pay the cost for having to look this information up in the inheritance hierarchy. In recent years we are lucky enough to even have automatic refactoring tools. They are far from perfect. But they are good. And applying them has very little cost for a moderate benefit. So I think at least those automatic refactorings should be applied to old code. Regular manual refactoring of production code would be even better, but I know I live in a dream world here ;). There is also the broken window theory, stating that code with bad quality encourages people working on it to also tolerate new code to be bad. I just started here in ROOT and I already heard from a few people that ROOT code is bad and I should have low expectations. So if we would improve the old code just a little we could also improve this mindset by a bit 👍 . So please consider to apply at least automatic refactorings!. > We cannot merge this as is. @bernhardmgruber what do you want to do with this? Can we close this, discuss, and then do what we converged on? I don't think this ""monster PR"" :-) will survive without conflicts for long, and it still needs a ton of work. @hageboeck mentioned somewhere to me that he would prefer to have smaller PRs just targeting subparts of ROOT, even if the changes are simple/automatic. I guess I could break up the PR into smaller pieces. And maybe just focus on the parts I am involved with the most. However, I would like to see clang-tidy checks enabled on the entire code at some point. So we can raise the quality bar just a little bit more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-669905387
https://github.com/root-project/root/pull/6008#issuecomment-663685527:23,Availability,error,error,23,"@pcanal I reworked the error message for unimplemented merges in 0ccd1d3, thank you for the feedback :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6008#issuecomment-663685527
https://github.com/root-project/root/pull/6008#issuecomment-663685527:29,Integrability,message,message,29,"@pcanal I reworked the error message for unimplemented merges in 0ccd1d3, thank you for the feedback :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6008#issuecomment-663685527
https://github.com/root-project/root/pull/6008#issuecomment-663685527:92,Usability,feedback,feedback,92,"@pcanal I reworked the error message for unimplemented merges in 0ccd1d3, thank you for the feedback :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6008#issuecomment-663685527
https://github.com/root-project/root/pull/6010#issuecomment-656614652:75,Usability,usab,usability,75,"I keep thinking about the intend of this PR and it mostly tries to solve a usability issue with my IDE. It might be likely that this problem can be solved otherwise, like having all headers added to their targets. This might render this PR unnecessary. So I think for now we can just keep the PR and not merge it. I want to have some more time thinking on it and then I will come back to it!. Thank you everybody for your feedback and comments!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6010#issuecomment-656614652
https://github.com/root-project/root/pull/6010#issuecomment-656614652:422,Usability,feedback,feedback,422,"I keep thinking about the intend of this PR and it mostly tries to solve a usability issue with my IDE. It might be likely that this problem can be solved otherwise, like having all headers added to their targets. This might render this PR unnecessary. So I think for now we can just keep the PR and not merge it. I want to have some more time thinking on it and then I will come back to it!. Thank you everybody for your feedback and comments!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6010#issuecomment-656614652
https://github.com/root-project/root/pull/6016#issuecomment-656306997:38,Deployability,update,updated,38,"Humm ... clearly that code need to be updated as it indeed ""assume"" that having a Merge function implies inheritance from TObject.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6016#issuecomment-656306997
https://github.com/root-project/root/pull/6016#issuecomment-656306997:105,Modifiability,inherit,inheritance,105,"Humm ... clearly that code need to be updated as it indeed ""assume"" that having a Merge function implies inheritance from TObject.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6016#issuecomment-656306997
https://github.com/root-project/root/pull/6016#issuecomment-656306997:9,Usability,clear,clearly,9,"Humm ... clearly that code need to be updated as it indeed ""assume"" that having a Merge function implies inheritance from TObject.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6016#issuecomment-656306997
https://github.com/root-project/root/pull/6096#issuecomment-666504824:219,Usability,simpl,simple,219,"> The idea was to explicitly take out the relatively complicated conversion step from the tutorials in order to not drive away users. So I think we don't want to add this as another tutorial. Yes, I agree that having a simple tutorials for reading is better. If we expect user to have-to/want to convert TTree into RTNtuple then we should consider have a tutorials, shouldn't we?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6096#issuecomment-666504824
https://github.com/root-project/root/pull/6102#issuecomment-666978548:21,Usability,clear,clearer,21,it also makes things clearer when reading the tutorial code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6102#issuecomment-666978548
https://github.com/root-project/root/pull/6107#issuecomment-668071388:87,Energy Efficiency,reduce,reduced,87,"Voila! Here the new plot, without the `--full-dataset` flag we run on a preskimmed and reduced subset from our own xrootd space, which finishes in ~30s. ![ref](https://user-images.githubusercontent.com/6951222/89196380-6a222280-d5aa-11ea-90d9-fb69441dca5c.png). @hageboeck Happy with this setup? With that runtime I hope we can also keep it in the doxygen build to keep the setup simple.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6107#issuecomment-668071388
https://github.com/root-project/root/pull/6107#issuecomment-668071388:380,Usability,simpl,simple,380,"Voila! Here the new plot, without the `--full-dataset` flag we run on a preskimmed and reduced subset from our own xrootd space, which finishes in ~30s. ![ref](https://user-images.githubusercontent.com/6951222/89196380-6a222280-d5aa-11ea-90d9-fb69441dca5c.png). @hageboeck Happy with this setup? With that runtime I hope we can also keep it in the doxygen build to keep the setup simple.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6107#issuecomment-668071388
https://github.com/root-project/root/pull/6156#issuecomment-672220061:379,Modifiability,variab,variables,379,"> Note that we might still face the problem with DLLs loaded from somewhere else, and for which there is no .lib,. Yes, I agree. This is clearly a problem/risk. > but it looks like an overkill to me, especially if I have to search all volumes (imagine NFS). Why ""all"" volumes? Wouldn't we be limited with the set of ""directory of the dll"" and directorys in %PATH% and other path variables?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6156#issuecomment-672220061
https://github.com/root-project/root/pull/6156#issuecomment-672220061:54,Performance,load,loaded,54,"> Note that we might still face the problem with DLLs loaded from somewhere else, and for which there is no .lib,. Yes, I agree. This is clearly a problem/risk. > but it looks like an overkill to me, especially if I have to search all volumes (imagine NFS). Why ""all"" volumes? Wouldn't we be limited with the set of ""directory of the dll"" and directorys in %PATH% and other path variables?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6156#issuecomment-672220061
https://github.com/root-project/root/pull/6156#issuecomment-672220061:155,Safety,risk,risk,155,"> Note that we might still face the problem with DLLs loaded from somewhere else, and for which there is no .lib,. Yes, I agree. This is clearly a problem/risk. > but it looks like an overkill to me, especially if I have to search all volumes (imagine NFS). Why ""all"" volumes? Wouldn't we be limited with the set of ""directory of the dll"" and directorys in %PATH% and other path variables?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6156#issuecomment-672220061
https://github.com/root-project/root/pull/6156#issuecomment-672220061:137,Usability,clear,clearly,137,"> Note that we might still face the problem with DLLs loaded from somewhere else, and for which there is no .lib,. Yes, I agree. This is clearly a problem/risk. > but it looks like an overkill to me, especially if I have to search all volumes (imagine NFS). Why ""all"" volumes? Wouldn't we be limited with the set of ""directory of the dll"" and directorys in %PATH% and other path variables?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6156#issuecomment-672220061
https://github.com/root-project/root/pull/6169#issuecomment-673293838:63,Usability,simpl,simplify,63,"@etejedor, you can merge this PR. And after that I will try to simplify code",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6169#issuecomment-673293838
https://github.com/root-project/root/pull/6172#issuecomment-675412995:48,Availability,failure,failure,48,"@hageboeck Thanks for the correction. The build failure looks like it has something to do with a Git test, but it’s not clear to me what went wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6172#issuecomment-675412995
https://github.com/root-project/root/pull/6172#issuecomment-675412995:101,Testability,test,test,101,"@hageboeck Thanks for the correction. The build failure looks like it has something to do with a Git test, but it’s not clear to me what went wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6172#issuecomment-675412995
https://github.com/root-project/root/pull/6172#issuecomment-675412995:120,Usability,clear,clear,120,"@hageboeck Thanks for the correction. The build failure looks like it has something to do with a Git test, but it’s not clear to me what went wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6172#issuecomment-675412995
https://github.com/root-project/root/pull/6172#issuecomment-675429807:50,Availability,failure,failure,50,"> @hageboeck Thanks for the correction. The build failure looks like it has something to do with a Git test, but it’s not clear to me what went wrong. No worries, that's somebody else who messed up a setup. I think we are ready to merge, thanks for taking the time!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6172#issuecomment-675429807
https://github.com/root-project/root/pull/6172#issuecomment-675429807:103,Testability,test,test,103,"> @hageboeck Thanks for the correction. The build failure looks like it has something to do with a Git test, but it’s not clear to me what went wrong. No worries, that's somebody else who messed up a setup. I think we are ready to merge, thanks for taking the time!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6172#issuecomment-675429807
https://github.com/root-project/root/pull/6172#issuecomment-675429807:122,Usability,clear,clear,122,"> @hageboeck Thanks for the correction. The build failure looks like it has something to do with a Git test, but it’s not clear to me what went wrong. No worries, that's somebody else who messed up a setup. I think we are ready to merge, thanks for taking the time!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6172#issuecomment-675429807
https://github.com/root-project/root/pull/6253#issuecomment-680846985:25,Usability,clear,clear,25,Thanks!. The changes are clear enough that I dare merge them without bothering the code owners. :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6253#issuecomment-680846985
https://github.com/root-project/root/pull/6271#issuecomment-682482962:530,Usability,clear,clearing,530,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6271-ROOT-fedora30-cxx14&date=2020-08-28).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/94060/console).; ### Warnings:; - [2020-08-28T11:23:46.094Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-08-28T11:31:00.825Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6271#issuecomment-682482962
https://github.com/root-project/root/pull/6271#issuecomment-682482962:809,Usability,clear,clearing,809,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6271-ROOT-fedora30-cxx14&date=2020-08-28).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/94060/console).; ### Warnings:; - [2020-08-28T11:23:46.094Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-08-28T11:31:00.825Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6271#issuecomment-682482962
https://github.com/root-project/root/pull/6293#issuecomment-685789931:35,Safety,avoid,avoid,35,@stwunsch I simplified the docs to avoid repetition by referencing the documentation on base classes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6293#issuecomment-685789931
https://github.com/root-project/root/pull/6293#issuecomment-685789931:12,Usability,simpl,simplified,12,@stwunsch I simplified the docs to avoid repetition by referencing the documentation on base classes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6293#issuecomment-685789931
https://github.com/root-project/root/pull/6298#issuecomment-686548500:108,Usability,simpl,simple,108,"For the record, can you elaborate on why this is a blocker for RooFit development? I imagine you can have a simple `Internal::Foreach(task, args)` function that calls `TThreadExecutor` or falls back to STL algorithms if IMT=OFF or `!ROOT::IsImplicitMTEnabled()`. That's pretty much what RDF does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298#issuecomment-686548500
https://github.com/root-project/root/pull/6298#issuecomment-686577803:600,Availability,failure,failure,600,"@eguiraud: I simply *assumed* that you should always be able to program against TTEx, but you cannot. You have to `ifdef` - otherwise, you cannot compile. Or worse, you can actually compile albeit having committed wrong code, because in the `true` branch of your `ifdef`, you did everything right, but in the `false` branch (as happened in this PR), you have stuff that won't even compile.; Therefore, I never even remotely considered the possibility to put `ifdef`s concerning IMT into RooFit. Now that you mention it, it could obviously be done, but I'd rather have those in TTEx - single point of failure - than in `<insert everywhere where TTEx could be in use>`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298#issuecomment-686577803
https://github.com/root-project/root/pull/6298#issuecomment-686577803:13,Usability,simpl,simply,13,"@eguiraud: I simply *assumed* that you should always be able to program against TTEx, but you cannot. You have to `ifdef` - otherwise, you cannot compile. Or worse, you can actually compile albeit having committed wrong code, because in the `true` branch of your `ifdef`, you did everything right, but in the `false` branch (as happened in this PR), you have stuff that won't even compile.; Therefore, I never even remotely considered the possibility to put `ifdef`s concerning IMT into RooFit. Now that you mention it, it could obviously be done, but I'd rather have those in TTEx - single point of failure - than in `<insert everywhere where TTEx could be in use>`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6298#issuecomment-686577803
https://github.com/root-project/root/pull/6301#issuecomment-687294851:405,Usability,simpl,simplified,405,"> or the expected usage. humm ... here it is. ```; gInterpreter->Calc("" ..... ""); Take Read Lock x N times; Take Write Lock x M times; suspend before calling User Code; UserCode; start multiple threads; Take WriteLock *** DEAD LOCK here without this infrastructure; ReleaseWriteLock; restore mutex state; Release Write Lock x M times; Release Read Lock x N times; ```; The recurse count is for this case (simplified to show just the salient point); ```; gInterpreter->SomeEntry("" ..... ""); Take Write Lock; Snapshot 1; Take Write Lock x M times; gInterpreter->Load("" ..... ""); Take Write Lock; Snapshot 2; Take Write Lock x N times; gInterpreter->Calc("" ..... ""); Take WriteLock; Snapshot 3; suspend before calling User Code; restore mutex state; Forget 3; Release Write Lock; Release Write Lock x N times; Forget 2; Release Write Lock; Release Write Lock x M times; Forget 1; Release Write Lock; ```; (I don't recall the exact set of possible re-entry points into the interpreter, so this one is inaccurate but in the spirit); where essentially Snapshot 2 and 3 needs to be ignored, i.e. we need to rewind to the top; but also we need to remember to skip the ""Forget 2"" and ""Forget 3""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6301#issuecomment-687294851
https://github.com/root-project/root/pull/6337#issuecomment-691140036:249,Usability,guid,guideline,249,"The `#ifndef __CLING__` was really needed, you can easily double-check. About whether we should have `main`s in the tutorials: `git grep 'int main' $ROOTSYS/tutorials` tells me I'm not the first one to think it's useful :smile: If we want a general guideline on this I can bring up the topic at the next team meeting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6337#issuecomment-691140036
https://github.com/root-project/root/pull/6337#issuecomment-692295741:164,Usability,guid,guidelines,164,"> main: Yes, we should. It is indeed currently very inconsistent (none, by-itself, surrounded by arbitrary `#if[n]def`, hidding by `__CLING__`). Yes we should have guidelines? I'm in principle fine with the change but I think we should clarify whether or not we want `main` in the tutorials. If we do, we should change all the RNTuple tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6337#issuecomment-692295741
https://github.com/root-project/root/issues/6344#issuecomment-692111232:203,Usability,simpl,simple,203,Your comment is very valid. In the particular case you mentioned that would mean your TPaveLabel has wh ot ww = 0 ? so it won't be really useful. But I agree It should not crash. By chance do you have a simple reproducer ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-692111232
https://github.com/root-project/root/issues/6344#issuecomment-692118820:221,Security,access,access,221,"Hi @couet ,. > so it won't be really useful. Yes. But the size is set during the execution of GUI. > By chance do you have a simple reproducer ?. Simple -- no. But in a scope of elimination of this issue I can provide an access to a private github repository with these codes.; The application itself is not large. Would that work for you?. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-692118820
https://github.com/root-project/root/issues/6344#issuecomment-692118820:125,Usability,simpl,simple,125,"Hi @couet ,. > so it won't be really useful. Yes. But the size is set during the execution of GUI. > By chance do you have a simple reproducer ?. Simple -- no. But in a scope of elimination of this issue I can provide an access to a private github repository with these codes.; The application itself is not large. Would that work for you?. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-692118820
https://github.com/root-project/root/issues/6344#issuecomment-692129631:174,Usability,simpl,simple,174,"Hi @couet ,. OK. In TPad the problem is a bit more elaborated. ; At first the calculations of the new sizes are done and only after that the results are checked. ; Here is a simple solution that I've tried.; https://github.com/root-project/root/compare/master...andriish:for_zevis?expand=1. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-692129631
https://github.com/root-project/root/issues/6344#issuecomment-692133143:104,Testability,test,test,104,"Ok, cannot reproduce it with a simple TPaveLabel:; ```; root [0] auto p = new TPaveLabel(10.,0.,0.,10.,""test""); (TPaveLabel *) @0x7ffee68e8608; root [1] p->Draw(); Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; root [2] ; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-692133143
https://github.com/root-project/root/issues/6344#issuecomment-692133143:31,Usability,simpl,simple,31,"Ok, cannot reproduce it with a simple TPaveLabel:; ```; root [0] auto p = new TPaveLabel(10.,0.,0.,10.,""test""); (TPaveLabel *) @0x7ffee68e8608; root [1] p->Draw(); Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; root [2] ; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-692133143
https://github.com/root-project/root/pull/6346#issuecomment-691918632:20,Usability,simpl,simply,20,"Ha, I believe it is simply a problem with this typo https://github.com/vgvassilev/clad/commit/9401215ba3b07ceec26ba460cea6b4a3d128e8c2#r42285026",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6346#issuecomment-691918632
https://github.com/root-project/root/issues/6347#issuecomment-692682651:688,Availability,robust,robust,688,"> why should the RVec cast of the ""jets"" column work if it is in fact an std::vector<float>. I understand why it currently doesn't, but I believe we agree that reading any collection as an RVecs via RNTupleDS _should_ work. I think we agreed to:; - [ ] throw an exception from RNTupleDS in case type on disk and type requested do not match -- this will make the bug noisy instead of silent and will possibly catch other issues in the future; - [x] wait for the RVec redesign that adds a small vector optimization and then provide a type-erased deserialization function for RVecs which RNTupleDS can take advantage of -- the redesign will make it simpler to implement such a function in a robust way",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347#issuecomment-692682651
https://github.com/root-project/root/issues/6347#issuecomment-692682651:500,Performance,optimiz,optimization,500,"> why should the RVec cast of the ""jets"" column work if it is in fact an std::vector<float>. I understand why it currently doesn't, but I believe we agree that reading any collection as an RVecs via RNTupleDS _should_ work. I think we agreed to:; - [ ] throw an exception from RNTupleDS in case type on disk and type requested do not match -- this will make the bug noisy instead of silent and will possibly catch other issues in the future; - [x] wait for the RVec redesign that adds a small vector optimization and then provide a type-erased deserialization function for RVecs which RNTupleDS can take advantage of -- the redesign will make it simpler to implement such a function in a robust way",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347#issuecomment-692682651
https://github.com/root-project/root/issues/6347#issuecomment-692682651:646,Usability,simpl,simpler,646,"> why should the RVec cast of the ""jets"" column work if it is in fact an std::vector<float>. I understand why it currently doesn't, but I believe we agree that reading any collection as an RVecs via RNTupleDS _should_ work. I think we agreed to:; - [ ] throw an exception from RNTupleDS in case type on disk and type requested do not match -- this will make the bug noisy instead of silent and will possibly catch other issues in the future; - [x] wait for the RVec redesign that adds a small vector optimization and then provide a type-erased deserialization function for RVecs which RNTupleDS can take advantage of -- the redesign will make it simpler to implement such a function in a robust way",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6347#issuecomment-692682651
https://github.com/root-project/root/issues/6370#issuecomment-696687077:197,Availability,error,error,197,"Hi @VanyaBelyaev ,; I ran your reproducer with LCG97apython3(ROOT 6.20/06) and LCG98python3(ROOT 6.22/00).; With the latter it seems that the call to `dill.dumps` is executed but I get a different error with a long stacktrace, I report the main parts:; ```; ...; input_line_38:16:29: error: allocating an object of abstract class type 'TInterpreter'; *ret = new (arena) TInterpreter[nary];; ^; Error in <TClingCallFunc::make_ctor_wrapper>: Failed to compile; ...; Error in <TClingCallFunc::ExecDefaultConstructor>: Called with no wrapper, not implemented!; Error in <TClingClassInfo::New()>: Call of default constructor failed to return an object for class: TInterpreter; Error in <TClass::New>: cannot create object of class TInterpreter; Error in <TBufferFile::ReadObject>: could not create object of class TInterpreter; TBufferFile::WriteObjectAny:0: RuntimeWarning: since TROOT has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it. <class cppyy.gbl.TH1D at 0x560bc237aa20>. Error in atexit._run_exitfuncs:; Traceback (most recent call last):; File ""/home/vpadulan/Programs/rootproject/rootinstall/v6-22-00-patches/lib/ROOT/__init__.py"", line 119, in cleanup; backend.gROOT.EndOfProcessCleanups(); ReferenceError: attempt to access a null-pointer; ```. The line `<class cppyy.gbl.TH1D at 0x560bc237aa20>` is there because I added a print to your reproducer just to check that `dill.loads` is executed. Actually this is the simplest command to reproduce the same stacktrace:. ```; python -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; ```. So it's possible that something in the new pyroot (default since 6.22) fixes the `dill` issue but triggers this other error.; @etejedor any thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-696687077
https://github.com/root-project/root/issues/6370#issuecomment-696687077:284,Availability,error,error,284,"Hi @VanyaBelyaev ,; I ran your reproducer with LCG97apython3(ROOT 6.20/06) and LCG98python3(ROOT 6.22/00).; With the latter it seems that the call to `dill.dumps` is executed but I get a different error with a long stacktrace, I report the main parts:; ```; ...; input_line_38:16:29: error: allocating an object of abstract class type 'TInterpreter'; *ret = new (arena) TInterpreter[nary];; ^; Error in <TClingCallFunc::make_ctor_wrapper>: Failed to compile; ...; Error in <TClingCallFunc::ExecDefaultConstructor>: Called with no wrapper, not implemented!; Error in <TClingClassInfo::New()>: Call of default constructor failed to return an object for class: TInterpreter; Error in <TClass::New>: cannot create object of class TInterpreter; Error in <TBufferFile::ReadObject>: could not create object of class TInterpreter; TBufferFile::WriteObjectAny:0: RuntimeWarning: since TROOT has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it. <class cppyy.gbl.TH1D at 0x560bc237aa20>. Error in atexit._run_exitfuncs:; Traceback (most recent call last):; File ""/home/vpadulan/Programs/rootproject/rootinstall/v6-22-00-patches/lib/ROOT/__init__.py"", line 119, in cleanup; backend.gROOT.EndOfProcessCleanups(); ReferenceError: attempt to access a null-pointer; ```. The line `<class cppyy.gbl.TH1D at 0x560bc237aa20>` is there because I added a print to your reproducer just to check that `dill.loads` is executed. Actually this is the simplest command to reproduce the same stacktrace:. ```; python -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; ```. So it's possible that something in the new pyroot (default since 6.22) fixes the `dill` issue but triggers this other error.; @etejedor any thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-696687077
https://github.com/root-project/root/issues/6370#issuecomment-696687077:1847,Availability,error,error,1847,"Hi @VanyaBelyaev ,; I ran your reproducer with LCG97apython3(ROOT 6.20/06) and LCG98python3(ROOT 6.22/00).; With the latter it seems that the call to `dill.dumps` is executed but I get a different error with a long stacktrace, I report the main parts:; ```; ...; input_line_38:16:29: error: allocating an object of abstract class type 'TInterpreter'; *ret = new (arena) TInterpreter[nary];; ^; Error in <TClingCallFunc::make_ctor_wrapper>: Failed to compile; ...; Error in <TClingCallFunc::ExecDefaultConstructor>: Called with no wrapper, not implemented!; Error in <TClingClassInfo::New()>: Call of default constructor failed to return an object for class: TInterpreter; Error in <TClass::New>: cannot create object of class TInterpreter; Error in <TBufferFile::ReadObject>: could not create object of class TInterpreter; TBufferFile::WriteObjectAny:0: RuntimeWarning: since TROOT has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it. <class cppyy.gbl.TH1D at 0x560bc237aa20>. Error in atexit._run_exitfuncs:; Traceback (most recent call last):; File ""/home/vpadulan/Programs/rootproject/rootinstall/v6-22-00-patches/lib/ROOT/__init__.py"", line 119, in cleanup; backend.gROOT.EndOfProcessCleanups(); ReferenceError: attempt to access a null-pointer; ```. The line `<class cppyy.gbl.TH1D at 0x560bc237aa20>` is there because I added a print to your reproducer just to check that `dill.loads` is executed. Actually this is the simplest command to reproduce the same stacktrace:. ```; python -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; ```. So it's possible that something in the new pyroot (default since 6.22) fixes the `dill` issue but triggers this other error.; @etejedor any thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-696687077
https://github.com/root-project/root/issues/6370#issuecomment-696687077:1263,Deployability,patch,patches,1263,"Hi @VanyaBelyaev ,; I ran your reproducer with LCG97apython3(ROOT 6.20/06) and LCG98python3(ROOT 6.22/00).; With the latter it seems that the call to `dill.dumps` is executed but I get a different error with a long stacktrace, I report the main parts:; ```; ...; input_line_38:16:29: error: allocating an object of abstract class type 'TInterpreter'; *ret = new (arena) TInterpreter[nary];; ^; Error in <TClingCallFunc::make_ctor_wrapper>: Failed to compile; ...; Error in <TClingCallFunc::ExecDefaultConstructor>: Called with no wrapper, not implemented!; Error in <TClingClassInfo::New()>: Call of default constructor failed to return an object for class: TInterpreter; Error in <TClass::New>: cannot create object of class TInterpreter; Error in <TBufferFile::ReadObject>: could not create object of class TInterpreter; TBufferFile::WriteObjectAny:0: RuntimeWarning: since TROOT has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it. <class cppyy.gbl.TH1D at 0x560bc237aa20>. Error in atexit._run_exitfuncs:; Traceback (most recent call last):; File ""/home/vpadulan/Programs/rootproject/rootinstall/v6-22-00-patches/lib/ROOT/__init__.py"", line 119, in cleanup; backend.gROOT.EndOfProcessCleanups(); ReferenceError: attempt to access a null-pointer; ```. The line `<class cppyy.gbl.TH1D at 0x560bc237aa20>` is there because I added a print to your reproducer just to check that `dill.loads` is executed. Actually this is the simplest command to reproduce the same stacktrace:. ```; python -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; ```. So it's possible that something in the new pyroot (default since 6.22) fixes the `dill` issue but triggers this other error.; @etejedor any thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-696687077
https://github.com/root-project/root/issues/6370#issuecomment-696687077:530,Integrability,wrap,wrapper,530,"Hi @VanyaBelyaev ,; I ran your reproducer with LCG97apython3(ROOT 6.20/06) and LCG98python3(ROOT 6.22/00).; With the latter it seems that the call to `dill.dumps` is executed but I get a different error with a long stacktrace, I report the main parts:; ```; ...; input_line_38:16:29: error: allocating an object of abstract class type 'TInterpreter'; *ret = new (arena) TInterpreter[nary];; ^; Error in <TClingCallFunc::make_ctor_wrapper>: Failed to compile; ...; Error in <TClingCallFunc::ExecDefaultConstructor>: Called with no wrapper, not implemented!; Error in <TClingClassInfo::New()>: Call of default constructor failed to return an object for class: TInterpreter; Error in <TClass::New>: cannot create object of class TInterpreter; Error in <TBufferFile::ReadObject>: could not create object of class TInterpreter; TBufferFile::WriteObjectAny:0: RuntimeWarning: since TROOT has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it. <class cppyy.gbl.TH1D at 0x560bc237aa20>. Error in atexit._run_exitfuncs:; Traceback (most recent call last):; File ""/home/vpadulan/Programs/rootproject/rootinstall/v6-22-00-patches/lib/ROOT/__init__.py"", line 119, in cleanup; backend.gROOT.EndOfProcessCleanups(); ReferenceError: attempt to access a null-pointer; ```. The line `<class cppyy.gbl.TH1D at 0x560bc237aa20>` is there because I added a print to your reproducer just to check that `dill.loads` is executed. Actually this is the simplest command to reproduce the same stacktrace:. ```; python -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; ```. So it's possible that something in the new pyroot (default since 6.22) fixes the `dill` issue but triggers this other error.; @etejedor any thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-696687077
https://github.com/root-project/root/issues/6370#issuecomment-696687077:1538,Performance,load,loads,1538,"Hi @VanyaBelyaev ,; I ran your reproducer with LCG97apython3(ROOT 6.20/06) and LCG98python3(ROOT 6.22/00).; With the latter it seems that the call to `dill.dumps` is executed but I get a different error with a long stacktrace, I report the main parts:; ```; ...; input_line_38:16:29: error: allocating an object of abstract class type 'TInterpreter'; *ret = new (arena) TInterpreter[nary];; ^; Error in <TClingCallFunc::make_ctor_wrapper>: Failed to compile; ...; Error in <TClingCallFunc::ExecDefaultConstructor>: Called with no wrapper, not implemented!; Error in <TClingClassInfo::New()>: Call of default constructor failed to return an object for class: TInterpreter; Error in <TClass::New>: cannot create object of class TInterpreter; Error in <TBufferFile::ReadObject>: could not create object of class TInterpreter; TBufferFile::WriteObjectAny:0: RuntimeWarning: since TROOT has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it. <class cppyy.gbl.TH1D at 0x560bc237aa20>. Error in atexit._run_exitfuncs:; Traceback (most recent call last):; File ""/home/vpadulan/Programs/rootproject/rootinstall/v6-22-00-patches/lib/ROOT/__init__.py"", line 119, in cleanup; backend.gROOT.EndOfProcessCleanups(); ReferenceError: attempt to access a null-pointer; ```. The line `<class cppyy.gbl.TH1D at 0x560bc237aa20>` is there because I added a print to your reproducer just to check that `dill.loads` is executed. Actually this is the simplest command to reproduce the same stacktrace:. ```; python -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; ```. So it's possible that something in the new pyroot (default since 6.22) fixes the `dill` issue but triggers this other error.; @etejedor any thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-696687077
https://github.com/root-project/root/issues/6370#issuecomment-696687077:1689,Performance,load,loads,1689,"Hi @VanyaBelyaev ,; I ran your reproducer with LCG97apython3(ROOT 6.20/06) and LCG98python3(ROOT 6.22/00).; With the latter it seems that the call to `dill.dumps` is executed but I get a different error with a long stacktrace, I report the main parts:; ```; ...; input_line_38:16:29: error: allocating an object of abstract class type 'TInterpreter'; *ret = new (arena) TInterpreter[nary];; ^; Error in <TClingCallFunc::make_ctor_wrapper>: Failed to compile; ...; Error in <TClingCallFunc::ExecDefaultConstructor>: Called with no wrapper, not implemented!; Error in <TClingClassInfo::New()>: Call of default constructor failed to return an object for class: TInterpreter; Error in <TClass::New>: cannot create object of class TInterpreter; Error in <TBufferFile::ReadObject>: could not create object of class TInterpreter; TBufferFile::WriteObjectAny:0: RuntimeWarning: since TROOT has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it. <class cppyy.gbl.TH1D at 0x560bc237aa20>. Error in atexit._run_exitfuncs:; Traceback (most recent call last):; File ""/home/vpadulan/Programs/rootproject/rootinstall/v6-22-00-patches/lib/ROOT/__init__.py"", line 119, in cleanup; backend.gROOT.EndOfProcessCleanups(); ReferenceError: attempt to access a null-pointer; ```. The line `<class cppyy.gbl.TH1D at 0x560bc237aa20>` is there because I added a print to your reproducer just to check that `dill.loads` is executed. Actually this is the simplest command to reproduce the same stacktrace:. ```; python -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; ```. So it's possible that something in the new pyroot (default since 6.22) fixes the `dill` issue but triggers this other error.; @etejedor any thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-696687077
https://github.com/root-project/root/issues/6370#issuecomment-696687077:1381,Security,access,access,1381,"Hi @VanyaBelyaev ,; I ran your reproducer with LCG97apython3(ROOT 6.20/06) and LCG98python3(ROOT 6.22/00).; With the latter it seems that the call to `dill.dumps` is executed but I get a different error with a long stacktrace, I report the main parts:; ```; ...; input_line_38:16:29: error: allocating an object of abstract class type 'TInterpreter'; *ret = new (arena) TInterpreter[nary];; ^; Error in <TClingCallFunc::make_ctor_wrapper>: Failed to compile; ...; Error in <TClingCallFunc::ExecDefaultConstructor>: Called with no wrapper, not implemented!; Error in <TClingClassInfo::New()>: Call of default constructor failed to return an object for class: TInterpreter; Error in <TClass::New>: cannot create object of class TInterpreter; Error in <TBufferFile::ReadObject>: could not create object of class TInterpreter; TBufferFile::WriteObjectAny:0: RuntimeWarning: since TROOT has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it. <class cppyy.gbl.TH1D at 0x560bc237aa20>. Error in atexit._run_exitfuncs:; Traceback (most recent call last):; File ""/home/vpadulan/Programs/rootproject/rootinstall/v6-22-00-patches/lib/ROOT/__init__.py"", line 119, in cleanup; backend.gROOT.EndOfProcessCleanups(); ReferenceError: attempt to access a null-pointer; ```. The line `<class cppyy.gbl.TH1D at 0x560bc237aa20>` is there because I added a print to your reproducer just to check that `dill.loads` is executed. Actually this is the simplest command to reproduce the same stacktrace:. ```; python -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; ```. So it's possible that something in the new pyroot (default since 6.22) fixes the `dill` issue but triggers this other error.; @etejedor any thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-696687077
https://github.com/root-project/root/issues/6370#issuecomment-696687077:1579,Usability,simpl,simplest,1579,"Hi @VanyaBelyaev ,; I ran your reproducer with LCG97apython3(ROOT 6.20/06) and LCG98python3(ROOT 6.22/00).; With the latter it seems that the call to `dill.dumps` is executed but I get a different error with a long stacktrace, I report the main parts:; ```; ...; input_line_38:16:29: error: allocating an object of abstract class type 'TInterpreter'; *ret = new (arena) TInterpreter[nary];; ^; Error in <TClingCallFunc::make_ctor_wrapper>: Failed to compile; ...; Error in <TClingCallFunc::ExecDefaultConstructor>: Called with no wrapper, not implemented!; Error in <TClingClassInfo::New()>: Call of default constructor failed to return an object for class: TInterpreter; Error in <TClass::New>: cannot create object of class TInterpreter; Error in <TBufferFile::ReadObject>: could not create object of class TInterpreter; TBufferFile::WriteObjectAny:0: RuntimeWarning: since TROOT has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it. <class cppyy.gbl.TH1D at 0x560bc237aa20>. Error in atexit._run_exitfuncs:; Traceback (most recent call last):; File ""/home/vpadulan/Programs/rootproject/rootinstall/v6-22-00-patches/lib/ROOT/__init__.py"", line 119, in cleanup; backend.gROOT.EndOfProcessCleanups(); ReferenceError: attempt to access a null-pointer; ```. The line `<class cppyy.gbl.TH1D at 0x560bc237aa20>` is there because I added a print to your reproducer just to check that `dill.loads` is executed. Actually this is the simplest command to reproduce the same stacktrace:. ```; python -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; ```. So it's possible that something in the new pyroot (default since 6.22) fixes the `dill` issue but triggers this other error.; @etejedor any thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-696687077
https://github.com/root-project/root/issues/6370#issuecomment-819457468:165,Performance,load,loads,165,"Hi @VanyaBelyaev,. I confirm the following simple commands both work with ROOT 6.22/08 and ROOT master; ```; $ python2 -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; <class cppyy.gbl.TH1D at 0x564a995e04e0>; $ python3 -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; <class cppyy.gbl.TH1D at 0x559369cdb3a0>; ```. They should be similar to your original reproducer, can you confirm this is fixed for you as well now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-819457468
https://github.com/root-project/root/issues/6370#issuecomment-819457468:298,Performance,load,loads,298,"Hi @VanyaBelyaev,. I confirm the following simple commands both work with ROOT 6.22/08 and ROOT master; ```; $ python2 -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; <class cppyy.gbl.TH1D at 0x564a995e04e0>; $ python3 -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; <class cppyy.gbl.TH1D at 0x559369cdb3a0>; ```. They should be similar to your original reproducer, can you confirm this is fixed for you as well now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-819457468
https://github.com/root-project/root/issues/6370#issuecomment-819457468:43,Usability,simpl,simple,43,"Hi @VanyaBelyaev,. I confirm the following simple commands both work with ROOT 6.22/08 and ROOT master; ```; $ python2 -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; <class cppyy.gbl.TH1D at 0x564a995e04e0>; $ python3 -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; <class cppyy.gbl.TH1D at 0x559369cdb3a0>; ```. They should be similar to your original reproducer, can you confirm this is fixed for you as well now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-819457468
https://github.com/root-project/root/issues/6373#issuecomment-712188134:585,Availability,mask,masks,585,"Hi @couet ,. so far I see a crash. And it is really a funny problem.; Basically I was able to trace the crash to . TColor::RGB2HLS. So this code. ```; #include <iostream>; #include <stdlib.h>. #include <TColor.h>; #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; F",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373#issuecomment-712188134
https://github.com/root-project/root/issues/6373#issuecomment-712188134:977,Availability,mask,masks,977,"Hi @couet ,. so far I see a crash. And it is really a funny problem.; Basically I was able to trace the crash to . TColor::RGB2HLS. So this code. ```; #include <iostream>; #include <stdlib.h>. #include <TColor.h>; #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; F",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373#issuecomment-712188134
https://github.com/root-project/root/issues/6373#issuecomment-712188134:1100,Availability,mask,mask,1100," crash to . TColor::RGB2HLS. So this code. ```; #include <iostream>; #include <stdlib.h>. #include <TColor.h>; #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; Float_t fHue=-1.0; ; Float_t fLight=-1.0;; Float_t fSaturation = -1.0;; Float_t r=212.467392f;; Float_t ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373#issuecomment-712188134
https://github.com/root-project/root/issues/6373#issuecomment-712188134:2468,Deployability,release,release,2468,"igned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; Float_t fHue=-1.0; ; Float_t fLight=-1.0;; Float_t fSaturation = -1.0;; Float_t r=212.467392f;; Float_t g=0.529984f;; Float_t b=94.476196f;; TColor::RGB2HLS(r ,g, b,fHue, fLight, fSaturation);; return 0;; }. ```; produces FPE on Mac+ ROOT 6.22. The problem is that TColor::RGB2HLS is a static function and when I try to take it of and compile standalone, everything works.; Have no idea what is happening.; My very wild speculation is that the build setup of the 6.22 release on Mac is bugged because of bugged clang or linker there.; But again, that is just a speculation. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373#issuecomment-712188134
https://github.com/root-project/root/issues/6373#issuecomment-712188134:1437,Usability,clear,clear,1437,"ned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; Float_t fHue=-1.0; ; Float_t fLight=-1.0;; Float_t fSaturation = -1.0;; Float_t r=212.467392f;; Float_t g=0.529984f;; Float_t b=94.476196f;; TColor::RGB2HLS(r ,g, b,fHue, fLight, fSaturation);; return 0;; }. ```; produces FPE on Mac+ ROOT 6.22. The problem is that TColor::RGB2HLS is a static function and when I try to take it of and compile standalone, everything works.; Have no idea what is happening.; My very wild speculation is that the build setup of the 6.22 release on ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373#issuecomment-712188134
https://github.com/root-project/root/issues/6373#issuecomment-712188134:1769,Usability,clear,clear,1769,"igned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; Float_t fHue=-1.0; ; Float_t fLight=-1.0;; Float_t fSaturation = -1.0;; Float_t r=212.467392f;; Float_t g=0.529984f;; Float_t b=94.476196f;; TColor::RGB2HLS(r ,g, b,fHue, fLight, fSaturation);; return 0;; }. ```; produces FPE on Mac+ ROOT 6.22. The problem is that TColor::RGB2HLS is a static function and when I try to take it of and compile standalone, everything works.; Have no idea what is happening.; My very wild speculation is that the build setup of the 6.22 release on Mac is bugged because of bugged clang or linker there.; But again, that is just a speculation. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373#issuecomment-712188134
https://github.com/root-project/root/issues/6373#issuecomment-712842902:500,Availability,mask,masks,500,"Hi @couet, . I've found the reason.; I've used this code:. ```. #include <iostream>; #include <stdlib.h>. #include <fenv.h>; #define Float_t float; #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. void FakeRGB2HLS(Float_t rr, Float_t gg, Float_t bb,; Float_t &hue, Float_t &light, Float_t &satur); {; Float_t rnorm, gnorm, bnorm, minval, maxval, msum, mdiff, r, g, b;; minval ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373#issuecomment-712842902
https://github.com/root-project/root/issues/6373#issuecomment-712842902:892,Availability,mask,masks,892,"Hi @couet, . I've found the reason.; I've used this code:. ```. #include <iostream>; #include <stdlib.h>. #include <fenv.h>; #define Float_t float; #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. void FakeRGB2HLS(Float_t rr, Float_t gg, Float_t bb,; Float_t &hue, Float_t &light, Float_t &satur); {; Float_t rnorm, gnorm, bnorm, minval, maxval, msum, mdiff, r, g, b;; minval ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373#issuecomment-712842902
https://github.com/root-project/root/issues/6373#issuecomment-712842902:1015,Availability,mask,mask,1015,"found the reason.; I've used this code:. ```. #include <iostream>; #include <stdlib.h>. #include <fenv.h>; #define Float_t float; #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. void FakeRGB2HLS(Float_t rr, Float_t gg, Float_t bb,; Float_t &hue, Float_t &light, Float_t &satur); {; Float_t rnorm, gnorm, bnorm, minval, maxval, msum, mdiff, r, g, b;; minval = maxval =0 ;; r =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373#issuecomment-712842902
https://github.com/root-project/root/issues/6373#issuecomment-712842902:4167,Deployability,release,releases,4167," minval = g;; if (b < minval) minval = b;; maxval = r;; if (g > maxval) maxval = g;; if (b > maxval) maxval = b;. rnorm = gnorm = bnorm = 0;; mdiff = maxval - minval;; msum = maxval + minval;; printf(""msum %f %f\n"",msum,mdiff);; light = 0.5 * msum;; if (maxval != minval) {; rnorm = (maxval - r)/mdiff;; gnorm = (maxval - g)/mdiff;; bnorm = (maxval - b)/mdiff;; } else {; satur = hue = 0;; return;; }. if (light < 0.5); satur = mdiff/msum;; else; satur = mdiff/(2.0 - msum);. if (r == maxval); {; printf(""hue 1\n"");; hue = 60.0 * (6.0 + bnorm - gnorm);; }; else if (g == maxval); {; printf(""hue 2\n"");; hue = 60.0 * (2.0 + rnorm - bnorm);; }; else; {; printf(""hue 3\n"");; hue = 60.0 * (4.0 + gnorm - rnorm);. }; if (hue > 360); hue = hue - 360;; }. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; Float_t fr = 0.1;; Float_t fg = 0.1;; //Float_t fb = 0.1; // no crash; Float_t fb = 0.2; // crash; Float_t fh = 0.;; Float_t fl = 0.;; Float_t fs = 0.;; FakeRGB2HLS(fr,fg, fb, fh, fl, fs);; printf(""%10.10f %10.10f %10.10f \n"", fh, fl, fs);; return 0;; }. ```; and compiled it with . - 1) clang++ -D_FORTIFY_SOURCE=2 -O1 -pipe -g -Wall -D_REENTRANT -D_GLIBCXX_ASSERTIONS -std=c++1y -o color5.exe color5.cxx; - 2) clang++ -D_FORTIFY_SOURCE=2 -O2 -pipe -g -Wall -D_REENTRANT -D_GLIBCXX_ASSERTIONS -std=c++1y -o color5.exe color5.cxx; - 3) clang++ -D_FORTIFY_SOURCE=2 -O3 -pipe -g -Wall -D_REENTRANT -D_GLIBCXX_ASSERTIONS -std=c++1y -o color5.exe color5.cxx; - 4) clang++ -D_FORTIFY_SOURCE=2 -O4 -pipe -g -Wall -D_REENTRANT -D_GLIBCXX_ASSERTIONS -std=c++1y -o color5.exe color5.cxx. using ; ```; clang version 7.0.1 (tags/RELEASE_701/final); Target: x86_64-unknown-linux-gnu; Thread model: posix; InstalledDir: /opt/rh/llvm-toolset-7.0/root/usr/bin; ```; Everything with -O2 and higher crashes. -O1 works. This is a ""feature"" of clang.; As a resolution one can try to change the settings of the default mac builds for the official releases. Best regards,; Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373#issuecomment-712842902
https://github.com/root-project/root/issues/6373#issuecomment-712842902:1352,Usability,clear,clear,1352,"ned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. void FakeRGB2HLS(Float_t rr, Float_t gg, Float_t bb,; Float_t &hue, Float_t &light, Float_t &satur); {; Float_t rnorm, gnorm, bnorm, minval, maxval, msum, mdiff, r, g, b;; minval = maxval =0 ;; r = g = b = 0;; if (rr > 0) {; r = rr;; if (r > 1) r = 1;; }; if (gg > 0) {; g = gg;; if (g > 1) g = 1;; }; if (bb > 0) {; b = bb;; if (b > 1) b = 1;; }. minval = r;; if (g < minval) minval = g;; if (b < minval) minval = b;; maxval = r;; if (g > maxval) maxval = g;; if (b > maxval) maxval = b;. rnorm = gnorm = bnorm = 0;; mdiff = maxval - minval;; msum = maxval + minval;; pri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373#issuecomment-712842902
https://github.com/root-project/root/issues/6373#issuecomment-712842902:1684,Usability,clear,clear,1684,"-1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. void FakeRGB2HLS(Float_t rr, Float_t gg, Float_t bb,; Float_t &hue, Float_t &light, Float_t &satur); {; Float_t rnorm, gnorm, bnorm, minval, maxval, msum, mdiff, r, g, b;; minval = maxval =0 ;; r = g = b = 0;; if (rr > 0) {; r = rr;; if (r > 1) r = 1;; }; if (gg > 0) {; g = gg;; if (g > 1) g = 1;; }; if (bb > 0) {; b = bb;; if (b > 1) b = 1;; }. minval = r;; if (g < minval) minval = g;; if (b < minval) minval = b;; maxval = r;; if (g > maxval) maxval = g;; if (b > maxval) maxval = b;. rnorm = gnorm = bnorm = 0;; mdiff = maxval - minval;; msum = maxval + minval;; printf(""msum %f %f\n"",msum,mdiff);; light = 0.5 * msum;; if (maxval != minval) {; rnorm = (maxval - r)/mdiff;; gnorm = (maxval - g)/mdiff;; bnorm = (maxval - b)/mdiff;; } else {; satur = hue = 0;; return;; }. if (light < 0.5); satur = mdiff/msum;; else; satur = mdiff/(2.0 - msum);. if (r == maxval); {; printf(""hue 1\n"");; hue = 60.0 * ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373#issuecomment-712842902
https://github.com/root-project/root/issues/6374#issuecomment-694282020:140,Usability,simpl,simple,140,"Hi @couet ,. yes, sure. `feenableexcept` is not in `<fenv.h>` on Mac. One can add some code to have exceptions handling, but let us keep it simple. Linux is used much wider anyway. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374#issuecomment-694282020
https://github.com/root-project/root/issues/6381#issuecomment-694888116:16,Usability,simpl,simple,16,"A reproducer. A simple macro. Is:; ```; void testTH3Label() {. TRandom3 r;; int nBins = 3;; int nEvents = 100000;; double minRange = 1; double maxRange = 5;; TH3D* h4 = new TH3D(""h4"", ""h4-Title"",; 2*nBins, minRange, maxRange,; nBins , minRange, maxRange,; nBins , minRange, maxRange);. std::vector<TString> labels = {""a1"",""b1"",""c1"",""a2"",""b2"",""c2""};; for ( Int_t e = 0; e < nEvents; ++e ) {; TString label = labels[r.Uniform(0,labels.size())];; Double_t x = r.Uniform(0.9 * minRange, 1.1 * maxRange);; Double_t y = r.Uniform(0.9 * minRange, 1.1 * maxRange);; Double_t z = r.Uniform(0.9 * minRange, 1.1 * maxRange);; h4->Fill(label, y, z, 1.0);; }; h4->Draw();; /// h4->GetXaxis()->SetNdivisions(-1); // This line fixes the issue; h4->GetXaxis()->GetLabels()->ls();; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6381#issuecomment-694888116
https://github.com/root-project/root/pull/6385#issuecomment-752250076:179,Availability,error,error,179,The command I'm running was simply `root` to get the interactive prompt. The full output of trying to run `1+2` is below:. ```log; $ root -b -q -x -e 1+2; input_line_1:1:2: fatal error: module 'libc' imported by AST file '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/std.pcm' found in a different module map file (/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/etc/cling/libc.modulemap) than when the importing AST file was built (/home/cburr/mambaforge/conda-bld/root_1609268594446/work/build-dir/etc/cling/libc.modulemap); #include <new>; ^; input_line_1:1:2: note: imported by module 'std' in '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/std.pcm'; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; 'at_quick_exit' not defined; <<< cling interactive line includer >>>: fatal error: module file '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/libc.pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:1479,Availability,error,error,1479,h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/etc/cling/libc.modulemap) than when the importing AST file was built (/home/cburr/mambaforge/conda-bld/root_1609268594446/work/build-dir/etc/cling/libc.modulemap); #include <new>; ^; input_line_1:1:2: note: imported by module 'std' in '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/std.pcm'; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; 'at_quick_exit' not defined; <<< cling interactive line includer >>>: fatal error: module file '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/libc.pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Core; Failed to load module Rint; Failed to load module RIO; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5447,Availability,error,error,5447,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5545,Availability,error,error,5545,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5595,Availability,error,error,5595,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5688,Availability,error,error,5688,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5738,Availability,error,error,5738,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5834,Availability,error,error,5834,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:1819,Performance,load,load,1819,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:1847,Performance,load,load,1847,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:1874,Performance,load,load,1874,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:1917,Performance,load,load,1917,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:1958,Performance,load,load,1958,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:1993,Performance,load,load,1993,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2046,Performance,load,load,2046,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2074,Performance,load,load,2074,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2102,Performance,load,load,2102,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2129,Performance,load,load,2129,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2161,Performance,load,load,2161,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2189,Performance,load,load,2189,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2226,Performance,load,load,2226,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2256,Performance,load,load,2256,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2290,Performance,load,load,2290,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2317,Performance,load,load,2317,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2352,Performance,load,load,2352,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2381,Performance,load,load,2381,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2411,Performance,load,load,2411,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2440,Performance,load,load,2440,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2472,Performance,load,load,2472,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2506,Performance,load,load,2506,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2539,Performance,load,load,2539,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2568,Performance,load,load,2568,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2602,Performance,load,load,2602,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2655,Performance,load,load,2655,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2686,Performance,load,load,2686,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2713,Performance,load,load,2713,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2748,Performance,load,load,2748,pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2782,Performance,load,load,2782,and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Core; Failed to load module Rint; Failed to load module RIO; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module F,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2813,Performance,load,load,2813, to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Core; Failed to load module Rint; Failed to load module RIO; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ge,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2839,Performance,load,load,2839,ed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Core; Failed to load module Rint; Failed to load module RIO; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module R,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2867,Performance,load,load,2867,d to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Core; Failed to load module Rint; Failed to load module RIO; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load modu,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2902,Performance,load,load,2902,s; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Core; Failed to load module Rint; Failed to load module RIO; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiB,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2934,Performance,load,load,2934,undation_C; Failed to load module ROOT_Rtypes; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Core; Failed to load module Rint; Failed to load module RIO; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2964,Performance,load,load,2964,ule ROOT_Rtypes; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Core; Failed to load module Rint; Failed to load module RIO; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load modul,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:2992,Performance,load,load,2992,oad module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Core; Failed to load module Rint; Failed to load module RIO; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3020,Performance,load,load,3020,tage1_NoRTTI; Failed to load module Core; Failed to load module Rint; Failed to load module RIO; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3051,Performance,load,load,3051,dule Core; Failed to load module Rint; Failed to load module RIO; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3094,Performance,load,load,3094,ed to load module RIO; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtyp,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3122,Performance,load,load,3122,d to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module st,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3153,Performance,load,load,3153,ed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHi,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3187,Performance,load,load,3187,load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3218,Performance,load,load,3218,ed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO;,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3245,Performance,load,load,3245,ailed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module Proo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3275,Performance,load,load,3275,f; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3302,Performance,load,load,3302,t; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3330,Performance,load,load,3330,tPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3364,Performance,load,load,3364,MVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3398,Performance,load,load,3398, Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to lo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3425,Performance,load,load,3425,P; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to l,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3462,Performance,load,load,3462,iled to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3491,Performance,load,load,3491,s; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3524,Performance,load,load,3524,w; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3554,Performance,load,load,3554,; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to l,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3582,Performance,load,load,3582,NTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to lo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3610,Performance,load,load,3610,e ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Fai,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3643,Performance,load,load,3643,Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Fai,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3676,Performance,load,load,3676,iled to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3708,Performance,load,load,3708,to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; F,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3743,Performance,load,load,3743,to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3772,Performance,load,load,3772,iled to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Fai,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3802,Performance,load,load,3802,ailed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Fai,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3829,Performance,load,load,3829,iled to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Fa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3861,Performance,load,load,3861, to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3889,Performance,load,load,3889, Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3919,Performance,load,load,3919,m; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Fa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3957,Performance,load,load,3957,d to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to lo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:3991,Performance,load,load,3991,oad module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to lo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4018,Performance,load,load,4018,load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Ext,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4047,Performance,load,load,4047,o load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module Mat,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4076,Performance,load,load,4076,sics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4111,Performance,load,load,4111,ailed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGu,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4138,Performance,load,load,4138,i; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module R,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4174,Performance,load,load,4174, Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module RO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4205,Performance,load,load,4205, Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module T,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4232,Performance,load,load,4232, Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load m,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4267,Performance,load,load,4267,ed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module R,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4298,Performance,load,load,4298,o load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed t,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4326,Performance,load,load,4326,o load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4367,Performance,load,load,4367,module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed t,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4399,Performance,load,load,4399,d module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Fai,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4427,Performance,load,load,4427, module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; i,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4458,Performance,load,load,4458,o load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4497,Performance,load,load,4497,ule EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4528,Performance,load,load,4528,odule RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line incl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4556,Performance,load,load,4556, module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expecte,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4583,Performance,load,load,4583,d module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_lin,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4620,Performance,load,load,4620,XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'if,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4653,Performance,load,load,4653,MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling int,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4683,Performance,load,load,4683,le RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4720,Performance,load,load,4720,omBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; inp,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4750,Performance,load,load,4750,le Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4782,Performance,load,load,4782,FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR;,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4812,Performance,load,load,4812,Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4840,Performance,load,load,4840,ecorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: ex,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4874,Performance,load,load,4874,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4902,Performance,load,load,4902,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4930,Performance,load,load,4930,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4958,Performance,load,load,4958,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:4992,Performance,load,load,4992,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5035,Performance,load,load,5035,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5067,Performance,load,load,5067,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5097,Performance,load,load,5097,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5128,Performance,load,load,5128,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5163,Performance,load,load,5163,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5195,Performance,load,load,5195,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5229,Performance,load,load,5229,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5257,Performance,load,load,5257,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5303,Performance,load,load,5303,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5341,Performance,load,load,5341,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5372,Performance,load,load,5372,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:5409,Performance,load,load,5409,d module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:126,Testability,log,log,126,The command I'm running was simply `root` to get the interactive prompt. The full output of trying to run `1+2` is below:. ```log; $ root -b -q -x -e 1+2; input_line_1:1:2: fatal error: module 'libc' imported by AST file '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/std.pcm' found in a different module map file (/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/etc/cling/libc.modulemap) than when the importing AST file was built (/home/cburr/mambaforge/conda-bld/root_1609268594446/work/build-dir/etc/cling/libc.modulemap); #include <new>; ^; input_line_1:1:2: note: imported by module 'std' in '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/std.pcm'; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; 'at_quick_exit' not defined; <<< cling interactive line includer >>>: fatal error: module file '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/libc.pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-752250076:28,Usability,simpl,simply,28,The command I'm running was simply `root` to get the interactive prompt. The full output of trying to run `1+2` is below:. ```log; $ root -b -q -x -e 1+2; input_line_1:1:2: fatal error: module 'libc' imported by AST file '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/std.pcm' found in a different module map file (/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/etc/cling/libc.modulemap) than when the importing AST file was built (/home/cburr/mambaforge/conda-bld/root_1609268594446/work/build-dir/etc/cling/libc.modulemap); #include <new>; ^; input_line_1:1:2: note: imported by module 'std' in '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/std.pcm'; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; 'at_quick_exit' not defined; <<< cling interactive line includer >>>: fatal error: module file '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/libc.pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076
https://github.com/root-project/root/pull/6385#issuecomment-776591942:347,Availability,error,error,347,"> > > @SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.; > > ; > > ; > > I tested this last week. Unfortunately, the CUDA mode does not work at the moment. If I try to compile a CUDA kernel, I get a segmentation error:; > > ```; > > Singularity> ./cling -xcuda; > > warning: argument unused during compilation: '-c'; > > ; > > ****************** CLING ******************; > > * Type C++ code and press enter to run it *; > > * Type .q to exit *; > > *******************************************; > > [cling]$ __global__ void g(int * out){ *out=43;}; > > #0 0x0000000000b80b2a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (./cling+0xb80b2a); > > #1 0x0000000000b7e9cc llvm::sys::RunSignalHandlers() (./cling+0xb7e9cc); > > #2 0x0000000000b7eb39 SignalHandler(int) (./cling+0xb7eb39); > > #3 0x00007f024c2c54c0 (/lib/x86_64-linux-gnu/libc.so.6+0x354c0); > > #4 0x0000000000b4b092 llvm::Twine::str[abi:cxx11]() const (./cling+0xb4b092); > > #5 0x0000000000b456e9 llvm::Triple::Triple(llvm::Twine const&) (./cling+0xb456e9); > > #6 0x0000000000b80ce9 llvm::TargetRegistry::lookupTarget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (./cling+0xb80ce9); > > #7 0x0000000000ab412e cling::IncrementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResul",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-776591942
https://github.com/root-project/root/pull/6385#issuecomment-776591942:2409,Availability,fault,fault,2409,"crementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (./cling+0xb10d17); > > #11 0x0000000000bad161 cling::UserInterface::runInteractively(bool) (./cling+0xbad161); > > #12 0x00000000009d28b7 main (./cling+0x9d28b7); > > #13 0x00007f024c2b0840 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20840); > > #14 0x0000000000a32349 _start (./cling+0xa32349); > > Stack dump:; > > 0.	Program arguments: ./cling -xcuda ; > > Segmentation fault (core dumped); > > ```; > ; > There is nothing obvious for me happening wrong in the `CIFactory.cpp`. Something likely changed in the cuda setup in llvm9. Let me know if we should make a joint debug session.; > ; > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > ; > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use. The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a no",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-776591942
https://github.com/root-project/root/pull/6385#issuecomment-776591942:2920,Modifiability,config,configure,2920,"__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (./cling+0xb10d17); > > #11 0x0000000000bad161 cling::UserInterface::runInteractively(bool) (./cling+0xbad161); > > #12 0x00000000009d28b7 main (./cling+0x9d28b7); > > #13 0x00007f024c2b0840 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20840); > > #14 0x0000000000a32349 _start (./cling+0xa32349); > > Stack dump:; > > 0.	Program arguments: ./cling -xcuda ; > > Segmentation fault (core dumped); > > ```; > ; > There is nothing obvious for me happening wrong in the `CIFactory.cpp`. Something likely changed in the cuda setup in llvm9. Let me know if we should make a joint debug session.; > ; > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > ; > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use. The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then, I simply have to spent more time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-776591942
https://github.com/root-project/root/pull/6385#issuecomment-776591942:58,Testability,test,test,58,"> > > @SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.; > > ; > > ; > > I tested this last week. Unfortunately, the CUDA mode does not work at the moment. If I try to compile a CUDA kernel, I get a segmentation error:; > > ```; > > Singularity> ./cling -xcuda; > > warning: argument unused during compilation: '-c'; > > ; > > ****************** CLING ******************; > > * Type C++ code and press enter to run it *; > > * Type .q to exit *; > > *******************************************; > > [cling]$ __global__ void g(int * out){ *out=43;}; > > #0 0x0000000000b80b2a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (./cling+0xb80b2a); > > #1 0x0000000000b7e9cc llvm::sys::RunSignalHandlers() (./cling+0xb7e9cc); > > #2 0x0000000000b7eb39 SignalHandler(int) (./cling+0xb7eb39); > > #3 0x00007f024c2c54c0 (/lib/x86_64-linux-gnu/libc.so.6+0x354c0); > > #4 0x0000000000b4b092 llvm::Twine::str[abi:cxx11]() const (./cling+0xb4b092); > > #5 0x0000000000b456e9 llvm::Triple::Triple(llvm::Twine const&) (./cling+0xb456e9); > > #6 0x0000000000b80ce9 llvm::TargetRegistry::lookupTarget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (./cling+0xb80ce9); > > #7 0x0000000000ab412e cling::IncrementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResul",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-776591942
https://github.com/root-project/root/pull/6385#issuecomment-776591942:83,Testability,test,test,83,"> > > @SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.; > > ; > > ; > > I tested this last week. Unfortunately, the CUDA mode does not work at the moment. If I try to compile a CUDA kernel, I get a segmentation error:; > > ```; > > Singularity> ./cling -xcuda; > > warning: argument unused during compilation: '-c'; > > ; > > ****************** CLING ******************; > > * Type C++ code and press enter to run it *; > > * Type .q to exit *; > > *******************************************; > > [cling]$ __global__ void g(int * out){ *out=43;}; > > #0 0x0000000000b80b2a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (./cling+0xb80b2a); > > #1 0x0000000000b7e9cc llvm::sys::RunSignalHandlers() (./cling+0xb7e9cc); > > #2 0x0000000000b7eb39 SignalHandler(int) (./cling+0xb7eb39); > > #3 0x00007f024c2c54c0 (/lib/x86_64-linux-gnu/libc.so.6+0x354c0); > > #4 0x0000000000b4b092 llvm::Twine::str[abi:cxx11]() const (./cling+0xb4b092); > > #5 0x0000000000b456e9 llvm::Triple::Triple(llvm::Twine const&) (./cling+0xb456e9); > > #6 0x0000000000b80ce9 llvm::TargetRegistry::lookupTarget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (./cling+0xb80ce9); > > #7 0x0000000000ab412e cling::IncrementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResul",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-776591942
https://github.com/root-project/root/pull/6385#issuecomment-776591942:210,Testability,test,tested,210,"> > > @SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.; > > ; > > ; > > I tested this last week. Unfortunately, the CUDA mode does not work at the moment. If I try to compile a CUDA kernel, I get a segmentation error:; > > ```; > > Singularity> ./cling -xcuda; > > warning: argument unused during compilation: '-c'; > > ; > > ****************** CLING ******************; > > * Type C++ code and press enter to run it *; > > * Type .q to exit *; > > *******************************************; > > [cling]$ __global__ void g(int * out){ *out=43;}; > > #0 0x0000000000b80b2a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (./cling+0xb80b2a); > > #1 0x0000000000b7e9cc llvm::sys::RunSignalHandlers() (./cling+0xb7e9cc); > > #2 0x0000000000b7eb39 SignalHandler(int) (./cling+0xb7eb39); > > #3 0x00007f024c2c54c0 (/lib/x86_64-linux-gnu/libc.so.6+0x354c0); > > #4 0x0000000000b4b092 llvm::Twine::str[abi:cxx11]() const (./cling+0xb4b092); > > #5 0x0000000000b456e9 llvm::Triple::Triple(llvm::Twine const&) (./cling+0xb456e9); > > #6 0x0000000000b80ce9 llvm::TargetRegistry::lookupTarget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (./cling+0xb80ce9); > > #7 0x0000000000ab412e cling::IncrementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResul",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-776591942
https://github.com/root-project/root/pull/6385#issuecomment-776591942:2763,Testability,test,test,2763,"ter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (./cling+0xb10d17); > > #11 0x0000000000bad161 cling::UserInterface::runInteractively(bool) (./cling+0xbad161); > > #12 0x00000000009d28b7 main (./cling+0x9d28b7); > > #13 0x00007f024c2b0840 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20840); > > #14 0x0000000000a32349 _start (./cling+0xa32349); > > Stack dump:; > > 0.	Program arguments: ./cling -xcuda ; > > Segmentation fault (core dumped); > > ```; > ; > There is nothing obvious for me happening wrong in the `CIFactory.cpp`. Something likely changed in the cuda setup in llvm9. Let me know if we should make a joint debug session.; > ; > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > ; > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use. The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then, I simply have t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-776591942
https://github.com/root-project/root/pull/6385#issuecomment-776591942:2804,Testability,test,test,2804,"__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (./cling+0xb10d17); > > #11 0x0000000000bad161 cling::UserInterface::runInteractively(bool) (./cling+0xbad161); > > #12 0x00000000009d28b7 main (./cling+0x9d28b7); > > #13 0x00007f024c2b0840 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20840); > > #14 0x0000000000a32349 _start (./cling+0xa32349); > > Stack dump:; > > 0.	Program arguments: ./cling -xcuda ; > > Segmentation fault (core dumped); > > ```; > ; > There is nothing obvious for me happening wrong in the `CIFactory.cpp`. Something likely changed in the cuda setup in llvm9. Let me know if we should make a joint debug session.; > ; > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > ; > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use. The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then, I simply have to spent more time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-776591942
https://github.com/root-project/root/pull/6385#issuecomment-776591942:2864,Testability,test,test,2864,"__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (./cling+0xb10d17); > > #11 0x0000000000bad161 cling::UserInterface::runInteractively(bool) (./cling+0xbad161); > > #12 0x00000000009d28b7 main (./cling+0x9d28b7); > > #13 0x00007f024c2b0840 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20840); > > #14 0x0000000000a32349 _start (./cling+0xa32349); > > Stack dump:; > > 0.	Program arguments: ./cling -xcuda ; > > Segmentation fault (core dumped); > > ```; > ; > There is nothing obvious for me happening wrong in the `CIFactory.cpp`. Something likely changed in the cuda setup in llvm9. Let me know if we should make a joint debug session.; > ; > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > ; > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use. The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then, I simply have to spent more time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-776591942
https://github.com/root-project/root/pull/6385#issuecomment-776591942:3714,Usability,simpl,simply,3714,"__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (./cling+0xb10d17); > > #11 0x0000000000bad161 cling::UserInterface::runInteractively(bool) (./cling+0xbad161); > > #12 0x00000000009d28b7 main (./cling+0x9d28b7); > > #13 0x00007f024c2b0840 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20840); > > #14 0x0000000000a32349 _start (./cling+0xa32349); > > Stack dump:; > > 0.	Program arguments: ./cling -xcuda ; > > Segmentation fault (core dumped); > > ```; > ; > There is nothing obvious for me happening wrong in the `CIFactory.cpp`. Something likely changed in the cuda setup in llvm9. Let me know if we should make a joint debug session.; > ; > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > ; > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use. The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then, I simply have to spent more time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-776591942
https://github.com/root-project/root/pull/6385#issuecomment-777052629:355,Availability,error,error,355,"> > > > @SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.; > > > ; > > > ; > > > I tested this last week. Unfortunately, the CUDA mode does not work at the moment. If I try to compile a CUDA kernel, I get a segmentation error:; > > > ```; > > > Singularity> ./cling -xcuda; > > > warning: argument unused during compilation: '-c'; > > > ; > > > ****************** CLING ******************; > > > * Type C++ code and press enter to run it *; > > > * Type .q to exit *; > > > *******************************************; > > > [cling]$ __global__ void g(int * out){ *out=43;}; > > > #0 0x0000000000b80b2a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (./cling+0xb80b2a); > > > #1 0x0000000000b7e9cc llvm::sys::RunSignalHandlers() (./cling+0xb7e9cc); > > > #2 0x0000000000b7eb39 SignalHandler(int) (./cling+0xb7eb39); > > > #3 0x00007f024c2c54c0 (/lib/x86_64-linux-gnu/libc.so.6+0x354c0); > > > #4 0x0000000000b4b092 llvm::Twine::str[abi:cxx11]() const (./cling+0xb4b092); > > > #5 0x0000000000b456e9 llvm::Triple::Triple(llvm::Twine const&) (./cling+0xb456e9); > > > #6 0x0000000000b80ce9 llvm::TargetRegistry::lookupTarget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (./cling+0xb80ce9); > > > #7 0x0000000000ab412e cling::IncrementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); > > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777052629
https://github.com/root-project/root/pull/6385#issuecomment-777052629:2471,Availability,fault,fault,2471,"er::generatePTX() (./cling+0xab412e); > > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (./cling+0xb10d17); > > > #11 0x0000000000bad161 cling::UserInterface::runInteractively(bool) (./cling+0xbad161); > > > #12 0x00000000009d28b7 main (./cling+0x9d28b7); > > > #13 0x00007f024c2b0840 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20840); > > > #14 0x0000000000a32349 _start (./cling+0xa32349); > > > Stack dump:; > > > 0.	Program arguments: ./cling -xcuda ; > > > Segmentation fault (core dumped); > > > ```; > > ; > > ; > > There is nothing obvious for me happening wrong in the `CIFactory.cpp`. Something likely changed in the cuda setup in llvm9. Let me know if we should make a joint debug session.; > > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > > ; > > ; > > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use.; > ; > The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777052629
https://github.com/root-project/root/pull/6385#issuecomment-777052629:3002,Modifiability,config,configure,3002,"ionResult&, cling::Value*, bool) (./cling+0xb10d17); > > > #11 0x0000000000bad161 cling::UserInterface::runInteractively(bool) (./cling+0xbad161); > > > #12 0x00000000009d28b7 main (./cling+0x9d28b7); > > > #13 0x00007f024c2b0840 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20840); > > > #14 0x0000000000a32349 _start (./cling+0xa32349); > > > Stack dump:; > > > 0.	Program arguments: ./cling -xcuda ; > > > Segmentation fault (core dumped); > > > ```; > > ; > > ; > > There is nothing obvious for me happening wrong in the `CIFactory.cpp`. Something likely changed in the cuda setup in llvm9. Let me know if we should make a joint debug session.; > > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > > ; > > ; > > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use.; > ; > The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then, I simply have to spent more time. I found the problem and a possible fix. The problem happens in the Interpreter instance for the device code. In the function `IncrementalExecutor::runStaticInitializersOnce()`, there is the line `llvm::orc:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777052629
https://github.com/root-project/root/pull/6385#issuecomment-777052629:60,Testability,test,test,60,"> > > > @SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.; > > > ; > > > ; > > > I tested this last week. Unfortunately, the CUDA mode does not work at the moment. If I try to compile a CUDA kernel, I get a segmentation error:; > > > ```; > > > Singularity> ./cling -xcuda; > > > warning: argument unused during compilation: '-c'; > > > ; > > > ****************** CLING ******************; > > > * Type C++ code and press enter to run it *; > > > * Type .q to exit *; > > > *******************************************; > > > [cling]$ __global__ void g(int * out){ *out=43;}; > > > #0 0x0000000000b80b2a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (./cling+0xb80b2a); > > > #1 0x0000000000b7e9cc llvm::sys::RunSignalHandlers() (./cling+0xb7e9cc); > > > #2 0x0000000000b7eb39 SignalHandler(int) (./cling+0xb7eb39); > > > #3 0x00007f024c2c54c0 (/lib/x86_64-linux-gnu/libc.so.6+0x354c0); > > > #4 0x0000000000b4b092 llvm::Twine::str[abi:cxx11]() const (./cling+0xb4b092); > > > #5 0x0000000000b456e9 llvm::Triple::Triple(llvm::Twine const&) (./cling+0xb456e9); > > > #6 0x0000000000b80ce9 llvm::TargetRegistry::lookupTarget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (./cling+0xb80ce9); > > > #7 0x0000000000ab412e cling::IncrementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); > > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777052629
https://github.com/root-project/root/pull/6385#issuecomment-777052629:85,Testability,test,test,85,"> > > > @SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.; > > > ; > > > ; > > > I tested this last week. Unfortunately, the CUDA mode does not work at the moment. If I try to compile a CUDA kernel, I get a segmentation error:; > > > ```; > > > Singularity> ./cling -xcuda; > > > warning: argument unused during compilation: '-c'; > > > ; > > > ****************** CLING ******************; > > > * Type C++ code and press enter to run it *; > > > * Type .q to exit *; > > > *******************************************; > > > [cling]$ __global__ void g(int * out){ *out=43;}; > > > #0 0x0000000000b80b2a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (./cling+0xb80b2a); > > > #1 0x0000000000b7e9cc llvm::sys::RunSignalHandlers() (./cling+0xb7e9cc); > > > #2 0x0000000000b7eb39 SignalHandler(int) (./cling+0xb7eb39); > > > #3 0x00007f024c2c54c0 (/lib/x86_64-linux-gnu/libc.so.6+0x354c0); > > > #4 0x0000000000b4b092 llvm::Twine::str[abi:cxx11]() const (./cling+0xb4b092); > > > #5 0x0000000000b456e9 llvm::Triple::Triple(llvm::Twine const&) (./cling+0xb456e9); > > > #6 0x0000000000b80ce9 llvm::TargetRegistry::lookupTarget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (./cling+0xb80ce9); > > > #7 0x0000000000ab412e cling::IncrementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); > > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777052629
https://github.com/root-project/root/pull/6385#issuecomment-777052629:218,Testability,test,tested,218,"> > > > @SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.; > > > ; > > > ; > > > I tested this last week. Unfortunately, the CUDA mode does not work at the moment. If I try to compile a CUDA kernel, I get a segmentation error:; > > > ```; > > > Singularity> ./cling -xcuda; > > > warning: argument unused during compilation: '-c'; > > > ; > > > ****************** CLING ******************; > > > * Type C++ code and press enter to run it *; > > > * Type .q to exit *; > > > *******************************************; > > > [cling]$ __global__ void g(int * out){ *out=43;}; > > > #0 0x0000000000b80b2a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (./cling+0xb80b2a); > > > #1 0x0000000000b7e9cc llvm::sys::RunSignalHandlers() (./cling+0xb7e9cc); > > > #2 0x0000000000b7eb39 SignalHandler(int) (./cling+0xb7eb39); > > > #3 0x00007f024c2c54c0 (/lib/x86_64-linux-gnu/libc.so.6+0x354c0); > > > #4 0x0000000000b4b092 llvm::Twine::str[abi:cxx11]() const (./cling+0xb4b092); > > > #5 0x0000000000b456e9 llvm::Triple::Triple(llvm::Twine const&) (./cling+0xb456e9); > > > #6 0x0000000000b80ce9 llvm::TargetRegistry::lookupTarget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (./cling+0xb80ce9); > > > #7 0x0000000000ab412e cling::IncrementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); > > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777052629
https://github.com/root-project/root/pull/6385#issuecomment-777052629:2835,Testability,test,test,2835,":basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (./cling+0xb10d17); > > > #11 0x0000000000bad161 cling::UserInterface::runInteractively(bool) (./cling+0xbad161); > > > #12 0x00000000009d28b7 main (./cling+0x9d28b7); > > > #13 0x00007f024c2b0840 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20840); > > > #14 0x0000000000a32349 _start (./cling+0xa32349); > > > Stack dump:; > > > 0.	Program arguments: ./cling -xcuda ; > > > Segmentation fault (core dumped); > > > ```; > > ; > > ; > > There is nothing obvious for me happening wrong in the `CIFactory.cpp`. Something likely changed in the cuda setup in llvm9. Let me know if we should make a joint debug session.; > > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > > ; > > ; > > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use.; > ; > The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777052629
https://github.com/root-project/root/pull/6385#issuecomment-777052629:2876,Testability,test,test,2876,"ue*, cling::Transaction**, bool) (./cling+0xace867); > > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (./cling+0xb10d17); > > > #11 0x0000000000bad161 cling::UserInterface::runInteractively(bool) (./cling+0xbad161); > > > #12 0x00000000009d28b7 main (./cling+0x9d28b7); > > > #13 0x00007f024c2b0840 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20840); > > > #14 0x0000000000a32349 _start (./cling+0xa32349); > > > Stack dump:; > > > 0.	Program arguments: ./cling -xcuda ; > > > Segmentation fault (core dumped); > > > ```; > > ; > > ; > > There is nothing obvious for me happening wrong in the `CIFactory.cpp`. Something likely changed in the cuda setup in llvm9. Let me know if we should make a joint debug session.; > > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > > ; > > ; > > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use.; > ; > The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then, I simply have to spent more time. I found the problem and a possible fix. The proble",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777052629
https://github.com/root-project/root/pull/6385#issuecomment-777052629:2946,Testability,test,test,2946,"ionResult&, cling::Value*, bool) (./cling+0xb10d17); > > > #11 0x0000000000bad161 cling::UserInterface::runInteractively(bool) (./cling+0xbad161); > > > #12 0x00000000009d28b7 main (./cling+0x9d28b7); > > > #13 0x00007f024c2b0840 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20840); > > > #14 0x0000000000a32349 _start (./cling+0xa32349); > > > Stack dump:; > > > 0.	Program arguments: ./cling -xcuda ; > > > Segmentation fault (core dumped); > > > ```; > > ; > > ; > > There is nothing obvious for me happening wrong in the `CIFactory.cpp`. Something likely changed in the cuda setup in llvm9. Let me know if we should make a joint debug session.; > > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > > ; > > ; > > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use.; > ; > The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then, I simply have to spent more time. I found the problem and a possible fix. The problem happens in the Interpreter instance for the device code. In the function `IncrementalExecutor::runStaticInitializersOnce()`, there is the line `llvm::orc:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777052629
https://github.com/root-project/root/pull/6385#issuecomment-777052629:3803,Usability,simpl,simply,3803," make a joint debug session.; > > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > > ; > > ; > > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use.; > ; > The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then, I simply have to spent more time. I found the problem and a possible fix. The problem happens in the Interpreter instance for the device code. In the function `IncrementalExecutor::runStaticInitializersOnce()`, there is the line `llvm::orc::VModuleKey K = emitModule(T.takeModule(), T.getCompilationOpts().OptLevel);`, which removes the `llvm::Module` from the transaction. Because `generatePTX()` is called afterwards, `getLastTransaction->getModule` returns a `nullptr`. At the moment, I don't know, why the device compiler creates a static initializer on the device site. On the host site, it is necessary to register the CUDA kernel. At the moment, my solution is a if-guard in `Interpreter::executeTransaction()`:. ```C++; if(!m_Opts.CompilerOpts.CUDADevice); ExeRes = m_Executor->runStaticInitializersOnce(T);; ```. I need to verify, if this is a good solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777052629
https://github.com/root-project/root/pull/6385#issuecomment-777250984:363,Availability,error,error,363,"> > > > > @SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.; > > > > ; > > > > ; > > > > I tested this last week. Unfortunately, the CUDA mode does not work at the moment. If I try to compile a CUDA kernel, I get a segmentation error:; > > > > ```; > > > > Singularity> ./cling -xcuda; > > > > warning: argument unused during compilation: '-c'; > > > > ; > > > > ****************** CLING ******************; > > > > * Type C++ code and press enter to run it *; > > > > * Type .q to exit *; > > > > *******************************************; > > > > [cling]$ __global__ void g(int * out){ *out=43;}; > > > > #0 0x0000000000b80b2a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (./cling+0xb80b2a); > > > > #1 0x0000000000b7e9cc llvm::sys::RunSignalHandlers() (./cling+0xb7e9cc); > > > > #2 0x0000000000b7eb39 SignalHandler(int) (./cling+0xb7eb39); > > > > #3 0x00007f024c2c54c0 (/lib/x86_64-linux-gnu/libc.so.6+0x354c0); > > > > #4 0x0000000000b4b092 llvm::Twine::str[abi:cxx11]() const (./cling+0xb4b092); > > > > #5 0x0000000000b456e9 llvm::Triple::Triple(llvm::Twine const&) (./cling+0xb456e9); > > > > #6 0x0000000000b80ce9 llvm::TargetRegistry::lookupTarget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (./cling+0xb80ce9); > > > > #7 0x0000000000ab412e cling::IncrementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); > > > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > > > #10 0x0000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777250984
https://github.com/root-project/root/pull/6385#issuecomment-777250984:2533,Availability,fault,fault,2533,"ing+0xab412e); > > > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (./cling+0xb10d17); > > > > #11 0x0000000000bad161 cling::UserInterface::runInteractively(bool) (./cling+0xbad161); > > > > #12 0x00000000009d28b7 main (./cling+0x9d28b7); > > > > #13 0x00007f024c2b0840 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20840); > > > > #14 0x0000000000a32349 _start (./cling+0xa32349); > > > > Stack dump:; > > > > 0.	Program arguments: ./cling -xcuda ; > > > > Segmentation fault (core dumped); > > > > ```; > > > ; > > > ; > > > There is nothing obvious for me happening wrong in the `CIFactory.cpp`. Something likely changed in the cuda setup in llvm9. Let me know if we should make a joint debug session.; > > > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > > > ; > > > ; > > > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use.; > > ; > > ; > > The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777250984
https://github.com/root-project/root/pull/6385#issuecomment-777250984:4956,Deployability,patch,patch,4956,"ng binary ready to use.; > > ; > > ; > > The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then, I simply have to spent more time.; > ; > I found the problem and a possible fix. The problem happens in the Interpreter instance for the device code. In the function `IncrementalExecutor::runStaticInitializersOnce()`, there is the line `llvm::orc::VModuleKey K = emitModule(T.takeModule(), T.getCompilationOpts().OptLevel);`, which removes the `llvm::Module` from the transaction. Because `generatePTX()` is called afterwards, `getLastTransaction->getModule` returns a `nullptr`. At the moment, I don't know, why the device compiler creates a static initializer on the device site. On the host site, it is necessary to register the CUDA kernel. At the moment, my solution is a if-guard in `Interpreter::executeTransaction()`:; > ; > ```c++; > if(!m_Opts.CompilerOpts.CUDADevice); > ExeRes = m_Executor->runStaticInitializersOnce(T);; > ```; > ; > I need to verify, if this is a good solution. That's what I was about to say, now the JIT takes the ownership of the `llvm::Module` and then, once it is done JITing, returns it back to the transaction. I think what your patch is doing is that, it forces the JIT to run on the `llvm::Module` and return the ownership to the transaction. Maybe not the best in terms of performance, but we should review the entire model where we have Transaction holding a pointer to a `llvm::Module`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777250984
https://github.com/root-project/root/pull/6385#issuecomment-777250984:3080,Modifiability,config,configure,3080,"bool) (./cling+0xb10d17); > > > > #11 0x0000000000bad161 cling::UserInterface::runInteractively(bool) (./cling+0xbad161); > > > > #12 0x00000000009d28b7 main (./cling+0x9d28b7); > > > > #13 0x00007f024c2b0840 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20840); > > > > #14 0x0000000000a32349 _start (./cling+0xa32349); > > > > Stack dump:; > > > > 0.	Program arguments: ./cling -xcuda ; > > > > Segmentation fault (core dumped); > > > > ```; > > > ; > > > ; > > > There is nothing obvious for me happening wrong in the `CIFactory.cpp`. Something likely changed in the cuda setup in llvm9. Let me know if we should make a joint debug session.; > > > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > > > ; > > > ; > > > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use.; > > ; > > ; > > The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then, I simply have to spent more time.; > ; > I found the problem and a possible fix. The problem happens in the Interpreter instance for the device code. In the function `IncrementalExecutor::runStaticInitializersOnce()`, there is ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777250984
https://github.com/root-project/root/pull/6385#issuecomment-777250984:5103,Performance,perform,performance,5103,"ng binary ready to use.; > > ; > > ; > > The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then, I simply have to spent more time.; > ; > I found the problem and a possible fix. The problem happens in the Interpreter instance for the device code. In the function `IncrementalExecutor::runStaticInitializersOnce()`, there is the line `llvm::orc::VModuleKey K = emitModule(T.takeModule(), T.getCompilationOpts().OptLevel);`, which removes the `llvm::Module` from the transaction. Because `generatePTX()` is called afterwards, `getLastTransaction->getModule` returns a `nullptr`. At the moment, I don't know, why the device compiler creates a static initializer on the device site. On the host site, it is necessary to register the CUDA kernel. At the moment, my solution is a if-guard in `Interpreter::executeTransaction()`:; > ; > ```c++; > if(!m_Opts.CompilerOpts.CUDADevice); > ExeRes = m_Executor->runStaticInitializersOnce(T);; > ```; > ; > I need to verify, if this is a good solution. That's what I was about to say, now the JIT takes the ownership of the `llvm::Module` and then, once it is done JITing, returns it back to the transaction. I think what your patch is doing is that, it forces the JIT to run on the `llvm::Module` and return the ownership to the transaction. Maybe not the best in terms of performance, but we should review the entire model where we have Transaction holding a pointer to a `llvm::Module`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777250984
https://github.com/root-project/root/pull/6385#issuecomment-777250984:62,Testability,test,test,62,"> > > > > @SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.; > > > > ; > > > > ; > > > > I tested this last week. Unfortunately, the CUDA mode does not work at the moment. If I try to compile a CUDA kernel, I get a segmentation error:; > > > > ```; > > > > Singularity> ./cling -xcuda; > > > > warning: argument unused during compilation: '-c'; > > > > ; > > > > ****************** CLING ******************; > > > > * Type C++ code and press enter to run it *; > > > > * Type .q to exit *; > > > > *******************************************; > > > > [cling]$ __global__ void g(int * out){ *out=43;}; > > > > #0 0x0000000000b80b2a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (./cling+0xb80b2a); > > > > #1 0x0000000000b7e9cc llvm::sys::RunSignalHandlers() (./cling+0xb7e9cc); > > > > #2 0x0000000000b7eb39 SignalHandler(int) (./cling+0xb7eb39); > > > > #3 0x00007f024c2c54c0 (/lib/x86_64-linux-gnu/libc.so.6+0x354c0); > > > > #4 0x0000000000b4b092 llvm::Twine::str[abi:cxx11]() const (./cling+0xb4b092); > > > > #5 0x0000000000b456e9 llvm::Triple::Triple(llvm::Twine const&) (./cling+0xb456e9); > > > > #6 0x0000000000b80ce9 llvm::TargetRegistry::lookupTarget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (./cling+0xb80ce9); > > > > #7 0x0000000000ab412e cling::IncrementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); > > > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > > > #10 0x0000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777250984
https://github.com/root-project/root/pull/6385#issuecomment-777250984:87,Testability,test,test,87,"> > > > > @SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.; > > > > ; > > > > ; > > > > I tested this last week. Unfortunately, the CUDA mode does not work at the moment. If I try to compile a CUDA kernel, I get a segmentation error:; > > > > ```; > > > > Singularity> ./cling -xcuda; > > > > warning: argument unused during compilation: '-c'; > > > > ; > > > > ****************** CLING ******************; > > > > * Type C++ code and press enter to run it *; > > > > * Type .q to exit *; > > > > *******************************************; > > > > [cling]$ __global__ void g(int * out){ *out=43;}; > > > > #0 0x0000000000b80b2a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (./cling+0xb80b2a); > > > > #1 0x0000000000b7e9cc llvm::sys::RunSignalHandlers() (./cling+0xb7e9cc); > > > > #2 0x0000000000b7eb39 SignalHandler(int) (./cling+0xb7eb39); > > > > #3 0x00007f024c2c54c0 (/lib/x86_64-linux-gnu/libc.so.6+0x354c0); > > > > #4 0x0000000000b4b092 llvm::Twine::str[abi:cxx11]() const (./cling+0xb4b092); > > > > #5 0x0000000000b456e9 llvm::Triple::Triple(llvm::Twine const&) (./cling+0xb456e9); > > > > #6 0x0000000000b80ce9 llvm::TargetRegistry::lookupTarget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (./cling+0xb80ce9); > > > > #7 0x0000000000ab412e cling::IncrementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); > > > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > > > #10 0x0000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777250984
https://github.com/root-project/root/pull/6385#issuecomment-777250984:226,Testability,test,tested,226,"> > > > > @SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.; > > > > ; > > > > ; > > > > I tested this last week. Unfortunately, the CUDA mode does not work at the moment. If I try to compile a CUDA kernel, I get a segmentation error:; > > > > ```; > > > > Singularity> ./cling -xcuda; > > > > warning: argument unused during compilation: '-c'; > > > > ; > > > > ****************** CLING ******************; > > > > * Type C++ code and press enter to run it *; > > > > * Type .q to exit *; > > > > *******************************************; > > > > [cling]$ __global__ void g(int * out){ *out=43;}; > > > > #0 0x0000000000b80b2a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (./cling+0xb80b2a); > > > > #1 0x0000000000b7e9cc llvm::sys::RunSignalHandlers() (./cling+0xb7e9cc); > > > > #2 0x0000000000b7eb39 SignalHandler(int) (./cling+0xb7eb39); > > > > #3 0x00007f024c2c54c0 (/lib/x86_64-linux-gnu/libc.so.6+0x354c0); > > > > #4 0x0000000000b4b092 llvm::Twine::str[abi:cxx11]() const (./cling+0xb4b092); > > > > #5 0x0000000000b456e9 llvm::Triple::Triple(llvm::Twine const&) (./cling+0xb456e9); > > > > #6 0x0000000000b80ce9 llvm::TargetRegistry::lookupTarget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (./cling+0xb80ce9); > > > > #7 0x0000000000ab412e cling::IncrementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); > > > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > > > #10 0x0000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777250984
https://github.com/root-project/root/pull/6385#issuecomment-777250984:2907,Testability,test,test,2907,"har_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (./cling+0xb10d17); > > > > #11 0x0000000000bad161 cling::UserInterface::runInteractively(bool) (./cling+0xbad161); > > > > #12 0x00000000009d28b7 main (./cling+0x9d28b7); > > > > #13 0x00007f024c2b0840 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20840); > > > > #14 0x0000000000a32349 _start (./cling+0xa32349); > > > > Stack dump:; > > > > 0.	Program arguments: ./cling -xcuda ; > > > > Segmentation fault (core dumped); > > > > ```; > > > ; > > > ; > > > There is nothing obvious for me happening wrong in the `CIFactory.cpp`. Something likely changed in the cuda setup in llvm9. Let me know if we should make a joint debug session.; > > > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > > > ; > > > ; > > > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use.; > > ; > > ; > > The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777250984
https://github.com/root-project/root/pull/6385#issuecomment-777250984:2948,Testability,test,test,2948," bool) (./cling+0xace867); > > > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (./cling+0xb10d17); > > > > #11 0x0000000000bad161 cling::UserInterface::runInteractively(bool) (./cling+0xbad161); > > > > #12 0x00000000009d28b7 main (./cling+0x9d28b7); > > > > #13 0x00007f024c2b0840 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20840); > > > > #14 0x0000000000a32349 _start (./cling+0xa32349); > > > > Stack dump:; > > > > 0.	Program arguments: ./cling -xcuda ; > > > > Segmentation fault (core dumped); > > > > ```; > > > ; > > > ; > > > There is nothing obvious for me happening wrong in the `CIFactory.cpp`. Something likely changed in the cuda setup in llvm9. Let me know if we should make a joint debug session.; > > > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > > > ; > > > ; > > > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use.; > > ; > > ; > > The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then, I simply have to spent more time.; > ; > I found the problem and a p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777250984
https://github.com/root-project/root/pull/6385#issuecomment-777250984:3024,Testability,test,test,3024,"bool) (./cling+0xb10d17); > > > > #11 0x0000000000bad161 cling::UserInterface::runInteractively(bool) (./cling+0xbad161); > > > > #12 0x00000000009d28b7 main (./cling+0x9d28b7); > > > > #13 0x00007f024c2b0840 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20840); > > > > #14 0x0000000000a32349 _start (./cling+0xa32349); > > > > Stack dump:; > > > > 0.	Program arguments: ./cling -xcuda ; > > > > Segmentation fault (core dumped); > > > > ```; > > > ; > > > ; > > > There is nothing obvious for me happening wrong in the `CIFactory.cpp`. Something likely changed in the cuda setup in llvm9. Let me know if we should make a joint debug session.; > > > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > > > ; > > > ; > > > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use.; > > ; > > ; > > The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then, I simply have to spent more time.; > ; > I found the problem and a possible fix. The problem happens in the Interpreter instance for the device code. In the function `IncrementalExecutor::runStaticInitializersOnce()`, there is ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777250984
https://github.com/root-project/root/pull/6385#issuecomment-777250984:3891,Usability,simpl,simply,3891,"t my test is based on. So, my next step is to test the CUDA mode with the root version.; > > > ; > > > ; > > > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use.; > > ; > > ; > > The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then, I simply have to spent more time.; > ; > I found the problem and a possible fix. The problem happens in the Interpreter instance for the device code. In the function `IncrementalExecutor::runStaticInitializersOnce()`, there is the line `llvm::orc::VModuleKey K = emitModule(T.takeModule(), T.getCompilationOpts().OptLevel);`, which removes the `llvm::Module` from the transaction. Because `generatePTX()` is called afterwards, `getLastTransaction->getModule` returns a `nullptr`. At the moment, I don't know, why the device compiler creates a static initializer on the device site. On the host site, it is necessary to register the CUDA kernel. At the moment, my solution is a if-guard in `Interpreter::executeTransaction()`:; > ; > ```c++; > if(!m_Opts.CompilerOpts.CUDADevice); > ExeRes = m_Executor->runStaticInitializersOnce(T);; > ```; > ; > I need to verify, if this is a good solution. That's what I was about to say, now the JIT takes the ownership of the `llvm::Module` and then, once it is done JITing, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777250984
https://github.com/root-project/root/pull/6385#issuecomment-777286355:183,Deployability,patch,patch,183,"> That's what I was about to say, now the JIT takes the ownership of the `llvm::Module` and then, once it is done JITing, returns it back to the transaction.; > ; > I think what your patch is doing is that, it forces the JIT to run on the `llvm::Module` and return the ownership to the transaction. Maybe not the best in terms of performance, but we should review the entire model where we have Transaction holding a pointer to a `llvm::Module`... I would not say, that the ownership model is the problem in my case. I implemented the device interpreter not well. Most of the functions of the Class `IncrementalCUDADeviceCompiler` should be integrated in an inherited version of `cling::Interprerter`. I discussed this already with Axel [here](https://github.com/root-project/cling/pull/284#discussion_r330985700). So, if the implementation would be clear, the incremental executor should never executed in the device interpreter, because the device code is not direct execute. The code is indirect executed via library function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777286355
https://github.com/root-project/root/pull/6385#issuecomment-777286355:641,Deployability,integrat,integrated,641,"> That's what I was about to say, now the JIT takes the ownership of the `llvm::Module` and then, once it is done JITing, returns it back to the transaction.; > ; > I think what your patch is doing is that, it forces the JIT to run on the `llvm::Module` and return the ownership to the transaction. Maybe not the best in terms of performance, but we should review the entire model where we have Transaction holding a pointer to a `llvm::Module`... I would not say, that the ownership model is the problem in my case. I implemented the device interpreter not well. Most of the functions of the Class `IncrementalCUDADeviceCompiler` should be integrated in an inherited version of `cling::Interprerter`. I discussed this already with Axel [here](https://github.com/root-project/cling/pull/284#discussion_r330985700). So, if the implementation would be clear, the incremental executor should never executed in the device interpreter, because the device code is not direct execute. The code is indirect executed via library function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777286355
https://github.com/root-project/root/pull/6385#issuecomment-777286355:641,Integrability,integrat,integrated,641,"> That's what I was about to say, now the JIT takes the ownership of the `llvm::Module` and then, once it is done JITing, returns it back to the transaction.; > ; > I think what your patch is doing is that, it forces the JIT to run on the `llvm::Module` and return the ownership to the transaction. Maybe not the best in terms of performance, but we should review the entire model where we have Transaction holding a pointer to a `llvm::Module`... I would not say, that the ownership model is the problem in my case. I implemented the device interpreter not well. Most of the functions of the Class `IncrementalCUDADeviceCompiler` should be integrated in an inherited version of `cling::Interprerter`. I discussed this already with Axel [here](https://github.com/root-project/cling/pull/284#discussion_r330985700). So, if the implementation would be clear, the incremental executor should never executed in the device interpreter, because the device code is not direct execute. The code is indirect executed via library function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777286355
https://github.com/root-project/root/pull/6385#issuecomment-777286355:658,Modifiability,inherit,inherited,658,"> That's what I was about to say, now the JIT takes the ownership of the `llvm::Module` and then, once it is done JITing, returns it back to the transaction.; > ; > I think what your patch is doing is that, it forces the JIT to run on the `llvm::Module` and return the ownership to the transaction. Maybe not the best in terms of performance, but we should review the entire model where we have Transaction holding a pointer to a `llvm::Module`... I would not say, that the ownership model is the problem in my case. I implemented the device interpreter not well. Most of the functions of the Class `IncrementalCUDADeviceCompiler` should be integrated in an inherited version of `cling::Interprerter`. I discussed this already with Axel [here](https://github.com/root-project/cling/pull/284#discussion_r330985700). So, if the implementation would be clear, the incremental executor should never executed in the device interpreter, because the device code is not direct execute. The code is indirect executed via library function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777286355
https://github.com/root-project/root/pull/6385#issuecomment-777286355:330,Performance,perform,performance,330,"> That's what I was about to say, now the JIT takes the ownership of the `llvm::Module` and then, once it is done JITing, returns it back to the transaction.; > ; > I think what your patch is doing is that, it forces the JIT to run on the `llvm::Module` and return the ownership to the transaction. Maybe not the best in terms of performance, but we should review the entire model where we have Transaction holding a pointer to a `llvm::Module`... I would not say, that the ownership model is the problem in my case. I implemented the device interpreter not well. Most of the functions of the Class `IncrementalCUDADeviceCompiler` should be integrated in an inherited version of `cling::Interprerter`. I discussed this already with Axel [here](https://github.com/root-project/cling/pull/284#discussion_r330985700). So, if the implementation would be clear, the incremental executor should never executed in the device interpreter, because the device code is not direct execute. The code is indirect executed via library function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777286355
https://github.com/root-project/root/pull/6385#issuecomment-777286355:850,Usability,clear,clear,850,"> That's what I was about to say, now the JIT takes the ownership of the `llvm::Module` and then, once it is done JITing, returns it back to the transaction.; > ; > I think what your patch is doing is that, it forces the JIT to run on the `llvm::Module` and return the ownership to the transaction. Maybe not the best in terms of performance, but we should review the entire model where we have Transaction holding a pointer to a `llvm::Module`... I would not say, that the ownership model is the problem in my case. I implemented the device interpreter not well. Most of the functions of the Class `IncrementalCUDADeviceCompiler` should be integrated in an inherited version of `cling::Interprerter`. I discussed this already with Axel [here](https://github.com/root-project/cling/pull/284#discussion_r330985700). So, if the implementation would be clear, the incremental executor should never executed in the device interpreter, because the device code is not direct execute. The code is indirect executed via library function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777286355
https://github.com/root-project/root/issues/6393#issuecomment-696817778:136,Availability,alive,alive,136,"Performance-wise and functionality-wise would still work if for the duration of the trials, the state needed to do the matching is kept alive. That was mostly the idea with the code above, but is not how I would solve it today. So, to your points:. No, it does not need to be instantiated first. For example, if I know that a _potential_ match has a signature of `T*`, then I'm not going to ask it to match `T&`, so even before instantiation, the lookup has useful information. Right now, CPyCppyy loops over each, so will eventually match if all types are by-pointer or all are by reference, but that fails combinations. Another good case is knowing which arguments are based on template parameters and which are not, so that the non-template ones need not be varied. No, on the Python side it is fair game to provide the template arguments, and thus non-ADL happens, too. E.g. all int types are equivalent as far as Python is concerned, and although CPyCppyy will increase the template int argument if it has an argument value larger than will fit, it is not uncommon for Python users to simply fill in `int64_t` or whatever. In fact, as-is, if the prototype lookup, ie. argument dependent, fails, CPyCppyy will assume that we're dealing with the common case where all argument types are template parameters. (It's a human thing to make that order consistent, which is why it works quite often, but it is not a language requirement/guarantee.) It then asks for the full name in a non-ADL manner. ROOT/meta (lookupHelper, I think) does not even support friends, so no worries there. Whether you think it is ""eeew"" or not is irrelevant. That's highly a technical term. What is relevant is that just before the lookupHelper does a `BestViableFunction()` it has a `OverloadCandidateSet` and I can do a much better job finding my own match than can do Sema, b/c the rules to apply aren't exactly the C++ ones (the only ones that Sema knows). Unfortunately, I can't just return the set, as it's deep in th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696817778
https://github.com/root-project/root/issues/6393#issuecomment-696817778:1182,Integrability,depend,dependent,1182,"ay. So, to your points:. No, it does not need to be instantiated first. For example, if I know that a _potential_ match has a signature of `T*`, then I'm not going to ask it to match `T&`, so even before instantiation, the lookup has useful information. Right now, CPyCppyy loops over each, so will eventually match if all types are by-pointer or all are by reference, but that fails combinations. Another good case is knowing which arguments are based on template parameters and which are not, so that the non-template ones need not be varied. No, on the Python side it is fair game to provide the template arguments, and thus non-ADL happens, too. E.g. all int types are equivalent as far as Python is concerned, and although CPyCppyy will increase the template int argument if it has an argument value larger than will fit, it is not uncommon for Python users to simply fill in `int64_t` or whatever. In fact, as-is, if the prototype lookup, ie. argument dependent, fails, CPyCppyy will assume that we're dealing with the common case where all argument types are template parameters. (It's a human thing to make that order consistent, which is why it works quite often, but it is not a language requirement/guarantee.) It then asks for the full name in a non-ADL manner. ROOT/meta (lookupHelper, I think) does not even support friends, so no worries there. Whether you think it is ""eeew"" or not is irrelevant. That's highly a technical term. What is relevant is that just before the lookupHelper does a `BestViableFunction()` it has a `OverloadCandidateSet` and I can do a much better job finding my own match than can do Sema, b/c the rules to apply aren't exactly the C++ ones (the only ones that Sema knows). Unfortunately, I can't just return the set, as it's deep in the bowels of lookupHelper, whose bowels are very deep if you ever looked, and AFAICT, there is a current transaction that needs to be returned with it and maybe more. Plus if returned, there also needs to be a cleanupHelper.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696817778
https://github.com/root-project/root/issues/6393#issuecomment-696817778:1090,Usability,simpl,simply,1090,"rformance-wise and functionality-wise would still work if for the duration of the trials, the state needed to do the matching is kept alive. That was mostly the idea with the code above, but is not how I would solve it today. So, to your points:. No, it does not need to be instantiated first. For example, if I know that a _potential_ match has a signature of `T*`, then I'm not going to ask it to match `T&`, so even before instantiation, the lookup has useful information. Right now, CPyCppyy loops over each, so will eventually match if all types are by-pointer or all are by reference, but that fails combinations. Another good case is knowing which arguments are based on template parameters and which are not, so that the non-template ones need not be varied. No, on the Python side it is fair game to provide the template arguments, and thus non-ADL happens, too. E.g. all int types are equivalent as far as Python is concerned, and although CPyCppyy will increase the template int argument if it has an argument value larger than will fit, it is not uncommon for Python users to simply fill in `int64_t` or whatever. In fact, as-is, if the prototype lookup, ie. argument dependent, fails, CPyCppyy will assume that we're dealing with the common case where all argument types are template parameters. (It's a human thing to make that order consistent, which is why it works quite often, but it is not a language requirement/guarantee.) It then asks for the full name in a non-ADL manner. ROOT/meta (lookupHelper, I think) does not even support friends, so no worries there. Whether you think it is ""eeew"" or not is irrelevant. That's highly a technical term. What is relevant is that just before the lookupHelper does a `BestViableFunction()` it has a `OverloadCandidateSet` and I can do a much better job finding my own match than can do Sema, b/c the rules to apply aren't exactly the C++ ones (the only ones that Sema knows). Unfortunately, I can't just return the set, as it's deep in the ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696817778
https://github.com/root-project/root/issues/6393#issuecomment-696889449:1829,Availability,avail,available,1829,"everything in a single translation unit, vastly increasing the number of possible matches. Try going after `operator<<(std::ostream&)` or `operator==` in the global namespace, for example.). You mention int, but there are `int8_t`, `uint8_t` (these are often `char` varieties), `short`, `unsigned short`, `int16_t`, `uint16_t`, `int`, `unsigned int`, `long`, `unsigned long`, `long long`, and `unsigned long long` to try. Sure, let's do `str` to `const char*`, but that won't work for `std::string&`, and `std::string` usage is more common. But ah, what about `wchar_t`, `char16_t`, `char32_t`, `std::wstring`?. Collections, sure, but what if instead I have a tuple or list on the Python side and the template expects some STL container? Then it can not just be that STL container of say `T*`, but also the STL container of pointer any of the base classes, or worse, a mix thereof. And what if the tuple isn't actually targeting a container, but is an initalizer_list? There is often no (relevant) type information available at that point in Python, but many cases can still be resolved b/c the C++ side has some hints. For example `template<typename T, int N> void func(const std::array<T, N>&)` being given a Python tuple `(1, 2, 3)`. Absolutely clear what needs to be done for the conversion to work, but otherwise yet another case to add to the combinatorics. The above, current, situation is very much ""eeew"" and ""might not like the result."" It has also reached its breaking point, as you can see from the open bug reports and the constant hacking on workarounds. I appreciate that for the old PyROOT no-one actually seriously used templates, as folks avoided it in their interfaces b/c of non-support in the CINT world. The only client with moderately interesting templates would be RDataFrame. But in the real world, folks write modern C++ and template usage is much more pervasive. Just last week, I was looking at a massive series of variadically templated constructors: each peeled of an ar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696889449
https://github.com/root-project/root/issues/6393#issuecomment-696889449:2491,Integrability,interface,interfaces,2491,"tead I have a tuple or list on the Python side and the template expects some STL container? Then it can not just be that STL container of say `T*`, but also the STL container of pointer any of the base classes, or worse, a mix thereof. And what if the tuple isn't actually targeting a container, but is an initalizer_list? There is often no (relevant) type information available at that point in Python, but many cases can still be resolved b/c the C++ side has some hints. For example `template<typename T, int N> void func(const std::array<T, N>&)` being given a Python tuple `(1, 2, 3)`. Absolutely clear what needs to be done for the conversion to work, but otherwise yet another case to add to the combinatorics. The above, current, situation is very much ""eeew"" and ""might not like the result."" It has also reached its breaking point, as you can see from the open bug reports and the constant hacking on workarounds. I appreciate that for the old PyROOT no-one actually seriously used templates, as folks avoided it in their interfaces b/c of non-support in the CINT world. The only client with moderately interesting templates would be RDataFrame. But in the real world, folks write modern C++ and template usage is much more pervasive. Just last week, I was looking at a massive series of variadically templated constructors: each peeled of an argument to eventually initialize a grand total of 3 data members. It was just a struct with an `unsigned int`, a `double`, and an `std::array<double, 3>`. The point of the whole set of constructors being that you can use initializer syntax with the data member in every order, either the ""naked"" types or with casts of explicitly named typedefs. Oh, it works _now_, with yet another workaround, but it actually crashed `lookupHelper` (segfault and die; and it's not the only one; I have a few more for Vassil, e.g. lookup in an unnamed namespace also crashes deep, deep inside Cling/Clang). So, I consider that another strong argument against ""tryi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696889449
https://github.com/root-project/root/issues/6393#issuecomment-696889449:660,Performance,load,loading,660,"The problem with trying one after the other is that the number of combinations quickly goes through the roof. Consider that a python-side proxy can be freely converted from/to `T*`, `T**`, `T[]`, `T&`, `T&&`, and their `std::shared_ptr<>` and `std::unique_ptr<>` equivalents. So, that may mean 15 tries. If there are 3 arguments, the number of combinations is 455, faculty being what it is. Sure, I can make some educated guess to put the most likely candidates first, and that is basically when is currently going on. But a single lookupHelper call for template instantiation can already be too slow to be usable: e.g. for PCL they run (after the first 7-14s loading, which modules should fix) they are still of the order of 0.1s. (We have discussed that problem, too: contrary to normal Clang usage, Cling dumps everything in a single translation unit, vastly increasing the number of possible matches. Try going after `operator<<(std::ostream&)` or `operator==` in the global namespace, for example.). You mention int, but there are `int8_t`, `uint8_t` (these are often `char` varieties), `short`, `unsigned short`, `int16_t`, `uint16_t`, `int`, `unsigned int`, `long`, `unsigned long`, `long long`, and `unsigned long long` to try. Sure, let's do `str` to `const char*`, but that won't work for `std::string&`, and `std::string` usage is more common. But ah, what about `wchar_t`, `char16_t`, `char32_t`, `std::wstring`?. Collections, sure, but what if instead I have a tuple or list on the Python side and the template expects some STL container? Then it can not just be that STL container of say `T*`, but also the STL container of pointer any of the base classes, or worse, a mix thereof. And what if the tuple isn't actually targeting a container, but is an initalizer_list? There is often no (relevant) type information available at that point in Python, but many cases can still be resolved b/c the C++ side has some hints. For example `template<typename T, int N> void func(const std::array",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696889449
https://github.com/root-project/root/issues/6393#issuecomment-696889449:2471,Safety,avoid,avoided,2471,"tead I have a tuple or list on the Python side and the template expects some STL container? Then it can not just be that STL container of say `T*`, but also the STL container of pointer any of the base classes, or worse, a mix thereof. And what if the tuple isn't actually targeting a container, but is an initalizer_list? There is often no (relevant) type information available at that point in Python, but many cases can still be resolved b/c the C++ side has some hints. For example `template<typename T, int N> void func(const std::array<T, N>&)` being given a Python tuple `(1, 2, 3)`. Absolutely clear what needs to be done for the conversion to work, but otherwise yet another case to add to the combinatorics. The above, current, situation is very much ""eeew"" and ""might not like the result."" It has also reached its breaking point, as you can see from the open bug reports and the constant hacking on workarounds. I appreciate that for the old PyROOT no-one actually seriously used templates, as folks avoided it in their interfaces b/c of non-support in the CINT world. The only client with moderately interesting templates would be RDataFrame. But in the real world, folks write modern C++ and template usage is much more pervasive. Just last week, I was looking at a massive series of variadically templated constructors: each peeled of an argument to eventually initialize a grand total of 3 data members. It was just a struct with an `unsigned int`, a `double`, and an `std::array<double, 3>`. The point of the whole set of constructors being that you can use initializer syntax with the data member in every order, either the ""naked"" types or with casts of explicitly named typedefs. Oh, it works _now_, with yet another workaround, but it actually crashed `lookupHelper` (segfault and die; and it's not the only one; I have a few more for Vassil, e.g. lookup in an unnamed namespace also crashes deep, deep inside Cling/Clang). So, I consider that another strong argument against ""tryi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696889449
https://github.com/root-project/root/issues/6393#issuecomment-696889449:607,Usability,usab,usable,607,"The problem with trying one after the other is that the number of combinations quickly goes through the roof. Consider that a python-side proxy can be freely converted from/to `T*`, `T**`, `T[]`, `T&`, `T&&`, and their `std::shared_ptr<>` and `std::unique_ptr<>` equivalents. So, that may mean 15 tries. If there are 3 arguments, the number of combinations is 455, faculty being what it is. Sure, I can make some educated guess to put the most likely candidates first, and that is basically when is currently going on. But a single lookupHelper call for template instantiation can already be too slow to be usable: e.g. for PCL they run (after the first 7-14s loading, which modules should fix) they are still of the order of 0.1s. (We have discussed that problem, too: contrary to normal Clang usage, Cling dumps everything in a single translation unit, vastly increasing the number of possible matches. Try going after `operator<<(std::ostream&)` or `operator==` in the global namespace, for example.). You mention int, but there are `int8_t`, `uint8_t` (these are often `char` varieties), `short`, `unsigned short`, `int16_t`, `uint16_t`, `int`, `unsigned int`, `long`, `unsigned long`, `long long`, and `unsigned long long` to try. Sure, let's do `str` to `const char*`, but that won't work for `std::string&`, and `std::string` usage is more common. But ah, what about `wchar_t`, `char16_t`, `char32_t`, `std::wstring`?. Collections, sure, but what if instead I have a tuple or list on the Python side and the template expects some STL container? Then it can not just be that STL container of say `T*`, but also the STL container of pointer any of the base classes, or worse, a mix thereof. And what if the tuple isn't actually targeting a container, but is an initalizer_list? There is often no (relevant) type information available at that point in Python, but many cases can still be resolved b/c the C++ side has some hints. For example `template<typename T, int N> void func(const std::array",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696889449
https://github.com/root-project/root/issues/6393#issuecomment-696889449:2062,Usability,clear,clear,2062,"ort`, `int16_t`, `uint16_t`, `int`, `unsigned int`, `long`, `unsigned long`, `long long`, and `unsigned long long` to try. Sure, let's do `str` to `const char*`, but that won't work for `std::string&`, and `std::string` usage is more common. But ah, what about `wchar_t`, `char16_t`, `char32_t`, `std::wstring`?. Collections, sure, but what if instead I have a tuple or list on the Python side and the template expects some STL container? Then it can not just be that STL container of say `T*`, but also the STL container of pointer any of the base classes, or worse, a mix thereof. And what if the tuple isn't actually targeting a container, but is an initalizer_list? There is often no (relevant) type information available at that point in Python, but many cases can still be resolved b/c the C++ side has some hints. For example `template<typename T, int N> void func(const std::array<T, N>&)` being given a Python tuple `(1, 2, 3)`. Absolutely clear what needs to be done for the conversion to work, but otherwise yet another case to add to the combinatorics. The above, current, situation is very much ""eeew"" and ""might not like the result."" It has also reached its breaking point, as you can see from the open bug reports and the constant hacking on workarounds. I appreciate that for the old PyROOT no-one actually seriously used templates, as folks avoided it in their interfaces b/c of non-support in the CINT world. The only client with moderately interesting templates would be RDataFrame. But in the real world, folks write modern C++ and template usage is much more pervasive. Just last week, I was looking at a massive series of variadically templated constructors: each peeled of an argument to eventually initialize a grand total of 3 data members. It was just a struct with an `unsigned int`, a `double`, and an `std::array<double, 3>`. The point of the whole set of constructors being that you can use initializer syntax with the data member in every order, either the ""naked"" types",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696889449
https://github.com/root-project/root/issues/6393#issuecomment-696889449:3504,Usability,simpl,simply,3504,"te expects some STL container? Then it can not just be that STL container of say `T*`, but also the STL container of pointer any of the base classes, or worse, a mix thereof. And what if the tuple isn't actually targeting a container, but is an initalizer_list? There is often no (relevant) type information available at that point in Python, but many cases can still be resolved b/c the C++ side has some hints. For example `template<typename T, int N> void func(const std::array<T, N>&)` being given a Python tuple `(1, 2, 3)`. Absolutely clear what needs to be done for the conversion to work, but otherwise yet another case to add to the combinatorics. The above, current, situation is very much ""eeew"" and ""might not like the result."" It has also reached its breaking point, as you can see from the open bug reports and the constant hacking on workarounds. I appreciate that for the old PyROOT no-one actually seriously used templates, as folks avoided it in their interfaces b/c of non-support in the CINT world. The only client with moderately interesting templates would be RDataFrame. But in the real world, folks write modern C++ and template usage is much more pervasive. Just last week, I was looking at a massive series of variadically templated constructors: each peeled of an argument to eventually initialize a grand total of 3 data members. It was just a struct with an `unsigned int`, a `double`, and an `std::array<double, 3>`. The point of the whole set of constructors being that you can use initializer syntax with the data member in every order, either the ""naked"" types or with casts of explicitly named typedefs. Oh, it works _now_, with yet another workaround, but it actually crashed `lookupHelper` (segfault and die; and it's not the only one; I have a few more for Vassil, e.g. lookup in an unnamed namespace also crashes deep, deep inside Cling/Clang). So, I consider that another strong argument against ""trying"": anything beyond the usual basic stuff simply segfaults.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696889449
https://github.com/root-project/root/issues/6393#issuecomment-697199710:318,Energy Efficiency,reduce,reduce,318,"OK, so your approach would be to get the ""obvious"" set (I cannot think of a better term) of overloads, and for now just ignore hidden friends? (ADL can be worked around on the caller side, *if* people know where to find the suitable name.). Hidden friends are very much appreciated in the standards committee, as they reduce the size of overload sets. You will then have to work around that on the cppyy side - I could imaging that to be possible, with some help from cling. Once you have identified a hidden friend overload you cannot spell it in a fully qualified way. Especially for operators we will have to switch to expression-based operator invocation (`a @ b`) rather than function-style invocation `operator@(a,b)`. As I said, that's what C++20 and later impose anyway. I will see that we implement the generic lookup you're after. I would still appreciate feedback on `op@` - I'd hate implementing something we cannot use in the end.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-697199710
https://github.com/root-project/root/issues/6393#issuecomment-697199710:866,Usability,feedback,feedback,866,"OK, so your approach would be to get the ""obvious"" set (I cannot think of a better term) of overloads, and for now just ignore hidden friends? (ADL can be worked around on the caller side, *if* people know where to find the suitable name.). Hidden friends are very much appreciated in the standards committee, as they reduce the size of overload sets. You will then have to work around that on the cppyy side - I could imaging that to be possible, with some help from cling. Once you have identified a hidden friend overload you cannot spell it in a fully qualified way. Especially for operators we will have to switch to expression-based operator invocation (`a @ b`) rather than function-style invocation `operator@(a,b)`. As I said, that's what C++20 and later impose anyway. I will see that we implement the generic lookup you're after. I would still appreciate feedback on `op@` - I'd hate implementing something we cannot use in the end.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-697199710
https://github.com/root-project/root/issues/6393#issuecomment-697616097:552,Integrability,interface,interface,552,"> But there are many scenario's where inspecting the set can provide better arguments to BestViableFunction(). Yes, that's what you explained. > I'm doing expression-based invocation already. OK excellent, then I don't see an issue. Note that you *cannot* spell the scope of hidden friends, i.e. you cannot invoke them by anything but expressions. It wasn't clear from what you said whether you were aware of that. And the fact that it's not a concern now is of no concern to me, as we should plan for C++20 and up, not the past. We'll come up with an interface proposal and run that by you (problem as usual isn't so much brain but time). Until then: I hope you agree that #6389 is an incremental improvement, happy to hear your comments there as it also touches cppyy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-697616097
https://github.com/root-project/root/issues/6393#issuecomment-697616097:358,Usability,clear,clear,358,"> But there are many scenario's where inspecting the set can provide better arguments to BestViableFunction(). Yes, that's what you explained. > I'm doing expression-based invocation already. OK excellent, then I don't see an issue. Note that you *cannot* spell the scope of hidden friends, i.e. you cannot invoke them by anything but expressions. It wasn't clear from what you said whether you were aware of that. And the fact that it's not a concern now is of no concern to me, as we should plan for C++20 and up, not the past. We'll come up with an interface proposal and run that by you (problem as usual isn't so much brain but time). Until then: I hope you agree that #6389 is an incremental improvement, happy to hear your comments there as it also touches cppyy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-697616097
https://github.com/root-project/root/issues/6393#issuecomment-697676086:1056,Safety,abort,abort,1056,"> It wasn't clear from what you said whether you were aware of that. There are zounds of things that I'm not aware of, but as said, the kind of C++ that folks outside of HEP expect to ""just work"" with cppyy is rather more advanced that the basic C++98 that most folk in HEP still use. Heck, you guys are even still hung up on Python2.7! Anyway, the reason I changed the implementation is b/c it is already not working _today_. C++20 (which Clang5 doesn't support anyway) is just gravy. As for #6389, I'm too far diverged from since I forked ROOT/meta to apply it, so have no interest in it. I'm also not familiar with how the ""special functions"" boil upward. Note that, going back to the initiation of this thread: there was/is no issue with constructors for cppyy proper on Windows: both 32b and 64b, work fine. So, I see no benefit even in trying it out. I'm currently fixing that crash in lookupHelper with unnamed namespaces. Seems the solution is upgrading Cling _and_ a judiciously placed `Interpreter::PushTransactionRAII` (the crash is actually an abort b/c of an open transaction). Then still modules, have to see how Windows looks now; after that, this change to lookupHelper's handling of templates is high on my list.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-697676086
https://github.com/root-project/root/issues/6393#issuecomment-697676086:12,Usability,clear,clear,12,"> It wasn't clear from what you said whether you were aware of that. There are zounds of things that I'm not aware of, but as said, the kind of C++ that folks outside of HEP expect to ""just work"" with cppyy is rather more advanced that the basic C++98 that most folk in HEP still use. Heck, you guys are even still hung up on Python2.7! Anyway, the reason I changed the implementation is b/c it is already not working _today_. C++20 (which Clang5 doesn't support anyway) is just gravy. As for #6389, I'm too far diverged from since I forked ROOT/meta to apply it, so have no interest in it. I'm also not familiar with how the ""special functions"" boil upward. Note that, going back to the initiation of this thread: there was/is no issue with constructors for cppyy proper on Windows: both 32b and 64b, work fine. So, I see no benefit even in trying it out. I'm currently fixing that crash in lookupHelper with unnamed namespaces. Seems the solution is upgrading Cling _and_ a judiciously placed `Interpreter::PushTransactionRAII` (the crash is actually an abort b/c of an open transaction). Then still modules, have to see how Windows looks now; after that, this change to lookupHelper's handling of templates is high on my list.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-697676086
https://github.com/root-project/root/issues/6393#issuecomment-703676872:883,Usability,clear,clear,883,"FUD? The new way of finding python in 6.20 required python-dev, breaking conda builds. The introduction of modules, not disabled by minimal, broke mac-debug and Windows builds. In the core libraries, new code appeared that casted pointer types to long, causing more Win64 breakage. Not that ROOT runs on Win64 at all and requires the exact same compiler on the user's end on Win32. Users can also not trivially switch C++ versions unless they rebuild from source, this on any platform. Several of these issues were also reported on the ROOT forum. What you are showing is that *you* are able to build ROOT on some carefully prepared machines with your carefully selected set of compilers. In that list of nightlies, you are not even building binaries on one machine and running them on others. Again, this is why I forked: you obviously have different goals in mind when you dismiss clear problems as ""FUD."" I can't work in such an environment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-703676872
https://github.com/root-project/root/issues/6393#issuecomment-707273510:3420,Availability,error,errors,3420,"ut did note for example that the build failed on SuSE Tumbleweed with gcc9, b/c SuSE does not install TBB by default to go with that compiler, and the build was missing headers as a consequence. So I do strongly suspects a lot of conformity in distros there. As-is, this approach of trying it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choice between *potential* scaling problems and *guaranteed* portability problems, you choose to accept the latter. Clearly, portability isn't high on your list. Portability is, however, very important. By providing a portable solution that works well within other environments, cppyy is now being used on large code bases in mathematics, chemistry, and biology. That work uncovers errors even deep inside Cling, because it is pushed harder and used differently than in the CINT-tamed HEP world. Here is a current problem I'm working on for example. Try it in ROOT master, and watch memory consumption grow with top or whatever:. ```; $ root -l -b; root [0] template <class T, class U> class __gmp_expr;; root [1] typedef struct{ } __mpz_struct;; root [2] typedef __gmp_expr<__mpz_struct[1],__mpz_struct[1]> mpz_class;; root [3] for (;;) gInterpreter->ClassInfo_IsEnum(""std::vector<mpz_class>::value_type""); ```. That leak occurs when `findScope` in the LookupHelper starts parsing whenever `quickFindDecl()` fails (it's nothing to do with `mpz_class` or `ClassInfo_IsEnum` per se, just that that's where it was first found). If `quickFindDecl()` succeeds, then no leak. Since this is an accumulation of internal state, it will _not_ be reported by valgrind as a leak. Use of `findScope` is pervasive, not just from Python, but also from I/O and in clingutils. So, you're sitting on a leak even in HEP (where, especially in the L",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:770,Deployability,update,update,770,"Shipping PCMs is just another problem. For example, on Windows, MSVC likes to change header guards, so unless you use the _exact_ same compiler as ROOT was built with, you'll get a crash because of redefinitions. There are a couple of similar issues on Linux, which you ""fix"" by shipping Linux system headers (wchar.h, stat.h, time.h). But woe onto the poor bugger that has such headers significantly different from Scientific Linux on their system (e.g. Python's manylinux docker image ...). An no, Windows does _not_ have a system compiler. *You* selected one that works for you. Windows applications are quite binary compatible (more so than e.g. Mac, and certainly easier than Linux varietals), so that's a choice. Neither has Mac for that matter: folks are free to update Xcode or not. Of course, you're saved here b/c even older Clang on Mac is pretty up-to-date with C++, but no such luck on Windows. On the other hand, modern MSVC is fine, but then Clang5 underpinning Cling can not parse the C++ library headers of MSVC 19 with C++17 enabled. So catch-22. Shipped PCMs also prevent developers from using OpenMP with Cling, but at least that can still be done in libraries, which can be linked without otherwise exposing OpenMP. However, the baked-in choice for _not_ having AVX means not only that Cling can not use it, but also causes binary incompatability with libraries that were compiled with AVX enabled (e.g. many/most Eigen-based codes). Then there is the version of C++ being fixed by the PCMs (and worse, in RConfig.h and the ""backported"" stringview classes, so it's not a simple matter of wiping the local PCMs and rebuilding), meaning C++11 is the only supported version unless you do a full recompile (and see the forum for how much fun that is). And if you look at the whole list of nightlies of the past couple of weeks, and not only at the carefully selected all-green one out of a sea of red that you posted above, you'll see that non-Linux platforms fail disproportionally o",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:2042,Deployability,release,releases,2042," enabled. So catch-22. Shipped PCMs also prevent developers from using OpenMP with Cling, but at least that can still be done in libraries, which can be linked without otherwise exposing OpenMP. However, the baked-in choice for _not_ having AVX means not only that Cling can not use it, but also causes binary incompatability with libraries that were compiled with AVX enabled (e.g. many/most Eigen-based codes). Then there is the version of C++ being fixed by the PCMs (and worse, in RConfig.h and the ""backported"" stringview classes, so it's not a simple matter of wiping the local PCMs and rebuilding), meaning C++11 is the only supported version unless you do a full recompile (and see the forum for how much fun that is). And if you look at the whole list of nightlies of the past couple of weeks, and not only at the carefully selected all-green one out of a sea of red that you posted above, you'll see that non-Linux platforms fail disproportionally often. (In fact one of the recent ""green"" releases is only green b/c MacOS 10.15 and Windows10 are switched off.) That tells me that most of your developers work on Linux, and rely on the nightlies to catch any portability issues. That's a very poor approach b/c your matrix is necessarily limited given the enormous number of possible combinations. (That's another way of saying it's carefully selected.). I don't actually know if all those Linux systems are SLC, but did note for example that the build failed on SuSE Tumbleweed with gcc9, b/c SuSE does not install TBB by default to go with that compiler, and the build was missing headers as a consequence. So I do strongly suspects a lot of conformity in distros there. As-is, this approach of trying it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:2560,Deployability,install,install,2560,"g.h and the ""backported"" stringview classes, so it's not a simple matter of wiping the local PCMs and rebuilding), meaning C++11 is the only supported version unless you do a full recompile (and see the forum for how much fun that is). And if you look at the whole list of nightlies of the past couple of weeks, and not only at the carefully selected all-green one out of a sea of red that you posted above, you'll see that non-Linux platforms fail disproportionally often. (In fact one of the recent ""green"" releases is only green b/c MacOS 10.15 and Windows10 are switched off.) That tells me that most of your developers work on Linux, and rely on the nightlies to catch any portability issues. That's a very poor approach b/c your matrix is necessarily limited given the enormous number of possible combinations. (That's another way of saying it's carefully selected.). I don't actually know if all those Linux systems are SLC, but did note for example that the build failed on SuSE Tumbleweed with gcc9, b/c SuSE does not install TBB by default to go with that compiler, and the build was missing headers as a consequence. So I do strongly suspects a lot of conformity in distros there. As-is, this approach of trying it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choice between *potential* scaling problems and *guaranteed* portability problems, you choose to accept the latter. Clearly, portability isn't high on your list. Portability is, however, very important. By providing a portable solution that works well within other environments, cppyy is now being used on large code bases in mathematics, chemistry, and biology. That work uncovers errors even deep inside Cling, because it is pushed harder and used differently than in the CINT-tamed HEP world.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:1888,Energy Efficiency,green,green,1888,"uch luck on Windows. On the other hand, modern MSVC is fine, but then Clang5 underpinning Cling can not parse the C++ library headers of MSVC 19 with C++17 enabled. So catch-22. Shipped PCMs also prevent developers from using OpenMP with Cling, but at least that can still be done in libraries, which can be linked without otherwise exposing OpenMP. However, the baked-in choice for _not_ having AVX means not only that Cling can not use it, but also causes binary incompatability with libraries that were compiled with AVX enabled (e.g. many/most Eigen-based codes). Then there is the version of C++ being fixed by the PCMs (and worse, in RConfig.h and the ""backported"" stringview classes, so it's not a simple matter of wiping the local PCMs and rebuilding), meaning C++11 is the only supported version unless you do a full recompile (and see the forum for how much fun that is). And if you look at the whole list of nightlies of the past couple of weeks, and not only at the carefully selected all-green one out of a sea of red that you posted above, you'll see that non-Linux platforms fail disproportionally often. (In fact one of the recent ""green"" releases is only green b/c MacOS 10.15 and Windows10 are switched off.) That tells me that most of your developers work on Linux, and rely on the nightlies to catch any portability issues. That's a very poor approach b/c your matrix is necessarily limited given the enormous number of possible combinations. (That's another way of saying it's carefully selected.). I don't actually know if all those Linux systems are SLC, but did note for example that the build failed on SuSE Tumbleweed with gcc9, b/c SuSE does not install TBB by default to go with that compiler, and the build was missing headers as a consequence. So I do strongly suspects a lot of conformity in distros there. As-is, this approach of trying it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:2035,Energy Efficiency,green,green,2035," enabled. So catch-22. Shipped PCMs also prevent developers from using OpenMP with Cling, but at least that can still be done in libraries, which can be linked without otherwise exposing OpenMP. However, the baked-in choice for _not_ having AVX means not only that Cling can not use it, but also causes binary incompatability with libraries that were compiled with AVX enabled (e.g. many/most Eigen-based codes). Then there is the version of C++ being fixed by the PCMs (and worse, in RConfig.h and the ""backported"" stringview classes, so it's not a simple matter of wiping the local PCMs and rebuilding), meaning C++11 is the only supported version unless you do a full recompile (and see the forum for how much fun that is). And if you look at the whole list of nightlies of the past couple of weeks, and not only at the carefully selected all-green one out of a sea of red that you posted above, you'll see that non-Linux platforms fail disproportionally often. (In fact one of the recent ""green"" releases is only green b/c MacOS 10.15 and Windows10 are switched off.) That tells me that most of your developers work on Linux, and rely on the nightlies to catch any portability issues. That's a very poor approach b/c your matrix is necessarily limited given the enormous number of possible combinations. (That's another way of saying it's carefully selected.). I don't actually know if all those Linux systems are SLC, but did note for example that the build failed on SuSE Tumbleweed with gcc9, b/c SuSE does not install TBB by default to go with that compiler, and the build was missing headers as a consequence. So I do strongly suspects a lot of conformity in distros there. As-is, this approach of trying it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:2059,Energy Efficiency,green,green,2059," enabled. So catch-22. Shipped PCMs also prevent developers from using OpenMP with Cling, but at least that can still be done in libraries, which can be linked without otherwise exposing OpenMP. However, the baked-in choice for _not_ having AVX means not only that Cling can not use it, but also causes binary incompatability with libraries that were compiled with AVX enabled (e.g. many/most Eigen-based codes). Then there is the version of C++ being fixed by the PCMs (and worse, in RConfig.h and the ""backported"" stringview classes, so it's not a simple matter of wiping the local PCMs and rebuilding), meaning C++11 is the only supported version unless you do a full recompile (and see the forum for how much fun that is). And if you look at the whole list of nightlies of the past couple of weeks, and not only at the carefully selected all-green one out of a sea of red that you posted above, you'll see that non-Linux platforms fail disproportionally often. (In fact one of the recent ""green"" releases is only green b/c MacOS 10.15 and Windows10 are switched off.) That tells me that most of your developers work on Linux, and rely on the nightlies to catch any portability issues. That's a very poor approach b/c your matrix is necessarily limited given the enormous number of possible combinations. (That's another way of saying it's carefully selected.). I don't actually know if all those Linux systems are SLC, but did note for example that the build failed on SuSE Tumbleweed with gcc9, b/c SuSE does not install TBB by default to go with that compiler, and the build was missing headers as a consequence. So I do strongly suspects a lot of conformity in distros there. As-is, this approach of trying it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:3628,Energy Efficiency,consumption,consumption,3628,"missing headers as a consequence. So I do strongly suspects a lot of conformity in distros there. As-is, this approach of trying it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choice between *potential* scaling problems and *guaranteed* portability problems, you choose to accept the latter. Clearly, portability isn't high on your list. Portability is, however, very important. By providing a portable solution that works well within other environments, cppyy is now being used on large code bases in mathematics, chemistry, and biology. That work uncovers errors even deep inside Cling, because it is pushed harder and used differently than in the CINT-tamed HEP world. Here is a current problem I'm working on for example. Try it in ROOT master, and watch memory consumption grow with top or whatever:. ```; $ root -l -b; root [0] template <class T, class U> class __gmp_expr;; root [1] typedef struct{ } __mpz_struct;; root [2] typedef __gmp_expr<__mpz_struct[1],__mpz_struct[1]> mpz_class;; root [3] for (;;) gInterpreter->ClassInfo_IsEnum(""std::vector<mpz_class>::value_type""); ```. That leak occurs when `findScope` in the LookupHelper starts parsing whenever `quickFindDecl()` fails (it's nothing to do with `mpz_class` or `ClassInfo_IsEnum` per se, just that that's where it was first found). If `quickFindDecl()` succeeds, then no leak. Since this is an accumulation of internal state, it will _not_ be reported by valgrind as a leak. Use of `findScope` is pervasive, not just from Python, but also from I/O and in clingutils. So, you're sitting on a leak even in HEP (where, especially in the LHC experiments, memory is precious), but your standard test tools won't catch it. To discover these types of deep problems, you need portable software, as that ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:2211,Modifiability,portab,portability,2211,"libraries, which can be linked without otherwise exposing OpenMP. However, the baked-in choice for _not_ having AVX means not only that Cling can not use it, but also causes binary incompatability with libraries that were compiled with AVX enabled (e.g. many/most Eigen-based codes). Then there is the version of C++ being fixed by the PCMs (and worse, in RConfig.h and the ""backported"" stringview classes, so it's not a simple matter of wiping the local PCMs and rebuilding), meaning C++11 is the only supported version unless you do a full recompile (and see the forum for how much fun that is). And if you look at the whole list of nightlies of the past couple of weeks, and not only at the carefully selected all-green one out of a sea of red that you posted above, you'll see that non-Linux platforms fail disproportionally often. (In fact one of the recent ""green"" releases is only green b/c MacOS 10.15 and Windows10 are switched off.) That tells me that most of your developers work on Linux, and rely on the nightlies to catch any portability issues. That's a very poor approach b/c your matrix is necessarily limited given the enormous number of possible combinations. (That's another way of saying it's carefully selected.). I don't actually know if all those Linux systems are SLC, but did note for example that the build failed on SuSE Tumbleweed with gcc9, b/c SuSE does not install TBB by default to go with that compiler, and the build was missing headers as a consequence. So I do strongly suspects a lot of conformity in distros there. As-is, this approach of trying it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choice between *potential* scaling problems and *guaranteed* portability problems, you choose to accept the latter. Clearly, portabil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:2812,Modifiability,portab,portable,2812,"htlies of the past couple of weeks, and not only at the carefully selected all-green one out of a sea of red that you posted above, you'll see that non-Linux platforms fail disproportionally often. (In fact one of the recent ""green"" releases is only green b/c MacOS 10.15 and Windows10 are switched off.) That tells me that most of your developers work on Linux, and rely on the nightlies to catch any portability issues. That's a very poor approach b/c your matrix is necessarily limited given the enormous number of possible combinations. (That's another way of saying it's carefully selected.). I don't actually know if all those Linux systems are SLC, but did note for example that the build failed on SuSE Tumbleweed with gcc9, b/c SuSE does not install TBB by default to go with that compiler, and the build was missing headers as a consequence. So I do strongly suspects a lot of conformity in distros there. As-is, this approach of trying it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choice between *potential* scaling problems and *guaranteed* portability problems, you choose to accept the latter. Clearly, portability isn't high on your list. Portability is, however, very important. By providing a portable solution that works well within other environments, cppyy is now being used on large code bases in mathematics, chemistry, and biology. That work uncovers errors even deep inside Cling, because it is pushed harder and used differently than in the CINT-tamed HEP world. Here is a current problem I'm working on for example. Try it in ROOT master, and watch memory consumption grow with top or whatever:. ```; $ root -l -b; root [0] template <class T, class U> class __gmp_expr;; root [1] typedef struct{ } __mpz_struct;; root [2] typedef __gmp_ex",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:2945,Modifiability,portab,portability,2945,"e, you'll see that non-Linux platforms fail disproportionally often. (In fact one of the recent ""green"" releases is only green b/c MacOS 10.15 and Windows10 are switched off.) That tells me that most of your developers work on Linux, and rely on the nightlies to catch any portability issues. That's a very poor approach b/c your matrix is necessarily limited given the enormous number of possible combinations. (That's another way of saying it's carefully selected.). I don't actually know if all those Linux systems are SLC, but did note for example that the build failed on SuSE Tumbleweed with gcc9, b/c SuSE does not install TBB by default to go with that compiler, and the build was missing headers as a consequence. So I do strongly suspects a lot of conformity in distros there. As-is, this approach of trying it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choice between *potential* scaling problems and *guaranteed* portability problems, you choose to accept the latter. Clearly, portability isn't high on your list. Portability is, however, very important. By providing a portable solution that works well within other environments, cppyy is now being used on large code bases in mathematics, chemistry, and biology. That work uncovers errors even deep inside Cling, because it is pushed harder and used differently than in the CINT-tamed HEP world. Here is a current problem I'm working on for example. Try it in ROOT master, and watch memory consumption grow with top or whatever:. ```; $ root -l -b; root [0] template <class T, class U> class __gmp_expr;; root [1] typedef struct{ } __mpz_struct;; root [2] typedef __gmp_expr<__mpz_struct[1],__mpz_struct[1]> mpz_class;; root [3] for (;;) gInterpreter->ClassInfo_IsEnum(""std::vector<mpz_class>::value_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:3099,Modifiability,portab,portability,3099,"c MacOS 10.15 and Windows10 are switched off.) That tells me that most of your developers work on Linux, and rely on the nightlies to catch any portability issues. That's a very poor approach b/c your matrix is necessarily limited given the enormous number of possible combinations. (That's another way of saying it's carefully selected.). I don't actually know if all those Linux systems are SLC, but did note for example that the build failed on SuSE Tumbleweed with gcc9, b/c SuSE does not install TBB by default to go with that compiler, and the build was missing headers as a consequence. So I do strongly suspects a lot of conformity in distros there. As-is, this approach of trying it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choice between *potential* scaling problems and *guaranteed* portability problems, you choose to accept the latter. Clearly, portability isn't high on your list. Portability is, however, very important. By providing a portable solution that works well within other environments, cppyy is now being used on large code bases in mathematics, chemistry, and biology. That work uncovers errors even deep inside Cling, because it is pushed harder and used differently than in the CINT-tamed HEP world. Here is a current problem I'm working on for example. Try it in ROOT master, and watch memory consumption grow with top or whatever:. ```; $ root -l -b; root [0] template <class T, class U> class __gmp_expr;; root [1] typedef struct{ } __mpz_struct;; root [2] typedef __gmp_expr<__mpz_struct[1],__mpz_struct[1]> mpz_class;; root [3] for (;;) gInterpreter->ClassInfo_IsEnum(""std::vector<mpz_class>::value_type""); ```. That leak occurs when `findScope` in the LookupHelper starts parsing whenever `quickFindDecl()` fails (it's nothing ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:3163,Modifiability,portab,portability,3163,"rely on the nightlies to catch any portability issues. That's a very poor approach b/c your matrix is necessarily limited given the enormous number of possible combinations. (That's another way of saying it's carefully selected.). I don't actually know if all those Linux systems are SLC, but did note for example that the build failed on SuSE Tumbleweed with gcc9, b/c SuSE does not install TBB by default to go with that compiler, and the build was missing headers as a consequence. So I do strongly suspects a lot of conformity in distros there. As-is, this approach of trying it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choice between *potential* scaling problems and *guaranteed* portability problems, you choose to accept the latter. Clearly, portability isn't high on your list. Portability is, however, very important. By providing a portable solution that works well within other environments, cppyy is now being used on large code bases in mathematics, chemistry, and biology. That work uncovers errors even deep inside Cling, because it is pushed harder and used differently than in the CINT-tamed HEP world. Here is a current problem I'm working on for example. Try it in ROOT master, and watch memory consumption grow with top or whatever:. ```; $ root -l -b; root [0] template <class T, class U> class __gmp_expr;; root [1] typedef struct{ } __mpz_struct;; root [2] typedef __gmp_expr<__mpz_struct[1],__mpz_struct[1]> mpz_class;; root [3] for (;;) gInterpreter->ClassInfo_IsEnum(""std::vector<mpz_class>::value_type""); ```. That leak occurs when `findScope` in the LookupHelper starts parsing whenever `quickFindDecl()` fails (it's nothing to do with `mpz_class` or `ClassInfo_IsEnum` per se, just that that's where it was first found). If `quickFin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:3256,Modifiability,portab,portable,3256,"ber of possible combinations. (That's another way of saying it's carefully selected.). I don't actually know if all those Linux systems are SLC, but did note for example that the build failed on SuSE Tumbleweed with gcc9, b/c SuSE does not install TBB by default to go with that compiler, and the build was missing headers as a consequence. So I do strongly suspects a lot of conformity in distros there. As-is, this approach of trying it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choice between *potential* scaling problems and *guaranteed* portability problems, you choose to accept the latter. Clearly, portability isn't high on your list. Portability is, however, very important. By providing a portable solution that works well within other environments, cppyy is now being used on large code bases in mathematics, chemistry, and biology. That work uncovers errors even deep inside Cling, because it is pushed harder and used differently than in the CINT-tamed HEP world. Here is a current problem I'm working on for example. Try it in ROOT master, and watch memory consumption grow with top or whatever:. ```; $ root -l -b; root [0] template <class T, class U> class __gmp_expr;; root [1] typedef struct{ } __mpz_struct;; root [2] typedef __gmp_expr<__mpz_struct[1],__mpz_struct[1]> mpz_class;; root [3] for (;;) gInterpreter->ClassInfo_IsEnum(""std::vector<mpz_class>::value_type""); ```. That leak occurs when `findScope` in the LookupHelper starts parsing whenever `quickFindDecl()` fails (it's nothing to do with `mpz_class` or `ClassInfo_IsEnum` per se, just that that's where it was first found). If `quickFindDecl()` succeeds, then no leak. Since this is an accumulation of internal state, it will _not_ be reported by valgrind as a leak. Use of `findS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:4600,Modifiability,portab,portable,4600,"ing it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choice between *potential* scaling problems and *guaranteed* portability problems, you choose to accept the latter. Clearly, portability isn't high on your list. Portability is, however, very important. By providing a portable solution that works well within other environments, cppyy is now being used on large code bases in mathematics, chemistry, and biology. That work uncovers errors even deep inside Cling, because it is pushed harder and used differently than in the CINT-tamed HEP world. Here is a current problem I'm working on for example. Try it in ROOT master, and watch memory consumption grow with top or whatever:. ```; $ root -l -b; root [0] template <class T, class U> class __gmp_expr;; root [1] typedef struct{ } __mpz_struct;; root [2] typedef __gmp_expr<__mpz_struct[1],__mpz_struct[1]> mpz_class;; root [3] for (;;) gInterpreter->ClassInfo_IsEnum(""std::vector<mpz_class>::value_type""); ```. That leak occurs when `findScope` in the LookupHelper starts parsing whenever `quickFindDecl()` fails (it's nothing to do with `mpz_class` or `ClassInfo_IsEnum` per se, just that that's where it was first found). If `quickFindDecl()` succeeds, then no leak. Since this is an accumulation of internal state, it will _not_ be reported by valgrind as a leak. Use of `findScope` is pervasive, not just from Python, but also from I/O and in clingutils. So, you're sitting on a leak even in HEP (where, especially in the LHC experiments, memory is precious), but your standard test tools won't catch it. To discover these types of deep problems, you need portable software, as that allows it to be used by a wider audience, causing it to be better tested simply through the virtue of having more eyes on it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:4522,Testability,test,test,4522,"ing it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choice between *potential* scaling problems and *guaranteed* portability problems, you choose to accept the latter. Clearly, portability isn't high on your list. Portability is, however, very important. By providing a portable solution that works well within other environments, cppyy is now being used on large code bases in mathematics, chemistry, and biology. That work uncovers errors even deep inside Cling, because it is pushed harder and used differently than in the CINT-tamed HEP world. Here is a current problem I'm working on for example. Try it in ROOT master, and watch memory consumption grow with top or whatever:. ```; $ root -l -b; root [0] template <class T, class U> class __gmp_expr;; root [1] typedef struct{ } __mpz_struct;; root [2] typedef __gmp_expr<__mpz_struct[1],__mpz_struct[1]> mpz_class;; root [3] for (;;) gInterpreter->ClassInfo_IsEnum(""std::vector<mpz_class>::value_type""); ```. That leak occurs when `findScope` in the LookupHelper starts parsing whenever `quickFindDecl()` fails (it's nothing to do with `mpz_class` or `ClassInfo_IsEnum` per se, just that that's where it was first found). If `quickFindDecl()` succeeds, then no leak. Since this is an accumulation of internal state, it will _not_ be reported by valgrind as a leak. Use of `findScope` is pervasive, not just from Python, but also from I/O and in clingutils. So, you're sitting on a leak even in HEP (where, especially in the LHC experiments, memory is precious), but your standard test tools won't catch it. To discover these types of deep problems, you need portable software, as that allows it to be used by a wider audience, causing it to be better tested simply through the virtue of having more eyes on it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:4693,Testability,test,tested,4693,"ing it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choice between *potential* scaling problems and *guaranteed* portability problems, you choose to accept the latter. Clearly, portability isn't high on your list. Portability is, however, very important. By providing a portable solution that works well within other environments, cppyy is now being used on large code bases in mathematics, chemistry, and biology. That work uncovers errors even deep inside Cling, because it is pushed harder and used differently than in the CINT-tamed HEP world. Here is a current problem I'm working on for example. Try it in ROOT master, and watch memory consumption grow with top or whatever:. ```; $ root -l -b; root [0] template <class T, class U> class __gmp_expr;; root [1] typedef struct{ } __mpz_struct;; root [2] typedef __gmp_expr<__mpz_struct[1],__mpz_struct[1]> mpz_class;; root [3] for (;;) gInterpreter->ClassInfo_IsEnum(""std::vector<mpz_class>::value_type""); ```. That leak occurs when `findScope` in the LookupHelper starts parsing whenever `quickFindDecl()` fails (it's nothing to do with `mpz_class` or `ClassInfo_IsEnum` per se, just that that's where it was first found). If `quickFindDecl()` succeeds, then no leak. Since this is an accumulation of internal state, it will _not_ be reported by valgrind as a leak. Use of `findScope` is pervasive, not just from Python, but also from I/O and in clingutils. So, you're sitting on a leak even in HEP (where, especially in the LHC experiments, memory is precious), but your standard test tools won't catch it. To discover these types of deep problems, you need portable software, as that allows it to be used by a wider audience, causing it to be better tested simply through the virtue of having more eyes on it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:1592,Usability,simpl,simple,1592,"ac, and certainly easier than Linux varietals), so that's a choice. Neither has Mac for that matter: folks are free to update Xcode or not. Of course, you're saved here b/c even older Clang on Mac is pretty up-to-date with C++, but no such luck on Windows. On the other hand, modern MSVC is fine, but then Clang5 underpinning Cling can not parse the C++ library headers of MSVC 19 with C++17 enabled. So catch-22. Shipped PCMs also prevent developers from using OpenMP with Cling, but at least that can still be done in libraries, which can be linked without otherwise exposing OpenMP. However, the baked-in choice for _not_ having AVX means not only that Cling can not use it, but also causes binary incompatability with libraries that were compiled with AVX enabled (e.g. many/most Eigen-based codes). Then there is the version of C++ being fixed by the PCMs (and worse, in RConfig.h and the ""backported"" stringview classes, so it's not a simple matter of wiping the local PCMs and rebuilding), meaning C++11 is the only supported version unless you do a full recompile (and see the forum for how much fun that is). And if you look at the whole list of nightlies of the past couple of weeks, and not only at the carefully selected all-green one out of a sea of red that you posted above, you'll see that non-Linux platforms fail disproportionally often. (In fact one of the recent ""green"" releases is only green b/c MacOS 10.15 and Windows10 are switched off.) That tells me that most of your developers work on Linux, and rely on the nightlies to catch any portability issues. That's a very poor approach b/c your matrix is necessarily limited given the enormous number of possible combinations. (That's another way of saying it's carefully selected.). I don't actually know if all those Linux systems are SLC, but did note for example that the build failed on SuSE Tumbleweed with gcc9, b/c SuSE does not install TBB by default to go with that compiler, and the build was missing headers as a cons",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6393#issuecomment-707273510:4700,Usability,simpl,simply,4700,"ing it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choice between *potential* scaling problems and *guaranteed* portability problems, you choose to accept the latter. Clearly, portability isn't high on your list. Portability is, however, very important. By providing a portable solution that works well within other environments, cppyy is now being used on large code bases in mathematics, chemistry, and biology. That work uncovers errors even deep inside Cling, because it is pushed harder and used differently than in the CINT-tamed HEP world. Here is a current problem I'm working on for example. Try it in ROOT master, and watch memory consumption grow with top or whatever:. ```; $ root -l -b; root [0] template <class T, class U> class __gmp_expr;; root [1] typedef struct{ } __mpz_struct;; root [2] typedef __gmp_expr<__mpz_struct[1],__mpz_struct[1]> mpz_class;; root [3] for (;;) gInterpreter->ClassInfo_IsEnum(""std::vector<mpz_class>::value_type""); ```. That leak occurs when `findScope` in the LookupHelper starts parsing whenever `quickFindDecl()` fails (it's nothing to do with `mpz_class` or `ClassInfo_IsEnum` per se, just that that's where it was first found). If `quickFindDecl()` succeeds, then no leak. Since this is an accumulation of internal state, it will _not_ be reported by valgrind as a leak. Use of `findScope` is pervasive, not just from Python, but also from I/O and in clingutils. So, you're sitting on a leak even in HEP (where, especially in the LHC experiments, memory is precious), but your standard test tools won't catch it. To discover these types of deep problems, you need portable software, as that allows it to be used by a wider audience, causing it to be better tested simply through the virtue of having more eyes on it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510
https://github.com/root-project/root/issues/6428#issuecomment-698590998:512,Availability,mask,masks,512,"I'm sorry,. here is the code to reproduce FPE (not segmentation violation); ```. #include <TCanvas.h>; #include <TPad.h>; #include <TBox.h>; #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails; // TCanvas* C= new",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998
https://github.com/root-project/root/issues/6428#issuecomment-698590998:904,Availability,mask,masks,904,"I'm sorry,. here is the code to reproduce FPE (not segmentation violation); ```. #include <TCanvas.h>; #include <TPad.h>; #include <TBox.h>; #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails; // TCanvas* C= new",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998
https://github.com/root-project/root/issues/6428#issuecomment-698590998:1027,Availability,mask,mask,1027,"o reproduce FPE (not segmentation violation); ```. #include <TCanvas.h>; #include <TPad.h>; #include <TBox.h>; #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails; // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998
https://github.com/root-project/root/issues/6428#issuecomment-698590998:2740,Performance,optimiz,optimized,2740,"ons */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails; // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works; C->cd();; Double_t w=20, h=20, xl=0, yb=20;; TBox* o=new TBox();; TPad* c= new TPad();; c->SetPad(0,0,1,1);; c->cd(1);; c->PlaceBox(o,w,h,xl,yb);; return 0;; }. ```. I see. ```; [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc; entry=0x7ffeea3c7360, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the E",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998
https://github.com/root-project/root/issues/6428#issuecomment-698590998:3176,Performance,optimiz,optimized,3176,"w,h,xl,yb);; return 0;; }. ```. I see. ```; [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc; entry=0x7ffeea3c7360, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998
https://github.com/root-project/root/issues/6428#issuecomment-698590998:3352,Performance,optimiz,optimized,3352," a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc; entry=0x7ffeea3c7360, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. ```. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```; sour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998
https://github.com/root-project/root/issues/6428#issuecomment-698590998:3374,Performance,optimiz,optimized,3374," a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc; entry=0x7ffeea3c7360, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. ```. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```; sour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998
https://github.com/root-project/root/issues/6428#issuecomment-698590998:3963,Performance,optimiz,optimized,3963,"=============================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc; entry=0x7ffeea3c7360, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. ```. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```; source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998
https://github.com/root-project/root/issues/6428#issuecomment-698590998:4139,Performance,optimiz,optimized,4139,"=============================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc; entry=0x7ffeea3c7360, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. ```. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```; source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998
https://github.com/root-project/root/issues/6428#issuecomment-698590998:4161,Performance,optimiz,optimized,4161,"=============================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc; entry=0x7ffeea3c7360, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. ```. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```; source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998
https://github.com/root-project/root/issues/6428#issuecomment-698590998:2224,Testability,test,test,2224,"ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails; // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works; C->cd();; Double_t w=20, h=20, xl=0, yb=20;; TBox* o=new TBox();; TPad* c= new TPad();; c->SetPad(0,0,1,1);; c->cd(1);; c->PlaceBox(o,w,h,xl,yb);; return 0;; }. ```. I see. ```; [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc; entry=0x7ffeea3c7360, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998
https://github.com/root-project/root/issues/6428#issuecomment-698590998:3393,Testability,test,test,3393," a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc; entry=0x7ffeea3c7360, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. ```. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```; sour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998
https://github.com/root-project/root/issues/6428#issuecomment-698590998:4180,Testability,test,test,4180,"=============================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc; entry=0x7ffeea3c7360, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. ```. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```; source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998
https://github.com/root-project/root/issues/6428#issuecomment-698590998:1364,Usability,clear,clear,1364,"ned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails; // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works; C->cd();; Double_t w=20, h=20, xl=0, yb=20;; TBox* o=new TBox();; TPad* c= new TPad();; c->SetPad(0,0,1,1);; c->cd(1);; c->PlaceBox(o,w,h,xl,yb);; return 0;; }. ```. I see. ```; [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all thr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998
https://github.com/root-project/root/issues/6428#issuecomment-698590998:1696,Usability,clear,clear,1696,"-1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails; // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works; C->cd();; Double_t w=20, h=20, xl=0, yb=20;; TBox* o=new TBox();; TPad* c= new TPad();; c->SetPad(0,0,1,1);; c->cd(1);; c->PlaceBox(o,w,h,xl,yb);; return 0;; }. ```. I see. ```; [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc; entry=0x7ffeea3c7360, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f16b8107f62 in do_system (line=<",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998
https://github.com/root-project/root/issues/6432#issuecomment-2001956688:229,Availability,avail,available,229,"What can be done here is rather simple. The bottleneck last time I checked is rootcling (dictionary generation). There are two reasons:; * cmake -- dictionary generation depends on LinkDef and header files and both artifacts are available from the beginning. However, the cmake build system does not have separate targets for dictionary generation and library generation. That leads to forcing rootcling to wait for the expensive linking step of each library. For example, instead of building `Y.pcm` once we are done with building `X.pcm` we wait for the linker to link `X.so`.; * rootcling is unnecessary slow -- the tool has grown organically and in many cases we make many iterations over the AST where we don't need them. Some of the larger scale ideas have been outlined here since years: https://github.com/root-project/root-evolution/pull/5 In fact, we don't need to get so much into the refactoring rootcling, attaching a profiler and seeing the bottlenecks should be easy. For example, iirc, we make several passes over the AST to harvest the selection rules instead of making a single pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432#issuecomment-2001956688
https://github.com/root-project/root/issues/6432#issuecomment-2001956688:170,Integrability,depend,depends,170,"What can be done here is rather simple. The bottleneck last time I checked is rootcling (dictionary generation). There are two reasons:; * cmake -- dictionary generation depends on LinkDef and header files and both artifacts are available from the beginning. However, the cmake build system does not have separate targets for dictionary generation and library generation. That leads to forcing rootcling to wait for the expensive linking step of each library. For example, instead of building `Y.pcm` once we are done with building `X.pcm` we wait for the linker to link `X.so`.; * rootcling is unnecessary slow -- the tool has grown organically and in many cases we make many iterations over the AST where we don't need them. Some of the larger scale ideas have been outlined here since years: https://github.com/root-project/root-evolution/pull/5 In fact, we don't need to get so much into the refactoring rootcling, attaching a profiler and seeing the bottlenecks should be easy. For example, iirc, we make several passes over the AST to harvest the selection rules instead of making a single pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432#issuecomment-2001956688
https://github.com/root-project/root/issues/6432#issuecomment-2001956688:896,Modifiability,refactor,refactoring,896,"What can be done here is rather simple. The bottleneck last time I checked is rootcling (dictionary generation). There are two reasons:; * cmake -- dictionary generation depends on LinkDef and header files and both artifacts are available from the beginning. However, the cmake build system does not have separate targets for dictionary generation and library generation. That leads to forcing rootcling to wait for the expensive linking step of each library. For example, instead of building `Y.pcm` once we are done with building `X.pcm` we wait for the linker to link `X.so`.; * rootcling is unnecessary slow -- the tool has grown organically and in many cases we make many iterations over the AST where we don't need them. Some of the larger scale ideas have been outlined here since years: https://github.com/root-project/root-evolution/pull/5 In fact, we don't need to get so much into the refactoring rootcling, attaching a profiler and seeing the bottlenecks should be easy. For example, iirc, we make several passes over the AST to harvest the selection rules instead of making a single pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432#issuecomment-2001956688
https://github.com/root-project/root/issues/6432#issuecomment-2001956688:44,Performance,bottleneck,bottleneck,44,"What can be done here is rather simple. The bottleneck last time I checked is rootcling (dictionary generation). There are two reasons:; * cmake -- dictionary generation depends on LinkDef and header files and both artifacts are available from the beginning. However, the cmake build system does not have separate targets for dictionary generation and library generation. That leads to forcing rootcling to wait for the expensive linking step of each library. For example, instead of building `Y.pcm` once we are done with building `X.pcm` we wait for the linker to link `X.so`.; * rootcling is unnecessary slow -- the tool has grown organically and in many cases we make many iterations over the AST where we don't need them. Some of the larger scale ideas have been outlined here since years: https://github.com/root-project/root-evolution/pull/5 In fact, we don't need to get so much into the refactoring rootcling, attaching a profiler and seeing the bottlenecks should be easy. For example, iirc, we make several passes over the AST to harvest the selection rules instead of making a single pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432#issuecomment-2001956688
https://github.com/root-project/root/issues/6432#issuecomment-2001956688:955,Performance,bottleneck,bottlenecks,955,"What can be done here is rather simple. The bottleneck last time I checked is rootcling (dictionary generation). There are two reasons:; * cmake -- dictionary generation depends on LinkDef and header files and both artifacts are available from the beginning. However, the cmake build system does not have separate targets for dictionary generation and library generation. That leads to forcing rootcling to wait for the expensive linking step of each library. For example, instead of building `Y.pcm` once we are done with building `X.pcm` we wait for the linker to link `X.so`.; * rootcling is unnecessary slow -- the tool has grown organically and in many cases we make many iterations over the AST where we don't need them. Some of the larger scale ideas have been outlined here since years: https://github.com/root-project/root-evolution/pull/5 In fact, we don't need to get so much into the refactoring rootcling, attaching a profiler and seeing the bottlenecks should be easy. For example, iirc, we make several passes over the AST to harvest the selection rules instead of making a single pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432#issuecomment-2001956688
https://github.com/root-project/root/issues/6432#issuecomment-2001956688:32,Usability,simpl,simple,32,"What can be done here is rather simple. The bottleneck last time I checked is rootcling (dictionary generation). There are two reasons:; * cmake -- dictionary generation depends on LinkDef and header files and both artifacts are available from the beginning. However, the cmake build system does not have separate targets for dictionary generation and library generation. That leads to forcing rootcling to wait for the expensive linking step of each library. For example, instead of building `Y.pcm` once we are done with building `X.pcm` we wait for the linker to link `X.so`.; * rootcling is unnecessary slow -- the tool has grown organically and in many cases we make many iterations over the AST where we don't need them. Some of the larger scale ideas have been outlined here since years: https://github.com/root-project/root-evolution/pull/5 In fact, we don't need to get so much into the refactoring rootcling, attaching a profiler and seeing the bottlenecks should be easy. For example, iirc, we make several passes over the AST to harvest the selection rules instead of making a single pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432#issuecomment-2001956688
https://github.com/root-project/root/issues/6433#issuecomment-700811492:11,Usability,simpl,simple,11,The fix in simple: we should not use the keyword `\brief` it is not needed.; If That's ok wit you I can make a PR to remove it .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6433#issuecomment-700811492
https://github.com/root-project/root/pull/6469#issuecomment-704312614:185,Availability,down,down,185,Note:. Such big PR is not good because they are hard to debug in case of problem. The recent recent example with the PR testing IsBatch in TCanvas::Close prove it. It was easy to track down because it was a single simple PR. This faulty code is present in this big PR. I suggest you remove this big PR. We cannot be confident with it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6469#issuecomment-704312614
https://github.com/root-project/root/pull/6469#issuecomment-704312614:230,Availability,fault,faulty,230,Note:. Such big PR is not good because they are hard to debug in case of problem. The recent recent example with the PR testing IsBatch in TCanvas::Close prove it. It was easy to track down because it was a single simple PR. This faulty code is present in this big PR. I suggest you remove this big PR. We cannot be confident with it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6469#issuecomment-704312614
https://github.com/root-project/root/pull/6469#issuecomment-704312614:120,Testability,test,testing,120,Note:. Such big PR is not good because they are hard to debug in case of problem. The recent recent example with the PR testing IsBatch in TCanvas::Close prove it. It was easy to track down because it was a single simple PR. This faulty code is present in this big PR. I suggest you remove this big PR. We cannot be confident with it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6469#issuecomment-704312614
https://github.com/root-project/root/pull/6469#issuecomment-704312614:214,Usability,simpl,simple,214,Note:. Such big PR is not good because they are hard to debug in case of problem. The recent recent example with the PR testing IsBatch in TCanvas::Close prove it. It was easy to track down because it was a single simple PR. This faulty code is present in this big PR. I suggest you remove this big PR. We cannot be confident with it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6469#issuecomment-704312614
https://github.com/root-project/root/pull/6469#issuecomment-704322903:111,Availability,fault,faulty,111,"Well, we have other PRs tagged [WIP] ... so I guess that's fine.. I just do no like the idea of having clearly faulty code in a PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6469#issuecomment-704322903
https://github.com/root-project/root/pull/6469#issuecomment-704322903:103,Usability,clear,clearly,103,"Well, we have other PRs tagged [WIP] ... so I guess that's fine.. I just do no like the idea of having clearly faulty code in a PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6469#issuecomment-704322903
https://github.com/root-project/root/pull/6469#issuecomment-704330700:151,Availability,fault,faulty,151,"Dear @couet ,; > so I guess that's fine.. . OK. I've put [Do not merge] to the title, as I don't see if there is a label for such requests. . >clearly faulty code in a PR. My fault. I've replaced that with suggestion from @pcanal. >This sounds like an ""obvious thing"" ...padsave is equal to gPad on line 780... did I missed soothing ?. Maybe that is because of cast. I was trying to pay with it, but w/o much success. The IsBatch() was logical and did the job for that separate case... Will have a look soon. Best regards,. Andrii. Edit: but for the proper cast one should replace C-like cast with something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6469#issuecomment-704330700
https://github.com/root-project/root/pull/6469#issuecomment-704330700:175,Availability,fault,fault,175,"Dear @couet ,; > so I guess that's fine.. . OK. I've put [Do not merge] to the title, as I don't see if there is a label for such requests. . >clearly faulty code in a PR. My fault. I've replaced that with suggestion from @pcanal. >This sounds like an ""obvious thing"" ...padsave is equal to gPad on line 780... did I missed soothing ?. Maybe that is because of cast. I was trying to pay with it, but w/o much success. The IsBatch() was logical and did the job for that separate case... Will have a look soon. Best regards,. Andrii. Edit: but for the proper cast one should replace C-like cast with something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6469#issuecomment-704330700
https://github.com/root-project/root/pull/6469#issuecomment-704330700:436,Testability,log,logical,436,"Dear @couet ,; > so I guess that's fine.. . OK. I've put [Do not merge] to the title, as I don't see if there is a label for such requests. . >clearly faulty code in a PR. My fault. I've replaced that with suggestion from @pcanal. >This sounds like an ""obvious thing"" ...padsave is equal to gPad on line 780... did I missed soothing ?. Maybe that is because of cast. I was trying to pay with it, but w/o much success. The IsBatch() was logical and did the job for that separate case... Will have a look soon. Best regards,. Andrii. Edit: but for the proper cast one should replace C-like cast with something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6469#issuecomment-704330700
https://github.com/root-project/root/pull/6469#issuecomment-704330700:143,Usability,clear,clearly,143,"Dear @couet ,; > so I guess that's fine.. . OK. I've put [Do not merge] to the title, as I don't see if there is a label for such requests. . >clearly faulty code in a PR. My fault. I've replaced that with suggestion from @pcanal. >This sounds like an ""obvious thing"" ...padsave is equal to gPad on line 780... did I missed soothing ?. Maybe that is because of cast. I was trying to pay with it, but w/o much success. The IsBatch() was logical and did the job for that separate case... Will have a look soon. Best regards,. Andrii. Edit: but for the proper cast one should replace C-like cast with something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6469#issuecomment-704330700
https://github.com/root-project/root/issues/6473#issuecomment-700874559:66,Usability,simpl,simplest,66,"Both limitation/feature are present at the moment because of the ""simplest to implement factor"". I guess adding the code to simplify the name when possible should be straight-forward-ish. Switching from a fixed columns size by default to ""fit the name of all the columns"" should also be clear/straight-forward [albeit it might need a up to a reasonable maximum ...]; In case the name is truncated it might be usefull to add trailing dots .. but that might actually be slightly more complicated",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6473#issuecomment-700874559
https://github.com/root-project/root/issues/6473#issuecomment-700874559:124,Usability,simpl,simplify,124,"Both limitation/feature are present at the moment because of the ""simplest to implement factor"". I guess adding the code to simplify the name when possible should be straight-forward-ish. Switching from a fixed columns size by default to ""fit the name of all the columns"" should also be clear/straight-forward [albeit it might need a up to a reasonable maximum ...]; In case the name is truncated it might be usefull to add trailing dots .. but that might actually be slightly more complicated",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6473#issuecomment-700874559
https://github.com/root-project/root/issues/6473#issuecomment-700874559:287,Usability,clear,clear,287,"Both limitation/feature are present at the moment because of the ""simplest to implement factor"". I guess adding the code to simplify the name when possible should be straight-forward-ish. Switching from a fixed columns size by default to ""fit the name of all the columns"" should also be clear/straight-forward [albeit it might need a up to a reasonable maximum ...]; In case the name is truncated it might be usefull to add trailing dots .. but that might actually be slightly more complicated",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6473#issuecomment-700874559
https://github.com/root-project/root/issues/6510#issuecomment-702865715:794,Modifiability,config,config,794,"Hi @couet , @lmoneta , @pcanal ,. here is a reproducer.; ```. #include <TCanvas.h>; #include <TBox.h>; #include <thread>; #include <vector>. TCanvas* C=nullptr;; void test_function(const int& id); {; C->cd(id);; TPad* p= new TPad();; p->Draw();; p->cd();; TBox *x = new TBox( );; for (int i=0; i<10; i++) p->ShowGuidelines(x, kButton1Down, 'l', true );; delete x;; delete p;; return;; }; int main(int argc, char **argv) {; C= new TCanvas(""C"",""C"",1024,768);; const int N=20;; C->Divide(1,N);; std::vector<std::thread> threads;; std::vector<int> ids;; for (int j=0; j<N; j++) ids.push_back(j+1);; for (size_t j=0; j<ids.size(); j++); threads.push_back(std::thread(test_function,ids[j]));; for (auto& th : threads) th.join();; threads.clear();; delete C;; return 0;; }; ```; I do. ```; g++ $(root-config --glibs --cflags ) -g pad9.cxx -o pad9.exe; ./pad9.exe; ````; and get; ```; *** Error in `./pad9.exe': double free or corruption (fasttop): 0x00007f125c001100 ***; *** Error in `./pad9.exe; *** Break *** segmentation violation; Aborted (core dumped); ```; if I comment line with ``p->ShowGuidelines`` everything is fine. ROOT 6.22.02/gcc 4.8.5/CentOS7 x64_64. Best regards,. Andrii. Sorry if there are more crashes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6510#issuecomment-702865715
https://github.com/root-project/root/issues/6510#issuecomment-702865715:732,Usability,clear,clear,732,"Hi @couet , @lmoneta , @pcanal ,. here is a reproducer.; ```. #include <TCanvas.h>; #include <TBox.h>; #include <thread>; #include <vector>. TCanvas* C=nullptr;; void test_function(const int& id); {; C->cd(id);; TPad* p= new TPad();; p->Draw();; p->cd();; TBox *x = new TBox( );; for (int i=0; i<10; i++) p->ShowGuidelines(x, kButton1Down, 'l', true );; delete x;; delete p;; return;; }; int main(int argc, char **argv) {; C= new TCanvas(""C"",""C"",1024,768);; const int N=20;; C->Divide(1,N);; std::vector<std::thread> threads;; std::vector<int> ids;; for (int j=0; j<N; j++) ids.push_back(j+1);; for (size_t j=0; j<ids.size(); j++); threads.push_back(std::thread(test_function,ids[j]));; for (auto& th : threads) th.join();; threads.clear();; delete C;; return 0;; }; ```; I do. ```; g++ $(root-config --glibs --cflags ) -g pad9.cxx -o pad9.exe; ./pad9.exe; ````; and get; ```; *** Error in `./pad9.exe': double free or corruption (fasttop): 0x00007f125c001100 ***; *** Error in `./pad9.exe; *** Break *** segmentation violation; Aborted (core dumped); ```; if I comment line with ``p->ShowGuidelines`` everything is fine. ROOT 6.22.02/gcc 4.8.5/CentOS7 x64_64. Best regards,. Andrii. Sorry if there are more crashes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6510#issuecomment-702865715
https://github.com/root-project/root/pull/6511#issuecomment-701382727:18,Testability,test,tested,18,"Hi @couet ,. I've tested it and it fixes things for me.; I wrote hopefully because I cannot write a simple reproducer. ; Please read it as ""fixes for my case and hopefully for all similar cases"". Concerning the explanation, it looks like two threads are simultaneously in the scope where the pointer is not zero. Then one c deletes the pointer and the other one derefences null pointer. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6511#issuecomment-701382727
https://github.com/root-project/root/pull/6511#issuecomment-701382727:100,Usability,simpl,simple,100,"Hi @couet ,. I've tested it and it fixes things for me.; I wrote hopefully because I cannot write a simple reproducer. ; Please read it as ""fixes for my case and hopefully for all similar cases"". Concerning the explanation, it looks like two threads are simultaneously in the scope where the pointer is not zero. Then one c deletes the pointer and the other one derefences null pointer. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6511#issuecomment-701382727
https://github.com/root-project/root/pull/6513#issuecomment-702670088:260,Modifiability,config,config,260,"Dear @couet ,. 1) sorry for diappearing. DESY has changed the mail setup and I've noticed that quite late... Now reading the mails. 2) >I do not get a crash. So I do not really understand the protection you added. I see that in the code I do; ``` ; g++ $(root-config --glibs --cflags ) arrow.cxx -g -o arrow.exe ; ./arrow.exe; ```; and get. ```; $ ./arrow.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007fa672acc46c in __libc_waitpid (pid=1369358, stat_loc=stat_loc; entry=0x7ffc45f54860, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007fa672a49f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fa67745b5dc in TUnixSystem::StackTrace (this=0x1c20980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007fa67745e06a in TUnixSystem::DispatchSignals (this=0x1c20980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 TArrow::PaintArrow (this=0x2812cd0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>, arrowsize=<optimized out>, option=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/graf/src/TArrow.cxx:275; #6 0x0000000000400e1b in main (argc=1, argv=0x7ffc45f57528) at arrow.cxx:85; ===========================================================. ```. The reason if quite simple: when the pad is too small the coordinated rounded from float to int are the same.; Then the code divides over their difference which is 0. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6513#issuecomment-702670088
https://github.com/root-project/root/pull/6513#issuecomment-702670088:860,Performance,optimiz,optimized,860,"Dear @couet ,. 1) sorry for diappearing. DESY has changed the mail setup and I've noticed that quite late... Now reading the mails. 2) >I do not get a crash. So I do not really understand the protection you added. I see that in the code I do; ``` ; g++ $(root-config --glibs --cflags ) arrow.cxx -g -o arrow.exe ; ./arrow.exe; ```; and get. ```; $ ./arrow.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007fa672acc46c in __libc_waitpid (pid=1369358, stat_loc=stat_loc; entry=0x7ffc45f54860, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007fa672a49f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fa67745b5dc in TUnixSystem::StackTrace (this=0x1c20980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007fa67745e06a in TUnixSystem::DispatchSignals (this=0x1c20980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 TArrow::PaintArrow (this=0x2812cd0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>, arrowsize=<optimized out>, option=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/graf/src/TArrow.cxx:275; #6 0x0000000000400e1b in main (argc=1, argv=0x7ffc45f57528) at arrow.cxx:85; ===========================================================. ```. The reason if quite simple: when the pad is too small the coordinated rounded from float to int are the same.; Then the code divides over their difference which is 0. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6513#issuecomment-702670088
https://github.com/root-project/root/pull/6513#issuecomment-702670088:1279,Performance,optimiz,optimized,1279,"Dear @couet ,. 1) sorry for diappearing. DESY has changed the mail setup and I've noticed that quite late... Now reading the mails. 2) >I do not get a crash. So I do not really understand the protection you added. I see that in the code I do; ``` ; g++ $(root-config --glibs --cflags ) arrow.cxx -g -o arrow.exe ; ./arrow.exe; ```; and get. ```; $ ./arrow.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007fa672acc46c in __libc_waitpid (pid=1369358, stat_loc=stat_loc; entry=0x7ffc45f54860, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007fa672a49f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fa67745b5dc in TUnixSystem::StackTrace (this=0x1c20980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007fa67745e06a in TUnixSystem::DispatchSignals (this=0x1c20980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 TArrow::PaintArrow (this=0x2812cd0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>, arrowsize=<optimized out>, option=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/graf/src/TArrow.cxx:275; #6 0x0000000000400e1b in main (argc=1, argv=0x7ffc45f57528) at arrow.cxx:85; ===========================================================. ```. The reason if quite simple: when the pad is too small the coordinated rounded from float to int are the same.; Then the code divides over their difference which is 0. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6513#issuecomment-702670088
https://github.com/root-project/root/pull/6513#issuecomment-702670088:1299,Performance,optimiz,optimized,1299,"Dear @couet ,. 1) sorry for diappearing. DESY has changed the mail setup and I've noticed that quite late... Now reading the mails. 2) >I do not get a crash. So I do not really understand the protection you added. I see that in the code I do; ``` ; g++ $(root-config --glibs --cflags ) arrow.cxx -g -o arrow.exe ; ./arrow.exe; ```; and get. ```; $ ./arrow.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007fa672acc46c in __libc_waitpid (pid=1369358, stat_loc=stat_loc; entry=0x7ffc45f54860, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007fa672a49f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fa67745b5dc in TUnixSystem::StackTrace (this=0x1c20980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007fa67745e06a in TUnixSystem::DispatchSignals (this=0x1c20980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 TArrow::PaintArrow (this=0x2812cd0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>, arrowsize=<optimized out>, option=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/graf/src/TArrow.cxx:275; #6 0x0000000000400e1b in main (argc=1, argv=0x7ffc45f57528) at arrow.cxx:85; ===========================================================. ```. The reason if quite simple: when the pad is too small the coordinated rounded from float to int are the same.; Then the code divides over their difference which is 0. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6513#issuecomment-702670088
https://github.com/root-project/root/pull/6513#issuecomment-702670088:1319,Performance,optimiz,optimized,1319,"Dear @couet ,. 1) sorry for diappearing. DESY has changed the mail setup and I've noticed that quite late... Now reading the mails. 2) >I do not get a crash. So I do not really understand the protection you added. I see that in the code I do; ``` ; g++ $(root-config --glibs --cflags ) arrow.cxx -g -o arrow.exe ; ./arrow.exe; ```; and get. ```; $ ./arrow.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007fa672acc46c in __libc_waitpid (pid=1369358, stat_loc=stat_loc; entry=0x7ffc45f54860, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007fa672a49f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fa67745b5dc in TUnixSystem::StackTrace (this=0x1c20980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007fa67745e06a in TUnixSystem::DispatchSignals (this=0x1c20980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 TArrow::PaintArrow (this=0x2812cd0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>, arrowsize=<optimized out>, option=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/graf/src/TArrow.cxx:275; #6 0x0000000000400e1b in main (argc=1, argv=0x7ffc45f57528) at arrow.cxx:85; ===========================================================. ```. The reason if quite simple: when the pad is too small the coordinated rounded from float to int are the same.; Then the code divides over their difference which is 0. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6513#issuecomment-702670088
https://github.com/root-project/root/pull/6513#issuecomment-702670088:1339,Performance,optimiz,optimized,1339,"Dear @couet ,. 1) sorry for diappearing. DESY has changed the mail setup and I've noticed that quite late... Now reading the mails. 2) >I do not get a crash. So I do not really understand the protection you added. I see that in the code I do; ``` ; g++ $(root-config --glibs --cflags ) arrow.cxx -g -o arrow.exe ; ./arrow.exe; ```; and get. ```; $ ./arrow.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007fa672acc46c in __libc_waitpid (pid=1369358, stat_loc=stat_loc; entry=0x7ffc45f54860, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007fa672a49f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fa67745b5dc in TUnixSystem::StackTrace (this=0x1c20980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007fa67745e06a in TUnixSystem::DispatchSignals (this=0x1c20980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 TArrow::PaintArrow (this=0x2812cd0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>, arrowsize=<optimized out>, option=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/graf/src/TArrow.cxx:275; #6 0x0000000000400e1b in main (argc=1, argv=0x7ffc45f57528) at arrow.cxx:85; ===========================================================. ```. The reason if quite simple: when the pad is too small the coordinated rounded from float to int are the same.; Then the code divides over their difference which is 0. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6513#issuecomment-702670088
https://github.com/root-project/root/pull/6513#issuecomment-702670088:1366,Performance,optimiz,optimized,1366,"Dear @couet ,. 1) sorry for diappearing. DESY has changed the mail setup and I've noticed that quite late... Now reading the mails. 2) >I do not get a crash. So I do not really understand the protection you added. I see that in the code I do; ``` ; g++ $(root-config --glibs --cflags ) arrow.cxx -g -o arrow.exe ; ./arrow.exe; ```; and get. ```; $ ./arrow.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007fa672acc46c in __libc_waitpid (pid=1369358, stat_loc=stat_loc; entry=0x7ffc45f54860, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007fa672a49f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fa67745b5dc in TUnixSystem::StackTrace (this=0x1c20980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007fa67745e06a in TUnixSystem::DispatchSignals (this=0x1c20980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 TArrow::PaintArrow (this=0x2812cd0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>, arrowsize=<optimized out>, option=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/graf/src/TArrow.cxx:275; #6 0x0000000000400e1b in main (argc=1, argv=0x7ffc45f57528) at arrow.cxx:85; ===========================================================. ```. The reason if quite simple: when the pad is too small the coordinated rounded from float to int are the same.; Then the code divides over their difference which is 0. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6513#issuecomment-702670088
https://github.com/root-project/root/pull/6513#issuecomment-702670088:1390,Performance,optimiz,optimized,1390,"Dear @couet ,. 1) sorry for diappearing. DESY has changed the mail setup and I've noticed that quite late... Now reading the mails. 2) >I do not get a crash. So I do not really understand the protection you added. I see that in the code I do; ``` ; g++ $(root-config --glibs --cflags ) arrow.cxx -g -o arrow.exe ; ./arrow.exe; ```; and get. ```; $ ./arrow.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007fa672acc46c in __libc_waitpid (pid=1369358, stat_loc=stat_loc; entry=0x7ffc45f54860, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007fa672a49f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fa67745b5dc in TUnixSystem::StackTrace (this=0x1c20980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007fa67745e06a in TUnixSystem::DispatchSignals (this=0x1c20980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 TArrow::PaintArrow (this=0x2812cd0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>, arrowsize=<optimized out>, option=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/graf/src/TArrow.cxx:275; #6 0x0000000000400e1b in main (argc=1, argv=0x7ffc45f57528) at arrow.cxx:85; ===========================================================. ```. The reason if quite simple: when the pad is too small the coordinated rounded from float to int are the same.; Then the code divides over their difference which is 0. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6513#issuecomment-702670088
https://github.com/root-project/root/pull/6513#issuecomment-702670088:1632,Usability,simpl,simple,1632,"Dear @couet ,. 1) sorry for diappearing. DESY has changed the mail setup and I've noticed that quite late... Now reading the mails. 2) >I do not get a crash. So I do not really understand the protection you added. I see that in the code I do; ``` ; g++ $(root-config --glibs --cflags ) arrow.cxx -g -o arrow.exe ; ./arrow.exe; ```; and get. ```; $ ./arrow.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007fa672acc46c in __libc_waitpid (pid=1369358, stat_loc=stat_loc; entry=0x7ffc45f54860, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007fa672a49f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fa67745b5dc in TUnixSystem::StackTrace (this=0x1c20980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007fa67745e06a in TUnixSystem::DispatchSignals (this=0x1c20980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 TArrow::PaintArrow (this=0x2812cd0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>, arrowsize=<optimized out>, option=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/graf/src/TArrow.cxx:275; #6 0x0000000000400e1b in main (argc=1, argv=0x7ffc45f57528) at arrow.cxx:85; ===========================================================. ```. The reason if quite simple: when the pad is too small the coordinated rounded from float to int are the same.; Then the code divides over their difference which is 0. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6513#issuecomment-702670088
https://github.com/root-project/root/issues/6520#issuecomment-701704099:413,Integrability,depend,depending,413,"To be clear, it seems to me that the following:. ```C++; diff --git a/tree/tree/src/TBranch.cxx b/tree/tree/src/TBranch.cxx; index c69a3a95e3..e80e45d8be 100644; --- a/tree/tree/src/TBranch.cxx; +++ b/tree/tree/src/TBranch.cxx; @@ -1403,6 +1403,7 @@ Int_t TBranch::GetBasketAndFirst(TBasket *&basket, Long64_t &first,; /// to perform bulk IO (reasonable type, single TLeaf, etc); the bulk IO may; /// still fail, depending on the contents of the individual TBaskets loaded.; Bool_t TBranch::SupportsBulkRead() const {; + return true;; return (fNleaves == 1) &&; (static_cast<TLeaf*>(fLeaves.UncheckedAt(0))->GetDeserializeType() != TLeaf::DeserializeType::kDestructive);; }; @@ -1432,7 +1433,7 @@ Int_t TBranch::GetBulkEntries(Long64_t entry, TBuffer &user_buf); // TODO: eventually support multiple leaves.; if (R__unlikely(fNleaves != 1)) return -1;; TLeaf *leaf = static_cast<TLeaf*>(fLeaves.UncheckedAt(0));; - if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {return -1;}; +// if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {return -1;}; ; // Remember which entry we are reading.; fReadEntry = entry;; @@ -1488,8 +1489,7 @@ Int_t TBranch::GetBulkEntries(Long64_t entry, TBuffer &user_buf); Int_t N = ((fNextBasketEntry < 0) ? fEntryNumber : fNextBasketEntry) - first;; //printf(""Requesting %d events; fNextBasketEntry=%lld; first=%lld.\n"", N, fNextBasketEntry, first);; if (R__unlikely(!leaf->ReadBasketFast(user_buf, N))) {; - Error(""GetBulkEntries"", ""Leaf failed to read.\n"");; - return -1;; + leaf->ReadBasket(user_buf);; }; user_buf.SetBufferOffset(bufbegin);; ```. works just fine with all the basic types.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-701704099
https://github.com/root-project/root/issues/6520#issuecomment-701704099:326,Performance,perform,perform,326,"To be clear, it seems to me that the following:. ```C++; diff --git a/tree/tree/src/TBranch.cxx b/tree/tree/src/TBranch.cxx; index c69a3a95e3..e80e45d8be 100644; --- a/tree/tree/src/TBranch.cxx; +++ b/tree/tree/src/TBranch.cxx; @@ -1403,6 +1403,7 @@ Int_t TBranch::GetBasketAndFirst(TBasket *&basket, Long64_t &first,; /// to perform bulk IO (reasonable type, single TLeaf, etc); the bulk IO may; /// still fail, depending on the contents of the individual TBaskets loaded.; Bool_t TBranch::SupportsBulkRead() const {; + return true;; return (fNleaves == 1) &&; (static_cast<TLeaf*>(fLeaves.UncheckedAt(0))->GetDeserializeType() != TLeaf::DeserializeType::kDestructive);; }; @@ -1432,7 +1433,7 @@ Int_t TBranch::GetBulkEntries(Long64_t entry, TBuffer &user_buf); // TODO: eventually support multiple leaves.; if (R__unlikely(fNleaves != 1)) return -1;; TLeaf *leaf = static_cast<TLeaf*>(fLeaves.UncheckedAt(0));; - if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {return -1;}; +// if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {return -1;}; ; // Remember which entry we are reading.; fReadEntry = entry;; @@ -1488,8 +1489,7 @@ Int_t TBranch::GetBulkEntries(Long64_t entry, TBuffer &user_buf); Int_t N = ((fNextBasketEntry < 0) ? fEntryNumber : fNextBasketEntry) - first;; //printf(""Requesting %d events; fNextBasketEntry=%lld; first=%lld.\n"", N, fNextBasketEntry, first);; if (R__unlikely(!leaf->ReadBasketFast(user_buf, N))) {; - Error(""GetBulkEntries"", ""Leaf failed to read.\n"");; - return -1;; + leaf->ReadBasket(user_buf);; }; user_buf.SetBufferOffset(bufbegin);; ```. works just fine with all the basic types.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-701704099
https://github.com/root-project/root/issues/6520#issuecomment-701704099:466,Performance,load,loaded,466,"To be clear, it seems to me that the following:. ```C++; diff --git a/tree/tree/src/TBranch.cxx b/tree/tree/src/TBranch.cxx; index c69a3a95e3..e80e45d8be 100644; --- a/tree/tree/src/TBranch.cxx; +++ b/tree/tree/src/TBranch.cxx; @@ -1403,6 +1403,7 @@ Int_t TBranch::GetBasketAndFirst(TBasket *&basket, Long64_t &first,; /// to perform bulk IO (reasonable type, single TLeaf, etc); the bulk IO may; /// still fail, depending on the contents of the individual TBaskets loaded.; Bool_t TBranch::SupportsBulkRead() const {; + return true;; return (fNleaves == 1) &&; (static_cast<TLeaf*>(fLeaves.UncheckedAt(0))->GetDeserializeType() != TLeaf::DeserializeType::kDestructive);; }; @@ -1432,7 +1433,7 @@ Int_t TBranch::GetBulkEntries(Long64_t entry, TBuffer &user_buf); // TODO: eventually support multiple leaves.; if (R__unlikely(fNleaves != 1)) return -1;; TLeaf *leaf = static_cast<TLeaf*>(fLeaves.UncheckedAt(0));; - if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {return -1;}; +// if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {return -1;}; ; // Remember which entry we are reading.; fReadEntry = entry;; @@ -1488,8 +1489,7 @@ Int_t TBranch::GetBulkEntries(Long64_t entry, TBuffer &user_buf); Int_t N = ((fNextBasketEntry < 0) ? fEntryNumber : fNextBasketEntry) - first;; //printf(""Requesting %d events; fNextBasketEntry=%lld; first=%lld.\n"", N, fNextBasketEntry, first);; if (R__unlikely(!leaf->ReadBasketFast(user_buf, N))) {; - Error(""GetBulkEntries"", ""Leaf failed to read.\n"");; - return -1;; + leaf->ReadBasket(user_buf);; }; user_buf.SetBufferOffset(bufbegin);; ```. works just fine with all the basic types.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-701704099
https://github.com/root-project/root/issues/6520#issuecomment-701704099:6,Usability,clear,clear,6,"To be clear, it seems to me that the following:. ```C++; diff --git a/tree/tree/src/TBranch.cxx b/tree/tree/src/TBranch.cxx; index c69a3a95e3..e80e45d8be 100644; --- a/tree/tree/src/TBranch.cxx; +++ b/tree/tree/src/TBranch.cxx; @@ -1403,6 +1403,7 @@ Int_t TBranch::GetBasketAndFirst(TBasket *&basket, Long64_t &first,; /// to perform bulk IO (reasonable type, single TLeaf, etc); the bulk IO may; /// still fail, depending on the contents of the individual TBaskets loaded.; Bool_t TBranch::SupportsBulkRead() const {; + return true;; return (fNleaves == 1) &&; (static_cast<TLeaf*>(fLeaves.UncheckedAt(0))->GetDeserializeType() != TLeaf::DeserializeType::kDestructive);; }; @@ -1432,7 +1433,7 @@ Int_t TBranch::GetBulkEntries(Long64_t entry, TBuffer &user_buf); // TODO: eventually support multiple leaves.; if (R__unlikely(fNleaves != 1)) return -1;; TLeaf *leaf = static_cast<TLeaf*>(fLeaves.UncheckedAt(0));; - if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {return -1;}; +// if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {return -1;}; ; // Remember which entry we are reading.; fReadEntry = entry;; @@ -1488,8 +1489,7 @@ Int_t TBranch::GetBulkEntries(Long64_t entry, TBuffer &user_buf); Int_t N = ((fNextBasketEntry < 0) ? fEntryNumber : fNextBasketEntry) - first;; //printf(""Requesting %d events; fNextBasketEntry=%lld; first=%lld.\n"", N, fNextBasketEntry, first);; if (R__unlikely(!leaf->ReadBasketFast(user_buf, N))) {; - Error(""GetBulkEntries"", ""Leaf failed to read.\n"");; - return -1;; + leaf->ReadBasket(user_buf);; }; user_buf.SetBufferOffset(bufbegin);; ```. works just fine with all the basic types.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-701704099
https://github.com/root-project/root/issues/6520#issuecomment-703566990:76,Usability,simpl,simply,76,"Also I am confused about the fact that `TBranch::GetEntriesSerialized` will simply ignore destructive DeserializeType as well. ```; 1512 if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {; 1513 Error(""GetEntriesSerialized"", ""Encountered a branch with destructive deserialization; failing.\n"");; 1514 return -1;; ```. so my question remains: how can I bulk read a bunch of `int`s?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-703566990
https://github.com/root-project/root/issues/6520#issuecomment-703591130:6,Usability,clear,clear,6,"To be clear:. ```C++; 1 #include <TTree.h>; 2 #include <TBufferFile.h>; 3; 4 int foo() {; 5 // Otherwise, we keep with the current ROOT defaults.; 6 auto tree = new TTree(""T"", ""A ROOT tree."");; 7 short f = 1;; 8 tree->Branch(""myBranch"", &f, 32000, 1);; 9 for (Long64_t ev = 0; ev < 32000; ev++) {; 10 tree->Fill();; 11 }; 12 tree->Print();; 13; 14 TBufferFile branchbuf(TBuffer::kWrite, 32 * 1024);; 15 TBranch *branchF = tree->GetBranch(""myBranch"");; 16; 17 auto count = branchF->GetBulkRead().GetEntriesSerialized(0, branchbuf);; 18 return count;; 19 }; ```. does not work:. ```; Processing foo.cc...; ******************************************************************************; *Tree :T : A ROOT tree. *; *Entries : 32000 : Total = 65257 bytes File Size = 0 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :myBranch : myBranch/S *; *Entries : 32000 : Total Size= 64957 bytes All baskets in memory *; *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; Error in <TBranch::GetEntriesSerialized>: Encountered a branch with destructive deserialization; failing. (int) -1; ```. However if I change `f` to be an `int` or a `float`, it does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-703591130
https://github.com/root-project/root/issues/6523#issuecomment-704257753:821,Usability,simpl,simple,821,"One way to go about this would be to mimic the suggested usage of the TFile the TTree is attached to as per the `TTree::ChangeFile` [docs](https://root.cern/doc/master/classTTree.html#a4680b0dfd17292acc29ba9a8f33788a3) in TBufferMerger. . One of the main limitations I see is that TBufferMerger is [hardwired](https://github.com/root-project/root/blob/9822d0e2733cf802d8b2c3c7b6bc134296a171b8/io/io/src/TBufferMerger.cxx#L24-L43) to the initial TFile it is constructed with. Supposing we modify `TTree::ChangeFile` to check the tree is attached to a TBufferMergerFile, if it doesn't get deleted (like Philippe suggests in the gist comments) then we still have to find a way to change its name to not collide with the original one. If instead it still gets deleted then we have to create a new TBufferMergerFile and not a simple TFile, but we couldn't attach it to the TBufferMerger inside `TTree::ChangeFile`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6523#issuecomment-704257753
https://github.com/root-project/root/pull/6526#issuecomment-702072629:46,Availability,error,error,46,That's great! Out of curiousity: How does the error message look like for `Filter('x = 0')`?\; And I don't think that this breaks any existing code. Writing back to the input arguments is clearly a super weird thing in RDF and would rely on implementation details that are not visible to the user.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6526#issuecomment-702072629
https://github.com/root-project/root/pull/6526#issuecomment-702072629:52,Integrability,message,message,52,That's great! Out of curiousity: How does the error message look like for `Filter('x = 0')`?\; And I don't think that this breaks any existing code. Writing back to the input arguments is clearly a super weird thing in RDF and would rely on implementation details that are not visible to the user.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6526#issuecomment-702072629
https://github.com/root-project/root/pull/6526#issuecomment-702072629:188,Usability,clear,clearly,188,That's great! Out of curiousity: How does the error message look like for `Filter('x = 0')`?\; And I don't think that this breaks any existing code. Writing back to the input arguments is clearly a super weird thing in RDF and would rely on implementation details that are not visible to the user.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6526#issuecomment-702072629
https://github.com/root-project/root/pull/6526#issuecomment-702104810:48,Availability,error,error,48,> That's great! Out of curiousity: How does the error message look like for `Filter('x = 0')`?; > And I don't think that this breaks any existing code. Writing back to the input arguments is clearly a super weird thing in RDF and would rely on implementation details that are not visible to the user. Very similar to this:; ```; root [0] auto func = [](const double doub) {; doub += 1.;; }; ROOT_prompt_1:1:6: error: cannot assign to variable 'doub' with const-qualified type 'const double'; doub += 1.;; ~~~~ ^; ROOT_prompt_0:1:29: note: variable 'doub' declared const here; auto func = [](const double doub) {; ~~~~~~~~~~~~~^~~~; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6526#issuecomment-702104810
https://github.com/root-project/root/pull/6526#issuecomment-702104810:410,Availability,error,error,410,> That's great! Out of curiousity: How does the error message look like for `Filter('x = 0')`?; > And I don't think that this breaks any existing code. Writing back to the input arguments is clearly a super weird thing in RDF and would rely on implementation details that are not visible to the user. Very similar to this:; ```; root [0] auto func = [](const double doub) {; doub += 1.;; }; ROOT_prompt_1:1:6: error: cannot assign to variable 'doub' with const-qualified type 'const double'; doub += 1.;; ~~~~ ^; ROOT_prompt_0:1:29: note: variable 'doub' declared const here; auto func = [](const double doub) {; ~~~~~~~~~~~~~^~~~; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6526#issuecomment-702104810
https://github.com/root-project/root/pull/6526#issuecomment-702104810:54,Integrability,message,message,54,> That's great! Out of curiousity: How does the error message look like for `Filter('x = 0')`?; > And I don't think that this breaks any existing code. Writing back to the input arguments is clearly a super weird thing in RDF and would rely on implementation details that are not visible to the user. Very similar to this:; ```; root [0] auto func = [](const double doub) {; doub += 1.;; }; ROOT_prompt_1:1:6: error: cannot assign to variable 'doub' with const-qualified type 'const double'; doub += 1.;; ~~~~ ^; ROOT_prompt_0:1:29: note: variable 'doub' declared const here; auto func = [](const double doub) {; ~~~~~~~~~~~~~^~~~; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6526#issuecomment-702104810
https://github.com/root-project/root/pull/6526#issuecomment-702104810:434,Modifiability,variab,variable,434,> That's great! Out of curiousity: How does the error message look like for `Filter('x = 0')`?; > And I don't think that this breaks any existing code. Writing back to the input arguments is clearly a super weird thing in RDF and would rely on implementation details that are not visible to the user. Very similar to this:; ```; root [0] auto func = [](const double doub) {; doub += 1.;; }; ROOT_prompt_1:1:6: error: cannot assign to variable 'doub' with const-qualified type 'const double'; doub += 1.;; ~~~~ ^; ROOT_prompt_0:1:29: note: variable 'doub' declared const here; auto func = [](const double doub) {; ~~~~~~~~~~~~~^~~~; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6526#issuecomment-702104810
https://github.com/root-project/root/pull/6526#issuecomment-702104810:539,Modifiability,variab,variable,539,> That's great! Out of curiousity: How does the error message look like for `Filter('x = 0')`?; > And I don't think that this breaks any existing code. Writing back to the input arguments is clearly a super weird thing in RDF and would rely on implementation details that are not visible to the user. Very similar to this:; ```; root [0] auto func = [](const double doub) {; doub += 1.;; }; ROOT_prompt_1:1:6: error: cannot assign to variable 'doub' with const-qualified type 'const double'; doub += 1.;; ~~~~ ^; ROOT_prompt_0:1:29: note: variable 'doub' declared const here; auto func = [](const double doub) {; ~~~~~~~~~~~~~^~~~; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6526#issuecomment-702104810
https://github.com/root-project/root/pull/6526#issuecomment-702104810:191,Usability,clear,clearly,191,> That's great! Out of curiousity: How does the error message look like for `Filter('x = 0')`?; > And I don't think that this breaks any existing code. Writing back to the input arguments is clearly a super weird thing in RDF and would rely on implementation details that are not visible to the user. Very similar to this:; ```; root [0] auto func = [](const double doub) {; doub += 1.;; }; ROOT_prompt_1:1:6: error: cannot assign to variable 'doub' with const-qualified type 'const double'; doub += 1.;; ~~~~ ^; ROOT_prompt_0:1:29: note: variable 'doub' declared const here; auto func = [](const double doub) {; ~~~~~~~~~~~~~^~~~; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6526#issuecomment-702104810
https://github.com/root-project/root/pull/6532#issuecomment-721663576:124,Availability,down,downsides,124,"@pcanal @jblomer, I agree with @vgvassilev - we had a chat today and it looks could be a pretty simple solution without any downsides and hacks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-721663576
https://github.com/root-project/root/pull/6532#issuecomment-721663576:96,Usability,simpl,simple,96,"@pcanal @jblomer, I agree with @vgvassilev - we had a chat today and it looks could be a pretty simple solution without any downsides and hacks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-721663576
https://github.com/root-project/root/pull/6532#issuecomment-721762456:143,Usability,simpl,simple,143,"Yes this is a way towards this. There are more steps (TFile, TKey and adding custom streamers for the TProto* classes and a few others) so not simple but likely straight-forward.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-721762456
https://github.com/root-project/root/pull/6532#issuecomment-722617999:235,Energy Efficiency,reduce,reduce,235,"> Yes this is a way towards this. There are more steps (TFile, TKey and adding custom streamers for the TProto* classes and a few others) so not simple but likely straight-forward. @pcanal, would simplifying the rdict.pcm file content reduce the amount of things we need to sink? Do we need custom streamers for it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-722617999
https://github.com/root-project/root/pull/6532#issuecomment-722617999:145,Usability,simpl,simple,145,"> Yes this is a way towards this. There are more steps (TFile, TKey and adding custom streamers for the TProto* classes and a few others) so not simple but likely straight-forward. @pcanal, would simplifying the rdict.pcm file content reduce the amount of things we need to sink? Do we need custom streamers for it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-722617999
https://github.com/root-project/root/pull/6532#issuecomment-722617999:196,Usability,simpl,simplifying,196,"> Yes this is a way towards this. There are more steps (TFile, TKey and adding custom streamers for the TProto* classes and a few others) so not simple but likely straight-forward. @pcanal, would simplifying the rdict.pcm file content reduce the amount of things we need to sink? Do we need custom streamers for it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-722617999
https://github.com/root-project/root/pull/6532#issuecomment-722648289:59,Energy Efficiency,reduce,reduce,59,"> @vgvassilev would simplifying the rdict.pcm file content reduce the amount of things we need to sink? Do we need custom streamers for it?. If you simplify things, you still need the custom streamer (because RIOLite does not have access to Cling) *and* you need to add new code to transform the simple form into the run-time form. So it just split the custom streamer in 2 part :). None of this is ""hard"" but it is need some typing (and testing) time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-722648289
https://github.com/root-project/root/pull/6532#issuecomment-722648289:231,Security,access,access,231,"> @vgvassilev would simplifying the rdict.pcm file content reduce the amount of things we need to sink? Do we need custom streamers for it?. If you simplify things, you still need the custom streamer (because RIOLite does not have access to Cling) *and* you need to add new code to transform the simple form into the run-time form. So it just split the custom streamer in 2 part :). None of this is ""hard"" but it is need some typing (and testing) time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-722648289
https://github.com/root-project/root/pull/6532#issuecomment-722648289:438,Testability,test,testing,438,"> @vgvassilev would simplifying the rdict.pcm file content reduce the amount of things we need to sink? Do we need custom streamers for it?. If you simplify things, you still need the custom streamer (because RIOLite does not have access to Cling) *and* you need to add new code to transform the simple form into the run-time form. So it just split the custom streamer in 2 part :). None of this is ""hard"" but it is need some typing (and testing) time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-722648289
https://github.com/root-project/root/pull/6532#issuecomment-722648289:20,Usability,simpl,simplifying,20,"> @vgvassilev would simplifying the rdict.pcm file content reduce the amount of things we need to sink? Do we need custom streamers for it?. If you simplify things, you still need the custom streamer (because RIOLite does not have access to Cling) *and* you need to add new code to transform the simple form into the run-time form. So it just split the custom streamer in 2 part :). None of this is ""hard"" but it is need some typing (and testing) time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-722648289
https://github.com/root-project/root/pull/6532#issuecomment-722648289:148,Usability,simpl,simplify,148,"> @vgvassilev would simplifying the rdict.pcm file content reduce the amount of things we need to sink? Do we need custom streamers for it?. If you simplify things, you still need the custom streamer (because RIOLite does not have access to Cling) *and* you need to add new code to transform the simple form into the run-time form. So it just split the custom streamer in 2 part :). None of this is ""hard"" but it is need some typing (and testing) time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-722648289
https://github.com/root-project/root/pull/6532#issuecomment-722648289:296,Usability,simpl,simple,296,"> @vgvassilev would simplifying the rdict.pcm file content reduce the amount of things we need to sink? Do we need custom streamers for it?. If you simplify things, you still need the custom streamer (because RIOLite does not have access to Cling) *and* you need to add new code to transform the simple form into the run-time form. So it just split the custom streamer in 2 part :). None of this is ""hard"" but it is need some typing (and testing) time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-722648289
https://github.com/root-project/root/issues/6535#issuecomment-2016794829:118,Deployability,release,releases,118,I apologise to revive only now this item. I was curious to understand why this is a need and if with the newer ROOT 6 releases an equally usable solution can be found.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6535#issuecomment-2016794829
https://github.com/root-project/root/issues/6535#issuecomment-2016794829:138,Usability,usab,usable,138,I apologise to revive only now this item. I was curious to understand why this is a need and if with the newer ROOT 6 releases an equally usable solution can be found.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6535#issuecomment-2016794829
https://github.com/root-project/root/pull/6537#issuecomment-704297485:3559,Availability,fault,fault,3559,"std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCore.so] TApplication::ExecuteFile(char const*, int*, bool) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCore.so] TROOT::ProcessLine(char const*, int*) (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] TestReport2(int) (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] tline() (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] stressGraphics(int) (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] main (no debug info); [/usr/lib/system/libdyld.dylib] start (no debug info); [<unknown binary>] (no debug info). ```. Note that running stressGraphics is a good idea when you modify Graphics files. (my fault, I should have done it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6537#issuecomment-704297485
https://github.com/root-project/root/pull/6537#issuecomment-704297485:3082,Testability,test,test,3082,"std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCore.so] TApplication::ExecuteFile(char const*, int*, bool) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCore.so] TROOT::ProcessLine(char const*, int*) (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] TestReport2(int) (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] tline() (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] stressGraphics(int) (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] main (no debug info); [/usr/lib/system/libdyld.dylib] start (no debug info); [<unknown binary>] (no debug info). ```. Note that running stressGraphics is a good idea when you modify Graphics files. (my fault, I should have done it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6537#issuecomment-704297485
https://github.com/root-project/root/pull/6537#issuecomment-704297485:3168,Testability,test,test,3168,"std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCore.so] TApplication::ExecuteFile(char const*, int*, bool) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCore.so] TROOT::ProcessLine(char const*, int*) (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] TestReport2(int) (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] tline() (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] stressGraphics(int) (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] main (no debug info); [/usr/lib/system/libdyld.dylib] start (no debug info); [<unknown binary>] (no debug info). ```. Note that running stressGraphics is a good idea when you modify Graphics files. (my fault, I should have done it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6537#issuecomment-704297485
https://github.com/root-project/root/pull/6537#issuecomment-704297485:3245,Testability,test,test,3245,"std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCore.so] TApplication::ExecuteFile(char const*, int*, bool) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCore.so] TROOT::ProcessLine(char const*, int*) (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] TestReport2(int) (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] tline() (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] stressGraphics(int) (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] main (no debug info); [/usr/lib/system/libdyld.dylib] start (no debug info); [<unknown binary>] (no debug info). ```. Note that running stressGraphics is a good idea when you modify Graphics files. (my fault, I should have done it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6537#issuecomment-704297485
https://github.com/root-project/root/pull/6537#issuecomment-704297485:3334,Testability,test,test,3334,"std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCore.so] TApplication::ExecuteFile(char const*, int*, bool) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCore.so] TROOT::ProcessLine(char const*, int*) (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] TestReport2(int) (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] tline() (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] stressGraphics(int) (no debug info); [/Users/couet/git/couet-root/test/./stressGraphics] main (no debug info); [/usr/lib/system/libdyld.dylib] start (no debug info); [<unknown binary>] (no debug info). ```. Note that running stressGraphics is a good idea when you modify Graphics files. (my fault, I should have done it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6537#issuecomment-704297485
https://github.com/root-project/root/pull/6537#issuecomment-704297485:2,Usability,undo,undo,2,"I undo ... it cannot stay like that ....; ```; % ./stressGraphics; Create ./cernstaff.root; (TFile *) nullptr; **********************************************************************; * Starting Graphics - S T R E S S suite *; **********************************************************************; * Starting Basic Graphics - S T R E S S *; **********************************************************************; Test 1: TLine..................................................... OK; PDF output................................................ OK; GIF output................................................ OK; JPG output................................................ OK; PNG output................................................ OK; [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info); [/usr/lib/system/libsystem_kernel.dylib] fstat$INODE64 (no debug info); [/Users/couet/git/couet-root-bin/lib/libGpad.so] TCanvas::Constructor(char const*, char const*, int, int, int, int) (no debug info); [/Users/couet/git/couet-root-bin/lib/libGpad.so] TCanvas::TCanvas(char const*, char const*, int, int, int, int) (no debug info); [<unknown binary>] (no debug info); [<unknown binary>] (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::Interpreter::EvaluateInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaParser::isXCom",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6537#issuecomment-704297485
https://github.com/root-project/root/pull/6551#issuecomment-704231127:49,Usability,simpl,simplest,49,"@vgvassilev Upon reflection, I think this is the simplest/easier fix...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6551#issuecomment-704231127
https://github.com/root-project/root/issues/6556#issuecomment-705445777:222,Safety,detect,detected,222,"The problem is that both shapes are composite, and TGeoCompositeShape does not currently support generating mesh points on segments. If you were to replace the pvPipeBottom with a simple tube the overlap would probably be detected, but of course you cannot do that. So you are hitting the boolean-boolean combination which is worst supported unfortunately by the geometry checker and can miss overlaps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6556#issuecomment-705445777
https://github.com/root-project/root/issues/6556#issuecomment-705445777:180,Usability,simpl,simple,180,"The problem is that both shapes are composite, and TGeoCompositeShape does not currently support generating mesh points on segments. If you were to replace the pvPipeBottom with a simple tube the overlap would probably be detected, but of course you cannot do that. So you are hitting the boolean-boolean combination which is worst supported unfortunately by the geometry checker and can miss overlaps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6556#issuecomment-705445777
https://github.com/root-project/root/issues/6557#issuecomment-1705593397:471,Usability,clear,clear,471,"## RooMultivariateGaussian doesn't allow the converiance matrix to be fit. The data type used to represent the covariance matrix in RooMultivariateGaussian is TMatrixDSym and not RooRealVar or RooListProxy and doesn't allow for it to be fit. This is not a bug but a new feature request. There is alway the possibility to write in this case your own pdf. This feature only got requested once in 2017, and in the request ticket there was no mention of a usecase. Without a clear usecase, we are not going to blindly implement features. *Originally suggested by Albert Bursche [ROOT-9052](https://sft.its.cern.ch/jira/browse/ROOT-9052)*",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6557#issuecomment-1705593397
https://github.com/root-project/root/pull/6558#issuecomment-703886881:35,Usability,simpl,simply,35,"@pcanal I would claim the check is simply spurious with the current implementation. The whole method could actually be folded in GetBulkEntries, if one simply adds a fallback to the ReadBasketFast call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6558#issuecomment-703886881
https://github.com/root-project/root/pull/6558#issuecomment-703886881:152,Usability,simpl,simply,152,"@pcanal I would claim the check is simply spurious with the current implementation. The whole method could actually be folded in GetBulkEntries, if one simply adds a fallback to the ReadBasketFast call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6558#issuecomment-703886881
https://github.com/root-project/root/issues/6566#issuecomment-704347919:105,Deployability,release,release,105,"A priori Python code is protected by the GIL, so this access wouldn't be an issue for threaded code (GIL release is ever only on the actual call into C++, not on any setup code to reach that point). Additionally, this is a workaround for ROOT/meta's buggy handling of enums. Since that is now fixed, this particular workaround is no longer necessary and can simply be removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6566#issuecomment-704347919
https://github.com/root-project/root/issues/6566#issuecomment-704347919:54,Security,access,access,54,"A priori Python code is protected by the GIL, so this access wouldn't be an issue for threaded code (GIL release is ever only on the actual call into C++, not on any setup code to reach that point). Additionally, this is a workaround for ROOT/meta's buggy handling of enums. Since that is now fixed, this particular workaround is no longer necessary and can simply be removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6566#issuecomment-704347919
https://github.com/root-project/root/issues/6566#issuecomment-704347919:358,Usability,simpl,simply,358,"A priori Python code is protected by the GIL, so this access wouldn't be an issue for threaded code (GIL release is ever only on the actual call into C++, not on any setup code to reach that point). Additionally, this is a workaround for ROOT/meta's buggy handling of enums. Since that is now fixed, this particular workaround is no longer necessary and can simply be removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6566#issuecomment-704347919
https://github.com/root-project/root/pull/6570#issuecomment-708403160:251,Deployability,patch,patch,251,"Update:. After a very productive chat with @eguiraud we found out that this time `TTree::ChangeFile` is not trying to delete the `TBufferMergerFile`s attached to the `TBufferMerger`, but the `TFileMerger` attached to said `TBufferMerger`. The initial patch does not work since the `fOutputFile` member of `TFileMerger` is not a derivate of `TMemFile` and is the one that is getting changed in the process. The design of `TFileMerger` is of using `fOutputFile` as the file where all the data is merged, so of course it should never be deleted. A simple call to `TTree::SetMaxTreeSize()` with a very large size inside `ROOT::Internal::RDF::SnapshotHelperMT::Finalize()` solves the reproducer I attached in the last message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6570#issuecomment-708403160
https://github.com/root-project/root/pull/6570#issuecomment-708403160:713,Integrability,message,message,713,"Update:. After a very productive chat with @eguiraud we found out that this time `TTree::ChangeFile` is not trying to delete the `TBufferMergerFile`s attached to the `TBufferMerger`, but the `TFileMerger` attached to said `TBufferMerger`. The initial patch does not work since the `fOutputFile` member of `TFileMerger` is not a derivate of `TMemFile` and is the one that is getting changed in the process. The design of `TFileMerger` is of using `fOutputFile` as the file where all the data is merged, so of course it should never be deleted. A simple call to `TTree::SetMaxTreeSize()` with a very large size inside `ROOT::Internal::RDF::SnapshotHelperMT::Finalize()` solves the reproducer I attached in the last message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6570#issuecomment-708403160
https://github.com/root-project/root/pull/6570#issuecomment-708403160:545,Usability,simpl,simple,545,"Update:. After a very productive chat with @eguiraud we found out that this time `TTree::ChangeFile` is not trying to delete the `TBufferMergerFile`s attached to the `TBufferMerger`, but the `TFileMerger` attached to said `TBufferMerger`. The initial patch does not work since the `fOutputFile` member of `TFileMerger` is not a derivate of `TMemFile` and is the one that is getting changed in the process. The design of `TFileMerger` is of using `fOutputFile` as the file where all the data is merged, so of course it should never be deleted. A simple call to `TTree::SetMaxTreeSize()` with a very large size inside `ROOT::Internal::RDF::SnapshotHelperMT::Finalize()` solves the reproducer I attached in the last message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6570#issuecomment-708403160
https://github.com/root-project/root/pull/6576#issuecomment-704919795:52,Availability,failure,failure,52,"Hi @pcanal ,. > We need better understanding of the failure mode. OK, I see. Meanwhile I've simplified the reproducer; ```; #include <TCanvas.h>; #include <TPad.h>; int main(int argc, char **argv) {; TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);; C->cd();; TPad* c= new TPad();; c->cd();; delete c;; delete C;; return 0;; }; ```; Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6576#issuecomment-704919795
https://github.com/root-project/root/pull/6576#issuecomment-704919795:92,Usability,simpl,simplified,92,"Hi @pcanal ,. > We need better understanding of the failure mode. OK, I see. Meanwhile I've simplified the reproducer; ```; #include <TCanvas.h>; #include <TPad.h>; int main(int argc, char **argv) {; TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);; C->cd();; TPad* c= new TPad();; c->cd();; delete c;; delete C;; return 0;; }; ```; Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6576#issuecomment-704919795
https://github.com/root-project/root/issues/6593#issuecomment-706268776:159,Usability,clear,clear,159,"Thank you for the quick response, @couet, your example code helps!; However, is this peculiarity mentioned in the ROOT documentation? This behavior was not so clear to me from the [TAttText documentation](https://root.cern.ch/doc/master/classTAttText.html), and it looks like setting the text color to white in my naïve way does work in some other contexts, e.g.:; ```; void jant2(){; auto c = new TCanvas(""c"",""c"",800,600);; auto pave = new TPaveText(0.25,0.25,0.75,0.75,""NDC"");; pave->SetTextColor(kWhite); // setting all text to white this time (not line-by-line changes); pave->AddText(""This line is in white."");; pave->AddText(""This line is also in white."");; pave->Draw();; c->Draw();; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6593#issuecomment-706268776
https://github.com/root-project/root/issues/6597#issuecomment-706215684:75,Usability,simpl,simply,75,"A possible fix is https://github.com/root-project/roottest/pull/610, which simply removes the inbuilt pytest and requires an external version. Edit: Checked, is fixed by a piped pytest version and the linked PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6597#issuecomment-706215684
https://github.com/root-project/root/pull/6600#issuecomment-712221990:15,Deployability,update,update,15,Should we also update: User's guide: documentation/users-guide/Trees.md ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6600#issuecomment-712221990
https://github.com/root-project/root/pull/6600#issuecomment-712221990:30,Usability,guid,guide,30,Should we also update: User's guide: documentation/users-guide/Trees.md ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6600#issuecomment-712221990
https://github.com/root-project/root/pull/6600#issuecomment-712221990:57,Usability,guid,guide,57,Should we also update: User's guide: documentation/users-guide/Trees.md ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6600#issuecomment-712221990
https://github.com/root-project/root/pull/6614#issuecomment-707053494:356,Usability,clear,clearing,356,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-1.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98801/console).; ### Warnings:; - [2020-10-12T10:36:12.315Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-10-12T10:46:02.906Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6614#issuecomment-707053494
https://github.com/root-project/root/pull/6614#issuecomment-707053494:635,Usability,clear,clearing,635,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-1.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98801/console).; ### Warnings:; - [2020-10-12T10:36:12.315Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-10-12T10:46:02.906Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6614#issuecomment-707053494
https://github.com/root-project/root/pull/6614#issuecomment-707278634:825,Testability,test,tests,825,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98913/console).; ### Warnings:; - [2020-10-12T17:59:07.743Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-10-12T18:07:15.273Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.dict.ROOT-9185.roottest_cling_dict_ROOT_9185_ROOT9185](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98913/testReport/projectroot.roottest.cling.dict/ROOT-9185/roottest_cling_dict_ROOT_9185_ROOT9185/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6614#issuecomment-707278634
https://github.com/root-project/root/pull/6614#issuecomment-707278634:997,Testability,test,testReport,997,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98913/console).; ### Warnings:; - [2020-10-12T17:59:07.743Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-10-12T18:07:15.273Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.dict.ROOT-9185.roottest_cling_dict_ROOT_9185_ROOT9185](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98913/testReport/projectroot.roottest.cling.dict/ROOT-9185/roottest_cling_dict_ROOT_9185_ROOT9185/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6614#issuecomment-707278634
https://github.com/root-project/root/pull/6614#issuecomment-707278634:370,Usability,clear,clearing,370,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98913/console).; ### Warnings:; - [2020-10-12T17:59:07.743Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-10-12T18:07:15.273Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.dict.ROOT-9185.roottest_cling_dict_ROOT_9185_ROOT9185](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98913/testReport/projectroot.roottest.cling.dict/ROOT-9185/roottest_cling_dict_ROOT_9185_ROOT9185/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6614#issuecomment-707278634
https://github.com/root-project/root/pull/6614#issuecomment-707278634:649,Usability,clear,clearing,649,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98913/console).; ### Warnings:; - [2020-10-12T17:59:07.743Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-10-12T18:07:15.273Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.dict.ROOT-9185.roottest_cling_dict_ROOT_9185_ROOT9185](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98913/testReport/projectroot.roottest.cling.dict/ROOT-9185/roottest_cling_dict_ROOT_9185_ROOT9185/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6614#issuecomment-707278634
https://github.com/root-project/root/pull/6614#issuecomment-707605773:825,Testability,test,tests,825,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98938/console).; ### Warnings:; - [2020-10-13T08:58:48.277Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-10-13T08:59:31.573Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.dict.ROOT-9185.roottest_cling_dict_ROOT_9185_ROOT9185](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98938/testReport/projectroot.roottest.cling.dict/ROOT-9185/roottest_cling_dict_ROOT_9185_ROOT9185/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6614#issuecomment-707605773
https://github.com/root-project/root/pull/6614#issuecomment-707605773:997,Testability,test,testReport,997,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98938/console).; ### Warnings:; - [2020-10-13T08:58:48.277Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-10-13T08:59:31.573Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.dict.ROOT-9185.roottest_cling_dict_ROOT_9185_ROOT9185](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98938/testReport/projectroot.roottest.cling.dict/ROOT-9185/roottest_cling_dict_ROOT_9185_ROOT9185/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6614#issuecomment-707605773
https://github.com/root-project/root/pull/6614#issuecomment-707605773:370,Usability,clear,clearing,370,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98938/console).; ### Warnings:; - [2020-10-13T08:58:48.277Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-10-13T08:59:31.573Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.dict.ROOT-9185.roottest_cling_dict_ROOT_9185_ROOT9185](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98938/testReport/projectroot.roottest.cling.dict/ROOT-9185/roottest_cling_dict_ROOT_9185_ROOT9185/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6614#issuecomment-707605773
https://github.com/root-project/root/pull/6614#issuecomment-707605773:649,Usability,clear,clearing,649,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98938/console).; ### Warnings:; - [2020-10-13T08:58:48.277Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-10-13T08:59:31.573Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.dict.ROOT-9185.roottest_cling_dict_ROOT_9185_ROOT9185](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98938/testReport/projectroot.roottest.cling.dict/ROOT-9185/roottest_cling_dict_ROOT_9185_ROOT9185/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6614#issuecomment-707605773
https://github.com/root-project/root/issues/6625#issuecomment-708509017:299,Usability,guid,guide,299,The documentation is correct but you should use the one corresponding to your ROOT version.; See at the top of https://root.cern.ch/doc/master/classRooCategory.html you can change the ROOT version.; Choose 6.18 and you will get the right documentation corresponding to ROOT 6.18. The ROOT reference guide has several occurrences : https://root.cern/reference/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6625#issuecomment-708509017
https://github.com/root-project/root/issues/6644#issuecomment-713518912:298,Usability,simpl,simplicity,298,"> Moving towards a generic explicit implementation based on a markers is. I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713518912
https://github.com/root-project/root/issues/6644#issuecomment-713537805:306,Usability,simpl,simplicity,306,"> > Moving towards a generic explicit implementation based on a markers is; > ; > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons.; > ; > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?. After reading the discussion, I have no clear opinion, but... What about preserving the current behavior plus the one that @vgvassilev suggests, i.e. a marker (e.g. NullStmt) can be used to indicate that the previous expression should be printed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713537805
https://github.com/root-project/root/issues/6644#issuecomment-713537805:454,Usability,clear,clear,454,"> > Moving towards a generic explicit implementation based on a markers is; > ; > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons.; > ; > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?. After reading the discussion, I have no clear opinion, but... What about preserving the current behavior plus the one that @vgvassilev suggests, i.e. a marker (e.g. NullStmt) can be used to indicate that the previous expression should be printed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713537805
https://github.com/root-project/root/issues/6644#issuecomment-713611104:480,Availability,mainten,maintenance,480,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713611104
https://github.com/root-project/root/issues/6644#issuecomment-713611104:159,Deployability,upgrade,upgrade,159,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713611104
https://github.com/root-project/root/issues/6644#issuecomment-713611104:515,Integrability,interface,interfaces,515,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713611104
https://github.com/root-project/root/issues/6644#issuecomment-713611104:80,Usability,simpl,simple,80,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713611104
https://github.com/root-project/root/issues/6644#issuecomment-713643650:489,Availability,mainten,maintenance,489,"> IIUC a NullStmt would mean `if (true) {1;;}`.; > ; > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713643650
https://github.com/root-project/root/issues/6644#issuecomment-713643650:168,Deployability,upgrade,upgrade,168,"> IIUC a NullStmt would mean `if (true) {1;;}`.; > ; > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713643650
https://github.com/root-project/root/issues/6644#issuecomment-713643650:524,Integrability,interface,interfaces,524,"> IIUC a NullStmt would mean `if (true) {1;;}`.; > ; > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713643650
https://github.com/root-project/root/issues/6644#issuecomment-713643650:89,Usability,simpl,simple,89,"> IIUC a NullStmt would mean `if (true) {1;;}`.; > ; > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713643650
https://github.com/root-project/root/issues/6644#issuecomment-713756223:1065,Availability,error,error,1065,"ased on a markers is; > ; > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons.; > ; > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?. I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713756223
https://github.com/root-project/root/issues/6644#issuecomment-713756223:1100,Availability,error,error,1100,"ased on a markers is; > ; > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons.; > ; > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?. I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713756223
https://github.com/root-project/root/issues/6644#issuecomment-713756223:2065,Availability,mainten,maintenance,2065,"ast top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons.; > ; > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?. I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713756223
https://github.com/root-project/root/issues/6644#issuecomment-713756223:1630,Deployability,upgrade,upgrade,1630,"ast top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons.; > ; > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?. I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713756223
https://github.com/root-project/root/issues/6644#issuecomment-713756223:2100,Integrability,interface,interfaces,2100,"ast top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons.; > ; > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?. I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713756223
https://github.com/root-project/root/issues/6644#issuecomment-713756223:2159,Integrability,interface,interfaces,2159,"ast top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons.; > ; > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?. I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713756223
https://github.com/root-project/root/issues/6644#issuecomment-713756223:756,Modifiability,extend,extend,756,"> > Moving towards a generic explicit implementation based on a markers is; > ; > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons.; > ; > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?. I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713756223
https://github.com/root-project/root/issues/6644#issuecomment-713756223:306,Usability,simpl,simplicity,306,"> > Moving towards a generic explicit implementation based on a markers is; > ; > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons.; > ; > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?. I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713756223
https://github.com/root-project/root/issues/6644#issuecomment-713756223:668,Usability,clear,clearly,668,"> > Moving towards a generic explicit implementation based on a markers is; > ; > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons.; > ; > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?. I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713756223
https://github.com/root-project/root/issues/6644#issuecomment-713756223:944,Usability,clear,clear,944,"> > Moving towards a generic explicit implementation based on a markers is; > ; > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons.; > ; > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?. I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713756223
https://github.com/root-project/root/issues/6644#issuecomment-713756223:1182,Usability,simpl,simple,1182,"rguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons.; > ; > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?. I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfac",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713756223
https://github.com/root-project/root/issues/6651#issuecomment-1923341069:394,Deployability,update,update,394,Neither svg no png/jpeg images can be produced by eve.; With some efforts one could try to implement png support - but in my mind it is not necessary. This issue was created to let run different tutorials in special testing mode - ; and simply checks that tutorials are still valid. Also there are several tutorials with loop like:; ```; while (gSystem->ProcessEvents()) {; // do something; // update canvas; }; ```; In special testing mode one could limit this loop by several seconds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651#issuecomment-1923341069
https://github.com/root-project/root/issues/6651#issuecomment-1923341069:216,Testability,test,testing,216,Neither svg no png/jpeg images can be produced by eve.; With some efforts one could try to implement png support - but in my mind it is not necessary. This issue was created to let run different tutorials in special testing mode - ; and simply checks that tutorials are still valid. Also there are several tutorials with loop like:; ```; while (gSystem->ProcessEvents()) {; // do something; // update canvas; }; ```; In special testing mode one could limit this loop by several seconds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651#issuecomment-1923341069
https://github.com/root-project/root/issues/6651#issuecomment-1923341069:428,Testability,test,testing,428,Neither svg no png/jpeg images can be produced by eve.; With some efforts one could try to implement png support - but in my mind it is not necessary. This issue was created to let run different tutorials in special testing mode - ; and simply checks that tutorials are still valid. Also there are several tutorials with loop like:; ```; while (gSystem->ProcessEvents()) {; // do something; // update canvas; }; ```; In special testing mode one could limit this loop by several seconds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651#issuecomment-1923341069
https://github.com/root-project/root/issues/6651#issuecomment-1923341069:237,Usability,simpl,simply,237,Neither svg no png/jpeg images can be produced by eve.; With some efforts one could try to implement png support - but in my mind it is not necessary. This issue was created to let run different tutorials in special testing mode - ; and simply checks that tutorials are still valid. Also there are several tutorials with loop like:; ```; while (gSystem->ProcessEvents()) {; // do something; // update canvas; }; ```; In special testing mode one could limit this loop by several seconds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651#issuecomment-1923341069
https://github.com/root-project/root/pull/6665#issuecomment-713659494:18,Usability,clear,clear,18,To be reopened to clear clutter.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6665#issuecomment-713659494
https://github.com/root-project/root/issues/6670#issuecomment-714299930:22,Deployability,patch,patch,22,"Thanks for this quick patch. We have observed similar issues also at other places of the code, when calling TClass::New(), but we always found simple workarounds there as well. Together with #6535 (where we have a patch as well) these were the *only* issues in the entire H1@HERA analysis packages when going from ROOT5.34 to ROOT6.20. albeit it was initially developed for ROOT2.25 and CINT. Congrats to the ROOT developers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670#issuecomment-714299930
https://github.com/root-project/root/issues/6670#issuecomment-714299930:214,Deployability,patch,patch,214,"Thanks for this quick patch. We have observed similar issues also at other places of the code, when calling TClass::New(), but we always found simple workarounds there as well. Together with #6535 (where we have a patch as well) these were the *only* issues in the entire H1@HERA analysis packages when going from ROOT5.34 to ROOT6.20. albeit it was initially developed for ROOT2.25 and CINT. Congrats to the ROOT developers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670#issuecomment-714299930
https://github.com/root-project/root/issues/6670#issuecomment-714299930:143,Usability,simpl,simple,143,"Thanks for this quick patch. We have observed similar issues also at other places of the code, when calling TClass::New(), but we always found simple workarounds there as well. Together with #6535 (where we have a patch as well) these were the *only* issues in the entire H1@HERA analysis packages when going from ROOT5.34 to ROOT6.20. albeit it was initially developed for ROOT2.25 and CINT. Congrats to the ROOT developers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670#issuecomment-714299930
https://github.com/root-project/root/issues/6671#issuecomment-712711356:102,Usability,clear,clear,102,"Well, it's a DY sample, so physically spoken we would expect the upper one (?) Let's say, it's not so clear what's going on :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-712711356
https://github.com/root-project/root/issues/6671#issuecomment-2047770259:285,Availability,toler,tolerance,285,"Here is a implementation that may be naive, but I would argue catches the vast majority of the use cases:; ```c++; constexpr bool compare(float expected, float actual) {; // most simple and most common case; if (actual == expected); return true;. // comparison with an arbitrary small tolerance ; constexpr const float epsilon = std::numeric_limits<float>::epsilon();; const float delta = std::fabs(expected) * epsilon;; if ((actual > expected - delta) and (actual < expected + delta)); return true;; ; return false;; }; ```. If any of the arguments (the weight or the actual increment) is NaN or infinite the function should return `false`, which kind of makes sense in [the above context](https://github.com/root-project/root/issues/6671#issuecomment-2047035457).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-2047770259
https://github.com/root-project/root/issues/6671#issuecomment-2047770259:179,Usability,simpl,simple,179,"Here is a implementation that may be naive, but I would argue catches the vast majority of the use cases:; ```c++; constexpr bool compare(float expected, float actual) {; // most simple and most common case; if (actual == expected); return true;. // comparison with an arbitrary small tolerance ; constexpr const float epsilon = std::numeric_limits<float>::epsilon();; const float delta = std::fabs(expected) * epsilon;; if ((actual > expected - delta) and (actual < expected + delta)); return true;; ; return false;; }; ```. If any of the arguments (the weight or the actual increment) is NaN or infinite the function should return `false`, which kind of makes sense in [the above context](https://github.com/root-project/root/issues/6671#issuecomment-2047035457).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-2047770259
https://github.com/root-project/root/issues/6676#issuecomment-716413931:11,Testability,test,test,11,"Here's the test program for which I'm doing the massif profile:. ```cpp; #include ""ROOT/RDataFrame.hxx""; #include ""ROOT/RVec.hxx""; #include ""ROOT/RDF/RInterface.hxx""; #include ""TH1D.h""; #include ""TCanvas.h"". #include <string>; #include <vector>; #include <iostream>. int main() {; using namespace std;; using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;; for (auto& col: df.GetColumnNames()) {; const auto type = df.GetColumnType(col);; if (type.find(""RVec<Float_t>"") != string::npos) {; cols.emplace_back(col);; cout << ""Select column "" << col << "" with type "" << type << endl;; }; }. vector<RDF::RResultPtr<TH1D>> hists;; for (auto& col: cols) {; hists.emplace_back(df.Histo1D<RVec<float>>(col));; }. for (auto i = 0u; i < hists.size(); i++) {; auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);; hists[i]->Draw();; c->SaveAs((cols[i] + "".png"").c_str());; delete c;; }; }; ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from.; [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716413931
https://github.com/root-project/root/issues/6676#issuecomment-716413931:1112,Testability,log,log,1112,"Here's the test program for which I'm doing the massif profile:. ```cpp; #include ""ROOT/RDataFrame.hxx""; #include ""ROOT/RVec.hxx""; #include ""ROOT/RDF/RInterface.hxx""; #include ""TH1D.h""; #include ""TCanvas.h"". #include <string>; #include <vector>; #include <iostream>. int main() {; using namespace std;; using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;; for (auto& col: df.GetColumnNames()) {; const auto type = df.GetColumnType(col);; if (type.find(""RVec<Float_t>"") != string::npos) {; cols.emplace_back(col);; cout << ""Select column "" << col << "" with type "" << type << endl;; }; }. vector<RDF::RResultPtr<TH1D>> hists;; for (auto& col: cols) {; hists.emplace_back(df.Histo1D<RVec<float>>(col));; }. for (auto i = 0u; i < hists.size(); i++) {; auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);; hists[i]->Draw();; c->SaveAs((cols[i] + "".png"").c_str());; delete c;; }; }; ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from.; [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716413931
https://github.com/root-project/root/issues/6676#issuecomment-716413931:1181,Testability,log,log,1181,"Here's the test program for which I'm doing the massif profile:. ```cpp; #include ""ROOT/RDataFrame.hxx""; #include ""ROOT/RVec.hxx""; #include ""ROOT/RDF/RInterface.hxx""; #include ""TH1D.h""; #include ""TCanvas.h"". #include <string>; #include <vector>; #include <iostream>. int main() {; using namespace std;; using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;; for (auto& col: df.GetColumnNames()) {; const auto type = df.GetColumnType(col);; if (type.find(""RVec<Float_t>"") != string::npos) {; cols.emplace_back(col);; cout << ""Select column "" << col << "" with type "" << type << endl;; }; }. vector<RDF::RResultPtr<TH1D>> hists;; for (auto& col: cols) {; hists.emplace_back(df.Histo1D<RVec<float>>(col));; }. for (auto i = 0u; i < hists.size(); i++) {; auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);; hists[i]->Draw();; c->SaveAs((cols[i] + "".png"").c_str());; delete c;; }; }; ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from.; [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716413931
https://github.com/root-project/root/issues/6676#issuecomment-716413931:986,Usability,clear,clear,986,"Here's the test program for which I'm doing the massif profile:. ```cpp; #include ""ROOT/RDataFrame.hxx""; #include ""ROOT/RVec.hxx""; #include ""ROOT/RDF/RInterface.hxx""; #include ""TH1D.h""; #include ""TCanvas.h"". #include <string>; #include <vector>; #include <iostream>. int main() {; using namespace std;; using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;; for (auto& col: df.GetColumnNames()) {; const auto type = df.GetColumnType(col);; if (type.find(""RVec<Float_t>"") != string::npos) {; cols.emplace_back(col);; cout << ""Select column "" << col << "" with type "" << type << endl;; }; }. vector<RDF::RResultPtr<TH1D>> hists;; for (auto& col: cols) {; hists.emplace_back(df.Histo1D<RVec<float>>(col));; }. for (auto i = 0u; i < hists.size(); i++) {; auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);; hists[i]->Draw();; c->SaveAs((cols[i] + "".png"").c_str());; delete c;; }; }; ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from.; [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716413931
https://github.com/root-project/root/issues/6676#issuecomment-716413931:1010,Usability,learn,learn,1010,"Here's the test program for which I'm doing the massif profile:. ```cpp; #include ""ROOT/RDataFrame.hxx""; #include ""ROOT/RVec.hxx""; #include ""ROOT/RDF/RInterface.hxx""; #include ""TH1D.h""; #include ""TCanvas.h"". #include <string>; #include <vector>; #include <iostream>. int main() {; using namespace std;; using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;; for (auto& col: df.GetColumnNames()) {; const auto type = df.GetColumnType(col);; if (type.find(""RVec<Float_t>"") != string::npos) {; cols.emplace_back(col);; cout << ""Select column "" << col << "" with type "" << type << endl;; }; }. vector<RDF::RResultPtr<TH1D>> hists;; for (auto& col: cols) {; hists.emplace_back(df.Histo1D<RVec<float>>(col));; }. for (auto i = 0u; i < hists.size(); i++) {; auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);; hists[i]->Draw();; c->SaveAs((cols[i] + "".png"").c_str());; delete c;; }; }; ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from.; [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716413931
https://github.com/root-project/root/issues/6676#issuecomment-716413931:1067,Usability,clear,clear,1067,"Here's the test program for which I'm doing the massif profile:. ```cpp; #include ""ROOT/RDataFrame.hxx""; #include ""ROOT/RVec.hxx""; #include ""ROOT/RDF/RInterface.hxx""; #include ""TH1D.h""; #include ""TCanvas.h"". #include <string>; #include <vector>; #include <iostream>. int main() {; using namespace std;; using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;; for (auto& col: df.GetColumnNames()) {; const auto type = df.GetColumnType(col);; if (type.find(""RVec<Float_t>"") != string::npos) {; cols.emplace_back(col);; cout << ""Select column "" << col << "" with type "" << type << endl;; }; }. vector<RDF::RResultPtr<TH1D>> hists;; for (auto& col: cols) {; hists.emplace_back(df.Histo1D<RVec<float>>(col));; }. for (auto i = 0u; i < hists.size(); i++) {; auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);; hists[i]->Draw();; c->SaveAs((cols[i] + "".png"").c_str());; delete c;; }; }; ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from.; [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716413931
https://github.com/root-project/root/issues/6676#issuecomment-716447711:425,Integrability,synchroniz,synchronization,425,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716447711
https://github.com/root-project/root/issues/6676#issuecomment-716447711:184,Performance,perform,performed,184,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716447711
https://github.com/root-project/root/issues/6676#issuecomment-716447711:460,Performance,perform,performance,460,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716447711
https://github.com/root-project/root/issues/6676#issuecomment-716447711:89,Testability,log,log,89,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716447711
https://github.com/root-project/root/issues/6676#issuecomment-716447711:256,Usability,simpl,simplest,256,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716447711
https://github.com/root-project/root/issues/6676#issuecomment-716465521:175,Usability,clear,clear,175,"I wonder why the information is missing, it's a `RelWithDebInfo` build and no jitting involved :thinking: ; But I agree that combined with your knowledge about the code, it's clear where it comes from. It's not clear to me whether it's an issue or not. Definitely, it's confusing to see your machine blow up for no reason and I'm sure it's a pain to figure this out. What about a warning if you use histograms without a binning? But I don't see how we could do this so that the exploratory analysis in the shell isn't messed up with warnings all the time. Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716465521
https://github.com/root-project/root/issues/6676#issuecomment-716465521:211,Usability,clear,clear,211,"I wonder why the information is missing, it's a `RelWithDebInfo` build and no jitting involved :thinking: ; But I agree that combined with your knowledge about the code, it's clear where it comes from. It's not clear to me whether it's an issue or not. Definitely, it's confusing to see your machine blow up for no reason and I'm sure it's a pain to figure this out. What about a warning if you use histograms without a binning? But I don't see how we could do this so that the exploratory analysis in the shell isn't messed up with warnings all the time. Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716465521
https://github.com/root-project/root/issues/6677#issuecomment-713600538:29,Deployability,release,release,29,"> changing the flags for the release builds is not an option, right?. It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer!. > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution?. I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713600538
https://github.com/root-project/root/issues/6677#issuecomment-713600538:397,Deployability,patch,patch,397,"> changing the flags for the release builds is not an option, right?. It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer!. > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution?. I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713600538
https://github.com/root-project/root/issues/6677#issuecomment-713600538:255,Usability,simpl,simpler,255,"> changing the flags for the release builds is not an option, right?. It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer!. > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution?. I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713600538
https://github.com/root-project/root/issues/6677#issuecomment-713672604:250,Deployability,update,update,250,"Hi @Axel-Naumann ,. I would say ""both"". That is an event display from ZEUS, ""ported"" from ROOT5/Make to ROOT6/CMake. The userbase is small, so whenever someone needs it, some smaller of greater issues arise for various reasons (e.g. ROOT/OS/compiler update) and one has to debug them with the people who need that. No clear separation of ""debug"" and ""production"". And well, this event display is kind of small and fast, so there are no reasons to disable debug information ""in production"". Speed is lesser issue than correctness and stability. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713672604
https://github.com/root-project/root/issues/6677#issuecomment-713672604:318,Usability,clear,clear,318,"Hi @Axel-Naumann ,. I would say ""both"". That is an event display from ZEUS, ""ported"" from ROOT5/Make to ROOT6/CMake. The userbase is small, so whenever someone needs it, some smaller of greater issues arise for various reasons (e.g. ROOT/OS/compiler update) and one has to debug them with the people who need that. No clear separation of ""debug"" and ""production"". And well, this event display is kind of small and fast, so there are no reasons to disable debug information ""in production"". Speed is lesser issue than correctness and stability. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713672604
https://github.com/root-project/root/issues/6682#issuecomment-713430893:114,Modifiability,plugin,plugin,114,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this?. That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682#issuecomment-713430893
https://github.com/root-project/root/issues/6682#issuecomment-713430893:562,Modifiability,plugin,plugin,562,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this?. That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682#issuecomment-713430893
https://github.com/root-project/root/issues/6682#issuecomment-713430893:365,Usability,simpl,simply,365,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this?. That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682#issuecomment-713430893
https://github.com/root-project/root/pull/6684#issuecomment-713684777:515,Availability,mask,masks,515,"Hi @couet ,; the reproducer/test is. ```; //; // main.cxx. #include <iostream>; #include <stdlib.h>. #include <TColor.h>; #include <TRandom.h>; #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; TRandom* R1= new TRandom();; TRandom* R2= new TRandom();; TRandom* R3= ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684#issuecomment-713684777
https://github.com/root-project/root/pull/6684#issuecomment-713684777:907,Availability,mask,masks,907,"Hi @couet ,; the reproducer/test is. ```; //; // main.cxx. #include <iostream>; #include <stdlib.h>. #include <TColor.h>; #include <TRandom.h>; #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; TRandom* R1= new TRandom();; TRandom* R2= new TRandom();; TRandom* R3= ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684#issuecomment-713684777
https://github.com/root-project/root/pull/6684#issuecomment-713684777:1030,Availability,mask,mask,1030,"is. ```; //; // main.cxx. #include <iostream>; #include <stdlib.h>. #include <TColor.h>; #include <TRandom.h>; #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; TRandom* R1= new TRandom();; TRandom* R2= new TRandom();; TRandom* R3= new TRandom();; Float_t r1,g1,b1;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684#issuecomment-713684777
https://github.com/root-project/root/pull/6684#issuecomment-713684777:28,Testability,test,test,28,"Hi @couet ,; the reproducer/test is. ```; //; // main.cxx. #include <iostream>; #include <stdlib.h>. #include <TColor.h>; #include <TRandom.h>; #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; TRandom* R1= new TRandom();; TRandom* R2= new TRandom();; TRandom* R3= ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684#issuecomment-713684777
https://github.com/root-project/root/pull/6684#issuecomment-713684777:1367,Usability,clear,clear,1367,"ned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; TRandom* R1= new TRandom();; TRandom* R2= new TRandom();; TRandom* R3= new TRandom();; Float_t r1,g1,b1;; Float_t r2,g2,b2;; Float_t r3,g3,b3;; Float_t fHue1=-1.0f; ; Float_t fLight1=-1.0f;; Float_t fSaturation1 = -1.0f;; Float_t fHue2=-1.0f; ; Float_t fLight2=-1.0f;; Float_t fSaturation2 = -1.0f;; Float_t fHue3=-1.0f; ; Float_t fLight3=-1.0f;; Float_t fSaturation3 = -1.0f;; for (size_t i=0; i<1000000;i++); {; r1=16.0f*(1.0f-float(R1->Rndm()));; g1=16.0f*(1.0f-float(R1->Rndm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684#issuecomment-713684777
https://github.com/root-project/root/pull/6684#issuecomment-713684777:1699,Usability,clear,clear,1699,"-1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; TRandom* R1= new TRandom();; TRandom* R2= new TRandom();; TRandom* R3= new TRandom();; Float_t r1,g1,b1;; Float_t r2,g2,b2;; Float_t r3,g3,b3;; Float_t fHue1=-1.0f; ; Float_t fLight1=-1.0f;; Float_t fSaturation1 = -1.0f;; Float_t fHue2=-1.0f; ; Float_t fLight2=-1.0f;; Float_t fSaturation2 = -1.0f;; Float_t fHue3=-1.0f; ; Float_t fLight3=-1.0f;; Float_t fSaturation3 = -1.0f;; for (size_t i=0; i<1000000;i++); {; r1=16.0f*(1.0f-float(R1->Rndm()));; g1=16.0f*(1.0f-float(R1->Rndm()));; b1=16.0f*(1.0f-float(R1->Rndm()));; printf(""TColor::RGB2HLS(%f, %f, %f ...)->"",r1,g1,b1);; TColor::RGB2HLS( r1,g1,b1 ,fHue1, fLight1, fSaturation1);; printf(""%f, %f, %f\n"",fHue1, fLight1, fSaturation1);; }; for (size_t i=0; i<1000000;i++); {; r2=16.0f*(1.0f-float(R2->Rndm()));; g2=16.0f*(1.0f-float(R2->Rndm()));; b2=16.0f*(1.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684#issuecomment-713684777
https://github.com/root-project/root/pull/6684#issuecomment-715205130:85,Usability,simpl,simply,85,"Hi @Axel-Naumann ,. > Much of this has no effect on the resulting assembly; they are simply code churn. Some might result in slightly different assembly instructions, but I double they have a visible effect - can you convince us that this is needed?. This would be completely true if the clang would do its job well. Not the case, unfortunately. Therefore . > slightly different assembly instructions. actually matter. . > by including the case that this change fixes. The reproducer should not crash with these changes. >I don't see why this is needed. What I actually did is that I've put 'f' everywhere for the sake of consistency.; I completely agree that at least in some cases the changes will not matter even for clang. . >I'd be in favor of reducing the change to the few lines where it actually has an effect. OK. Revert the comparisons and leave the assignments? Does that sound reasonable?. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684#issuecomment-715205130
https://github.com/root-project/root/pull/6684#issuecomment-716479561:227,Usability,simpl,simply,227,"Hi @couet , @Axel-Naumann ,. would you have a look? This PR was discussed with a lot of details... Not having these fixes at least in nightlies prevents me from looking at other things in the debugged code. ( The stuff I debug simply crashes before ). And I would really like to debug as much as possible so the results would go into 6.24. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684#issuecomment-716479561
https://github.com/root-project/root/pull/6700#issuecomment-797527506:440,Modifiability,rewrite,rewrite,440,"Ad 1) With all the other modifications, I think in the end it is just simpler to build all the fields upfront. We'd save a bit of memory doing it on demand, but it will possibly take a little longer because we need to traverse the schema tree more often (for every leaf, we have to figure out again what are the parents). Ad 2) I'm fine with a squash on merge. I'd prefer not to squash individual commits, it's a long history and a partial rewrite will get it as wrong as the full history. Let me know if you like the squash commit over the rebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700#issuecomment-797527506
https://github.com/root-project/root/pull/6700#issuecomment-797527506:70,Usability,simpl,simpler,70,"Ad 1) With all the other modifications, I think in the end it is just simpler to build all the fields upfront. We'd save a bit of memory doing it on demand, but it will possibly take a little longer because we need to traverse the schema tree more often (for every leaf, we have to figure out again what are the parents). Ad 2) I'm fine with a squash on merge. I'd prefer not to squash individual commits, it's a long history and a partial rewrite will get it as wrong as the full history. Let me know if you like the squash commit over the rebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700#issuecomment-797527506
https://github.com/root-project/root/pull/6705#issuecomment-720092514:174,Deployability,update,updated,174,I further simplified and improved the design of the new MnPrint in commit https://github.com/root-project/root/pull/6705/commits/c804c2e7f129c8fe7ae5b34a188a45bf6847fc17 and updated the previous note about the design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-720092514
https://github.com/root-project/root/pull/6705#issuecomment-720092514:10,Usability,simpl,simplified,10,I further simplified and improved the design of the new MnPrint in commit https://github.com/root-project/root/pull/6705/commits/c804c2e7f129c8fe7ae5b34a188a45bf6847fc17 and updated the previous note about the design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-720092514
https://github.com/root-project/root/pull/6705#issuecomment-733046580:135,Deployability,patch,patch,135,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:; ```c++; MnPrint::AddFilter(""MnHesse"");; ```; To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:; ```c++; MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");; ```; To only match the beginning of the prefix string, use ""^"". For example,; ```c++; MnPrint::AddFilter(""^MnHesse"");; ```; only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:; ```c++; MnPrint::AddFilter(""Gradient"");; ```; to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-733046580
https://github.com/root-project/root/pull/6705#issuecomment-733046580:748,Deployability,toggle,toggle,748,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:; ```c++; MnPrint::AddFilter(""MnHesse"");; ```; To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:; ```c++; MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");; ```; To only match the beginning of the prefix string, use ""^"". For example,; ```c++; MnPrint::AddFilter(""^MnHesse"");; ```; only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:; ```c++; MnPrint::AddFilter(""Gradient"");; ```; to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-733046580
https://github.com/root-project/root/pull/6705#issuecomment-733046580:1979,Energy Efficiency,efficient,efficient,1979,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:; ```c++; MnPrint::AddFilter(""MnHesse"");; ```; To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:; ```c++; MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");; ```; To only match the beginning of the prefix string, use ""^"". For example,; ```c++; MnPrint::AddFilter(""^MnHesse"");; ```; only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:; ```c++; MnPrint::AddFilter(""Gradient"");; ```; to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-733046580
https://github.com/root-project/root/pull/6705#issuecomment-733046580:332,Integrability,message,messages,332,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:; ```c++; MnPrint::AddFilter(""MnHesse"");; ```; To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:; ```c++; MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");; ```; To only match the beginning of the prefix string, use ""^"". For example,; ```c++; MnPrint::AddFilter(""^MnHesse"");; ```; only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:; ```c++; MnPrint::AddFilter(""Gradient"");; ```; to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-733046580
https://github.com/root-project/root/pull/6705#issuecomment-733046580:818,Integrability,message,messages,818,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:; ```c++; MnPrint::AddFilter(""MnHesse"");; ```; To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:; ```c++; MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");; ```; To only match the beginning of the prefix string, use ""^"". For example,; ```c++; MnPrint::AddFilter(""^MnHesse"");; ```; only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:; ```c++; MnPrint::AddFilter(""Gradient"");; ```; to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-733046580
https://github.com/root-project/root/pull/6705#issuecomment-733046580:881,Integrability,message,messages,881,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:; ```c++; MnPrint::AddFilter(""MnHesse"");; ```; To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:; ```c++; MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");; ```; To only match the beginning of the prefix string, use ""^"". For example,; ```c++; MnPrint::AddFilter(""^MnHesse"");; ```; only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:; ```c++; MnPrint::AddFilter(""Gradient"");; ```; to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-733046580
https://github.com/root-project/root/pull/6705#issuecomment-733046580:959,Integrability,message,messages,959,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:; ```c++; MnPrint::AddFilter(""MnHesse"");; ```; To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:; ```c++; MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");; ```; To only match the beginning of the prefix string, use ""^"". For example,; ```c++; MnPrint::AddFilter(""^MnHesse"");; ```; only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:; ```c++; MnPrint::AddFilter(""Gradient"");; ```; to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-733046580
https://github.com/root-project/root/pull/6705#issuecomment-733046580:1006,Integrability,message,messages,1006,"n prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:; ```c++; MnPrint::AddFilter(""MnHesse"");; ```; To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:; ```c++; MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");; ```; To only match the beginning of the prefix string, use ""^"". For example,; ```c++; MnPrint::AddFilter(""^MnHesse"");; ```; only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:; ```c++; MnPrint::AddFilter(""Gradient"");; ```; to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code sim",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-733046580
https://github.com/root-project/root/pull/6705#issuecomment-733046580:1203,Integrability,message,message,1203,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:; ```c++; MnPrint::AddFilter(""MnHesse"");; ```; To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:; ```c++; MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");; ```; To only match the beginning of the prefix string, use ""^"". For example,; ```c++; MnPrint::AddFilter(""^MnHesse"");; ```; only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:; ```c++; MnPrint::AddFilter(""Gradient"");; ```; to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-733046580
https://github.com/root-project/root/pull/6705#issuecomment-733046580:1268,Integrability,message,messages,1268,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:; ```c++; MnPrint::AddFilter(""MnHesse"");; ```; To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:; ```c++; MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");; ```; To only match the beginning of the prefix string, use ""^"". For example,; ```c++; MnPrint::AddFilter(""^MnHesse"");; ```; only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:; ```c++; MnPrint::AddFilter(""Gradient"");; ```; to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-733046580
https://github.com/root-project/root/pull/6705#issuecomment-733046580:1363,Integrability,message,messages,1363,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:; ```c++; MnPrint::AddFilter(""MnHesse"");; ```; To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:; ```c++; MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");; ```; To only match the beginning of the prefix string, use ""^"". For example,; ```c++; MnPrint::AddFilter(""^MnHesse"");; ```; only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:; ```c++; MnPrint::AddFilter(""Gradient"");; ```; to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-733046580
https://github.com/root-project/root/pull/6705#issuecomment-733046580:1741,Integrability,message,messages,1741,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:; ```c++; MnPrint::AddFilter(""MnHesse"");; ```; To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:; ```c++; MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");; ```; To only match the beginning of the prefix string, use ""^"". For example,; ```c++; MnPrint::AddFilter(""^MnHesse"");; ```; only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:; ```c++; MnPrint::AddFilter(""Gradient"");; ```; to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-733046580
https://github.com/root-project/root/pull/6705#issuecomment-733046580:2026,Performance,perform,performance,2026,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:; ```c++; MnPrint::AddFilter(""MnHesse"");; ```; To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:; ```c++; MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");; ```; To only match the beginning of the prefix string, use ""^"". For example,; ```c++; MnPrint::AddFilter(""^MnHesse"");; ```; only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:; ```c++; MnPrint::AddFilter(""Gradient"");; ```; to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-733046580
https://github.com/root-project/root/pull/6705#issuecomment-733046580:2095,Performance,perform,performance,2095,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:; ```c++; MnPrint::AddFilter(""MnHesse"");; ```; To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:; ```c++; MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");; ```; To only match the beginning of the prefix string, use ""^"". For example,; ```c++; MnPrint::AddFilter(""^MnHesse"");; ```; only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:; ```c++; MnPrint::AddFilter(""Gradient"");; ```; to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-733046580
https://github.com/root-project/root/pull/6705#issuecomment-733046580:2010,Usability,simpl,simple,2010,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:; ```c++; MnPrint::AddFilter(""MnHesse"");; ```; To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:; ```c++; MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");; ```; To only match the beginning of the prefix string, use ""^"". For example,; ```c++; MnPrint::AddFilter(""^MnHesse"");; ```; only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:; ```c++; MnPrint::AddFilter(""Gradient"");; ```; to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-733046580
https://github.com/root-project/root/pull/6740#issuecomment-732759304:71,Energy Efficiency,reduce,reduce,71,"Hi @pcanal ,. this is quite a simple PR, would you have a look just to reduce the number of pull requests... Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740#issuecomment-732759304
https://github.com/root-project/root/pull/6740#issuecomment-732759304:30,Usability,simpl,simple,30,"Hi @pcanal ,. this is quite a simple PR, would you have a look just to reduce the number of pull requests... Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740#issuecomment-732759304
https://github.com/root-project/root/issues/6765#issuecomment-730306449:419,Integrability,contract,contracts,419,"See the linked PR for a hack to fix the issue. Looking at the issue in a debug build, I could find out that cppyy is the culprit. The issue is that if you import ROOT in another process (and the import happens in a previously pickled function), then cppyy is not there and some random INCREF on the cppyy module segfaults because of accessing a nullptr. It's to be discussed how to fix this properly since the implicit contracts done by pickle are not clear to me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6765#issuecomment-730306449
https://github.com/root-project/root/issues/6765#issuecomment-730306449:333,Security,access,accessing,333,"See the linked PR for a hack to fix the issue. Looking at the issue in a debug build, I could find out that cppyy is the culprit. The issue is that if you import ROOT in another process (and the import happens in a previously pickled function), then cppyy is not there and some random INCREF on the cppyy module segfaults because of accessing a nullptr. It's to be discussed how to fix this properly since the implicit contracts done by pickle are not clear to me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6765#issuecomment-730306449
https://github.com/root-project/root/issues/6765#issuecomment-730306449:452,Usability,clear,clear,452,"See the linked PR for a hack to fix the issue. Looking at the issue in a debug build, I could find out that cppyy is the culprit. The issue is that if you import ROOT in another process (and the import happens in a previously pickled function), then cppyy is not there and some random INCREF on the cppyy module segfaults because of accessing a nullptr. It's to be discussed how to fix this properly since the implicit contracts done by pickle are not clear to me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6765#issuecomment-730306449
https://github.com/root-project/root/pull/6782#issuecomment-724047732:371,Usability,clear,clearing,371,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/101392/console).; ### Warnings:; - [2020-11-09T13:44:17.560Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-11-09T13:57:44.970Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6782#issuecomment-724047732
https://github.com/root-project/root/pull/6782#issuecomment-724047732:650,Usability,clear,clearing,650,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/101392/console).; ### Warnings:; - [2020-11-09T13:44:17.560Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-11-09T13:57:44.970Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6782#issuecomment-724047732
https://github.com/root-project/root/issues/6784#issuecomment-724615880:137,Deployability,configurat,configuration-file,137,"@oshadura, according to [this cmake docu](https://cmake.org/cmake/help/git-stage/guide/importing-exporting/index.html#creating-a-package-configuration-file), one have to add something like `find_dependency(nlohmann_json)` into ROOTConfig.cmake. I did not found any example of usage of this macro in ROOT. ; I tried to use your code around `builtin_glew`, but it does not work.; `nlohmann_json` does not appear in exported targets.; Also direct call like; ```; export(TARGETS nlohmann_json::nlohmann_json NAMESPACE nlohmann_json:: APPEND FILE ${PROJECT_BINARY_DIR}/ROOTConfig-targets.cmake); ```; fail while `nlohmann_json::nlohmann_json` is not build and cmake does not allow to export it. Should I try with `find_dependency(nlohmann_json)`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6784#issuecomment-724615880
https://github.com/root-project/root/issues/6784#issuecomment-724615880:137,Modifiability,config,configuration-file,137,"@oshadura, according to [this cmake docu](https://cmake.org/cmake/help/git-stage/guide/importing-exporting/index.html#creating-a-package-configuration-file), one have to add something like `find_dependency(nlohmann_json)` into ROOTConfig.cmake. I did not found any example of usage of this macro in ROOT. ; I tried to use your code around `builtin_glew`, but it does not work.; `nlohmann_json` does not appear in exported targets.; Also direct call like; ```; export(TARGETS nlohmann_json::nlohmann_json NAMESPACE nlohmann_json:: APPEND FILE ${PROJECT_BINARY_DIR}/ROOTConfig-targets.cmake); ```; fail while `nlohmann_json::nlohmann_json` is not build and cmake does not allow to export it. Should I try with `find_dependency(nlohmann_json)`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6784#issuecomment-724615880
https://github.com/root-project/root/issues/6784#issuecomment-724615880:81,Usability,guid,guide,81,"@oshadura, according to [this cmake docu](https://cmake.org/cmake/help/git-stage/guide/importing-exporting/index.html#creating-a-package-configuration-file), one have to add something like `find_dependency(nlohmann_json)` into ROOTConfig.cmake. I did not found any example of usage of this macro in ROOT. ; I tried to use your code around `builtin_glew`, but it does not work.; `nlohmann_json` does not appear in exported targets.; Also direct call like; ```; export(TARGETS nlohmann_json::nlohmann_json NAMESPACE nlohmann_json:: APPEND FILE ${PROJECT_BINARY_DIR}/ROOTConfig-targets.cmake); ```; fail while `nlohmann_json::nlohmann_json` is not build and cmake does not allow to export it. Should I try with `find_dependency(nlohmann_json)`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6784#issuecomment-724615880
https://github.com/root-project/root/pull/6793#issuecomment-725915781:39,Deployability,release,release,39,"Hi, ; Yes I was surprised to that they release 2.4 with a backward incompatibility API. ; But the future is clear, it is tensorflow.keras and not a multi backend API",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6793#issuecomment-725915781
https://github.com/root-project/root/pull/6793#issuecomment-725915781:108,Usability,clear,clear,108,"Hi, ; Yes I was surprised to that they release 2.4 with a backward incompatibility API. ; But the future is clear, it is tensorflow.keras and not a multi backend API",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6793#issuecomment-725915781
https://github.com/root-project/root/issues/6822#issuecomment-728770705:330,Usability,guid,guide,330,Col2 option is a bitmap Representation of the histogram to make the col option very fast when the histogram has many bins and the bin size is close to one pixel. But this bitmap graphics and ps and pdf are vector graphics. So col2 produces an empty plot. This is not a bug. This feature is explained in the THistPainter reference guide (look at it) in the COL Option section.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6822#issuecomment-728770705
https://github.com/root-project/root/issues/6822#issuecomment-728772136:24,Usability,guid,guide,24,"Yeah, I found it in the guide. Thanks a lot. Best Regards，; Long LI; --------------------------------------------------------------------------; Institute of Frontier and Interdisciplinary Science, Shandong University. Addr：NO.72 Binhaidadao,Jimo,Qindao,PRC; E-mail: longli@mail.sdu.edu.cn; Tel: +86 13176405608 ; . On 11/17/2020 16:28，Olivier Couet<notifications@github.com> wrote：. Col2 option is a bitmap Representation of the histogram to make the col option very fast when the histogram has many bins and the bin size is close to one pixel. But this bitmap graphics and ps and pdf are vector graphics. So col2 produces an empty plot. This is not a bug. This feature is explained in the THistPainter reference guide (look at it) in the COL Option section.; —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub, or unsubscribe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6822#issuecomment-728772136
https://github.com/root-project/root/issues/6822#issuecomment-728772136:714,Usability,guid,guide,714,"Yeah, I found it in the guide. Thanks a lot. Best Regards，; Long LI; --------------------------------------------------------------------------; Institute of Frontier and Interdisciplinary Science, Shandong University. Addr：NO.72 Binhaidadao,Jimo,Qindao,PRC; E-mail: longli@mail.sdu.edu.cn; Tel: +86 13176405608 ; . On 11/17/2020 16:28，Olivier Couet<notifications@github.com> wrote：. Col2 option is a bitmap Representation of the histogram to make the col option very fast when the histogram has many bins and the bin size is close to one pixel. But this bitmap graphics and ps and pdf are vector graphics. So col2 produces an empty plot. This is not a bug. This feature is explained in the THistPainter reference guide (look at it) in the COL Option section.; —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub, or unsubscribe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6822#issuecomment-728772136
https://github.com/root-project/root/issues/6822#issuecomment-728877631:321,Safety,avoid,avoid,321,That was already discussed many time in the past. The problem is that doing that de pdf and ps files generated will be super huge and people will not realize it if they are running in batch. Some people had disk saturated. Col2 was explicitly created for that. So if we do what we suggest we do exactly what we wanted to avoid. All that is explained in de reference guide,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6822#issuecomment-728877631
https://github.com/root-project/root/issues/6822#issuecomment-728877631:366,Usability,guid,guide,366,That was already discussed many time in the past. The problem is that doing that de pdf and ps files generated will be super huge and people will not realize it if they are running in batch. Some people had disk saturated. Col2 was explicitly created for that. So if we do what we suggest we do exactly what we wanted to avoid. All that is explained in de reference guide,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6822#issuecomment-728877631
https://github.com/root-project/root/issues/6851#issuecomment-731616986:221,Availability,down,down,221,"This bug Edward reports was described at the ROOT forum two years ago by me in [this thread](https://root-forum.cern.ch/t/integral-with-limits-under-frac/31891). The MWE from that thread of mine can be further simplified down to just three lines of code actually:; ```; void drawl(); {; TLatex l;; l.DrawLatex(0.5, 0.3, ""#frac{#int_{0} v dt}{2}"");; }; ```; This snippet crashes (when ran in 6.14/04) with the same; ```; *ERROR<TLatex>: Missing denominator for #frac; ==> #frac{@{#int_{0}} v dt}{2@}; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6851#issuecomment-731616986
https://github.com/root-project/root/issues/6851#issuecomment-731616986:210,Usability,simpl,simplified,210,"This bug Edward reports was described at the ROOT forum two years ago by me in [this thread](https://root-forum.cern.ch/t/integral-with-limits-under-frac/31891). The MWE from that thread of mine can be further simplified down to just three lines of code actually:; ```; void drawl(); {; TLatex l;; l.DrawLatex(0.5, 0.3, ""#frac{#int_{0} v dt}{2}"");; }; ```; This snippet crashes (when ran in 6.14/04) with the same; ```; *ERROR<TLatex>: Missing denominator for #frac; ==> #frac{@{#int_{0}} v dt}{2@}; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6851#issuecomment-731616986
https://github.com/root-project/root/pull/6875#issuecomment-735477104:208,Usability,simpl,simple,208,"> if (gDebug > 0) Info(...) does not have that issue. To be correct, gDebug (and it's replacement) should be an atomic. Also (I probably missed something) are we replacing the current multi-level gDebug by a simple bool? (I.e. either nothing or a flood of a data)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-735477104
https://github.com/root-project/root/pull/6875#issuecomment-735623932:90,Usability,simpl,simple,90,"> Also (I probably missed something) are we replacing the current multi-level gDebug by a simple bool? (I.e. either nothing or a flood of a data)?. There are verbosity levels (fatal...debug), both global and per ""channel"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-735623932
https://github.com/root-project/root/pull/6875#issuecomment-740762392:292,Energy Efficiency,reduce,reduce,292,"Needs some more work as suggested by Philippe:; - [x] use namespace-scope functions with local statics instead of global channel variables (as agreed on by @eguiraud but I forgot...);; - [x] fwd declare that channel function and even its return type `RLogChannel` in the relevant headers, to reduce `#include` ""load"";; - [x] move ""ROOT"" prefix into channel ctor args (`RLogChannel(""ROOT.FitPanel"")`) to make it usable by non-ROOT code;. And #6931 which will go into a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-740762392
https://github.com/root-project/root/pull/6875#issuecomment-740762392:129,Modifiability,variab,variables,129,"Needs some more work as suggested by Philippe:; - [x] use namespace-scope functions with local statics instead of global channel variables (as agreed on by @eguiraud but I forgot...);; - [x] fwd declare that channel function and even its return type `RLogChannel` in the relevant headers, to reduce `#include` ""load"";; - [x] move ""ROOT"" prefix into channel ctor args (`RLogChannel(""ROOT.FitPanel"")`) to make it usable by non-ROOT code;. And #6931 which will go into a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-740762392
https://github.com/root-project/root/pull/6875#issuecomment-740762392:311,Performance,load,load,311,"Needs some more work as suggested by Philippe:; - [x] use namespace-scope functions with local statics instead of global channel variables (as agreed on by @eguiraud but I forgot...);; - [x] fwd declare that channel function and even its return type `RLogChannel` in the relevant headers, to reduce `#include` ""load"";; - [x] move ""ROOT"" prefix into channel ctor args (`RLogChannel(""ROOT.FitPanel"")`) to make it usable by non-ROOT code;. And #6931 which will go into a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-740762392
https://github.com/root-project/root/pull/6875#issuecomment-740762392:411,Usability,usab,usable,411,"Needs some more work as suggested by Philippe:; - [x] use namespace-scope functions with local statics instead of global channel variables (as agreed on by @eguiraud but I forgot...);; - [x] fwd declare that channel function and even its return type `RLogChannel` in the relevant headers, to reduce `#include` ""load"";; - [x] move ""ROOT"" prefix into channel ctor args (`RLogChannel(""ROOT.FitPanel"")`) to make it usable by non-ROOT code;. And #6931 which will go into a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-740762392
https://github.com/root-project/root/issues/6889#issuecomment-736290535:680,Availability,avail,available,680,"Hi Sergey, . The class `TJSON` is indeed similar to the library of _nlohmann_ except a whole lot more lean (_nlohmann_ is 14,748 lines of code, while `TJSON` is 962 lines of code - as per `sloccount`). _nhlohmann_ tries to be very general and in fact expands upon the JSON standard, while `TJSON` tries to be as simple as possible. . Also, for `TJSON` I tried to do a bit of ROOT integration. For example, one can get arrays as `TArrayD` or `TArrayI` if possible, or one can assign from `TParameter<T>`. This is simple to make life a little easier for people. . That said, I have no particular preference for either. However, you should consider in the build system to use system available installation of _nlohmann_ instead of using built-in copy. You really don't want different versions of the same code floating around on a given machine. . Yours,. Christian",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6889#issuecomment-736290535
https://github.com/root-project/root/issues/6889#issuecomment-736290535:380,Deployability,integrat,integration,380,"Hi Sergey, . The class `TJSON` is indeed similar to the library of _nlohmann_ except a whole lot more lean (_nlohmann_ is 14,748 lines of code, while `TJSON` is 962 lines of code - as per `sloccount`). _nhlohmann_ tries to be very general and in fact expands upon the JSON standard, while `TJSON` tries to be as simple as possible. . Also, for `TJSON` I tried to do a bit of ROOT integration. For example, one can get arrays as `TArrayD` or `TArrayI` if possible, or one can assign from `TParameter<T>`. This is simple to make life a little easier for people. . That said, I have no particular preference for either. However, you should consider in the build system to use system available installation of _nlohmann_ instead of using built-in copy. You really don't want different versions of the same code floating around on a given machine. . Yours,. Christian",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6889#issuecomment-736290535
https://github.com/root-project/root/issues/6889#issuecomment-736290535:690,Deployability,install,installation,690,"Hi Sergey, . The class `TJSON` is indeed similar to the library of _nlohmann_ except a whole lot more lean (_nlohmann_ is 14,748 lines of code, while `TJSON` is 962 lines of code - as per `sloccount`). _nhlohmann_ tries to be very general and in fact expands upon the JSON standard, while `TJSON` tries to be as simple as possible. . Also, for `TJSON` I tried to do a bit of ROOT integration. For example, one can get arrays as `TArrayD` or `TArrayI` if possible, or one can assign from `TParameter<T>`. This is simple to make life a little easier for people. . That said, I have no particular preference for either. However, you should consider in the build system to use system available installation of _nlohmann_ instead of using built-in copy. You really don't want different versions of the same code floating around on a given machine. . Yours,. Christian",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6889#issuecomment-736290535
https://github.com/root-project/root/issues/6889#issuecomment-736290535:380,Integrability,integrat,integration,380,"Hi Sergey, . The class `TJSON` is indeed similar to the library of _nlohmann_ except a whole lot more lean (_nlohmann_ is 14,748 lines of code, while `TJSON` is 962 lines of code - as per `sloccount`). _nhlohmann_ tries to be very general and in fact expands upon the JSON standard, while `TJSON` tries to be as simple as possible. . Also, for `TJSON` I tried to do a bit of ROOT integration. For example, one can get arrays as `TArrayD` or `TArrayI` if possible, or one can assign from `TParameter<T>`. This is simple to make life a little easier for people. . That said, I have no particular preference for either. However, you should consider in the build system to use system available installation of _nlohmann_ instead of using built-in copy. You really don't want different versions of the same code floating around on a given machine. . Yours,. Christian",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6889#issuecomment-736290535
https://github.com/root-project/root/issues/6889#issuecomment-736290535:312,Usability,simpl,simple,312,"Hi Sergey, . The class `TJSON` is indeed similar to the library of _nlohmann_ except a whole lot more lean (_nlohmann_ is 14,748 lines of code, while `TJSON` is 962 lines of code - as per `sloccount`). _nhlohmann_ tries to be very general and in fact expands upon the JSON standard, while `TJSON` tries to be as simple as possible. . Also, for `TJSON` I tried to do a bit of ROOT integration. For example, one can get arrays as `TArrayD` or `TArrayI` if possible, or one can assign from `TParameter<T>`. This is simple to make life a little easier for people. . That said, I have no particular preference for either. However, you should consider in the build system to use system available installation of _nlohmann_ instead of using built-in copy. You really don't want different versions of the same code floating around on a given machine. . Yours,. Christian",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6889#issuecomment-736290535
https://github.com/root-project/root/issues/6889#issuecomment-736290535:512,Usability,simpl,simple,512,"Hi Sergey, . The class `TJSON` is indeed similar to the library of _nlohmann_ except a whole lot more lean (_nlohmann_ is 14,748 lines of code, while `TJSON` is 962 lines of code - as per `sloccount`). _nhlohmann_ tries to be very general and in fact expands upon the JSON standard, while `TJSON` tries to be as simple as possible. . Also, for `TJSON` I tried to do a bit of ROOT integration. For example, one can get arrays as `TArrayD` or `TArrayI` if possible, or one can assign from `TParameter<T>`. This is simple to make life a little easier for people. . That said, I have no particular preference for either. However, you should consider in the build system to use system available installation of _nlohmann_ instead of using built-in copy. You really don't want different versions of the same code floating around on a given machine. . Yours,. Christian",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6889#issuecomment-736290535
https://github.com/root-project/root/pull/6919#issuecomment-780926697:105,Safety,detect,detected,105,"I think we can get away with something simpler where when IMT is on (or more precisely when TBB has been detected by cmake), we turn on a flag (`#define` in RConfigure.h) that change the way core/thread is build (and yes, in this optional mode, libThread would link against libTBB.so (or however it is spelt)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-780926697
https://github.com/root-project/root/pull/6919#issuecomment-780926697:39,Usability,simpl,simpler,39,"I think we can get away with something simpler where when IMT is on (or more precisely when TBB has been detected by cmake), we turn on a flag (`#define` in RConfigure.h) that change the way core/thread is build (and yes, in this optional mode, libThread would link against libTBB.so (or however it is spelt)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-780926697
https://github.com/root-project/root/pull/6935#issuecomment-758049841:165,Usability,simpl,simpler,165,"I think we can merge the PR. ; Maybe Omar, it is better to merge all commits of Anirudh in a single commit and the others in another one before merging it to have a simpler history",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6935#issuecomment-758049841
https://github.com/root-project/root/issues/6939#issuecomment-742755857:178,Usability,simpl,simply,178,"Marking this as ""improvement"" rather than ""bug"" because this is a known limitation. In fact, @pcanal I thought that opening a `TFile` in a thread and closing it from another was simply not supported? I.e. I thought issues were deeper than just a mismatched thread-local `gDirectory`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6939#issuecomment-742755857
https://github.com/root-project/root/issues/6948#issuecomment-746292691:144,Modifiability,plugin,plugins,144,"OK, I ran with XRD_LOGLEVEL=Dump, and you can see the response after. === stderr ===. saying:. Unable to process directory /alrb/.xrootd/client.plugins.d: [ERROR] OS Error: No such file or directory. Log file:. [xrootd_error_on_grid.pdf](https://github.com/root-project/root/files/5702981/xrootd_error_on_grid.pdf). The file:. root://marsedpm.in2p3.fr:1094//dpm/in2p3.fr/home/atlas/atlasdatadisk/rucio/mc16_13TeV/9c/ab/DAOD_HIGG2D1.23315577._000001.pool.root.1. of course opens correctly for a simple TOpen in any interactive ROOT session. see you, RD",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746292691
https://github.com/root-project/root/issues/6948#issuecomment-746292691:494,Usability,simpl,simple,494,"OK, I ran with XRD_LOGLEVEL=Dump, and you can see the response after. === stderr ===. saying:. Unable to process directory /alrb/.xrootd/client.plugins.d: [ERROR] OS Error: No such file or directory. Log file:. [xrootd_error_on_grid.pdf](https://github.com/root-project/root/files/5702981/xrootd_error_on_grid.pdf). The file:. root://marsedpm.in2p3.fr:1094//dpm/in2p3.fr/home/atlas/atlasdatadisk/rucio/mc16_13TeV/9c/ab/DAOD_HIGG2D1.23315577._000001.pool.root.1. of course opens correctly for a simple TOpen in any interactive ROOT session. see you, RD",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746292691
https://github.com/root-project/root/issues/6948#issuecomment-746412091:15,Testability,log,logs,15,Marseilles job logs are in:. [marseilles](https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480). and Cern jobs logs are in:; [Cern](https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746412091
https://github.com/root-project/root/issues/6948#issuecomment-746412091:221,Testability,log,log,221,Marseilles job logs are in:. [marseilles](https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480). and Cern jobs logs are in:; [Cern](https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746412091
https://github.com/root-project/root/issues/6948#issuecomment-746412091:241,Testability,log,log,241,Marseilles job logs are in:. [marseilles](https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480). and Cern jobs logs are in:; [Cern](https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746412091
https://github.com/root-project/root/issues/6948#issuecomment-746412091:318,Testability,log,logs,318,Marseilles job logs are in:. [marseilles](https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480). and Cern jobs logs are in:; [Cern](https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746412091
https://github.com/root-project/root/issues/6948#issuecomment-746412091:518,Testability,log,log,518,Marseilles job logs are in:. [marseilles](https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480). and Cern jobs logs are in:; [Cern](https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746412091
https://github.com/root-project/root/issues/6948#issuecomment-746412091:538,Testability,log,log,538,Marseilles job logs are in:. [marseilles](https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480). and Cern jobs logs are in:; [Cern](https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746412091
https://github.com/root-project/root/issues/6948#issuecomment-746412091:80,Usability,guid,guid,80,Marseilles job logs are in:. [marseilles](https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480). and Cern jobs logs are in:; [Cern](https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746412091
https://github.com/root-project/root/issues/6948#issuecomment-746412091:377,Usability,guid,guid,377,Marseilles job logs are in:. [marseilles](https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480). and Cern jobs logs are in:; [Cern](https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746412091
https://github.com/root-project/root/issues/6948#issuecomment-746431625:150,Deployability,release,release,150,"Hi,; Submit a job with compiled C to just open the Marseille file (code at; bottom). https://bigpanda.cern.ch/job?pandaid=4923453571. It has the same release, and it works! I am not sure if anything else is; different, but it points at the specific code rather than a pure TFile open; problem. Cheers,; Rod. $ cat main.C; #include <iostream>; #include <string>; #include ""TFile.h"". using namespace std;. int main(); {; TFile* davixFile = TFile::Open(""root://; eosatlas.cern.ch:1094//eos/atlas/atlasdatadisk/rucio/mc16_13TeV/25/31/DAOD_HIGG2D1.23315648._000001.pool.root.1; "",""READ"");; cout << ""coucou 5"" << endl;; davixFile->ls();; davixFile->Close();. return 0;; }. On Wed, 16 Dec 2020 at 15:50, rdschaffer <notifications@github.com> wrote:. > Marseilles job logs are in:; >; > marseilles; > <https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480>; >; > and Cern jobs logs are in:; > Cern; > <https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459>; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-746412091>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRTBK3POEBIWCBST673SVDCJNANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746431625
https://github.com/root-project/root/issues/6948#issuecomment-746431625:760,Testability,log,logs,760,"Hi,; Submit a job with compiled C to just open the Marseille file (code at; bottom). https://bigpanda.cern.ch/job?pandaid=4923453571. It has the same release, and it works! I am not sure if anything else is; different, but it points at the specific code rather than a pure TFile open; problem. Cheers,; Rod. $ cat main.C; #include <iostream>; #include <string>; #include ""TFile.h"". using namespace std;. int main(); {; TFile* davixFile = TFile::Open(""root://; eosatlas.cern.ch:1094//eos/atlas/atlasdatadisk/rucio/mc16_13TeV/25/31/DAOD_HIGG2D1.23315648._000001.pool.root.1; "",""READ"");; cout << ""coucou 5"" << endl;; davixFile->ls();; davixFile->Close();. return 0;; }. On Wed, 16 Dec 2020 at 15:50, rdschaffer <notifications@github.com> wrote:. > Marseilles job logs are in:; >; > marseilles; > <https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480>; >; > and Cern jobs logs are in:; > Cern; > <https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459>; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-746412091>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRTBK3POEBIWCBST673SVDCJNANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746431625
https://github.com/root-project/root/issues/6948#issuecomment-746431625:973,Testability,log,log,973,"Hi,; Submit a job with compiled C to just open the Marseille file (code at; bottom). https://bigpanda.cern.ch/job?pandaid=4923453571. It has the same release, and it works! I am not sure if anything else is; different, but it points at the specific code rather than a pure TFile open; problem. Cheers,; Rod. $ cat main.C; #include <iostream>; #include <string>; #include ""TFile.h"". using namespace std;. int main(); {; TFile* davixFile = TFile::Open(""root://; eosatlas.cern.ch:1094//eos/atlas/atlasdatadisk/rucio/mc16_13TeV/25/31/DAOD_HIGG2D1.23315648._000001.pool.root.1; "",""READ"");; cout << ""coucou 5"" << endl;; davixFile->ls();; davixFile->Close();. return 0;; }. On Wed, 16 Dec 2020 at 15:50, rdschaffer <notifications@github.com> wrote:. > Marseilles job logs are in:; >; > marseilles; > <https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480>; >; > and Cern jobs logs are in:; > Cern; > <https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459>; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-746412091>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRTBK3POEBIWCBST673SVDCJNANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746431625
https://github.com/root-project/root/issues/6948#issuecomment-746431625:993,Testability,log,log,993,"Hi,; Submit a job with compiled C to just open the Marseille file (code at; bottom). https://bigpanda.cern.ch/job?pandaid=4923453571. It has the same release, and it works! I am not sure if anything else is; different, but it points at the specific code rather than a pure TFile open; problem. Cheers,; Rod. $ cat main.C; #include <iostream>; #include <string>; #include ""TFile.h"". using namespace std;. int main(); {; TFile* davixFile = TFile::Open(""root://; eosatlas.cern.ch:1094//eos/atlas/atlasdatadisk/rucio/mc16_13TeV/25/31/DAOD_HIGG2D1.23315648._000001.pool.root.1; "",""READ"");; cout << ""coucou 5"" << endl;; davixFile->ls();; davixFile->Close();. return 0;; }. On Wed, 16 Dec 2020 at 15:50, rdschaffer <notifications@github.com> wrote:. > Marseilles job logs are in:; >; > marseilles; > <https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480>; >; > and Cern jobs logs are in:; > Cern; > <https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459>; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-746412091>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRTBK3POEBIWCBST673SVDCJNANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746431625
https://github.com/root-project/root/issues/6948#issuecomment-746431625:1075,Testability,log,logs,1075,"Hi,; Submit a job with compiled C to just open the Marseille file (code at; bottom). https://bigpanda.cern.ch/job?pandaid=4923453571. It has the same release, and it works! I am not sure if anything else is; different, but it points at the specific code rather than a pure TFile open; problem. Cheers,; Rod. $ cat main.C; #include <iostream>; #include <string>; #include ""TFile.h"". using namespace std;. int main(); {; TFile* davixFile = TFile::Open(""root://; eosatlas.cern.ch:1094//eos/atlas/atlasdatadisk/rucio/mc16_13TeV/25/31/DAOD_HIGG2D1.23315648._000001.pool.root.1; "",""READ"");; cout << ""coucou 5"" << endl;; davixFile->ls();; davixFile->Close();. return 0;; }. On Wed, 16 Dec 2020 at 15:50, rdschaffer <notifications@github.com> wrote:. > Marseilles job logs are in:; >; > marseilles; > <https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480>; >; > and Cern jobs logs are in:; > Cern; > <https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459>; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-746412091>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRTBK3POEBIWCBST673SVDCJNANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746431625
https://github.com/root-project/root/issues/6948#issuecomment-746431625:1279,Testability,log,log,1279,"Hi,; Submit a job with compiled C to just open the Marseille file (code at; bottom). https://bigpanda.cern.ch/job?pandaid=4923453571. It has the same release, and it works! I am not sure if anything else is; different, but it points at the specific code rather than a pure TFile open; problem. Cheers,; Rod. $ cat main.C; #include <iostream>; #include <string>; #include ""TFile.h"". using namespace std;. int main(); {; TFile* davixFile = TFile::Open(""root://; eosatlas.cern.ch:1094//eos/atlas/atlasdatadisk/rucio/mc16_13TeV/25/31/DAOD_HIGG2D1.23315648._000001.pool.root.1; "",""READ"");; cout << ""coucou 5"" << endl;; davixFile->ls();; davixFile->Close();. return 0;; }. On Wed, 16 Dec 2020 at 15:50, rdschaffer <notifications@github.com> wrote:. > Marseilles job logs are in:; >; > marseilles; > <https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480>; >; > and Cern jobs logs are in:; > Cern; > <https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459>; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-746412091>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRTBK3POEBIWCBST673SVDCJNANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746431625
https://github.com/root-project/root/issues/6948#issuecomment-746431625:1299,Testability,log,log,1299,"Hi,; Submit a job with compiled C to just open the Marseille file (code at; bottom). https://bigpanda.cern.ch/job?pandaid=4923453571. It has the same release, and it works! I am not sure if anything else is; different, but it points at the specific code rather than a pure TFile open; problem. Cheers,; Rod. $ cat main.C; #include <iostream>; #include <string>; #include ""TFile.h"". using namespace std;. int main(); {; TFile* davixFile = TFile::Open(""root://; eosatlas.cern.ch:1094//eos/atlas/atlasdatadisk/rucio/mc16_13TeV/25/31/DAOD_HIGG2D1.23315648._000001.pool.root.1; "",""READ"");; cout << ""coucou 5"" << endl;; davixFile->ls();; davixFile->Close();. return 0;; }. On Wed, 16 Dec 2020 at 15:50, rdschaffer <notifications@github.com> wrote:. > Marseilles job logs are in:; >; > marseilles; > <https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480>; >; > and Cern jobs logs are in:; > Cern; > <https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459>; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-746412091>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRTBK3POEBIWCBST673SVDCJNANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746431625
https://github.com/root-project/root/issues/6948#issuecomment-746431625:832,Usability,guid,guid,832,"Hi,; Submit a job with compiled C to just open the Marseille file (code at; bottom). https://bigpanda.cern.ch/job?pandaid=4923453571. It has the same release, and it works! I am not sure if anything else is; different, but it points at the specific code rather than a pure TFile open; problem. Cheers,; Rod. $ cat main.C; #include <iostream>; #include <string>; #include ""TFile.h"". using namespace std;. int main(); {; TFile* davixFile = TFile::Open(""root://; eosatlas.cern.ch:1094//eos/atlas/atlasdatadisk/rucio/mc16_13TeV/25/31/DAOD_HIGG2D1.23315648._000001.pool.root.1; "",""READ"");; cout << ""coucou 5"" << endl;; davixFile->ls();; davixFile->Close();. return 0;; }. On Wed, 16 Dec 2020 at 15:50, rdschaffer <notifications@github.com> wrote:. > Marseilles job logs are in:; >; > marseilles; > <https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480>; >; > and Cern jobs logs are in:; > Cern; > <https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459>; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-746412091>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRTBK3POEBIWCBST673SVDCJNANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746431625
https://github.com/root-project/root/issues/6948#issuecomment-746431625:1138,Usability,guid,guid,1138,"Hi,; Submit a job with compiled C to just open the Marseille file (code at; bottom). https://bigpanda.cern.ch/job?pandaid=4923453571. It has the same release, and it works! I am not sure if anything else is; different, but it points at the specific code rather than a pure TFile open; problem. Cheers,; Rod. $ cat main.C; #include <iostream>; #include <string>; #include ""TFile.h"". using namespace std;. int main(); {; TFile* davixFile = TFile::Open(""root://; eosatlas.cern.ch:1094//eos/atlas/atlasdatadisk/rucio/mc16_13TeV/25/31/DAOD_HIGG2D1.23315648._000001.pool.root.1; "",""READ"");; cout << ""coucou 5"" << endl;; davixFile->ls();; davixFile->Close();. return 0;; }. On Wed, 16 Dec 2020 at 15:50, rdschaffer <notifications@github.com> wrote:. > Marseilles job logs are in:; >; > marseilles; > <https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480>; >; > and Cern jobs logs are in:; > Cern; > <https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459>; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-746412091>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRTBK3POEBIWCBST673SVDCJNANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746431625
https://github.com/root-project/root/issues/6948#issuecomment-747328346:320,Availability,failure,failures,320,"Well, one thing that is clear is that this problem seems to be associated with specific sites. For my 'test' job:. [test job](https://bigpanda.cern.ch/task/23578674/). The sites that are successful either have local reading, or they use xrootd without problems. The latter are: ; SWT2_CPB; IN2P3-LPSC_LAKE; RAL. For the failures, these are all just xrootd problems, at sites:; IN2P3-CPPM; CERN-T0; TOKYO; BNL. So I would suspect some difference in the xrootd installation between these two sites. (I personally have no idea how to check this.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-747328346
https://github.com/root-project/root/issues/6948#issuecomment-747328346:459,Deployability,install,installation,459,"Well, one thing that is clear is that this problem seems to be associated with specific sites. For my 'test' job:. [test job](https://bigpanda.cern.ch/task/23578674/). The sites that are successful either have local reading, or they use xrootd without problems. The latter are: ; SWT2_CPB; IN2P3-LPSC_LAKE; RAL. For the failures, these are all just xrootd problems, at sites:; IN2P3-CPPM; CERN-T0; TOKYO; BNL. So I would suspect some difference in the xrootd installation between these two sites. (I personally have no idea how to check this.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-747328346
https://github.com/root-project/root/issues/6948#issuecomment-747328346:103,Testability,test,test,103,"Well, one thing that is clear is that this problem seems to be associated with specific sites. For my 'test' job:. [test job](https://bigpanda.cern.ch/task/23578674/). The sites that are successful either have local reading, or they use xrootd without problems. The latter are: ; SWT2_CPB; IN2P3-LPSC_LAKE; RAL. For the failures, these are all just xrootd problems, at sites:; IN2P3-CPPM; CERN-T0; TOKYO; BNL. So I would suspect some difference in the xrootd installation between these two sites. (I personally have no idea how to check this.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-747328346
https://github.com/root-project/root/issues/6948#issuecomment-747328346:116,Testability,test,test,116,"Well, one thing that is clear is that this problem seems to be associated with specific sites. For my 'test' job:. [test job](https://bigpanda.cern.ch/task/23578674/). The sites that are successful either have local reading, or they use xrootd without problems. The latter are: ; SWT2_CPB; IN2P3-LPSC_LAKE; RAL. For the failures, these are all just xrootd problems, at sites:; IN2P3-CPPM; CERN-T0; TOKYO; BNL. So I would suspect some difference in the xrootd installation between these two sites. (I personally have no idea how to check this.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-747328346
https://github.com/root-project/root/issues/6948#issuecomment-747328346:24,Usability,clear,clear,24,"Well, one thing that is clear is that this problem seems to be associated with specific sites. For my 'test' job:. [test job](https://bigpanda.cern.ch/task/23578674/). The sites that are successful either have local reading, or they use xrootd without problems. The latter are: ; SWT2_CPB; IN2P3-LPSC_LAKE; RAL. For the failures, these are all just xrootd problems, at sites:; IN2P3-CPPM; CERN-T0; TOKYO; BNL. So I would suspect some difference in the xrootd installation between these two sites. (I personally have no idea how to check this.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-747328346
https://github.com/root-project/root/issues/6948#issuecomment-757827313:866,Security,access,access,866,"OK, interactively, this is what I do:. cd /afs/cern.ch/work/s/schaffer/public/work-21.xAOD.RD_devRel21_prod25_2/build; setupATLAS; lsetup ""asetup 21.2.139,AnalysisBase""; source ../build/x86_64-centos7-gcc8-opt/setup.sh; ../run (or to any directory which you can write in); runH4lAnalRun2 -i root://eosatlas.cern.ch:1094//eos/atlas/atlasdatadisk/rucio/mc16_13TeV/85/26/DAOD_HIGG2D1.21658940._000001.pool.root.1 -d mc16_13TeV.345706.Sherpa_222_NNPDF30NNLO_ggllll_130M4l.deriv.DAOD_HIGG2D1.e6213_s3126_r9364_p4191 -e 5000. -e 5000 is just to read 5k events. This is reading an input file, what we call a derived AOD, and writes out a root file with simple trees. the setupATLAS is defined by:. export ATLAS_LOCAL_ROOT_BASE=/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase; alias setupATLAS='source ${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh'. But you'll need 'atlas' access, I presume. This is built with:. cmake ../source; make -jxx <as you like>. Not sure if this helps...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-757827313
https://github.com/root-project/root/issues/6948#issuecomment-757827313:646,Usability,simpl,simple,646,"OK, interactively, this is what I do:. cd /afs/cern.ch/work/s/schaffer/public/work-21.xAOD.RD_devRel21_prod25_2/build; setupATLAS; lsetup ""asetup 21.2.139,AnalysisBase""; source ../build/x86_64-centos7-gcc8-opt/setup.sh; ../run (or to any directory which you can write in); runH4lAnalRun2 -i root://eosatlas.cern.ch:1094//eos/atlas/atlasdatadisk/rucio/mc16_13TeV/85/26/DAOD_HIGG2D1.21658940._000001.pool.root.1 -d mc16_13TeV.345706.Sherpa_222_NNPDF30NNLO_ggllll_130M4l.deriv.DAOD_HIGG2D1.e6213_s3126_r9364_p4191 -e 5000. -e 5000 is just to read 5k events. This is reading an input file, what we call a derived AOD, and writes out a root file with simple trees. the setupATLAS is defined by:. export ATLAS_LOCAL_ROOT_BASE=/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase; alias setupATLAS='source ${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh'. But you'll need 'atlas' access, I presume. This is built with:. cmake ../source; make -jxx <as you like>. Not sure if this helps...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-757827313
https://github.com/root-project/root/issues/6948#issuecomment-760269958:235,Deployability,install,installed,235,it could be also the the call to `gethostname` failed and there's simply garbage:; https://github.com/xrootd/xrootd/blob/master/src/XrdNet/XrdNetUtils.cc#L622. @Axel-Naumann : are there debug symbols on cvmfs? were the libs rebuild or installed from EPEL?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760269958
https://github.com/root-project/root/issues/6948#issuecomment-760269958:66,Usability,simpl,simply,66,it could be also the the call to `gethostname` failed and there's simply garbage:; https://github.com/xrootd/xrootd/blob/master/src/XrdNet/XrdNetUtils.cc#L622. @Axel-Naumann : are there debug symbols on cvmfs? were the libs rebuild or installed from EPEL?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760269958
https://github.com/root-project/root/issues/6948#issuecomment-760382601:26,Modifiability,variab,variable,26,"Is there a way to see the variable values in the core with gdb? I don't think that we can understand this without seeing them. A simple gethostname works properly, as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760382601
https://github.com/root-project/root/issues/6948#issuecomment-760382601:129,Usability,simpl,simple,129,"Is there a way to see the variable values in the core with gdb? I don't think that we can understand this without seeing them. A simple gethostname works properly, as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760382601
https://github.com/root-project/root/issues/6948#issuecomment-760406417:484,Modifiability,variab,variable,484,"Hi,; I would have thought the relevant hostname is that of the xroot door,; rather than the WN hostname. This one has a port and maybe the weird IPv6; form.; // Convert the address as appropriate. Note that we do accept RFC5156; deprecated; // IPV4 mapped IPV6 addresses(i.e. [::a.b.c.d]. This is historical. but the BNL ones look like [ffff:a.b.c.d]. That ok too?. Cheers,; Rod. On Thu, 14 Jan 2021 at 19:22, rdschaffer <notifications@github.com> wrote:. > Is there a way to see the variable values in the core with gdb? I don't; > think that we can understand this without seeing them. A simple gethostname; > works properly, as expected.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-760382601>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRUCMYTVAMVVQ5YIULLSZ4Y67ANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760406417
https://github.com/root-project/root/issues/6948#issuecomment-760406417:590,Usability,simpl,simple,590,"Hi,; I would have thought the relevant hostname is that of the xroot door,; rather than the WN hostname. This one has a port and maybe the weird IPv6; form.; // Convert the address as appropriate. Note that we do accept RFC5156; deprecated; // IPV4 mapped IPV6 addresses(i.e. [::a.b.c.d]. This is historical. but the BNL ones look like [ffff:a.b.c.d]. That ok too?. Cheers,; Rod. On Thu, 14 Jan 2021 at 19:22, rdschaffer <notifications@github.com> wrote:. > Is there a way to see the variable values in the core with gdb? I don't; > think that we can understand this without seeing them. A simple gethostname; > works properly, as expected.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-760382601>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRUCMYTVAMVVQ5YIULLSZ4Y67ANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760406417
https://github.com/root-project/root/issues/6948#issuecomment-760719476:466,Availability,down,down,466,"Hi,. 1) Jobs at BNL fail regardless of the source file.; Backs up the gethostname theory. 2) I cannot reproduce with a simple C program containing a TFile::Open,; built after setting up the same release; g++ $(root-config --cflags --libs) -o main main.C; and running after the same setup.; Contradicts (1). I have not tried to build the binary that fails, so cannot really say my; small C program is built in the same way. Maybe RD could do that. Or; brutally strip down your code until it either starts working or is a simple; TFile::)open. I am really out of ideas unless the 1,2 contradiction can be removed. Could we build an xroot lib with more debug statements, and pass that with; the job?; I could ask sites about worker node characteristics to find a pattern, but; I`m not sure what to ask about.; IPv6, nscd, dns?. Cheers,; Rod. On Fri, 15 Jan 2021 at 06:55, Axel Naumann <notifications@github.com> wrote:. > @gganis <https://github.com/gganis> @peremato; > <https://github.com/peremato> would you know whether the xrootd libraries; > have their symbols stripped, or who might know?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-760664510>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRQWK7YZM6KZ5REVCTLSZ7KGFANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760719476
https://github.com/root-project/root/issues/6948#issuecomment-760719476:195,Deployability,release,release,195,"Hi,. 1) Jobs at BNL fail regardless of the source file.; Backs up the gethostname theory. 2) I cannot reproduce with a simple C program containing a TFile::Open,; built after setting up the same release; g++ $(root-config --cflags --libs) -o main main.C; and running after the same setup.; Contradicts (1). I have not tried to build the binary that fails, so cannot really say my; small C program is built in the same way. Maybe RD could do that. Or; brutally strip down your code until it either starts working or is a simple; TFile::)open. I am really out of ideas unless the 1,2 contradiction can be removed. Could we build an xroot lib with more debug statements, and pass that with; the job?; I could ask sites about worker node characteristics to find a pattern, but; I`m not sure what to ask about.; IPv6, nscd, dns?. Cheers,; Rod. On Fri, 15 Jan 2021 at 06:55, Axel Naumann <notifications@github.com> wrote:. > @gganis <https://github.com/gganis> @peremato; > <https://github.com/peremato> would you know whether the xrootd libraries; > have their symbols stripped, or who might know?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-760664510>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRQWK7YZM6KZ5REVCTLSZ7KGFANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760719476
https://github.com/root-project/root/issues/6948#issuecomment-760719476:215,Modifiability,config,config,215,"Hi,. 1) Jobs at BNL fail regardless of the source file.; Backs up the gethostname theory. 2) I cannot reproduce with a simple C program containing a TFile::Open,; built after setting up the same release; g++ $(root-config --cflags --libs) -o main main.C; and running after the same setup.; Contradicts (1). I have not tried to build the binary that fails, so cannot really say my; small C program is built in the same way. Maybe RD could do that. Or; brutally strip down your code until it either starts working or is a simple; TFile::)open. I am really out of ideas unless the 1,2 contradiction can be removed. Could we build an xroot lib with more debug statements, and pass that with; the job?; I could ask sites about worker node characteristics to find a pattern, but; I`m not sure what to ask about.; IPv6, nscd, dns?. Cheers,; Rod. On Fri, 15 Jan 2021 at 06:55, Axel Naumann <notifications@github.com> wrote:. > @gganis <https://github.com/gganis> @peremato; > <https://github.com/peremato> would you know whether the xrootd libraries; > have their symbols stripped, or who might know?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-760664510>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRQWK7YZM6KZ5REVCTLSZ7KGFANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760719476
https://github.com/root-project/root/issues/6948#issuecomment-760719476:119,Usability,simpl,simple,119,"Hi,. 1) Jobs at BNL fail regardless of the source file.; Backs up the gethostname theory. 2) I cannot reproduce with a simple C program containing a TFile::Open,; built after setting up the same release; g++ $(root-config --cflags --libs) -o main main.C; and running after the same setup.; Contradicts (1). I have not tried to build the binary that fails, so cannot really say my; small C program is built in the same way. Maybe RD could do that. Or; brutally strip down your code until it either starts working or is a simple; TFile::)open. I am really out of ideas unless the 1,2 contradiction can be removed. Could we build an xroot lib with more debug statements, and pass that with; the job?; I could ask sites about worker node characteristics to find a pattern, but; I`m not sure what to ask about.; IPv6, nscd, dns?. Cheers,; Rod. On Fri, 15 Jan 2021 at 06:55, Axel Naumann <notifications@github.com> wrote:. > @gganis <https://github.com/gganis> @peremato; > <https://github.com/peremato> would you know whether the xrootd libraries; > have their symbols stripped, or who might know?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-760664510>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRQWK7YZM6KZ5REVCTLSZ7KGFANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760719476
https://github.com/root-project/root/issues/6948#issuecomment-760719476:520,Usability,simpl,simple,520,"Hi,. 1) Jobs at BNL fail regardless of the source file.; Backs up the gethostname theory. 2) I cannot reproduce with a simple C program containing a TFile::Open,; built after setting up the same release; g++ $(root-config --cflags --libs) -o main main.C; and running after the same setup.; Contradicts (1). I have not tried to build the binary that fails, so cannot really say my; small C program is built in the same way. Maybe RD could do that. Or; brutally strip down your code until it either starts working or is a simple; TFile::)open. I am really out of ideas unless the 1,2 contradiction can be removed. Could we build an xroot lib with more debug statements, and pass that with; the job?; I could ask sites about worker node characteristics to find a pattern, but; I`m not sure what to ask about.; IPv6, nscd, dns?. Cheers,; Rod. On Fri, 15 Jan 2021 at 06:55, Axel Naumann <notifications@github.com> wrote:. > @gganis <https://github.com/gganis> @peremato; > <https://github.com/peremato> would you know whether the xrootd libraries; > have their symbols stripped, or who might know?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-760664510>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRQWK7YZM6KZ5REVCTLSZ7KGFANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760719476
https://github.com/root-project/root/issues/6948#issuecomment-760749391:1057,Security,access,access,1057,"Hi there,. OK, I think that I have found the culprit, but I don't understand the reasons. The main difference of our current 'minitree production' jobs this round is that we included a build of the MCFM physics generator with the build of our analysis code and we use it while running to calculate physics matrix elements for each event. . So to test this, I rebuilt our analysis code without building MCFM, and of course no longer calculate the matrix elements. I submitted this to the BNL site, and we read the files fine:. H4lAnalRun2 INFO processEvents: try to open file: root://dcgftp.usatlas.bnl.gov:1096//pnfs/usatlas.bnl.gov/BNLT0D1/rucio/mc16_13TeV/84/1f/DAOD_HIGG2D1.23315636._000001.pool.root.1; H4lAnalRun2 INFO processEvents: called TFile Open ; H4lAnalRun2 INFO processEvents - opened file 0 root://dcgftp.usatlas.bnl.gov:1096//pnfs/usatlas.bnl.gov/BNLT0D1/rucio/mc16_13TeV/84/1f/DAOD_HIGG2D1.23315636._000001.pool.root.1; H4lAnalRun2 INFO notifyNewFile: Entering. which as you may remember is the TFile::Open on a file which would use xrootd access. The job continues fine, reading 6 files, as one would expect. Now there is no matrix element calculated before we start reading the events. So it must be that somehow linking in the MCFM libraries causes problems for calling the gethostname. I must admit that I have no idea how/why this would 'interfere', since MCFM is not run at all before the TFile::Open. . So I think that we can let this bug report rest for now. If anyone might have ideas on how to check or fix the MCFM problem, suggestions are welcome. But I no longer think that xrootd has a problem. This is clearly a problem in how we have set up our client code. Thanks all for your time spent on this!. see you, RD",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760749391
https://github.com/root-project/root/issues/6948#issuecomment-760749391:346,Testability,test,test,346,"Hi there,. OK, I think that I have found the culprit, but I don't understand the reasons. The main difference of our current 'minitree production' jobs this round is that we included a build of the MCFM physics generator with the build of our analysis code and we use it while running to calculate physics matrix elements for each event. . So to test this, I rebuilt our analysis code without building MCFM, and of course no longer calculate the matrix elements. I submitted this to the BNL site, and we read the files fine:. H4lAnalRun2 INFO processEvents: try to open file: root://dcgftp.usatlas.bnl.gov:1096//pnfs/usatlas.bnl.gov/BNLT0D1/rucio/mc16_13TeV/84/1f/DAOD_HIGG2D1.23315636._000001.pool.root.1; H4lAnalRun2 INFO processEvents: called TFile Open ; H4lAnalRun2 INFO processEvents - opened file 0 root://dcgftp.usatlas.bnl.gov:1096//pnfs/usatlas.bnl.gov/BNLT0D1/rucio/mc16_13TeV/84/1f/DAOD_HIGG2D1.23315636._000001.pool.root.1; H4lAnalRun2 INFO notifyNewFile: Entering. which as you may remember is the TFile::Open on a file which would use xrootd access. The job continues fine, reading 6 files, as one would expect. Now there is no matrix element calculated before we start reading the events. So it must be that somehow linking in the MCFM libraries causes problems for calling the gethostname. I must admit that I have no idea how/why this would 'interfere', since MCFM is not run at all before the TFile::Open. . So I think that we can let this bug report rest for now. If anyone might have ideas on how to check or fix the MCFM problem, suggestions are welcome. But I no longer think that xrootd has a problem. This is clearly a problem in how we have set up our client code. Thanks all for your time spent on this!. see you, RD",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760749391
https://github.com/root-project/root/issues/6948#issuecomment-760749391:1634,Usability,clear,clearly,1634,"Hi there,. OK, I think that I have found the culprit, but I don't understand the reasons. The main difference of our current 'minitree production' jobs this round is that we included a build of the MCFM physics generator with the build of our analysis code and we use it while running to calculate physics matrix elements for each event. . So to test this, I rebuilt our analysis code without building MCFM, and of course no longer calculate the matrix elements. I submitted this to the BNL site, and we read the files fine:. H4lAnalRun2 INFO processEvents: try to open file: root://dcgftp.usatlas.bnl.gov:1096//pnfs/usatlas.bnl.gov/BNLT0D1/rucio/mc16_13TeV/84/1f/DAOD_HIGG2D1.23315636._000001.pool.root.1; H4lAnalRun2 INFO processEvents: called TFile Open ; H4lAnalRun2 INFO processEvents - opened file 0 root://dcgftp.usatlas.bnl.gov:1096//pnfs/usatlas.bnl.gov/BNLT0D1/rucio/mc16_13TeV/84/1f/DAOD_HIGG2D1.23315636._000001.pool.root.1; H4lAnalRun2 INFO notifyNewFile: Entering. which as you may remember is the TFile::Open on a file which would use xrootd access. The job continues fine, reading 6 files, as one would expect. Now there is no matrix element calculated before we start reading the events. So it must be that somehow linking in the MCFM libraries causes problems for calling the gethostname. I must admit that I have no idea how/why this would 'interfere', since MCFM is not run at all before the TFile::Open. . So I think that we can let this bug report rest for now. If anyone might have ideas on how to check or fix the MCFM problem, suggestions are welcome. But I no longer think that xrootd has a problem. This is clearly a problem in how we have set up our client code. Thanks all for your time spent on this!. see you, RD",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760749391
https://github.com/root-project/root/pull/6968#issuecomment-754547105:43,Usability,clear,clear,43,"OK, thank you Manos for the answers. It is clear now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968#issuecomment-754547105
https://github.com/root-project/root/issues/6991#issuecomment-755354821:53,Usability,simpl,simple,53,"As said in the forum, this can be reproduced doing a simple zoom on the X axis of a THStack plot.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6991#issuecomment-755354821
https://github.com/root-project/root/pull/6999#issuecomment-758267044:34,Usability,undo,undo,34,"Yes, we will have to consistently undo a set of other changes, namely in the tmva cmake files and rootcling.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999#issuecomment-758267044
https://github.com/root-project/root/pull/7002#issuecomment-1802744447:76,Usability,simpl,simplification,76,"Hi @xvallspl, @lmoneta , what's the status of this PR? It looks like a nice simplification to me",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7002#issuecomment-1802744447
https://github.com/root-project/root/pull/7002#issuecomment-1848739574:78,Usability,simpl,simplification,78,"> Hi @xvallspl, @lmoneta , what's the status of this PR? It looks like a nice simplification to me. Since there was no answer I rebased the PR on master and solved the conflicts. Maybe seeing now the CI results will help us to make a decision on how to continue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7002#issuecomment-1848739574
https://github.com/root-project/root/issues/7012#issuecomment-759308690:85,Usability,simpl,simpler,85,"Are you talking about JSROOT or ROOT itself? And if it is ROOT, would that be really simpler than a single self-extracting executable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7012#issuecomment-759308690
https://github.com/root-project/root/pull/7017#issuecomment-758699032:61,Deployability,patch,patch,61,I was hoping to get a chance to review this PR and provide a patch to stitch to this commit for clearer history. The rest of this PR is here -- #7027,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7017#issuecomment-758699032
https://github.com/root-project/root/pull/7017#issuecomment-758699032:96,Usability,clear,clearer,96,I was hoping to get a chance to review this PR and provide a patch to stitch to this commit for clearer history. The rest of this PR is here -- #7027,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7017#issuecomment-758699032
https://github.com/root-project/root/pull/7024#issuecomment-760058242:50,Usability,learn,learning,50,Thank you for all the help and patience guys. I'm learning a lot.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7024#issuecomment-760058242
https://github.com/root-project/root/pull/7031#issuecomment-801033691:404,Modifiability,extend,extend,404,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this?. If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-801033691
https://github.com/root-project/root/pull/7031#issuecomment-801033691:231,Testability,test,test,231,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this?. If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-801033691
https://github.com/root-project/root/pull/7031#issuecomment-801033691:265,Testability,test,tests,265,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this?. If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-801033691
https://github.com/root-project/root/pull/7031#issuecomment-801033691:372,Testability,test,test,372,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this?. If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-801033691
https://github.com/root-project/root/pull/7031#issuecomment-801033691:338,Usability,guid,guidance,338,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this?. If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-801033691
https://github.com/root-project/root/pull/7031#issuecomment-801033691:391,Usability,learn,learn,391,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this?. If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-801033691
https://github.com/root-project/root/pull/7031#issuecomment-804060890:27,Testability,test,tests,27,"We really only want Google tests in root.git (I realize I did not word that clearly enough), so I will apply your test (thanks!) to our dedicated roottest.git repo. Could you split the test into a separate commit? That way I don't mess with your changes as much :-) Or if you don't mind me messing with your commits I can also split this myself - let me know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-804060890
https://github.com/root-project/root/pull/7031#issuecomment-804060890:114,Testability,test,test,114,"We really only want Google tests in root.git (I realize I did not word that clearly enough), so I will apply your test (thanks!) to our dedicated roottest.git repo. Could you split the test into a separate commit? That way I don't mess with your changes as much :-) Or if you don't mind me messing with your commits I can also split this myself - let me know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-804060890
https://github.com/root-project/root/pull/7031#issuecomment-804060890:185,Testability,test,test,185,"We really only want Google tests in root.git (I realize I did not word that clearly enough), so I will apply your test (thanks!) to our dedicated roottest.git repo. Could you split the test into a separate commit? That way I don't mess with your changes as much :-) Or if you don't mind me messing with your commits I can also split this myself - let me know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-804060890
https://github.com/root-project/root/pull/7031#issuecomment-804060890:76,Usability,clear,clearly,76,"We really only want Google tests in root.git (I realize I did not word that clearly enough), so I will apply your test (thanks!) to our dedicated roottest.git repo. Could you split the test into a separate commit? That way I don't mess with your changes as much :-) Or if you don't mind me messing with your commits I can also split this myself - let me know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-804060890
https://github.com/root-project/root/pull/7033#issuecomment-759494622:621,Availability,error,error,621,https://github.com/root-project/root/pull/7033/files#diff-db4685eef4f677b824081ed3667b66c57d14b163edaef2b5d545b2a708ec1e15R217-R226; ```c++; #ifdef R__USE_IMT; std::unique_ptr<ROOT::TThreadExecutor> fThreadExecutor;; #else; #define fThreadExecutor fSequentialExecutor; #endif; #ifndef R__WIN32; std::unique_ptr<ROOT::TProcessExecutor> fProcessExecutor;; #else; #define fProcessExecutor fSequentialExecutor; #endif; ```. This is very non-intuitive because it only works for code that follows this declaration. Additionally I would guess these `define`s spill over to user code with potentially very confusing problems and error messages...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033#issuecomment-759494622
https://github.com/root-project/root/pull/7033#issuecomment-759494622:627,Integrability,message,messages,627,https://github.com/root-project/root/pull/7033/files#diff-db4685eef4f677b824081ed3667b66c57d14b163edaef2b5d545b2a708ec1e15R217-R226; ```c++; #ifdef R__USE_IMT; std::unique_ptr<ROOT::TThreadExecutor> fThreadExecutor;; #else; #define fThreadExecutor fSequentialExecutor; #endif; #ifndef R__WIN32; std::unique_ptr<ROOT::TProcessExecutor> fProcessExecutor;; #else; #define fProcessExecutor fSequentialExecutor; #endif; ```. This is very non-intuitive because it only works for code that follows this declaration. Additionally I would guess these `define`s spill over to user code with potentially very confusing problems and error messages...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033#issuecomment-759494622
https://github.com/root-project/root/pull/7033#issuecomment-759494622:437,Usability,intuit,intuitive,437,https://github.com/root-project/root/pull/7033/files#diff-db4685eef4f677b824081ed3667b66c57d14b163edaef2b5d545b2a708ec1e15R217-R226; ```c++; #ifdef R__USE_IMT; std::unique_ptr<ROOT::TThreadExecutor> fThreadExecutor;; #else; #define fThreadExecutor fSequentialExecutor; #endif; #ifndef R__WIN32; std::unique_ptr<ROOT::TProcessExecutor> fProcessExecutor;; #else; #define fProcessExecutor fSequentialExecutor; #endif; ```. This is very non-intuitive because it only works for code that follows this declaration. Additionally I would guess these `define`s spill over to user code with potentially very confusing problems and error messages...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033#issuecomment-759494622
https://github.com/root-project/root/issues/7047#issuecomment-771507725:749,Deployability,release,release,749,"Hi @Harshalzzzzzzz ,; ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null; - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior; - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047#issuecomment-771507725
https://github.com/root-project/root/issues/7047#issuecomment-771507725:880,Deployability,release,release,880,"Hi @Harshalzzzzzzz ,; ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null; - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior; - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047#issuecomment-771507725
https://github.com/root-project/root/issues/7047#issuecomment-771507725:1083,Deployability,release,release,1083,"Hi @Harshalzzzzzzz ,; ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null; - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior; - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047#issuecomment-771507725
https://github.com/root-project/root/issues/7047#issuecomment-771507725:58,Integrability,interface,interface,58,"Hi @Harshalzzzzzzz ,; ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null; - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior; - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047#issuecomment-771507725
https://github.com/root-project/root/issues/7047#issuecomment-771507725:329,Integrability,wrap,wrapped,329,"Hi @Harshalzzzzzzz ,; ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null; - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior; - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047#issuecomment-771507725
https://github.com/root-project/root/issues/7047#issuecomment-771507725:606,Integrability,interface,interface,606,"Hi @Harshalzzzzzzz ,; ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null; - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior; - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047#issuecomment-771507725
https://github.com/root-project/root/issues/7047#issuecomment-771507725:513,Security,access,accesses,513,"Hi @Harshalzzzzzzz ,; ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null; - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior; - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047#issuecomment-771507725
https://github.com/root-project/root/issues/7047#issuecomment-771507725:1168,Testability,test,tests,1168,"Hi @Harshalzzzzzzz ,; ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null; - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior; - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047#issuecomment-771507725
https://github.com/root-project/root/issues/7047#issuecomment-771507725:1209,Testability,test,test,1209,"Hi @Harshalzzzzzzz ,; ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null; - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior; - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047#issuecomment-771507725
https://github.com/root-project/root/issues/7047#issuecomment-771507725:1351,Testability,log,logic,1351,"Hi @Harshalzzzzzzz ,; ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null; - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior; - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047#issuecomment-771507725
https://github.com/root-project/root/issues/7047#issuecomment-771507725:814,Usability,simpl,simple,814,"Hi @Harshalzzzzzzz ,; ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null; - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior; - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047#issuecomment-771507725
https://github.com/root-project/root/pull/7075#issuecomment-764675439:55,Integrability,rout,routine,55,Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-764675439
https://github.com/root-project/root/pull/7075#issuecomment-764675439:98,Integrability,inject,injected,98,Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-764675439
https://github.com/root-project/root/pull/7075#issuecomment-764675439:98,Security,inject,injected,98,Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-764675439
https://github.com/root-project/root/pull/7075#issuecomment-764675439:207,Usability,simpl,simple,207,Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-764675439
https://github.com/root-project/root/pull/7075#issuecomment-764677587:57,Integrability,rout,routine,57,"> Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that. I think that's `gSystem->Exit(0)` that was used before. You can pass a second parameter (called `mode` and effectively undocumented AFAICT) that makes it call `_exit()` instead of `exit()`. However, I'm not sure if we need to close `TFile`s because the workers don't open them, the parent should handle them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-764677587
https://github.com/root-project/root/pull/7075#issuecomment-764677587:100,Integrability,inject,injected,100,"> Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that. I think that's `gSystem->Exit(0)` that was used before. You can pass a second parameter (called `mode` and effectively undocumented AFAICT) that makes it call `_exit()` instead of `exit()`. However, I'm not sure if we need to close `TFile`s because the workers don't open them, the parent should handle them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-764677587
https://github.com/root-project/root/pull/7075#issuecomment-764677587:100,Security,inject,injected,100,"> Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that. I think that's `gSystem->Exit(0)` that was used before. You can pass a second parameter (called `mode` and effectively undocumented AFAICT) that makes it call `_exit()` instead of `exit()`. However, I'm not sure if we need to close `TFile`s because the workers don't open them, the parent should handle them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-764677587
https://github.com/root-project/root/pull/7075#issuecomment-764677587:209,Usability,simpl,simple,209,"> Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that. I think that's `gSystem->Exit(0)` that was used before. You can pass a second parameter (called `mode` and effectively undocumented AFAICT) that makes it call `_exit()` instead of `exit()`. However, I'm not sure if we need to close `TFile`s because the workers don't open them, the parent should handle them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-764677587
https://github.com/root-project/root/pull/7075#issuecomment-764677587:351,Usability,undo,undocumented,351,"> Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that. I think that's `gSystem->Exit(0)` that was used before. You can pass a second parameter (called `mode` and effectively undocumented AFAICT) that makes it call `_exit()` instead of `exit()`. However, I'm not sure if we need to close `TFile`s because the workers don't open them, the parent should handle them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-764677587
https://github.com/root-project/root/issues/7092#issuecomment-2046133207:452,Integrability,depend,dependencies,452,"Thanks for opening this issue!. The training part of TMVA is not developed anymore, that's why this issue was not be addressed. Sorry for not giving any feedback and leaving it in limbo state for so long. See also: https://indico.cern.ch/event/1356068/contributions/5709442/attachments/2811744/4907885/ML4EP_Feedback.pdf. Quote from slide 4:; > We want to support experiments inference (C++) for cases that are difficult to; implement or require heavy dependencies.; We don’t want to compete with existing industry tools for training.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7092#issuecomment-2046133207
https://github.com/root-project/root/issues/7092#issuecomment-2046133207:153,Usability,feedback,feedback,153,"Thanks for opening this issue!. The training part of TMVA is not developed anymore, that's why this issue was not be addressed. Sorry for not giving any feedback and leaving it in limbo state for so long. See also: https://indico.cern.ch/event/1356068/contributions/5709442/attachments/2811744/4907885/ML4EP_Feedback.pdf. Quote from slide 4:; > We want to support experiments inference (C++) for cases that are difficult to; implement or require heavy dependencies.; We don’t want to compete with existing industry tools for training.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7092#issuecomment-2046133207
https://github.com/root-project/root/pull/7106#issuecomment-770832284:110,Usability,clear,clear,110,"@bendavid do you have anything against renaming `{S,G}etTaksPerWorker` to `{S,G}etMaxTasksPerWorker`? So it's clear that it's not a precise setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7106#issuecomment-770832284
https://github.com/root-project/root/pull/7107#issuecomment-778229985:556,Testability,log,logic,556,"I'm afraid the ""book everything first, use results later"" is the price to pay to run everything in a single event loop: we need to know what to run before we run it, and at the same time we have to run the event loop to produce the result if you do things with it. However, by the time you lose track of where things were defined because your analysis is too complex, you probably should restructure your code so that you don't keep everything in a single function. Analyses that produce hundreds or thousands of histograms typically have some bookkeeping logic, they don't keep all results at main scope. Some of the more complex RDF tutorials show some possible ways to do it, e.g. in Python we keep `RResultPtr<TH1D>`s in a dictionary. There are other possible designs, like e.g. continuations on futures, but I don't think they increase readability/clarity in general. Anyway, the empirical reply to the original question: we never got the feedback that the ""book first, use later"" programming model made users lose track of the results.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7107#issuecomment-778229985
https://github.com/root-project/root/pull/7107#issuecomment-778229985:944,Usability,feedback,feedback,944,"I'm afraid the ""book everything first, use results later"" is the price to pay to run everything in a single event loop: we need to know what to run before we run it, and at the same time we have to run the event loop to produce the result if you do things with it. However, by the time you lose track of where things were defined because your analysis is too complex, you probably should restructure your code so that you don't keep everything in a single function. Analyses that produce hundreds or thousands of histograms typically have some bookkeeping logic, they don't keep all results at main scope. Some of the more complex RDF tutorials show some possible ways to do it, e.g. in Python we keep `RResultPtr<TH1D>`s in a dictionary. There are other possible designs, like e.g. continuations on futures, but I don't think they increase readability/clarity in general. Anyway, the empirical reply to the original question: we never got the feedback that the ""book first, use later"" programming model made users lose track of the results.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7107#issuecomment-778229985
https://github.com/root-project/root/issues/7115#issuecomment-770361561:214,Usability,simpl,simple,214,"I investigated a bit more in depth the problem and it seems like the regex_error gets thrown as soon as I plot a composite pdf or by calling RooFit::Components, in fact given the previous example with expo being a simple exponential. ```; RooExponential expo((""modelBkgTot""+trigCatS).c_str(), (""modelBkgTot""+trigCatS).c_str(), *B_plus_DTFM_M_zero, lambda);; expo.plotOn(frame);; ```. works, but as soon as I do for example:. ```; RooAddPdf modelSigTot((""modelSigTot""+trigCatS).c_str(), (""modelSigTot""+trigCatS).c_str(), RooArgList(modelSig0, modelSig1, modelSig2), RooArgList(frac0gamma, frac1gamma));; modelSigTot.plotOn(frame); ```. I get:. ```; terminate called after throwing an instance of 'std::regex_error'; what(): Unexpected character in brace expression.; Aborted (core dumped); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7115#issuecomment-770361561
https://github.com/root-project/root/issues/7115#issuecomment-777299090:148,Availability,down,down,148,"RooFormula was overhauled, which seems to be the only place where regexes show up in diffs. I think there's two simple things we can do to trace it down in a second:; - You attach a debugger and set a breakpoint on exception throw.; - You post an example that the root team can run. In the end, it can probably be solved by escaping the relevant characters in the name of an object.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7115#issuecomment-777299090
https://github.com/root-project/root/issues/7115#issuecomment-777299090:112,Usability,simpl,simple,112,"RooFormula was overhauled, which seems to be the only place where regexes show up in diffs. I think there's two simple things we can do to trace it down in a second:; - You attach a debugger and set a breakpoint on exception throw.; - You post an example that the root team can run. In the end, it can probably be solved by escaping the relevant characters in the name of an object.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7115#issuecomment-777299090
https://github.com/root-project/root/issues/7125#issuecomment-912860678:81,Deployability,update,updated,81,"Note: a similar issue. A given build after being left alone for a while and then updated and rebuild cease to properly autoload libPhysics based on usage of TVector3 (all of `TVector3 v;` `TVector3::Class()`, `TClass::GetClass(""TVector3"")` where failing complaining `TVector3` was not known. No amount of rebuild corrected the problem, nor was there any indication of why it would not find a properly formed library. but simply doing `rm lib/modules.idx` did :( ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7125#issuecomment-912860678
https://github.com/root-project/root/issues/7125#issuecomment-912860678:421,Usability,simpl,simply,421,"Note: a similar issue. A given build after being left alone for a while and then updated and rebuild cease to properly autoload libPhysics based on usage of TVector3 (all of `TVector3 v;` `TVector3::Class()`, `TClass::GetClass(""TVector3"")` where failing complaining `TVector3` was not known. No amount of rebuild corrected the problem, nor was there any indication of why it would not find a properly formed library. but simply doing `rm lib/modules.idx` did :( ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7125#issuecomment-912860678
https://github.com/root-project/root/issues/7127#issuecomment-773427043:82,Testability,test,test,82,"Hi Konstantin,. Implementation is relatively simple, but I have no possibility to test the code.; If you can test changed code, I can provide it very soon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-773427043
https://github.com/root-project/root/issues/7127#issuecomment-773427043:109,Testability,test,test,109,"Hi Konstantin,. Implementation is relatively simple, but I have no possibility to test the code.; If you can test changed code, I can provide it very soon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-773427043
https://github.com/root-project/root/issues/7127#issuecomment-773427043:45,Usability,simpl,simple,45,"Hi Konstantin,. Implementation is relatively simple, but I have no possibility to test the code.; If you can test changed code, I can provide it very soon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-773427043
https://github.com/root-project/root/issues/7127#issuecomment-774529790:814,Deployability,patch,patches,814,"Indeed, the presence of the last optional parameter of the 'TSQLStatement ::SetBinary', which is called 'maxsize', looks very strange for me. If i set binary buffer (void* 'mem' variable) and set its size in bytes ('size' variable), what does the 'maxsize' variable mean? Isn't it obvious how much memory needs to be allocated if the 'size' parameter is specified?; 'maxsize' optional parameter may specify something else, but, unfortunately, i can't find meaning of the parameters in the current ROOT reference guide. Please, add this check, because the presence of the both 'size' and 'maxsize' variables is not obvious, at least, for me. So, i never used the 'maxsize' parameter. After the addition, i'll check one more. Other tests have passed well.; The fixes in older branches is not required (i can use own patches). But if it doesn't take a long time for you, then it would be valuable, because the last FairRoot version, we are based on, has ROOT 6.20.08.; Thank you. With respect, Konstantin.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-774529790
https://github.com/root-project/root/issues/7127#issuecomment-774529790:317,Energy Efficiency,allocate,allocated,317,"Indeed, the presence of the last optional parameter of the 'TSQLStatement ::SetBinary', which is called 'maxsize', looks very strange for me. If i set binary buffer (void* 'mem' variable) and set its size in bytes ('size' variable), what does the 'maxsize' variable mean? Isn't it obvious how much memory needs to be allocated if the 'size' parameter is specified?; 'maxsize' optional parameter may specify something else, but, unfortunately, i can't find meaning of the parameters in the current ROOT reference guide. Please, add this check, because the presence of the both 'size' and 'maxsize' variables is not obvious, at least, for me. So, i never used the 'maxsize' parameter. After the addition, i'll check one more. Other tests have passed well.; The fixes in older branches is not required (i can use own patches). But if it doesn't take a long time for you, then it would be valuable, because the last FairRoot version, we are based on, has ROOT 6.20.08.; Thank you. With respect, Konstantin.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-774529790
https://github.com/root-project/root/issues/7127#issuecomment-774529790:178,Modifiability,variab,variable,178,"Indeed, the presence of the last optional parameter of the 'TSQLStatement ::SetBinary', which is called 'maxsize', looks very strange for me. If i set binary buffer (void* 'mem' variable) and set its size in bytes ('size' variable), what does the 'maxsize' variable mean? Isn't it obvious how much memory needs to be allocated if the 'size' parameter is specified?; 'maxsize' optional parameter may specify something else, but, unfortunately, i can't find meaning of the parameters in the current ROOT reference guide. Please, add this check, because the presence of the both 'size' and 'maxsize' variables is not obvious, at least, for me. So, i never used the 'maxsize' parameter. After the addition, i'll check one more. Other tests have passed well.; The fixes in older branches is not required (i can use own patches). But if it doesn't take a long time for you, then it would be valuable, because the last FairRoot version, we are based on, has ROOT 6.20.08.; Thank you. With respect, Konstantin.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-774529790
https://github.com/root-project/root/issues/7127#issuecomment-774529790:222,Modifiability,variab,variable,222,"Indeed, the presence of the last optional parameter of the 'TSQLStatement ::SetBinary', which is called 'maxsize', looks very strange for me. If i set binary buffer (void* 'mem' variable) and set its size in bytes ('size' variable), what does the 'maxsize' variable mean? Isn't it obvious how much memory needs to be allocated if the 'size' parameter is specified?; 'maxsize' optional parameter may specify something else, but, unfortunately, i can't find meaning of the parameters in the current ROOT reference guide. Please, add this check, because the presence of the both 'size' and 'maxsize' variables is not obvious, at least, for me. So, i never used the 'maxsize' parameter. After the addition, i'll check one more. Other tests have passed well.; The fixes in older branches is not required (i can use own patches). But if it doesn't take a long time for you, then it would be valuable, because the last FairRoot version, we are based on, has ROOT 6.20.08.; Thank you. With respect, Konstantin.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-774529790
https://github.com/root-project/root/issues/7127#issuecomment-774529790:257,Modifiability,variab,variable,257,"Indeed, the presence of the last optional parameter of the 'TSQLStatement ::SetBinary', which is called 'maxsize', looks very strange for me. If i set binary buffer (void* 'mem' variable) and set its size in bytes ('size' variable), what does the 'maxsize' variable mean? Isn't it obvious how much memory needs to be allocated if the 'size' parameter is specified?; 'maxsize' optional parameter may specify something else, but, unfortunately, i can't find meaning of the parameters in the current ROOT reference guide. Please, add this check, because the presence of the both 'size' and 'maxsize' variables is not obvious, at least, for me. So, i never used the 'maxsize' parameter. After the addition, i'll check one more. Other tests have passed well.; The fixes in older branches is not required (i can use own patches). But if it doesn't take a long time for you, then it would be valuable, because the last FairRoot version, we are based on, has ROOT 6.20.08.; Thank you. With respect, Konstantin.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-774529790
https://github.com/root-project/root/issues/7127#issuecomment-774529790:597,Modifiability,variab,variables,597,"Indeed, the presence of the last optional parameter of the 'TSQLStatement ::SetBinary', which is called 'maxsize', looks very strange for me. If i set binary buffer (void* 'mem' variable) and set its size in bytes ('size' variable), what does the 'maxsize' variable mean? Isn't it obvious how much memory needs to be allocated if the 'size' parameter is specified?; 'maxsize' optional parameter may specify something else, but, unfortunately, i can't find meaning of the parameters in the current ROOT reference guide. Please, add this check, because the presence of the both 'size' and 'maxsize' variables is not obvious, at least, for me. So, i never used the 'maxsize' parameter. After the addition, i'll check one more. Other tests have passed well.; The fixes in older branches is not required (i can use own patches). But if it doesn't take a long time for you, then it would be valuable, because the last FairRoot version, we are based on, has ROOT 6.20.08.; Thank you. With respect, Konstantin.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-774529790
https://github.com/root-project/root/issues/7127#issuecomment-774529790:730,Testability,test,tests,730,"Indeed, the presence of the last optional parameter of the 'TSQLStatement ::SetBinary', which is called 'maxsize', looks very strange for me. If i set binary buffer (void* 'mem' variable) and set its size in bytes ('size' variable), what does the 'maxsize' variable mean? Isn't it obvious how much memory needs to be allocated if the 'size' parameter is specified?; 'maxsize' optional parameter may specify something else, but, unfortunately, i can't find meaning of the parameters in the current ROOT reference guide. Please, add this check, because the presence of the both 'size' and 'maxsize' variables is not obvious, at least, for me. So, i never used the 'maxsize' parameter. After the addition, i'll check one more. Other tests have passed well.; The fixes in older branches is not required (i can use own patches). But if it doesn't take a long time for you, then it would be valuable, because the last FairRoot version, we are based on, has ROOT 6.20.08.; Thank you. With respect, Konstantin.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-774529790
https://github.com/root-project/root/issues/7127#issuecomment-774529790:512,Usability,guid,guide,512,"Indeed, the presence of the last optional parameter of the 'TSQLStatement ::SetBinary', which is called 'maxsize', looks very strange for me. If i set binary buffer (void* 'mem' variable) and set its size in bytes ('size' variable), what does the 'maxsize' variable mean? Isn't it obvious how much memory needs to be allocated if the 'size' parameter is specified?; 'maxsize' optional parameter may specify something else, but, unfortunately, i can't find meaning of the parameters in the current ROOT reference guide. Please, add this check, because the presence of the both 'size' and 'maxsize' variables is not obvious, at least, for me. So, i never used the 'maxsize' parameter. After the addition, i'll check one more. Other tests have passed well.; The fixes in older branches is not required (i can use own patches). But if it doesn't take a long time for you, then it would be valuable, because the last FairRoot version, we are based on, has ROOT 6.20.08.; Thank you. With respect, Konstantin.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-774529790
https://github.com/root-project/root/pull/7132#issuecomment-782457854:114,Usability,learn,learned,114,> Congrats @AdvaitDhingra !. Thank you 😊. And thank you to everyone for their help (especially @eguiraud). I have learned a lot and will continue to contribute to this project 😀. Have a nice weekend.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-782457854
https://github.com/root-project/root/pull/7141#issuecomment-775225994:136,Usability,simpl,simply,136,"> @bellenot I should directly fork this right?; > Or should this be pulled to a particular location?; > Thank you for your inputs. Yes, simply forking is enough, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7141#issuecomment-775225994
https://github.com/root-project/root/pull/7142#issuecomment-779138913:255,Usability,guid,guidance,255,"@eguiraud Sorry about the issue, I had selected wrong rebase version while trying to squash commits, my bad.; PR is Fixed now and in accordance with the suggested clang-format.; I will definitely improve my PRs for future contributions, grateful for your guidance and suggestions. Thanks for your inputs !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7142#issuecomment-779138913
https://github.com/root-project/root/issues/7143#issuecomment-775238821:23,Testability,test,tested,23,"_Should_ be fixed (and tested), let me know if you have any feedback (it would be great if you could pick that branch and check it fixes your usecase, or alternatively a nightly build tomorrow -- I plan to merge the fix today).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7143#issuecomment-775238821
https://github.com/root-project/root/issues/7143#issuecomment-775238821:60,Usability,feedback,feedback,60,"_Should_ be fixed (and tested), let me know if you have any feedback (it would be great if you could pick that branch and check it fixes your usecase, or alternatively a nightly build tomorrow -- I plan to merge the fix today).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7143#issuecomment-775238821
https://github.com/root-project/root/issues/7151#issuecomment-779333149:9,Usability,simpl,simply,9,"Can't we simply take `vector<double>`s instead of `int size, double*`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7151#issuecomment-779333149
https://github.com/root-project/root/issues/7156#issuecomment-775978601:22,Usability,simpl,simply,22,@ferdymercury you can simply use a `TGPictureButton` with your own enabled/disabled LED pictures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7156#issuecomment-775978601
https://github.com/root-project/root/issues/7156#issuecomment-776008358:114,Usability,simpl,simple,114,"Well, sorry but since we are in the process of moving to a Web based GUI (using openUI5), and since this is quite simple to be implemented on the user side, I don't think we're going to create a new widget. But we'll discuss this and I'll come back to you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7156#issuecomment-776008358
https://github.com/root-project/root/issues/7160#issuecomment-2041497684:28,Usability,simpl,simpler,28,I would go for (b) it looks simpler .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7160#issuecomment-2041497684
https://github.com/root-project/root/issues/7169#issuecomment-776729215:427,Availability,error,error,427,"A simpler reproducer, generating a tree with:. ```cpp; void generate_tree() {; TFile f(""file.root"", ""RECREATE"");; TTree t(""tree"", ""tree"");; std::string x(""foo"");; t.Branch(""x"", &x);; t.Fill();; f.Write();; f.Close();; }; ```. and then running:; ```python; # tree generated in C++; import ROOT. df = ROOT.RDataFrame('tree', 'file.root'); hist = df.Histo1D('x'). ROOT.std.string. print(hist.GetEntries()); ```. triggers the same error. The culprit here is the lookup of `std::string`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7169#issuecomment-776729215
https://github.com/root-project/root/issues/7169#issuecomment-776729215:2,Usability,simpl,simpler,2,"A simpler reproducer, generating a tree with:. ```cpp; void generate_tree() {; TFile f(""file.root"", ""RECREATE"");; TTree t(""tree"", ""tree"");; std::string x(""foo"");; t.Branch(""x"", &x);; t.Fill();; f.Write();; f.Close();; }; ```. and then running:; ```python; # tree generated in C++; import ROOT. df = ROOT.RDataFrame('tree', 'file.root'); hist = df.Histo1D('x'). ROOT.std.string. print(hist.GetEntries()); ```. triggers the same error. The culprit here is the lookup of `std::string`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7169#issuecomment-776729215
https://github.com/root-project/root/issues/7169#issuecomment-776819414:2,Usability,simpl,simpler,2,"A simpler reproducer, after digging what triggers the problem in the cppyy code:. ```python; # tree generated in C++; import ROOT. df = ROOT.RDataFrame('tree', 'file.root'); hist = df.Histo1D('x'). ROOT.gROOT.GetType(""std::string"") # this triggers the issue. print(hist.GetEntries()); ```. So it does not seem a PyROOT problem. @Axel-Naumann and perhaps @vgvassilev any comments on this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7169#issuecomment-776819414
https://github.com/root-project/root/pull/7170#issuecomment-776759665:251,Usability,simpl,simple,251,"> Note that at this point, you could also make a PR yourself... Good point, hehhe. I did not do it in the beginning because I was not sure what path to follow (if circular TTree or external class). Your solution with just a std::vector looks neat and simple. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7170#issuecomment-776759665
https://github.com/root-project/root/issues/7180#issuecomment-779807875:91,Usability,simpl,simple,91,"Thanks!. For the tab-completion, I checked and it looks it could be done in a more or less simple way I guess (pseudocode):. ```; fCommand->Connect(""TabPressed()"", ""TGCommandPlugin"", this, ""HandleTab()"");. void TGCommandPlugin::HandleTab(); {; const std::string line = fCommandBuf->GetString();; const size_t cur = fCursorIX; //; std::vector<string> result;; gInterpreter->CodeComplete(line, cur, result);; for(auto& res : result); {; //todo append to output window; }; }; ```; Note: inspired by TClingTabCompletion::Complete function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7180#issuecomment-779807875
https://github.com/root-project/root/issues/7180#issuecomment-780840424:392,Testability,log,logon,392,"Yes, I know, but since this is quite a high level change, I don't think I will introduce it in the `TGCommandPlugin` class. You should do that in your own application. For example, you can simply copy and paste what is done in `TRint.cxx`:; ```; // Goto into raw terminal input mode; char defhist[kMAXPATHLEN];; snprintf(defhist, sizeof(defhist), ""%s/.root_hist"", gSystem->HomeDirectory());; logon = gEnv->GetValue(""Rint.History"", defhist);; // In the code we had HistorySize and HistorySave, in the rootrc and doc; // we have HistSize and HistSave. Keep the doc as it is and check; // now also for HistSize and HistSave in case the user did not use; // the History versions; int hist_size = gEnv->GetValue(""Rint.HistorySize"", 500);; if (hist_size == 500); hist_size = gEnv->GetValue(""Rint.HistSize"", 500);; int hist_save = gEnv->GetValue(""Rint.HistorySave"", 400);; if (hist_save == 400); hist_save = gEnv->GetValue(""Rint.HistSave"", 400);; const char *envHist = gSystem->Getenv(""ROOT_HIST"");; if (envHist) {; hist_size = atoi(envHist);; envHist = strchr(envHist, ':');; if (envHist); hist_save = atoi(envHist+1);; }; Gl_histsize(hist_size, hist_save);; Gl_histinit((char *)logon);; ```; You can even specify your own history file, if you don't want to use the default.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7180#issuecomment-780840424
https://github.com/root-project/root/issues/7180#issuecomment-780840424:1173,Testability,log,logon,1173,"Yes, I know, but since this is quite a high level change, I don't think I will introduce it in the `TGCommandPlugin` class. You should do that in your own application. For example, you can simply copy and paste what is done in `TRint.cxx`:; ```; // Goto into raw terminal input mode; char defhist[kMAXPATHLEN];; snprintf(defhist, sizeof(defhist), ""%s/.root_hist"", gSystem->HomeDirectory());; logon = gEnv->GetValue(""Rint.History"", defhist);; // In the code we had HistorySize and HistorySave, in the rootrc and doc; // we have HistSize and HistSave. Keep the doc as it is and check; // now also for HistSize and HistSave in case the user did not use; // the History versions; int hist_size = gEnv->GetValue(""Rint.HistorySize"", 500);; if (hist_size == 500); hist_size = gEnv->GetValue(""Rint.HistSize"", 500);; int hist_save = gEnv->GetValue(""Rint.HistorySave"", 400);; if (hist_save == 400); hist_save = gEnv->GetValue(""Rint.HistSave"", 400);; const char *envHist = gSystem->Getenv(""ROOT_HIST"");; if (envHist) {; hist_size = atoi(envHist);; envHist = strchr(envHist, ':');; if (envHist); hist_save = atoi(envHist+1);; }; Gl_histsize(hist_size, hist_save);; Gl_histinit((char *)logon);; ```; You can even specify your own history file, if you don't want to use the default.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7180#issuecomment-780840424
https://github.com/root-project/root/issues/7180#issuecomment-780840424:189,Usability,simpl,simply,189,"Yes, I know, but since this is quite a high level change, I don't think I will introduce it in the `TGCommandPlugin` class. You should do that in your own application. For example, you can simply copy and paste what is done in `TRint.cxx`:; ```; // Goto into raw terminal input mode; char defhist[kMAXPATHLEN];; snprintf(defhist, sizeof(defhist), ""%s/.root_hist"", gSystem->HomeDirectory());; logon = gEnv->GetValue(""Rint.History"", defhist);; // In the code we had HistorySize and HistorySave, in the rootrc and doc; // we have HistSize and HistSave. Keep the doc as it is and check; // now also for HistSize and HistSave in case the user did not use; // the History versions; int hist_size = gEnv->GetValue(""Rint.HistorySize"", 500);; if (hist_size == 500); hist_size = gEnv->GetValue(""Rint.HistSize"", 500);; int hist_save = gEnv->GetValue(""Rint.HistorySave"", 400);; if (hist_save == 400); hist_save = gEnv->GetValue(""Rint.HistSave"", 400);; const char *envHist = gSystem->Getenv(""ROOT_HIST"");; if (envHist) {; hist_size = atoi(envHist);; envHist = strchr(envHist, ':');; if (envHist); hist_save = atoi(envHist+1);; }; Gl_histsize(hist_size, hist_save);; Gl_histinit((char *)logon);; ```; You can even specify your own history file, if you don't want to use the default.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7180#issuecomment-780840424
https://github.com/root-project/root/pull/7184#issuecomment-777854927:86,Usability,responsiv,responsive,86,"By the way, the TETRIS example seems broken, at least in Linux. It runs but it is not responsive to the keyboard (not able to move the parts). And Pause erases the screen momentarily.. ![image](https://user-images.githubusercontent.com/10653970/107710210-8e1a9b00-6c94-11eb-8427-dd66a3ae42d6.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7184#issuecomment-777854927
https://github.com/root-project/root/pull/7184#issuecomment-778014086:50,Usability,responsiv,responsive,50,Your fix is fine. ; I see that the arrows are not responsive on Mac also,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7184#issuecomment-778014086
https://github.com/root-project/root/pull/7184#issuecomment-778016535:56,Usability,responsiv,responsive,56,May be @bellenot might knows why the arrow keys are not responsive,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7184#issuecomment-778016535
https://github.com/root-project/root/pull/7184#issuecomment-778190837:58,Usability,responsiv,responsive,58,> May be @bellenot might knows why the arrow keys are not responsive. It works for me on Windows... I'll check on Linux as soon as I can,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7184#issuecomment-778190837
https://github.com/root-project/root/pull/7186#issuecomment-801496369:2264,Availability,error,error,2264,"ation/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/base/inc -Iginclude -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/inc -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/v7/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/imt/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/multiproc/inc -Iexternals/mnt/build/workspace/root-pullrequests-build/install/include -I/mnt/build/workspace/root-pullrequests-build/root/net/net/inc -I/mnt/build/workspace/root-pullrequests-build/root/io/io/inc -fdiagnostics-color=always -std=c++11 -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -fPIC -std=c++11 -MD -MT math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -MF math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o.d -o math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -c /mnt/build/workspace/root-pullrequests-build/root/math/mathmore/src/GSLRndmEngines.cxx; > * [2021-03-01T16:00:58.827Z] /mnt/build/workspace/root-pullrequests-build/root/math/mathmore/src/GSLRndmEngines.cxx:225:68: error: ‘gsl_ran_multivariate_gaussian’ was not declared in this scope. Sorry that it took me a while to look at this. I had to create an Ubuntu 16.04 virtual machine for testing. . @lmoneta, unfortunately, this error happens because Ubuntu 16.04 ships GSL version 2.1, which hasn't gsl_ran_multivariate_gaussian. The multivariate Gaussian random number generation in GSL was only introduced in version 2.2.1. I bypass this with an `#ifdef` that will define the function if the GSL version is < 2.2 by simply copying it from a higher version of GSL. Hopefully, this doesn't break the GPL license under which GSL is distributed. I think that I could also replace the function call to `gsl_ran_multivariate_gaussian` with the wrapper's full implementation. I am open to comments. I don't have access to a windows machine now; I will do the same and use a virtual machine to test that part.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7186#issuecomment-801496369
https://github.com/root-project/root/pull/7186#issuecomment-801496369:2475,Availability,error,error,2475,"ation/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/base/inc -Iginclude -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/inc -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/v7/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/imt/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/multiproc/inc -Iexternals/mnt/build/workspace/root-pullrequests-build/install/include -I/mnt/build/workspace/root-pullrequests-build/root/net/net/inc -I/mnt/build/workspace/root-pullrequests-build/root/io/io/inc -fdiagnostics-color=always -std=c++11 -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -fPIC -std=c++11 -MD -MT math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -MF math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o.d -o math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -c /mnt/build/workspace/root-pullrequests-build/root/math/mathmore/src/GSLRndmEngines.cxx; > * [2021-03-01T16:00:58.827Z] /mnt/build/workspace/root-pullrequests-build/root/math/mathmore/src/GSLRndmEngines.cxx:225:68: error: ‘gsl_ran_multivariate_gaussian’ was not declared in this scope. Sorry that it took me a while to look at this. I had to create an Ubuntu 16.04 virtual machine for testing. . @lmoneta, unfortunately, this error happens because Ubuntu 16.04 ships GSL version 2.1, which hasn't gsl_ran_multivariate_gaussian. The multivariate Gaussian random number generation in GSL was only introduced in version 2.2.1. I bypass this with an `#ifdef` that will define the function if the GSL version is < 2.2 by simply copying it from a higher version of GSL. Hopefully, this doesn't break the GPL license under which GSL is distributed. I think that I could also replace the function call to `gsl_ran_multivariate_gaussian` with the wrapper's full implementation. I am open to comments. I don't have access to a windows machine now; I will do the same and use a virtual machine to test that part.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7186#issuecomment-801496369
https://github.com/root-project/root/pull/7186#issuecomment-801496369:1572,Deployability,install,install,1572,:/build/workspace/root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/108296/console).; > ; > ### Errors:; > * [2021-03-01T16:00:58.827Z] FAILED: /usr/bin/ccache /usr/bin/c++ -DVECCORE_ENABLE_VC -I/mnt/build/workspace/root-pullrequests-build/root/math/mathmore/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/unix/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/clingutils/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/textinput/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/thread/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/zip/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/rint/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/clib/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/meta/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/gui/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/cont/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/foundation/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/base/inc -Iginclude -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/inc -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/v7/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/imt/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/multiproc/inc -Iexternals/mnt/build/workspace/root-pullrequests-build/install/include -I/mnt/build/workspace/root-pullrequests-build/root/net/net/inc -I/mnt/build/workspace/root-pullrequests-build/root/io/io/inc -fdiagnostics-color=always -std=c++11 -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -fPIC -std=c++11 -MD -MT math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -MF math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o.d -o math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -c /mnt/build/workspace/root-pullrequ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7186#issuecomment-801496369
https://github.com/root-project/root/pull/7186#issuecomment-801496369:2987,Integrability,wrap,wrapper,2987,"ation/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/base/inc -Iginclude -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/inc -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/v7/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/imt/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/multiproc/inc -Iexternals/mnt/build/workspace/root-pullrequests-build/install/include -I/mnt/build/workspace/root-pullrequests-build/root/net/net/inc -I/mnt/build/workspace/root-pullrequests-build/root/io/io/inc -fdiagnostics-color=always -std=c++11 -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -fPIC -std=c++11 -MD -MT math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -MF math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o.d -o math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -c /mnt/build/workspace/root-pullrequests-build/root/math/mathmore/src/GSLRndmEngines.cxx; > * [2021-03-01T16:00:58.827Z] /mnt/build/workspace/root-pullrequests-build/root/math/mathmore/src/GSLRndmEngines.cxx:225:68: error: ‘gsl_ran_multivariate_gaussian’ was not declared in this scope. Sorry that it took me a while to look at this. I had to create an Ubuntu 16.04 virtual machine for testing. . @lmoneta, unfortunately, this error happens because Ubuntu 16.04 ships GSL version 2.1, which hasn't gsl_ran_multivariate_gaussian. The multivariate Gaussian random number generation in GSL was only introduced in version 2.2.1. I bypass this with an `#ifdef` that will define the function if the GSL version is < 2.2 by simply copying it from a higher version of GSL. Hopefully, this doesn't break the GPL license under which GSL is distributed. I think that I could also replace the function call to `gsl_ran_multivariate_gaussian` with the wrapper's full implementation. I am open to comments. I don't have access to a windows machine now; I will do the same and use a virtual machine to test that part.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7186#issuecomment-801496369
https://github.com/root-project/root/pull/7186#issuecomment-801496369:3054,Security,access,access,3054,"ation/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/base/inc -Iginclude -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/inc -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/v7/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/imt/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/multiproc/inc -Iexternals/mnt/build/workspace/root-pullrequests-build/install/include -I/mnt/build/workspace/root-pullrequests-build/root/net/net/inc -I/mnt/build/workspace/root-pullrequests-build/root/io/io/inc -fdiagnostics-color=always -std=c++11 -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -fPIC -std=c++11 -MD -MT math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -MF math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o.d -o math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -c /mnt/build/workspace/root-pullrequests-build/root/math/mathmore/src/GSLRndmEngines.cxx; > * [2021-03-01T16:00:58.827Z] /mnt/build/workspace/root-pullrequests-build/root/math/mathmore/src/GSLRndmEngines.cxx:225:68: error: ‘gsl_ran_multivariate_gaussian’ was not declared in this scope. Sorry that it took me a while to look at this. I had to create an Ubuntu 16.04 virtual machine for testing. . @lmoneta, unfortunately, this error happens because Ubuntu 16.04 ships GSL version 2.1, which hasn't gsl_ran_multivariate_gaussian. The multivariate Gaussian random number generation in GSL was only introduced in version 2.2.1. I bypass this with an `#ifdef` that will define the function if the GSL version is < 2.2 by simply copying it from a higher version of GSL. Hopefully, this doesn't break the GPL license under which GSL is distributed. I think that I could also replace the function call to `gsl_ran_multivariate_gaussian` with the wrapper's full implementation. I am open to comments. I don't have access to a windows machine now; I will do the same and use a virtual machine to test that part.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7186#issuecomment-801496369
https://github.com/root-project/root/pull/7186#issuecomment-801496369:2434,Testability,test,testing,2434,"ation/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/base/inc -Iginclude -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/inc -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/v7/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/imt/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/multiproc/inc -Iexternals/mnt/build/workspace/root-pullrequests-build/install/include -I/mnt/build/workspace/root-pullrequests-build/root/net/net/inc -I/mnt/build/workspace/root-pullrequests-build/root/io/io/inc -fdiagnostics-color=always -std=c++11 -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -fPIC -std=c++11 -MD -MT math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -MF math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o.d -o math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -c /mnt/build/workspace/root-pullrequests-build/root/math/mathmore/src/GSLRndmEngines.cxx; > * [2021-03-01T16:00:58.827Z] /mnt/build/workspace/root-pullrequests-build/root/math/mathmore/src/GSLRndmEngines.cxx:225:68: error: ‘gsl_ran_multivariate_gaussian’ was not declared in this scope. Sorry that it took me a while to look at this. I had to create an Ubuntu 16.04 virtual machine for testing. . @lmoneta, unfortunately, this error happens because Ubuntu 16.04 ships GSL version 2.1, which hasn't gsl_ran_multivariate_gaussian. The multivariate Gaussian random number generation in GSL was only introduced in version 2.2.1. I bypass this with an `#ifdef` that will define the function if the GSL version is < 2.2 by simply copying it from a higher version of GSL. Hopefully, this doesn't break the GPL license under which GSL is distributed. I think that I could also replace the function call to `gsl_ran_multivariate_gaussian` with the wrapper's full implementation. I am open to comments. I don't have access to a windows machine now; I will do the same and use a virtual machine to test that part.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7186#issuecomment-801496369
https://github.com/root-project/root/pull/7186#issuecomment-801496369:3135,Testability,test,test,3135,"ation/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/base/inc -Iginclude -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/inc -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/v7/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/imt/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/multiproc/inc -Iexternals/mnt/build/workspace/root-pullrequests-build/install/include -I/mnt/build/workspace/root-pullrequests-build/root/net/net/inc -I/mnt/build/workspace/root-pullrequests-build/root/io/io/inc -fdiagnostics-color=always -std=c++11 -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -fPIC -std=c++11 -MD -MT math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -MF math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o.d -o math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -c /mnt/build/workspace/root-pullrequests-build/root/math/mathmore/src/GSLRndmEngines.cxx; > * [2021-03-01T16:00:58.827Z] /mnt/build/workspace/root-pullrequests-build/root/math/mathmore/src/GSLRndmEngines.cxx:225:68: error: ‘gsl_ran_multivariate_gaussian’ was not declared in this scope. Sorry that it took me a while to look at this. I had to create an Ubuntu 16.04 virtual machine for testing. . @lmoneta, unfortunately, this error happens because Ubuntu 16.04 ships GSL version 2.1, which hasn't gsl_ran_multivariate_gaussian. The multivariate Gaussian random number generation in GSL was only introduced in version 2.2.1. I bypass this with an `#ifdef` that will define the function if the GSL version is < 2.2 by simply copying it from a higher version of GSL. Hopefully, this doesn't break the GPL license under which GSL is distributed. I think that I could also replace the function call to `gsl_ran_multivariate_gaussian` with the wrapper's full implementation. I am open to comments. I don't have access to a windows machine now; I will do the same and use a virtual machine to test that part.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7186#issuecomment-801496369
https://github.com/root-project/root/pull/7186#issuecomment-801496369:2765,Usability,simpl,simply,2765,"ation/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/base/inc -Iginclude -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/inc -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/v7/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/imt/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/multiproc/inc -Iexternals/mnt/build/workspace/root-pullrequests-build/install/include -I/mnt/build/workspace/root-pullrequests-build/root/net/net/inc -I/mnt/build/workspace/root-pullrequests-build/root/io/io/inc -fdiagnostics-color=always -std=c++11 -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -fPIC -std=c++11 -MD -MT math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -MF math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o.d -o math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -c /mnt/build/workspace/root-pullrequests-build/root/math/mathmore/src/GSLRndmEngines.cxx; > * [2021-03-01T16:00:58.827Z] /mnt/build/workspace/root-pullrequests-build/root/math/mathmore/src/GSLRndmEngines.cxx:225:68: error: ‘gsl_ran_multivariate_gaussian’ was not declared in this scope. Sorry that it took me a while to look at this. I had to create an Ubuntu 16.04 virtual machine for testing. . @lmoneta, unfortunately, this error happens because Ubuntu 16.04 ships GSL version 2.1, which hasn't gsl_ran_multivariate_gaussian. The multivariate Gaussian random number generation in GSL was only introduced in version 2.2.1. I bypass this with an `#ifdef` that will define the function if the GSL version is < 2.2 by simply copying it from a higher version of GSL. Hopefully, this doesn't break the GPL license under which GSL is distributed. I think that I could also replace the function call to `gsl_ran_multivariate_gaussian` with the wrapper's full implementation. I am open to comments. I don't have access to a windows machine now; I will do the same and use a virtual machine to test that part.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7186#issuecomment-801496369
https://github.com/root-project/root/issues/7195#issuecomment-779084167:84,Testability,test,testSignalSlot,84,"Well, this simple example works just fine for me on Windows and CentOS7:; ```; void testSignalSlot(); {; TGMainFrame *mainframe = new TGMainFrame(gClient->GetRoot(), 300, 170);; TGCheckButton *myTGCheckBox = new TGCheckButton(mainframe, new TGHotString(""Change Text""), -1);; mainframe->AddFrame(myTGCheckBox, new TGLayoutHints(kLHintsCenterX | kLHintsCenterY));; TGTextButton *myButton = new TGTextButton(mainframe, ""&Any Text"");; mainframe->AddFrame(myButton, new TGLayoutHints(kLHintsExpandX | kLHintsCenterY));; myTGCheckBox->Connect(""Clicked()"", ""TGTextButton"", myButton, ""ChangeText(=\""LEGOlegoemoryABCDEF\"")"");; mainframe->MapSubwindows();; mainframe->Layout();; mainframe->MapWindow();; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7195#issuecomment-779084167
https://github.com/root-project/root/issues/7195#issuecomment-779084167:11,Usability,simpl,simple,11,"Well, this simple example works just fine for me on Windows and CentOS7:; ```; void testSignalSlot(); {; TGMainFrame *mainframe = new TGMainFrame(gClient->GetRoot(), 300, 170);; TGCheckButton *myTGCheckBox = new TGCheckButton(mainframe, new TGHotString(""Change Text""), -1);; mainframe->AddFrame(myTGCheckBox, new TGLayoutHints(kLHintsCenterX | kLHintsCenterY));; TGTextButton *myButton = new TGTextButton(mainframe, ""&Any Text"");; mainframe->AddFrame(myButton, new TGLayoutHints(kLHintsExpandX | kLHintsCenterY));; myTGCheckBox->Connect(""Clicked()"", ""TGTextButton"", myButton, ""ChangeText(=\""LEGOlegoemoryABCDEF\"")"");; mainframe->MapSubwindows();; mainframe->Layout();; mainframe->MapWindow();; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7195#issuecomment-779084167
https://github.com/root-project/root/issues/7195#issuecomment-779853276:222,Usability,guid,guides,222,"Ok, thanks for the reply. Maybe a note in the documentation could be added specifying that it only works if the signal has the shape of Clicked() or Pressed(), not with extra arguments ?: https://root.cern.ch/root/htmldoc/guides/users-guide/WritingGUI.html#event-processing-signals-and-slots",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7195#issuecomment-779853276
https://github.com/root-project/root/issues/7195#issuecomment-779853276:235,Usability,guid,guide,235,"Ok, thanks for the reply. Maybe a note in the documentation could be added specifying that it only works if the signal has the shape of Clicked() or Pressed(), not with extra arguments ?: https://root.cern.ch/root/htmldoc/guides/users-guide/WritingGUI.html#event-processing-signals-and-slots",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7195#issuecomment-779853276
https://github.com/root-project/root/issues/7196#issuecomment-2301434115:227,Usability,learn,learn,227,"Nope, I do not know if it is an issue on Windows. I think we could just make sure that the ROOT code does the same as:; https://github.com/gsass1/NTop/blob/3ceac499d7c3bfc5f7a073df6e0bd7aa1babf790/ntop.c#L907. See also https://learn.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-globalmemorystatusex",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7196#issuecomment-2301434115
https://github.com/root-project/root/issues/7201#issuecomment-805982843:6,Integrability,interface,interface,6,"A new interface is perfectly fine. Right now, there is no way to run even an expression with zero side effects without leaking. But as to your first point, a failed transaction (such as the lookup of a type or function that does not exist) also leaks, and is even more common. Such a transaction should, by design, not have any side effects. These leaks affect any PyROOT user and it would not surprise me if ROOT I/O is hit by this, too, given the double lookups everywhere, with and without `std::`, with one of the two regularly failing. As for your second point, that interface is broken on Windows 64b already and simply changing the return to `intptr_t` has a massive ripple effect, so if that platform is ever in the cards, you're going to have to deal with it anyway. Plus, a trivial augmentation would be to take a pointer to a value wrapper, which by default is `nullptr`. If given, return the value there, if not, keep the old behavior. That won't break any code, but will allow current clients to stop part of the leaking. My preference would be to have such a new interface in Cling anyway, not on `TInterpreter`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7201#issuecomment-805982843
https://github.com/root-project/root/issues/7201#issuecomment-805982843:572,Integrability,interface,interface,572,"A new interface is perfectly fine. Right now, there is no way to run even an expression with zero side effects without leaking. But as to your first point, a failed transaction (such as the lookup of a type or function that does not exist) also leaks, and is even more common. Such a transaction should, by design, not have any side effects. These leaks affect any PyROOT user and it would not surprise me if ROOT I/O is hit by this, too, given the double lookups everywhere, with and without `std::`, with one of the two regularly failing. As for your second point, that interface is broken on Windows 64b already and simply changing the return to `intptr_t` has a massive ripple effect, so if that platform is ever in the cards, you're going to have to deal with it anyway. Plus, a trivial augmentation would be to take a pointer to a value wrapper, which by default is `nullptr`. If given, return the value there, if not, keep the old behavior. That won't break any code, but will allow current clients to stop part of the leaking. My preference would be to have such a new interface in Cling anyway, not on `TInterpreter`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7201#issuecomment-805982843
https://github.com/root-project/root/issues/7201#issuecomment-805982843:843,Integrability,wrap,wrapper,843,"A new interface is perfectly fine. Right now, there is no way to run even an expression with zero side effects without leaking. But as to your first point, a failed transaction (such as the lookup of a type or function that does not exist) also leaks, and is even more common. Such a transaction should, by design, not have any side effects. These leaks affect any PyROOT user and it would not surprise me if ROOT I/O is hit by this, too, given the double lookups everywhere, with and without `std::`, with one of the two regularly failing. As for your second point, that interface is broken on Windows 64b already and simply changing the return to `intptr_t` has a massive ripple effect, so if that platform is ever in the cards, you're going to have to deal with it anyway. Plus, a trivial augmentation would be to take a pointer to a value wrapper, which by default is `nullptr`. If given, return the value there, if not, keep the old behavior. That won't break any code, but will allow current clients to stop part of the leaking. My preference would be to have such a new interface in Cling anyway, not on `TInterpreter`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7201#issuecomment-805982843
https://github.com/root-project/root/issues/7201#issuecomment-805982843:1077,Integrability,interface,interface,1077,"A new interface is perfectly fine. Right now, there is no way to run even an expression with zero side effects without leaking. But as to your first point, a failed transaction (such as the lookup of a type or function that does not exist) also leaks, and is even more common. Such a transaction should, by design, not have any side effects. These leaks affect any PyROOT user and it would not surprise me if ROOT I/O is hit by this, too, given the double lookups everywhere, with and without `std::`, with one of the two regularly failing. As for your second point, that interface is broken on Windows 64b already and simply changing the return to `intptr_t` has a massive ripple effect, so if that platform is ever in the cards, you're going to have to deal with it anyway. Plus, a trivial augmentation would be to take a pointer to a value wrapper, which by default is `nullptr`. If given, return the value there, if not, keep the old behavior. That won't break any code, but will allow current clients to stop part of the leaking. My preference would be to have such a new interface in Cling anyway, not on `TInterpreter`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7201#issuecomment-805982843
https://github.com/root-project/root/issues/7201#issuecomment-805982843:619,Usability,simpl,simply,619,"A new interface is perfectly fine. Right now, there is no way to run even an expression with zero side effects without leaking. But as to your first point, a failed transaction (such as the lookup of a type or function that does not exist) also leaks, and is even more common. Such a transaction should, by design, not have any side effects. These leaks affect any PyROOT user and it would not surprise me if ROOT I/O is hit by this, too, given the double lookups everywhere, with and without `std::`, with one of the two regularly failing. As for your second point, that interface is broken on Windows 64b already and simply changing the return to `intptr_t` has a massive ripple effect, so if that platform is ever in the cards, you're going to have to deal with it anyway. Plus, a trivial augmentation would be to take a pointer to a value wrapper, which by default is `nullptr`. If given, return the value there, if not, keep the old behavior. That won't break any code, but will allow current clients to stop part of the leaking. My preference would be to have such a new interface in Cling anyway, not on `TInterpreter`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7201#issuecomment-805982843
https://github.com/root-project/root/issues/7201#issuecomment-806058368:327,Performance,optimiz,optimization,327,"I actually remember trying `Evaluate` but it crashed. Didn't look into too many details as to why; it does have a couple of fewer ""protection pieces"" (such as the mutex lock) than does `Calc()`, so that may be the reason. But even then, I gave up on all that when I realized that Python readily outperforms. I mean, talk about optimization, even for your integer case and compare these two macro's:. ```; int noleak() {; int result = 0;; for (int i = 0; i < 1000000; ++i) {; result += (int)TPython::Eval(""1+1"");; }; return result;; }; ```; and; ```; int leak() {; int result = 0;; for (int i = 0; i < 10000; ++i) {; result += (int)gInterpreter->Calc(""1+1"");; }; return result;; }; ```; Please note the constant: the `TPython::Eval()` is called _100x more_ than `TInterpreter::Calc()` and it is _still 4x faster_ on my box. So, my conclusion is that if you are in Cling and need to evaluate a run-time constructed expression represented in string-form, then the optimizily thing to do, is to call into Python ... (and if in a loop, then even if Python uses cppyy in turn, which uses Cling again, it will still outperform). And, of course, bonus points for not leaking ... There is one case where `cppyy` still fails: if the `operator+` in the expression above is a global `friend` (with the operands instances of some class), as so far, I've been unable to locate that method. So, I do still care, but my main problem is the leak on failed lookups, as those are very common. And I don't believe it is just the allocator, which as you tell it would re-use the memory, but I'll see first whether I can construct a pure Cling-only reproducer then. Aside, if/when the lookup helper is inverted (i.e. being able to tell what some _is_ rather than what it _isn't_), many of the failed lookups will simply go away.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7201#issuecomment-806058368
https://github.com/root-project/root/issues/7201#issuecomment-806058368:961,Performance,optimiz,optimizily,961,"I actually remember trying `Evaluate` but it crashed. Didn't look into too many details as to why; it does have a couple of fewer ""protection pieces"" (such as the mutex lock) than does `Calc()`, so that may be the reason. But even then, I gave up on all that when I realized that Python readily outperforms. I mean, talk about optimization, even for your integer case and compare these two macro's:. ```; int noleak() {; int result = 0;; for (int i = 0; i < 1000000; ++i) {; result += (int)TPython::Eval(""1+1"");; }; return result;; }; ```; and; ```; int leak() {; int result = 0;; for (int i = 0; i < 10000; ++i) {; result += (int)gInterpreter->Calc(""1+1"");; }; return result;; }; ```; Please note the constant: the `TPython::Eval()` is called _100x more_ than `TInterpreter::Calc()` and it is _still 4x faster_ on my box. So, my conclusion is that if you are in Cling and need to evaluate a run-time constructed expression represented in string-form, then the optimizily thing to do, is to call into Python ... (and if in a loop, then even if Python uses cppyy in turn, which uses Cling again, it will still outperform). And, of course, bonus points for not leaking ... There is one case where `cppyy` still fails: if the `operator+` in the expression above is a global `friend` (with the operands instances of some class), as so far, I've been unable to locate that method. So, I do still care, but my main problem is the leak on failed lookups, as those are very common. And I don't believe it is just the allocator, which as you tell it would re-use the memory, but I'll see first whether I can construct a pure Cling-only reproducer then. Aside, if/when the lookup helper is inverted (i.e. being able to tell what some _is_ rather than what it _isn't_), many of the failed lookups will simply go away.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7201#issuecomment-806058368
https://github.com/root-project/root/issues/7201#issuecomment-806058368:1791,Usability,simpl,simply,1791,"I actually remember trying `Evaluate` but it crashed. Didn't look into too many details as to why; it does have a couple of fewer ""protection pieces"" (such as the mutex lock) than does `Calc()`, so that may be the reason. But even then, I gave up on all that when I realized that Python readily outperforms. I mean, talk about optimization, even for your integer case and compare these two macro's:. ```; int noleak() {; int result = 0;; for (int i = 0; i < 1000000; ++i) {; result += (int)TPython::Eval(""1+1"");; }; return result;; }; ```; and; ```; int leak() {; int result = 0;; for (int i = 0; i < 10000; ++i) {; result += (int)gInterpreter->Calc(""1+1"");; }; return result;; }; ```; Please note the constant: the `TPython::Eval()` is called _100x more_ than `TInterpreter::Calc()` and it is _still 4x faster_ on my box. So, my conclusion is that if you are in Cling and need to evaluate a run-time constructed expression represented in string-form, then the optimizily thing to do, is to call into Python ... (and if in a loop, then even if Python uses cppyy in turn, which uses Cling again, it will still outperform). And, of course, bonus points for not leaking ... There is one case where `cppyy` still fails: if the `operator+` in the expression above is a global `friend` (with the operands instances of some class), as so far, I've been unable to locate that method. So, I do still care, but my main problem is the leak on failed lookups, as those are very common. And I don't believe it is just the allocator, which as you tell it would re-use the memory, but I'll see first whether I can construct a pure Cling-only reproducer then. Aside, if/when the lookup helper is inverted (i.e. being able to tell what some _is_ rather than what it _isn't_), many of the failed lookups will simply go away.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7201#issuecomment-806058368
https://github.com/root-project/root/issues/7205#issuecomment-788053716:91,Deployability,configurat,configuration,91,Marking this as low priority as there is a simple workaround. We might still want to add a configuration for this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7205#issuecomment-788053716
https://github.com/root-project/root/issues/7205#issuecomment-788053716:91,Modifiability,config,configuration,91,Marking this as low priority as there is a simple workaround. We might still want to add a configuration for this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7205#issuecomment-788053716
https://github.com/root-project/root/issues/7205#issuecomment-788053716:43,Usability,simpl,simple,43,Marking this as low priority as there is a simple workaround. We might still want to add a configuration for this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7205#issuecomment-788053716
https://github.com/root-project/root/issues/7213#issuecomment-779734329:94,Usability,simpl,simply,94,"@ShamrockLee there is already a `Browser.ExpandDirectories` entry in `system.rootrc`, you can simply set it to false. Otherwise I can also add something like:; ```; // always prevent expanding the parent directory tree on nix/store; if (first == ""nix"" && second == ""store""); expand = kFALSE;; ```; But I would prefer not to add such special case...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7213#issuecomment-779734329
https://github.com/root-project/root/issues/7216#issuecomment-844170711:96,Deployability,update,update,96,"By the way, you are referring to the old ""User's Guide"". This Guide is now out dated. We do not update it anymore. The two main sources of documentation are the [Reference Guide](https://root.cern/doc/master/index.html) and the [Manual](https://root.cern/manual/). If some update is needed I guess it should be done in the[ reference of TThread](https://root.cern/doc/master/classTThread.html). May be the TThread part of the user guide should be updated and move into the reference guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7216#issuecomment-844170711
https://github.com/root-project/root/issues/7216#issuecomment-844170711:273,Deployability,update,update,273,"By the way, you are referring to the old ""User's Guide"". This Guide is now out dated. We do not update it anymore. The two main sources of documentation are the [Reference Guide](https://root.cern/doc/master/index.html) and the [Manual](https://root.cern/manual/). If some update is needed I guess it should be done in the[ reference of TThread](https://root.cern/doc/master/classTThread.html). May be the TThread part of the user guide should be updated and move into the reference guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7216#issuecomment-844170711
https://github.com/root-project/root/issues/7216#issuecomment-844170711:447,Deployability,update,updated,447,"By the way, you are referring to the old ""User's Guide"". This Guide is now out dated. We do not update it anymore. The two main sources of documentation are the [Reference Guide](https://root.cern/doc/master/index.html) and the [Manual](https://root.cern/manual/). If some update is needed I guess it should be done in the[ reference of TThread](https://root.cern/doc/master/classTThread.html). May be the TThread part of the user guide should be updated and move into the reference guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7216#issuecomment-844170711
https://github.com/root-project/root/issues/7216#issuecomment-844170711:431,Usability,guid,guide,431,"By the way, you are referring to the old ""User's Guide"". This Guide is now out dated. We do not update it anymore. The two main sources of documentation are the [Reference Guide](https://root.cern/doc/master/index.html) and the [Manual](https://root.cern/manual/). If some update is needed I guess it should be done in the[ reference of TThread](https://root.cern/doc/master/classTThread.html). May be the TThread part of the user guide should be updated and move into the reference guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7216#issuecomment-844170711
https://github.com/root-project/root/issues/7216#issuecomment-844170711:483,Usability,guid,guide,483,"By the way, you are referring to the old ""User's Guide"". This Guide is now out dated. We do not update it anymore. The two main sources of documentation are the [Reference Guide](https://root.cern/doc/master/index.html) and the [Manual](https://root.cern/manual/). If some update is needed I guess it should be done in the[ reference of TThread](https://root.cern/doc/master/classTThread.html). May be the TThread part of the user guide should be updated and move into the reference guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7216#issuecomment-844170711
https://github.com/root-project/root/issues/7216#issuecomment-1057548805:124,Usability,guid,guides,124,"Yes, but we meant it would be useful to add also a note or link to it in the Users Guide: https://root.cern.ch/root/htmldoc/guides/users-guide/Threads.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7216#issuecomment-1057548805
https://github.com/root-project/root/issues/7216#issuecomment-1057548805:137,Usability,guid,guide,137,"Yes, but we meant it would be useful to add also a note or link to it in the Users Guide: https://root.cern.ch/root/htmldoc/guides/users-guide/Threads.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7216#issuecomment-1057548805
https://github.com/root-project/root/issues/7217#issuecomment-785392761:36,Integrability,wrap,wrap,36,"Hi,. I am new to root and trying to wrap my head around some of its features. I thought a good place to start would be to work on this issue. I started by pythonizing `fitTo` and I'd like to send you a pull request. I take it that I should provide some tests for the feature, but I could not find any resources regarding the testing conventions in python for root. If there are any specific guidelines, please let me know, otherwise I'll just send you a pull request and you can take a look if it is really necessary. Cheers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7217#issuecomment-785392761
https://github.com/root-project/root/issues/7217#issuecomment-785392761:253,Testability,test,tests,253,"Hi,. I am new to root and trying to wrap my head around some of its features. I thought a good place to start would be to work on this issue. I started by pythonizing `fitTo` and I'd like to send you a pull request. I take it that I should provide some tests for the feature, but I could not find any resources regarding the testing conventions in python for root. If there are any specific guidelines, please let me know, otherwise I'll just send you a pull request and you can take a look if it is really necessary. Cheers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7217#issuecomment-785392761
https://github.com/root-project/root/issues/7217#issuecomment-785392761:325,Testability,test,testing,325,"Hi,. I am new to root and trying to wrap my head around some of its features. I thought a good place to start would be to work on this issue. I started by pythonizing `fitTo` and I'd like to send you a pull request. I take it that I should provide some tests for the feature, but I could not find any resources regarding the testing conventions in python for root. If there are any specific guidelines, please let me know, otherwise I'll just send you a pull request and you can take a look if it is really necessary. Cheers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7217#issuecomment-785392761
https://github.com/root-project/root/issues/7217#issuecomment-785392761:391,Usability,guid,guidelines,391,"Hi,. I am new to root and trying to wrap my head around some of its features. I thought a good place to start would be to work on this issue. I started by pythonizing `fitTo` and I'd like to send you a pull request. I take it that I should provide some tests for the feature, but I could not find any resources regarding the testing conventions in python for root. If there are any specific guidelines, please let me know, otherwise I'll just send you a pull request and you can take a look if it is really necessary. Cheers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7217#issuecomment-785392761
https://github.com/root-project/root/pull/7237#issuecomment-784245202:15,Usability,feedback,feedback,15,Thanks for the feedback. I think I fixed them now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7237#issuecomment-784245202
https://github.com/root-project/root/issues/7279#issuecomment-785698708:72,Availability,down,download,72,"Could you please make the file name to contain the ROOT version? When I download ""Complete User's Guide in A4 format"" from http://root.cern.ch/root/htmldoc/guides/users-guide/ROOTUsersGuideA4.pdf, I've no idea whether it was changed in 2018 or in 2021.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7279#issuecomment-785698708
https://github.com/root-project/root/issues/7279#issuecomment-785698708:156,Usability,guid,guides,156,"Could you please make the file name to contain the ROOT version? When I download ""Complete User's Guide in A4 format"" from http://root.cern.ch/root/htmldoc/guides/users-guide/ROOTUsersGuideA4.pdf, I've no idea whether it was changed in 2018 or in 2021.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7279#issuecomment-785698708
https://github.com/root-project/root/issues/7279#issuecomment-785698708:169,Usability,guid,guide,169,"Could you please make the file name to contain the ROOT version? When I download ""Complete User's Guide in A4 format"" from http://root.cern.ch/root/htmldoc/guides/users-guide/ROOTUsersGuideA4.pdf, I've no idea whether it was changed in 2018 or in 2021.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7279#issuecomment-785698708
https://github.com/root-project/root/issues/7279#issuecomment-785834714:14,Usability,guid,guide,14,"The ROOT user guide is consider as frozen and the ""d"" URL should not be considered. This ia a copy of the old web site.; The new web site is: https://root.cern",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7279#issuecomment-785834714
https://github.com/root-project/root/issues/7279#issuecomment-785861978:49,Deployability,update,updated,49,"@couet - it seems that the html version is still updated. What do you mean by ""The ROOT user guide is consider as frozen""? Do you plan to stop supporting it?. I still find it the best documentation about ROOT. This is pretty detailed and written better than class documentation would be (this is a manual for reading, not a technical reference of existing functions).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7279#issuecomment-785861978
https://github.com/root-project/root/issues/7279#issuecomment-785861978:93,Usability,guid,guide,93,"@couet - it seems that the html version is still updated. What do you mean by ""The ROOT user guide is consider as frozen""? Do you plan to stop supporting it?. I still find it the best documentation about ROOT. This is pretty detailed and written better than class documentation would be (this is a manual for reading, not a technical reference of existing functions).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7279#issuecomment-785861978
https://github.com/root-project/root/issues/7279#issuecomment-785864167:16,Deployability,update,updated,16,It has not been updated since a long time ... and new feature like RDataFrame are not in it ....And yes we do not put any effort into it. See: https://root.cern/manual/. This is the top page of the ROOT documentation now. On the opposite the ref-guide (class doc) is constantly updated. Constructive issues and PR should be made on the [ROOT web site repository](https://github.com/root-project/web),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7279#issuecomment-785864167
https://github.com/root-project/root/issues/7279#issuecomment-785864167:278,Deployability,update,updated,278,It has not been updated since a long time ... and new feature like RDataFrame are not in it ....And yes we do not put any effort into it. See: https://root.cern/manual/. This is the top page of the ROOT documentation now. On the opposite the ref-guide (class doc) is constantly updated. Constructive issues and PR should be made on the [ROOT web site repository](https://github.com/root-project/web),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7279#issuecomment-785864167
https://github.com/root-project/root/issues/7279#issuecomment-785864167:246,Usability,guid,guide,246,It has not been updated since a long time ... and new feature like RDataFrame are not in it ....And yes we do not put any effort into it. See: https://root.cern/manual/. This is the top page of the ROOT documentation now. On the opposite the ref-guide (class doc) is constantly updated. Constructive issues and PR should be made on the [ROOT web site repository](https://github.com/root-project/web),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7279#issuecomment-785864167
https://github.com/root-project/root/issues/7282#issuecomment-785256156:31,Usability,guid,guides,31,https://root.cern/root/htmldoc/guides/users-guide/Trees.html; \- probably should be in the documentation hierarchy.; https://root.cern/root/; \- an absolutely empty page (check other pages on that path though).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7282#issuecomment-785256156
https://github.com/root-project/root/issues/7282#issuecomment-785256156:44,Usability,guid,guide,44,https://root.cern/root/htmldoc/guides/users-guide/Trees.html; \- probably should be in the documentation hierarchy.; https://root.cern/root/; \- an absolutely empty page (check other pages on that path though).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7282#issuecomment-785256156
https://github.com/root-project/root/issues/7282#issuecomment-786496515:189,Usability,clear,clear,189,"I see. Thank you! I subscribed to notifications there.; I don't care much about the authorship. I was confused by the current sites structure, and if when I visit the site next year all is clear, I will be glad! :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7282#issuecomment-786496515
https://github.com/root-project/root/issues/7284#issuecomment-785822857:161,Usability,guid,guide,161,"May I suggest that, instead of creating an issue, you do a Pull Request on the source file: https://github.com/root-project/root/blob/master/documentation/users-guide/Trees.md ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785822857
https://github.com/root-project/root/issues/7284#issuecomment-785870186:285,Deployability,update,updated,285,"As I said we do not spend time on the users guide now. The .md files are still there though. So if someone is willing to do a valid PR on them we will considered it and merge it when finalised. So please convert this into is PR. And, once again, the User's guide is now frozen and not updated. It has never been update by the way. After the first writing developers did not put any new stuff in it. We found out that developers put the doc in the code. That why we choose doxygen which allow to produce the reference guide. Having a separated User's Guide often implies to duplicate the information with the risk of not being in sync. But we still need an entry point for people starting with ROOT. That is why we made the ""Manual"" which is still under development. The Manual has a much higher view that the reference Guide and helps to navigate into it. But it does not duplicate the information !! that's the key ! ... also, for beginners, we have the Primer also referenced from the web site.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785870186
https://github.com/root-project/root/issues/7284#issuecomment-785870186:312,Deployability,update,update,312,"As I said we do not spend time on the users guide now. The .md files are still there though. So if someone is willing to do a valid PR on them we will considered it and merge it when finalised. So please convert this into is PR. And, once again, the User's guide is now frozen and not updated. It has never been update by the way. After the first writing developers did not put any new stuff in it. We found out that developers put the doc in the code. That why we choose doxygen which allow to produce the reference guide. Having a separated User's Guide often implies to duplicate the information with the risk of not being in sync. But we still need an entry point for people starting with ROOT. That is why we made the ""Manual"" which is still under development. The Manual has a much higher view that the reference Guide and helps to navigate into it. But it does not duplicate the information !! that's the key ! ... also, for beginners, we have the Primer also referenced from the web site.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785870186
https://github.com/root-project/root/issues/7284#issuecomment-785870186:608,Safety,risk,risk,608,"As I said we do not spend time on the users guide now. The .md files are still there though. So if someone is willing to do a valid PR on them we will considered it and merge it when finalised. So please convert this into is PR. And, once again, the User's guide is now frozen and not updated. It has never been update by the way. After the first writing developers did not put any new stuff in it. We found out that developers put the doc in the code. That why we choose doxygen which allow to produce the reference guide. Having a separated User's Guide often implies to duplicate the information with the risk of not being in sync. But we still need an entry point for people starting with ROOT. That is why we made the ""Manual"" which is still under development. The Manual has a much higher view that the reference Guide and helps to navigate into it. But it does not duplicate the information !! that's the key ! ... also, for beginners, we have the Primer also referenced from the web site.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785870186
https://github.com/root-project/root/issues/7284#issuecomment-785870186:44,Usability,guid,guide,44,"As I said we do not spend time on the users guide now. The .md files are still there though. So if someone is willing to do a valid PR on them we will considered it and merge it when finalised. So please convert this into is PR. And, once again, the User's guide is now frozen and not updated. It has never been update by the way. After the first writing developers did not put any new stuff in it. We found out that developers put the doc in the code. That why we choose doxygen which allow to produce the reference guide. Having a separated User's Guide often implies to duplicate the information with the risk of not being in sync. But we still need an entry point for people starting with ROOT. That is why we made the ""Manual"" which is still under development. The Manual has a much higher view that the reference Guide and helps to navigate into it. But it does not duplicate the information !! that's the key ! ... also, for beginners, we have the Primer also referenced from the web site.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785870186
https://github.com/root-project/root/issues/7284#issuecomment-785870186:257,Usability,guid,guide,257,"As I said we do not spend time on the users guide now. The .md files are still there though. So if someone is willing to do a valid PR on them we will considered it and merge it when finalised. So please convert this into is PR. And, once again, the User's guide is now frozen and not updated. It has never been update by the way. After the first writing developers did not put any new stuff in it. We found out that developers put the doc in the code. That why we choose doxygen which allow to produce the reference guide. Having a separated User's Guide often implies to duplicate the information with the risk of not being in sync. But we still need an entry point for people starting with ROOT. That is why we made the ""Manual"" which is still under development. The Manual has a much higher view that the reference Guide and helps to navigate into it. But it does not duplicate the information !! that's the key ! ... also, for beginners, we have the Primer also referenced from the web site.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785870186
https://github.com/root-project/root/issues/7284#issuecomment-785870186:517,Usability,guid,guide,517,"As I said we do not spend time on the users guide now. The .md files are still there though. So if someone is willing to do a valid PR on them we will considered it and merge it when finalised. So please convert this into is PR. And, once again, the User's guide is now frozen and not updated. It has never been update by the way. After the first writing developers did not put any new stuff in it. We found out that developers put the doc in the code. That why we choose doxygen which allow to produce the reference guide. Having a separated User's Guide often implies to duplicate the information with the risk of not being in sync. But we still need an entry point for people starting with ROOT. That is why we made the ""Manual"" which is still under development. The Manual has a much higher view that the reference Guide and helps to navigate into it. But it does not duplicate the information !! that's the key ! ... also, for beginners, we have the Primer also referenced from the web site.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785870186
https://github.com/root-project/root/issues/7284#issuecomment-785897720:229,Availability,avail,available,229,"You probably mean ""are now in development phase"".; As of today, I see that ; 1) there is no better document than the User's guide (the chapter about trees there looks more comprehensive to me than in the manual).; 2) it is still available from the site, people may use that. ; 3) the manual has no pdf. For me it's very important, because I don't want to be online to read docs. I could use `wget`, but when I have a ready pdf, I chose the latter. I honestly think that User's Guide is well-written and useful. I think that to do small updates to that (at least to sync the pdf version with html) is better now, until the manual is finalized and is definitely better than the old guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785897720
https://github.com/root-project/root/issues/7284#issuecomment-785897720:536,Deployability,update,updates,536,"You probably mean ""are now in development phase"".; As of today, I see that ; 1) there is no better document than the User's guide (the chapter about trees there looks more comprehensive to me than in the manual).; 2) it is still available from the site, people may use that. ; 3) the manual has no pdf. For me it's very important, because I don't want to be online to read docs. I could use `wget`, but when I have a ready pdf, I chose the latter. I honestly think that User's Guide is well-written and useful. I think that to do small updates to that (at least to sync the pdf version with html) is better now, until the manual is finalized and is definitely better than the old guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785897720
https://github.com/root-project/root/issues/7284#issuecomment-785897720:124,Usability,guid,guide,124,"You probably mean ""are now in development phase"".; As of today, I see that ; 1) there is no better document than the User's guide (the chapter about trees there looks more comprehensive to me than in the manual).; 2) it is still available from the site, people may use that. ; 3) the manual has no pdf. For me it's very important, because I don't want to be online to read docs. I could use `wget`, but when I have a ready pdf, I chose the latter. I honestly think that User's Guide is well-written and useful. I think that to do small updates to that (at least to sync the pdf version with html) is better now, until the manual is finalized and is definitely better than the old guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785897720
https://github.com/root-project/root/issues/7284#issuecomment-785897720:680,Usability,guid,guide,680,"You probably mean ""are now in development phase"".; As of today, I see that ; 1) there is no better document than the User's guide (the chapter about trees there looks more comprehensive to me than in the manual).; 2) it is still available from the site, people may use that. ; 3) the manual has no pdf. For me it's very important, because I don't want to be online to read docs. I could use `wget`, but when I have a ready pdf, I chose the latter. I honestly think that User's Guide is well-written and useful. I think that to do small updates to that (at least to sync the pdf version with html) is better now, until the manual is finalized and is definitely better than the old guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785897720
https://github.com/root-project/root/issues/7284#issuecomment-785901630:115,Deployability,update,update,115,Yes I made a typo. It is fixed now. The full information about TTree should be in the Reference Guide. We will not update the User's guide any more. It could be useful if you point stuff you find in the User's Guide but not in the Reference or in the Manual. That would help us to update both. By the way: Try to find something about RDataFrame in the user's Guide.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785901630
https://github.com/root-project/root/issues/7284#issuecomment-785901630:281,Deployability,update,update,281,Yes I made a typo. It is fixed now. The full information about TTree should be in the Reference Guide. We will not update the User's guide any more. It could be useful if you point stuff you find in the User's Guide but not in the Reference or in the Manual. That would help us to update both. By the way: Try to find something about RDataFrame in the user's Guide.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785901630
https://github.com/root-project/root/issues/7284#issuecomment-785901630:133,Usability,guid,guide,133,Yes I made a typo. It is fixed now. The full information about TTree should be in the Reference Guide. We will not update the User's guide any more. It could be useful if you point stuff you find in the User's Guide but not in the Reference or in the Manual. That would help us to update both. By the way: Try to find something about RDataFrame in the user's Guide.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785901630
https://github.com/root-project/root/issues/7284#issuecomment-785934293:310,Deployability,update,update,310,"I don't need the full information. I needed information to learn about the topic. A good book is not only an information container, but it teaches ideas. . I think that if manual creators know what and how to write, they can look at the existing docs (or skip outdated data from there). . If you don't plan to update the User's guide, there is probably no need to fix that with Push Releases. As I understand, you wrote that rdataframe is missing in the manual, so I won't find out there. Anyway I don't use that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785934293
https://github.com/root-project/root/issues/7284#issuecomment-785934293:59,Usability,learn,learn,59,"I don't need the full information. I needed information to learn about the topic. A good book is not only an information container, but it teaches ideas. . I think that if manual creators know what and how to write, they can look at the existing docs (or skip outdated data from there). . If you don't plan to update the User's guide, there is probably no need to fix that with Push Releases. As I understand, you wrote that rdataframe is missing in the manual, so I won't find out there. Anyway I don't use that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785934293
https://github.com/root-project/root/issues/7284#issuecomment-785934293:328,Usability,guid,guide,328,"I don't need the full information. I needed information to learn about the topic. A good book is not only an information container, but it teaches ideas. . I think that if manual creators know what and how to write, they can look at the existing docs (or skip outdated data from there). . If you don't plan to update the User's guide, there is probably no need to fix that with Push Releases. As I understand, you wrote that rdataframe is missing in the manual, so I won't find out there. Anyway I don't use that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785934293
https://github.com/root-project/root/issues/7284#issuecomment-785937049:104,Usability,guid,guide,104,"Yes we are working on the manual. And please if you see something missing in Manual or in the reference guide which is no where else but in the Old User's Guide, let us know and we will make sure it appears somewhere. ; I guess we can close this issue now ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785937049
https://github.com/root-project/root/issues/7284#issuecomment-785976241:105,Usability,guid,guide,105,"Fine, I'll open a ticket if I find something in the User's Guide missing in the Manual (or the reference guide). For me this issue is not resolved in this state of things. I would rather simply fix that. However, if your workflow says that you can close that, you can do that - it's your project and your decisions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785976241
https://github.com/root-project/root/issues/7284#issuecomment-785976241:187,Usability,simpl,simply,187,"Fine, I'll open a ticket if I find something in the User's Guide missing in the Manual (or the reference guide). For me this issue is not resolved in this state of things. I would rather simply fix that. However, if your workflow says that you can close that, you can do that - it's your project and your decisions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785976241
https://github.com/root-project/root/pull/7290#issuecomment-786085845:601,Deployability,release,released,601,"> It is unclear whether havoc will break. Actually, it _is_ clear. A priori your implementation as-is can't work, but if it did, remember that e.g. Gaudi/Athena like to expose only the interfaces and not the actual classes, so with this, you kill their use case. You're roughly on the right path, though, but you have to make this an optional feature. I.e. track a boolean parameter, with a default value that keeps the old behavior, through the full chain, and only add the class name if a) it is possible (this you're missing even above) and b) it is requested. Works like a charm in cppyy (already released).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7290#issuecomment-786085845
https://github.com/root-project/root/pull/7290#issuecomment-786085845:185,Integrability,interface,interfaces,185,"> It is unclear whether havoc will break. Actually, it _is_ clear. A priori your implementation as-is can't work, but if it did, remember that e.g. Gaudi/Athena like to expose only the interfaces and not the actual classes, so with this, you kill their use case. You're roughly on the right path, though, but you have to make this an optional feature. I.e. track a boolean parameter, with a default value that keeps the old behavior, through the full chain, and only add the class name if a) it is possible (this you're missing even above) and b) it is requested. Works like a charm in cppyy (already released).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7290#issuecomment-786085845
https://github.com/root-project/root/pull/7290#issuecomment-786085845:169,Security,expose,expose,169,"> It is unclear whether havoc will break. Actually, it _is_ clear. A priori your implementation as-is can't work, but if it did, remember that e.g. Gaudi/Athena like to expose only the interfaces and not the actual classes, so with this, you kill their use case. You're roughly on the right path, though, but you have to make this an optional feature. I.e. track a boolean parameter, with a default value that keeps the old behavior, through the full chain, and only add the class name if a) it is possible (this you're missing even above) and b) it is requested. Works like a charm in cppyy (already released).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7290#issuecomment-786085845
https://github.com/root-project/root/pull/7290#issuecomment-786085845:60,Usability,clear,clear,60,"> It is unclear whether havoc will break. Actually, it _is_ clear. A priori your implementation as-is can't work, but if it did, remember that e.g. Gaudi/Athena like to expose only the interfaces and not the actual classes, so with this, you kill their use case. You're roughly on the right path, though, but you have to make this an optional feature. I.e. track a boolean parameter, with a default value that keeps the old behavior, through the full chain, and only add the class name if a) it is possible (this you're missing even above) and b) it is requested. Works like a charm in cppyy (already released).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7290#issuecomment-786085845
https://github.com/root-project/root/pull/7290#issuecomment-786153005:20,Usability,clear,clear,20,"> Actually, it *is* clear. I'm an experimentalist. ;-) Thanks for the info, Wim! I'll implement something along those lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7290#issuecomment-786153005
https://github.com/root-project/root/issues/7295#issuecomment-787077972:122,Usability,guid,guides,122,"And one more thing: if it's not hard for users, maybe a recipe could be added to THtml (or to the page with all reference guides) on how to generate ROOT documentation using `doxygen`?; UPD: found the recipe https://root.cern/for_developers/doxygen/#how-to-generate-the-doxygen-documentation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7295#issuecomment-787077972
https://github.com/root-project/root/issues/7295#issuecomment-787091629:282,Usability,guid,guides,282,"> Which bug report is that? Which link is broken exactly? I found one that we can _improve_ - #7307. https://github.com/root-project/web/issues/510. The link ""You can find in the reference documentation page pointers to reference manuals for all ROOT versions."" is http://root.cern/guides/reference-guide, and it redirects to that same page.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7295#issuecomment-787091629
https://github.com/root-project/root/issues/7295#issuecomment-787091629:299,Usability,guid,guide,299,"> Which bug report is that? Which link is broken exactly? I found one that we can _improve_ - #7307. https://github.com/root-project/web/issues/510. The link ""You can find in the reference documentation page pointers to reference manuals for all ROOT versions."" is http://root.cern/guides/reference-guide, and it redirects to that same page.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7295#issuecomment-787091629
https://github.com/root-project/root/issues/7295#issuecomment-787148271:289,Availability,down,download,289,"So I produced the documentation locally, and compressed that (gz took less than 5 minutes, while xz around 20 minutes). File sizes are different:. > 701M rootdoc.tar.gz; 458M rootdoc.tar.xz. so the latter is 240Mb (35\%) less than the former. It seems that .xz is worthy to be offered for download. I'm pretty sure that is present in most recent distributions (it was in Fedora already several years ago when I used that). If we talk about usability, bandwidth is an important parameter too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7295#issuecomment-787148271
https://github.com/root-project/root/issues/7295#issuecomment-787148271:440,Usability,usab,usability,440,"So I produced the documentation locally, and compressed that (gz took less than 5 minutes, while xz around 20 minutes). File sizes are different:. > 701M rootdoc.tar.gz; 458M rootdoc.tar.xz. so the latter is 240Mb (35\%) less than the former. It seems that .xz is worthy to be offered for download. I'm pretty sure that is present in most recent distributions (it was in Fedora already several years ago when I used that). If we talk about usability, bandwidth is an important parameter too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7295#issuecomment-787148271
https://github.com/root-project/root/issues/7295#issuecomment-787793209:23,Usability,clear,clear,23,The following PR makes clear THTML is legacy code:; https://github.com/root-project/root/pull/7312,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7295#issuecomment-787793209
https://github.com/root-project/root/issues/7295#issuecomment-787906738:41,Performance,optimiz,optimize,41,"> I find doxygen really slow. I tried to optimize that and found many complaints (https://stackoverflow.com/questions/28628348/why-does-doxygen-always-reprocess-every-file). Maybe THtml still _could_ be useful, at least partially.; > UPD: I opened a feature request for `doxygen`. Yes it takes time to generate the full documentation. But ROOT is huge. I never do it fully. Only the nightlies build it completely regularly. It takes several hours. As said [here](https://root.cern/for_developers/doxygen/#how-to-generate-the-doxygen-documentation) look at the list of folders scanned to build the reference guide. It is quite big. When I modify a piece of documentation I shorten this list to generate only what I am working on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7295#issuecomment-787906738
https://github.com/root-project/root/issues/7295#issuecomment-787906738:607,Usability,guid,guide,607,"> I find doxygen really slow. I tried to optimize that and found many complaints (https://stackoverflow.com/questions/28628348/why-does-doxygen-always-reprocess-every-file). Maybe THtml still _could_ be useful, at least partially.; > UPD: I opened a feature request for `doxygen`. Yes it takes time to generate the full documentation. But ROOT is huge. I never do it fully. Only the nightlies build it completely regularly. It takes several hours. As said [here](https://root.cern/for_developers/doxygen/#how-to-generate-the-doxygen-documentation) look at the list of folders scanned to build the reference guide. It is quite big. When I modify a piece of documentation I shorten this list to generate only what I am working on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7295#issuecomment-787906738
https://github.com/root-project/root/pull/7305#issuecomment-787621241:1747,Energy Efficiency,allocate,allocate,1747,"ke_canvas.C; namespace root_global { ; unique_ptr<TCanvas> c1;; }. void make_canvas() {; // we decide at the top level to use a global here:; my_subroutine(root_global::c1);. //This one doesn't use a global and will die, our choice; unique_ptr<TCanvas> local_canvas;; my_subroutine(local_canvas);; }; ```; or if being a little more lazy, I'd likely use static instead of the namespace, but the root interpreter doesn't respect translation unit boundaries well. Really I'd use a class though in case I need to add more global things easily:. ```; //display.h. class display {; private:; unique_ptr<TCanvas> c1;; public:; void make_canvas() {; c1.reset(); ; c1.reset(new TCanvas());; }; };; ```; And use it like:; ```; //make_display.C; #include ""display.h"". namespace root_global { ; display my_display;; }. // main routine:; void make_display() { ; // This one will stick around; root_global::my_display.make_canvas();. // This one wont. ; display local_display;; local_display.make_canvas();; }; ```. There are two main differences compared to the PR. 1) I'm not letting the subroutine allocate heap objects that aren't handled explicitly by the caller. 2) I'm using standard C++ that even works fine right now in root 6. That's nice because it's easier to learn, recognize, understand, and apply elsewhere. Maybe it's a bonus that syntax for creating the TCanvas is always the same and separated from syntax for keeping it. Maybe (1) can be done with RDirectory, and just isn't done in the PR example. I don't know enough about it. If the root objects all had some kind of empty non-displayed initial state, and their own reset() re-initializer, we wouldn't even need the unique_ptr. . Of course you could still end up calling make_display() as a subtroutine from another file, and if you do then it's still become a subroutine allocating ""its own"" heap objects. I just wouldn't, but with a little extra work for the usual extern declarations you could still access the memory elsewhere if you did.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-787621241
https://github.com/root-project/root/pull/7305#issuecomment-787621241:336,Integrability,rout,routine,336,"Thanks for the attention to it. Maybe I was too enthusiastic in the context of displayed objects and interactive root sessions. I'm not an expert, but still learning. Th RDirectory looks interesting. Subroutines leaving global objects lying around still seems funny. It could be convenient for casual scripting. As an example of a main routine, and a subroutine that ""makes"" a TCanvas that persists after a .x, I'd be inclined to skin the cat this way:. ```; // my_subroutines.C; void my_subroutine(unique_ptr<TCanvas> &x) {; x.reset() // TCanvas requires the extra step, see note below.; x.reset(new TCanvas());; // .. do something with it.; }; ```. ```; //make_canvas.C; namespace root_global { ; unique_ptr<TCanvas> c1;; }. void make_canvas() {; // we decide at the top level to use a global here:; my_subroutine(root_global::c1);. //This one doesn't use a global and will die, our choice; unique_ptr<TCanvas> local_canvas;; my_subroutine(local_canvas);; }; ```; or if being a little more lazy, I'd likely use static instead of the namespace, but the root interpreter doesn't respect translation unit boundaries well. Really I'd use a class though in case I need to add more global things easily:. ```; //display.h. class display {; private:; unique_ptr<TCanvas> c1;; public:; void make_canvas() {; c1.reset(); ; c1.reset(new TCanvas());; }; };; ```; And use it like:; ```; //make_display.C; #include ""display.h"". namespace root_global { ; display my_display;; }. // main routine:; void make_display() { ; // This one will stick around; root_global::my_display.make_canvas();. // This one wont. ; display local_display;; local_display.make_canvas();; }; ```. There are two main differences compared to the PR. 1) I'm not letting the subroutine allocate heap objects that aren't handled explicitly by the caller. 2) I'm using standard C++ that even works fine right now in root 6. That's nice because it's easier to learn, recognize, understand, and apply elsewhere. Maybe it's a bonus that syntax f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-787621241
https://github.com/root-project/root/pull/7305#issuecomment-787621241:1475,Integrability,rout,routine,1475,"as> &x) {; x.reset() // TCanvas requires the extra step, see note below.; x.reset(new TCanvas());; // .. do something with it.; }; ```. ```; //make_canvas.C; namespace root_global { ; unique_ptr<TCanvas> c1;; }. void make_canvas() {; // we decide at the top level to use a global here:; my_subroutine(root_global::c1);. //This one doesn't use a global and will die, our choice; unique_ptr<TCanvas> local_canvas;; my_subroutine(local_canvas);; }; ```; or if being a little more lazy, I'd likely use static instead of the namespace, but the root interpreter doesn't respect translation unit boundaries well. Really I'd use a class though in case I need to add more global things easily:. ```; //display.h. class display {; private:; unique_ptr<TCanvas> c1;; public:; void make_canvas() {; c1.reset(); ; c1.reset(new TCanvas());; }; };; ```; And use it like:; ```; //make_display.C; #include ""display.h"". namespace root_global { ; display my_display;; }. // main routine:; void make_display() { ; // This one will stick around; root_global::my_display.make_canvas();. // This one wont. ; display local_display;; local_display.make_canvas();; }; ```. There are two main differences compared to the PR. 1) I'm not letting the subroutine allocate heap objects that aren't handled explicitly by the caller. 2) I'm using standard C++ that even works fine right now in root 6. That's nice because it's easier to learn, recognize, understand, and apply elsewhere. Maybe it's a bonus that syntax for creating the TCanvas is always the same and separated from syntax for keeping it. Maybe (1) can be done with RDirectory, and just isn't done in the PR example. I don't know enough about it. If the root objects all had some kind of empty non-displayed initial state, and their own reset() re-initializer, we wouldn't even need the unique_ptr. . Of course you could still end up calling make_display() as a subtroutine from another file, and if you do then it's still become a subroutine allocating ""its own"" heap",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-787621241
https://github.com/root-project/root/pull/7305#issuecomment-787621241:2621,Security,access,access,2621,"ke_canvas.C; namespace root_global { ; unique_ptr<TCanvas> c1;; }. void make_canvas() {; // we decide at the top level to use a global here:; my_subroutine(root_global::c1);. //This one doesn't use a global and will die, our choice; unique_ptr<TCanvas> local_canvas;; my_subroutine(local_canvas);; }; ```; or if being a little more lazy, I'd likely use static instead of the namespace, but the root interpreter doesn't respect translation unit boundaries well. Really I'd use a class though in case I need to add more global things easily:. ```; //display.h. class display {; private:; unique_ptr<TCanvas> c1;; public:; void make_canvas() {; c1.reset(); ; c1.reset(new TCanvas());; }; };; ```; And use it like:; ```; //make_display.C; #include ""display.h"". namespace root_global { ; display my_display;; }. // main routine:; void make_display() { ; // This one will stick around; root_global::my_display.make_canvas();. // This one wont. ; display local_display;; local_display.make_canvas();; }; ```. There are two main differences compared to the PR. 1) I'm not letting the subroutine allocate heap objects that aren't handled explicitly by the caller. 2) I'm using standard C++ that even works fine right now in root 6. That's nice because it's easier to learn, recognize, understand, and apply elsewhere. Maybe it's a bonus that syntax for creating the TCanvas is always the same and separated from syntax for keeping it. Maybe (1) can be done with RDirectory, and just isn't done in the PR example. I don't know enough about it. If the root objects all had some kind of empty non-displayed initial state, and their own reset() re-initializer, we wouldn't even need the unique_ptr. . Of course you could still end up calling make_display() as a subtroutine from another file, and if you do then it's still become a subroutine allocating ""its own"" heap objects. I just wouldn't, but with a little extra work for the usual extern declarations you could still access the memory elsewhere if you did.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-787621241
https://github.com/root-project/root/pull/7305#issuecomment-787621241:157,Usability,learn,learning,157,"Thanks for the attention to it. Maybe I was too enthusiastic in the context of displayed objects and interactive root sessions. I'm not an expert, but still learning. Th RDirectory looks interesting. Subroutines leaving global objects lying around still seems funny. It could be convenient for casual scripting. As an example of a main routine, and a subroutine that ""makes"" a TCanvas that persists after a .x, I'd be inclined to skin the cat this way:. ```; // my_subroutines.C; void my_subroutine(unique_ptr<TCanvas> &x) {; x.reset() // TCanvas requires the extra step, see note below.; x.reset(new TCanvas());; // .. do something with it.; }; ```. ```; //make_canvas.C; namespace root_global { ; unique_ptr<TCanvas> c1;; }. void make_canvas() {; // we decide at the top level to use a global here:; my_subroutine(root_global::c1);. //This one doesn't use a global and will die, our choice; unique_ptr<TCanvas> local_canvas;; my_subroutine(local_canvas);; }; ```; or if being a little more lazy, I'd likely use static instead of the namespace, but the root interpreter doesn't respect translation unit boundaries well. Really I'd use a class though in case I need to add more global things easily:. ```; //display.h. class display {; private:; unique_ptr<TCanvas> c1;; public:; void make_canvas() {; c1.reset(); ; c1.reset(new TCanvas());; }; };; ```; And use it like:; ```; //make_display.C; #include ""display.h"". namespace root_global { ; display my_display;; }. // main routine:; void make_display() { ; // This one will stick around; root_global::my_display.make_canvas();. // This one wont. ; display local_display;; local_display.make_canvas();; }; ```. There are two main differences compared to the PR. 1) I'm not letting the subroutine allocate heap objects that aren't handled explicitly by the caller. 2) I'm using standard C++ that even works fine right now in root 6. That's nice because it's easier to learn, recognize, understand, and apply elsewhere. Maybe it's a bonus that syntax f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-787621241
https://github.com/root-project/root/pull/7305#issuecomment-787621241:1918,Usability,learn,learn,1918,"ke_canvas.C; namespace root_global { ; unique_ptr<TCanvas> c1;; }. void make_canvas() {; // we decide at the top level to use a global here:; my_subroutine(root_global::c1);. //This one doesn't use a global and will die, our choice; unique_ptr<TCanvas> local_canvas;; my_subroutine(local_canvas);; }; ```; or if being a little more lazy, I'd likely use static instead of the namespace, but the root interpreter doesn't respect translation unit boundaries well. Really I'd use a class though in case I need to add more global things easily:. ```; //display.h. class display {; private:; unique_ptr<TCanvas> c1;; public:; void make_canvas() {; c1.reset(); ; c1.reset(new TCanvas());; }; };; ```; And use it like:; ```; //make_display.C; #include ""display.h"". namespace root_global { ; display my_display;; }. // main routine:; void make_display() { ; // This one will stick around; root_global::my_display.make_canvas();. // This one wont. ; display local_display;; local_display.make_canvas();; }; ```. There are two main differences compared to the PR. 1) I'm not letting the subroutine allocate heap objects that aren't handled explicitly by the caller. 2) I'm using standard C++ that even works fine right now in root 6. That's nice because it's easier to learn, recognize, understand, and apply elsewhere. Maybe it's a bonus that syntax for creating the TCanvas is always the same and separated from syntax for keeping it. Maybe (1) can be done with RDirectory, and just isn't done in the PR example. I don't know enough about it. If the root objects all had some kind of empty non-displayed initial state, and their own reset() re-initializer, we wouldn't even need the unique_ptr. . Of course you could still end up calling make_display() as a subtroutine from another file, and if you do then it's still become a subroutine allocating ""its own"" heap objects. I just wouldn't, but with a little extra work for the usual extern declarations you could still access the memory elsewhere if you did.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-787621241
https://github.com/root-project/root/pull/7305#issuecomment-789295272:43,Testability,test,test,43,"Another minor related point:; ```; - TH1F *test = new TH1F(""test"",""This is test histogram"",100,-4,4);; + auto test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; I guess this gives us what, a TH1F*? (auto doesn't add clarity); Isn't it better to use the base class?; ```; TH1 *test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; assuming that works, or if not, this does:; ```; unique_ptr<TH1> test; ; void the_routine () {; //...; test.reset(new TH1F());; }; ```; This is something that I find not well documented in the past. The old docs point out that TH1F is derived from TH1, but what wasn't always clear to this non-expert was that after creation it seems you can cast to TH1 without loss of any functionality, and functions taking TH1 pointers have the advantage of working on all TH1-derivatives. Building this concept into the standard examples could be helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-789295272
https://github.com/root-project/root/pull/7305#issuecomment-789295272:60,Testability,test,test,60,"Another minor related point:; ```; - TH1F *test = new TH1F(""test"",""This is test histogram"",100,-4,4);; + auto test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; I guess this gives us what, a TH1F*? (auto doesn't add clarity); Isn't it better to use the base class?; ```; TH1 *test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; assuming that works, or if not, this does:; ```; unique_ptr<TH1> test; ; void the_routine () {; //...; test.reset(new TH1F());; }; ```; This is something that I find not well documented in the past. The old docs point out that TH1F is derived from TH1, but what wasn't always clear to this non-expert was that after creation it seems you can cast to TH1 without loss of any functionality, and functions taking TH1 pointers have the advantage of working on all TH1-derivatives. Building this concept into the standard examples could be helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-789295272
https://github.com/root-project/root/pull/7305#issuecomment-789295272:75,Testability,test,test,75,"Another minor related point:; ```; - TH1F *test = new TH1F(""test"",""This is test histogram"",100,-4,4);; + auto test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; I guess this gives us what, a TH1F*? (auto doesn't add clarity); Isn't it better to use the base class?; ```; TH1 *test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; assuming that works, or if not, this does:; ```; unique_ptr<TH1> test; ; void the_routine () {; //...; test.reset(new TH1F());; }; ```; This is something that I find not well documented in the past. The old docs point out that TH1F is derived from TH1, but what wasn't always clear to this non-expert was that after creation it seems you can cast to TH1 without loss of any functionality, and functions taking TH1 pointers have the advantage of working on all TH1-derivatives. Building this concept into the standard examples could be helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-789295272
https://github.com/root-project/root/pull/7305#issuecomment-789295272:110,Testability,test,test,110,"Another minor related point:; ```; - TH1F *test = new TH1F(""test"",""This is test histogram"",100,-4,4);; + auto test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; I guess this gives us what, a TH1F*? (auto doesn't add clarity); Isn't it better to use the base class?; ```; TH1 *test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; assuming that works, or if not, this does:; ```; unique_ptr<TH1> test; ; void the_routine () {; //...; test.reset(new TH1F());; }; ```; This is something that I find not well documented in the past. The old docs point out that TH1F is derived from TH1, but what wasn't always clear to this non-expert was that after creation it seems you can cast to TH1 without loss of any functionality, and functions taking TH1 pointers have the advantage of working on all TH1-derivatives. Building this concept into the standard examples could be helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-789295272
https://github.com/root-project/root/pull/7305#issuecomment-789295272:150,Testability,test,test,150,"Another minor related point:; ```; - TH1F *test = new TH1F(""test"",""This is test histogram"",100,-4,4);; + auto test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; I guess this gives us what, a TH1F*? (auto doesn't add clarity); Isn't it better to use the base class?; ```; TH1 *test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; assuming that works, or if not, this does:; ```; unique_ptr<TH1> test; ; void the_routine () {; //...; test.reset(new TH1F());; }; ```; This is something that I find not well documented in the past. The old docs point out that TH1F is derived from TH1, but what wasn't always clear to this non-expert was that after creation it seems you can cast to TH1 without loss of any functionality, and functions taking TH1 pointers have the advantage of working on all TH1-derivatives. Building this concept into the standard examples could be helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-789295272
https://github.com/root-project/root/pull/7305#issuecomment-789295272:158,Testability,test,test,158,"Another minor related point:; ```; - TH1F *test = new TH1F(""test"",""This is test histogram"",100,-4,4);; + auto test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; I guess this gives us what, a TH1F*? (auto doesn't add clarity); Isn't it better to use the base class?; ```; TH1 *test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; assuming that works, or if not, this does:; ```; unique_ptr<TH1> test; ; void the_routine () {; //...; test.reset(new TH1F());; }; ```; This is something that I find not well documented in the past. The old docs point out that TH1F is derived from TH1, but what wasn't always clear to this non-expert was that after creation it seems you can cast to TH1 without loss of any functionality, and functions taking TH1 pointers have the advantage of working on all TH1-derivatives. Building this concept into the standard examples could be helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-789295272
https://github.com/root-project/root/pull/7305#issuecomment-789295272:173,Testability,test,test,173,"Another minor related point:; ```; - TH1F *test = new TH1F(""test"",""This is test histogram"",100,-4,4);; + auto test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; I guess this gives us what, a TH1F*? (auto doesn't add clarity); Isn't it better to use the base class?; ```; TH1 *test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; assuming that works, or if not, this does:; ```; unique_ptr<TH1> test; ; void the_routine () {; //...; test.reset(new TH1F());; }; ```; This is something that I find not well documented in the past. The old docs point out that TH1F is derived from TH1, but what wasn't always clear to this non-expert was that after creation it seems you can cast to TH1 without loss of any functionality, and functions taking TH1 pointers have the advantage of working on all TH1-derivatives. Building this concept into the standard examples could be helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-789295272
https://github.com/root-project/root/pull/7305#issuecomment-789295272:321,Testability,test,test,321,"Another minor related point:; ```; - TH1F *test = new TH1F(""test"",""This is test histogram"",100,-4,4);; + auto test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; I guess this gives us what, a TH1F*? (auto doesn't add clarity); Isn't it better to use the base class?; ```; TH1 *test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; assuming that works, or if not, this does:; ```; unique_ptr<TH1> test; ; void the_routine () {; //...; test.reset(new TH1F());; }; ```; This is something that I find not well documented in the past. The old docs point out that TH1F is derived from TH1, but what wasn't always clear to this non-expert was that after creation it seems you can cast to TH1 without loss of any functionality, and functions taking TH1 pointers have the advantage of working on all TH1-derivatives. Building this concept into the standard examples could be helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-789295272
https://github.com/root-project/root/pull/7305#issuecomment-789295272:361,Testability,test,test,361,"Another minor related point:; ```; - TH1F *test = new TH1F(""test"",""This is test histogram"",100,-4,4);; + auto test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; I guess this gives us what, a TH1F*? (auto doesn't add clarity); Isn't it better to use the base class?; ```; TH1 *test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; assuming that works, or if not, this does:; ```; unique_ptr<TH1> test; ; void the_routine () {; //...; test.reset(new TH1F());; }; ```; This is something that I find not well documented in the past. The old docs point out that TH1F is derived from TH1, but what wasn't always clear to this non-expert was that after creation it seems you can cast to TH1 without loss of any functionality, and functions taking TH1 pointers have the advantage of working on all TH1-derivatives. Building this concept into the standard examples could be helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-789295272
https://github.com/root-project/root/pull/7305#issuecomment-789295272:369,Testability,test,test,369,"Another minor related point:; ```; - TH1F *test = new TH1F(""test"",""This is test histogram"",100,-4,4);; + auto test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; I guess this gives us what, a TH1F*? (auto doesn't add clarity); Isn't it better to use the base class?; ```; TH1 *test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; assuming that works, or if not, this does:; ```; unique_ptr<TH1> test; ; void the_routine () {; //...; test.reset(new TH1F());; }; ```; This is something that I find not well documented in the past. The old docs point out that TH1F is derived from TH1, but what wasn't always clear to this non-expert was that after creation it seems you can cast to TH1 without loss of any functionality, and functions taking TH1 pointers have the advantage of working on all TH1-derivatives. Building this concept into the standard examples could be helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-789295272
https://github.com/root-project/root/pull/7305#issuecomment-789295272:384,Testability,test,test,384,"Another minor related point:; ```; - TH1F *test = new TH1F(""test"",""This is test histogram"",100,-4,4);; + auto test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; I guess this gives us what, a TH1F*? (auto doesn't add clarity); Isn't it better to use the base class?; ```; TH1 *test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; assuming that works, or if not, this does:; ```; unique_ptr<TH1> test; ; void the_routine () {; //...; test.reset(new TH1F());; }; ```; This is something that I find not well documented in the past. The old docs point out that TH1F is derived from TH1, but what wasn't always clear to this non-expert was that after creation it seems you can cast to TH1 without loss of any functionality, and functions taking TH1 pointers have the advantage of working on all TH1-derivatives. Building this concept into the standard examples could be helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-789295272
https://github.com/root-project/root/pull/7305#issuecomment-789295272:482,Testability,test,test,482,"Another minor related point:; ```; - TH1F *test = new TH1F(""test"",""This is test histogram"",100,-4,4);; + auto test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; I guess this gives us what, a TH1F*? (auto doesn't add clarity); Isn't it better to use the base class?; ```; TH1 *test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; assuming that works, or if not, this does:; ```; unique_ptr<TH1> test; ; void the_routine () {; //...; test.reset(new TH1F());; }; ```; This is something that I find not well documented in the past. The old docs point out that TH1F is derived from TH1, but what wasn't always clear to this non-expert was that after creation it seems you can cast to TH1 without loss of any functionality, and functions taking TH1 pointers have the advantage of working on all TH1-derivatives. Building this concept into the standard examples could be helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-789295272
https://github.com/root-project/root/pull/7305#issuecomment-789295272:520,Testability,test,test,520,"Another minor related point:; ```; - TH1F *test = new TH1F(""test"",""This is test histogram"",100,-4,4);; + auto test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; I guess this gives us what, a TH1F*? (auto doesn't add clarity); Isn't it better to use the base class?; ```; TH1 *test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; assuming that works, or if not, this does:; ```; unique_ptr<TH1> test; ; void the_routine () {; //...; test.reset(new TH1F());; }; ```; This is something that I find not well documented in the past. The old docs point out that TH1F is derived from TH1, but what wasn't always clear to this non-expert was that after creation it seems you can cast to TH1 without loss of any functionality, and functions taking TH1 pointers have the advantage of working on all TH1-derivatives. Building this concept into the standard examples could be helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-789295272
https://github.com/root-project/root/pull/7305#issuecomment-789295272:693,Usability,clear,clear,693,"Another minor related point:; ```; - TH1F *test = new TH1F(""test"",""This is test histogram"",100,-4,4);; + auto test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; I guess this gives us what, a TH1F*? (auto doesn't add clarity); Isn't it better to use the base class?; ```; TH1 *test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; assuming that works, or if not, this does:; ```; unique_ptr<TH1> test; ; void the_routine () {; //...; test.reset(new TH1F());; }; ```; This is something that I find not well documented in the past. The old docs point out that TH1F is derived from TH1, but what wasn't always clear to this non-expert was that after creation it seems you can cast to TH1 without loss of any functionality, and functions taking TH1 pointers have the advantage of working on all TH1-derivatives. Building this concept into the standard examples could be helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-789295272
https://github.com/root-project/root/pull/7305#issuecomment-791104038:6390,Availability,down,downside,6390,"loop over 3 parallel histograms, you'd need the global to be a vector and you'd have to push_back() onto it, but you're in the same (bad) place then. I wrote a script just like that this week exactly to fit a number of peaks determined by a file read inside one routine, and looped over outside, and I used example 1, not example 2, and future use of the base routine will never cause leaks. . The code structure is problematic to me. RDirectory itself isn't terrible, but I just don't see what it solves other than more syntax to remember. A final point, the shared pointers supposedly perform worse than unique pointers. I don't know how much it matters, but when you're fitting millions of waveforms maybe it does. Of course then you shouldn't be using RDirectory, but you can still use my_subroutines.C to do your fit if you're looping the million without RDirectory or to examining one of those fits with RDirectory, without rewriting the routine. I'm going to skip the point about empty root objects just to limit the scope for now. ### How to skip globals entirely. Of course you can just let the top level code return an object or structure. The downside is just that you have to .L the code and call it with auto ret=make_th1(). It can't be a complied main(), but that's no big deal. It violates the spirit of ""scripting"" but is of course very clean:. example 3: ; ```cpp; //subroutine.C. // my_subroutines.C; void my_subroutine(unique_ptr<TH1> &x) {; x.reset(); // not needed for TH1F, but safer in general.; x.reset(new TH1F());; // .. do something with it.; }; ```; ```cpp; //make_th1.C. vector<unique_ptr<TH1>> make_th1() { //edit: changed to TH1's here; vector<unique_ptr<TH1>> retvec(3); // and here, as intended.; for (int i=0; i<3; i++) {; my_subroutine(retvec[i]);; }; return retvec;; }; ```. But the end-user can decide. Again, the subroutine works regardless. The PR is an improvement, and I don't object to it. I think more improvement is possible. (minor edits made for cleanup)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:521,Integrability,interface,interfaces,521,"> Thanks for your comments! . Thanks for the discussion. I think many students learn C++ from root examples so it matters.; ; Thanks for the link to the docs. I got a little confused about Heap().Create details when I looked at first (and there you go) but I get it now. I learned two things:. a) RDirectory can take an existing shared_ptr using Add() instead of Create(), super!; b) Little thing but it looks like Create() syntax cannot cast a TH1F to a TH1. I've learned to always want a TH1 and never a TH1F, as their interfaces are identical after construction (nothing sliced). Implicit casts make it not a huge issue but I'd still prefer to cast to a TH1 smart pointer first and then use Add(), a trivial nuisance. Maybe Create has a way to cast that I'm missing, or could. Now, There's a lot to unpack here. Let's just stick with my pure subroutine version (not class version) for direct comparison for now. I could pass a structure anyway obviously. Now I can do this, with a TH1F... example 1: ; ```cpp; //my_subtrounes.C. // my_subroutines.C; void my_subroutine(shared_ptr<TH1> &x) {; x.reset(); // not needed for TH1F, but safer in general.; x.reset(new TH1F());; // .. do something with it.; }; ```; ```cpp; //make_th1.C; #include <ROOT/RDirectory.hxx> // one extra line ;); #ifdef __CINT__; // shared_ptr<TH1> mc_global_x,mc_global_y,mc_global_z; // but saved one line here...; #endif. void make_th1() {; shared_ptr<TH1> x,y,z;; my_subroutine(x);; my_subroutine(y);; my_subroutine(z);. // and the last we do is leave globals on the heap for interactive user if needed:; #ifdef __CINT__ // I wouldn't leave the globals in compiled code. ; RDirectory::Heap().Add(""test1"",x); // this line is ""extra"" compared to PR, but puts caller in control.; RDirectory::Heap().Add(""test2"",y); // but using RDirectory requires 3 lines now ;); RDirectory::Heap().Add(""test3"",z); // ; #endif; }; ```; I'm ok with this. I like vanilla better, but I got a clean ownership model up until the end here, and made",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:3269,Integrability,interface,interface,3269,"g the underlying implementation to get three instances. But this RDirectory version shown here and the C++ global version here are certainly not different in that respect. The C++ globals actually win on line count here if you like this code structure better (I do). I'd argue if one needs the extern header declarations to pass things around in compiled code, he should ask if he's doing it wrong, and that's not an usual sentiment. The whole point is I think to make things visible from the interpreter or other things spawned from it. That's surely why we got here, and if C++ globals makes it tedious to access them everywhere in compiled code, I call that a bonus. . On the other hand I don't like this ; example2: ; ```cpp; {; // my_subroutines.C; unique_ptr<TH1> x // used in my_subroutine. void my_subroutine() {; x.reset(); ; x.reset(new TH1F());; // .. do something with it.; }; ```; except for maybe quick temporary scripts. So we have about 2.5 issues. ; 1) The global command,; 2) the interface and ownership model, and; 2.5) with the way it's done in the PR also the non-castable syntax issue. Issue 2.5 is already covered. I do still like C++ globals better even in example 2. It separates how to make a TH1 from how to make it global. The RDirectory is more self-documenting than ""new"", but C++ one makes the file self documenting, not just the line of code. And, all else equal, vanilla is better. But by far the more important point is that I don't like example 2 or the PR. Regarding point 2, example 1 is surely more scalable. I already scaled it more than is possible with the PR. Of course you can edit the PR to make new key names on each call so that the RDirectory call can create more things. But scalable means I did it without needing to modify the underlying implementation or interface (which someone else might maintain) to get three plots instead of one. Furthermore, coming back to issue 1, **if you do edit the PR to have flexible (sequential or passed) RDirectory n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:4077,Integrability,interface,interface,4077," my_subroutine() {; x.reset(); ; x.reset(new TH1F());; // .. do something with it.; }; ```; except for maybe quick temporary scripts. So we have about 2.5 issues. ; 1) The global command,; 2) the interface and ownership model, and; 2.5) with the way it's done in the PR also the non-castable syntax issue. Issue 2.5 is already covered. I do still like C++ globals better even in example 2. It separates how to make a TH1 from how to make it global. The RDirectory is more self-documenting than ""new"", but C++ one makes the file self documenting, not just the line of code. And, all else equal, vanilla is better. But by far the more important point is that I don't like example 2 or the PR. Regarding point 2, example 1 is surely more scalable. I already scaled it more than is possible with the PR. Of course you can edit the PR to make new key names on each call so that the RDirectory call can create more things. But scalable means I did it without needing to modify the underlying implementation or interface (which someone else might maintain) to get three plots instead of one. Furthermore, coming back to issue 1, **if you do edit the PR to have flexible (sequential or passed) RDirectory names, you also (edit: might) need to add explicit deletes (more lines of code) somewhere if you run it all in a batch loop, or you'll have a leak.**(**edit**: depending on exactly how the looping and naming is done, but it can easily happen) In other words a portion of the new/delete problem has just been hidden under new with a different name. This is exactly what I mean by modern ownership models. In example 1 the top level code asked for memory that it owns. In my class version it made an instance that it owns. Objects are scoped only as far as requested. When that scope dies, or the container is reset, it's cleaned up where it is made. That's what smart pointers are all about. The PR as-is won't leak, but only because it's not flexible enough to create different things. It's a fragile gr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:4430,Integrability,depend,depending,4430,"bal. The RDirectory is more self-documenting than ""new"", but C++ one makes the file self documenting, not just the line of code. And, all else equal, vanilla is better. But by far the more important point is that I don't like example 2 or the PR. Regarding point 2, example 1 is surely more scalable. I already scaled it more than is possible with the PR. Of course you can edit the PR to make new key names on each call so that the RDirectory call can create more things. But scalable means I did it without needing to modify the underlying implementation or interface (which someone else might maintain) to get three plots instead of one. Furthermore, coming back to issue 1, **if you do edit the PR to have flexible (sequential or passed) RDirectory names, you also (edit: might) need to add explicit deletes (more lines of code) somewhere if you run it all in a batch loop, or you'll have a leak.**(**edit**: depending on exactly how the looping and naming is done, but it can easily happen) In other words a portion of the new/delete problem has just been hidden under new with a different name. This is exactly what I mean by modern ownership models. In example 1 the top level code asked for memory that it owns. In my class version it made an instance that it owns. Objects are scoped only as far as requested. When that scope dies, or the container is reset, it's cleaned up where it is made. That's what smart pointers are all about. The PR as-is won't leak, but only because it's not flexible enough to create different things. It's a fragile grammar and in the end I'd rather worry about adding top-level ""keep"" statements than top level ""deletes"". In the C++ global version of example 2, to get the serial loop over 3 parallel histograms, you'd need the global to be a vector and you'd have to push_back() onto it, but you're in the same (bad) place then. I wrote a script just like that this week exactly to fit a number of peaks determined by a file read inside one routine, and looped",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:5498,Integrability,rout,routine,5498,"appen) In other words a portion of the new/delete problem has just been hidden under new with a different name. This is exactly what I mean by modern ownership models. In example 1 the top level code asked for memory that it owns. In my class version it made an instance that it owns. Objects are scoped only as far as requested. When that scope dies, or the container is reset, it's cleaned up where it is made. That's what smart pointers are all about. The PR as-is won't leak, but only because it's not flexible enough to create different things. It's a fragile grammar and in the end I'd rather worry about adding top-level ""keep"" statements than top level ""deletes"". In the C++ global version of example 2, to get the serial loop over 3 parallel histograms, you'd need the global to be a vector and you'd have to push_back() onto it, but you're in the same (bad) place then. I wrote a script just like that this week exactly to fit a number of peaks determined by a file read inside one routine, and looped over outside, and I used example 1, not example 2, and future use of the base routine will never cause leaks. . The code structure is problematic to me. RDirectory itself isn't terrible, but I just don't see what it solves other than more syntax to remember. A final point, the shared pointers supposedly perform worse than unique pointers. I don't know how much it matters, but when you're fitting millions of waveforms maybe it does. Of course then you shouldn't be using RDirectory, but you can still use my_subroutines.C to do your fit if you're looping the million without RDirectory or to examining one of those fits with RDirectory, without rewriting the routine. I'm going to skip the point about empty root objects just to limit the scope for now. ### How to skip globals entirely. Of course you can just let the top level code return an object or structure. The downside is just that you have to .L the code and call it with auto ret=make_th1(). It can't be a complied main(), b",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:5596,Integrability,rout,routine,5596,"appen) In other words a portion of the new/delete problem has just been hidden under new with a different name. This is exactly what I mean by modern ownership models. In example 1 the top level code asked for memory that it owns. In my class version it made an instance that it owns. Objects are scoped only as far as requested. When that scope dies, or the container is reset, it's cleaned up where it is made. That's what smart pointers are all about. The PR as-is won't leak, but only because it's not flexible enough to create different things. It's a fragile grammar and in the end I'd rather worry about adding top-level ""keep"" statements than top level ""deletes"". In the C++ global version of example 2, to get the serial loop over 3 parallel histograms, you'd need the global to be a vector and you'd have to push_back() onto it, but you're in the same (bad) place then. I wrote a script just like that this week exactly to fit a number of peaks determined by a file read inside one routine, and looped over outside, and I used example 1, not example 2, and future use of the base routine will never cause leaks. . The code structure is problematic to me. RDirectory itself isn't terrible, but I just don't see what it solves other than more syntax to remember. A final point, the shared pointers supposedly perform worse than unique pointers. I don't know how much it matters, but when you're fitting millions of waveforms maybe it does. Of course then you shouldn't be using RDirectory, but you can still use my_subroutines.C to do your fit if you're looping the million without RDirectory or to examining one of those fits with RDirectory, without rewriting the routine. I'm going to skip the point about empty root objects just to limit the scope for now. ### How to skip globals entirely. Of course you can just let the top level code return an object or structure. The downside is just that you have to .L the code and call it with auto ret=make_th1(). It can't be a complied main(), b",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:6180,Integrability,rout,routine,6180,"ut adding top-level ""keep"" statements than top level ""deletes"". In the C++ global version of example 2, to get the serial loop over 3 parallel histograms, you'd need the global to be a vector and you'd have to push_back() onto it, but you're in the same (bad) place then. I wrote a script just like that this week exactly to fit a number of peaks determined by a file read inside one routine, and looped over outside, and I used example 1, not example 2, and future use of the base routine will never cause leaks. . The code structure is problematic to me. RDirectory itself isn't terrible, but I just don't see what it solves other than more syntax to remember. A final point, the shared pointers supposedly perform worse than unique pointers. I don't know how much it matters, but when you're fitting millions of waveforms maybe it does. Of course then you shouldn't be using RDirectory, but you can still use my_subroutines.C to do your fit if you're looping the million without RDirectory or to examining one of those fits with RDirectory, without rewriting the routine. I'm going to skip the point about empty root objects just to limit the scope for now. ### How to skip globals entirely. Of course you can just let the top level code return an object or structure. The downside is just that you have to .L the code and call it with auto ret=make_th1(). It can't be a complied main(), but that's no big deal. It violates the spirit of ""scripting"" but is of course very clean:. example 3: ; ```cpp; //subroutine.C. // my_subroutines.C; void my_subroutine(unique_ptr<TH1> &x) {; x.reset(); // not needed for TH1F, but safer in general.; x.reset(new TH1F());; // .. do something with it.; }; ```; ```cpp; //make_th1.C. vector<unique_ptr<TH1>> make_th1() { //edit: changed to TH1's here; vector<unique_ptr<TH1>> retvec(3); // and here, as intended.; for (int i=0; i<3; i++) {; my_subroutine(retvec[i]);; }; return retvec;; }; ```. But the end-user can decide. Again, the subroutine works regardless.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:4227,Modifiability,flexible,flexible,4227,"rship model, and; 2.5) with the way it's done in the PR also the non-castable syntax issue. Issue 2.5 is already covered. I do still like C++ globals better even in example 2. It separates how to make a TH1 from how to make it global. The RDirectory is more self-documenting than ""new"", but C++ one makes the file self documenting, not just the line of code. And, all else equal, vanilla is better. But by far the more important point is that I don't like example 2 or the PR. Regarding point 2, example 1 is surely more scalable. I already scaled it more than is possible with the PR. Of course you can edit the PR to make new key names on each call so that the RDirectory call can create more things. But scalable means I did it without needing to modify the underlying implementation or interface (which someone else might maintain) to get three plots instead of one. Furthermore, coming back to issue 1, **if you do edit the PR to have flexible (sequential or passed) RDirectory names, you also (edit: might) need to add explicit deletes (more lines of code) somewhere if you run it all in a batch loop, or you'll have a leak.**(**edit**: depending on exactly how the looping and naming is done, but it can easily happen) In other words a portion of the new/delete problem has just been hidden under new with a different name. This is exactly what I mean by modern ownership models. In example 1 the top level code asked for memory that it owns. In my class version it made an instance that it owns. Objects are scoped only as far as requested. When that scope dies, or the container is reset, it's cleaned up where it is made. That's what smart pointers are all about. The PR as-is won't leak, but only because it's not flexible enough to create different things. It's a fragile grammar and in the end I'd rather worry about adding top-level ""keep"" statements than top level ""deletes"". In the C++ global version of example 2, to get the serial loop over 3 parallel histograms, you'd need the glo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:5012,Modifiability,flexible,flexible,5012,"s I did it without needing to modify the underlying implementation or interface (which someone else might maintain) to get three plots instead of one. Furthermore, coming back to issue 1, **if you do edit the PR to have flexible (sequential or passed) RDirectory names, you also (edit: might) need to add explicit deletes (more lines of code) somewhere if you run it all in a batch loop, or you'll have a leak.**(**edit**: depending on exactly how the looping and naming is done, but it can easily happen) In other words a portion of the new/delete problem has just been hidden under new with a different name. This is exactly what I mean by modern ownership models. In example 1 the top level code asked for memory that it owns. In my class version it made an instance that it owns. Objects are scoped only as far as requested. When that scope dies, or the container is reset, it's cleaned up where it is made. That's what smart pointers are all about. The PR as-is won't leak, but only because it's not flexible enough to create different things. It's a fragile grammar and in the end I'd rather worry about adding top-level ""keep"" statements than top level ""deletes"". In the C++ global version of example 2, to get the serial loop over 3 parallel histograms, you'd need the global to be a vector and you'd have to push_back() onto it, but you're in the same (bad) place then. I wrote a script just like that this week exactly to fit a number of peaks determined by a file read inside one routine, and looped over outside, and I used example 1, not example 2, and future use of the base routine will never cause leaks. . The code structure is problematic to me. RDirectory itself isn't terrible, but I just don't see what it solves other than more syntax to remember. A final point, the shared pointers supposedly perform worse than unique pointers. I don't know how much it matters, but when you're fitting millions of waveforms maybe it does. Of course then you shouldn't be using RDirectory, but ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:3808,Performance,scalab,scalable,3808,"s spawned from it. That's surely why we got here, and if C++ globals makes it tedious to access them everywhere in compiled code, I call that a bonus. . On the other hand I don't like this ; example2: ; ```cpp; {; // my_subroutines.C; unique_ptr<TH1> x // used in my_subroutine. void my_subroutine() {; x.reset(); ; x.reset(new TH1F());; // .. do something with it.; }; ```; except for maybe quick temporary scripts. So we have about 2.5 issues. ; 1) The global command,; 2) the interface and ownership model, and; 2.5) with the way it's done in the PR also the non-castable syntax issue. Issue 2.5 is already covered. I do still like C++ globals better even in example 2. It separates how to make a TH1 from how to make it global. The RDirectory is more self-documenting than ""new"", but C++ one makes the file self documenting, not just the line of code. And, all else equal, vanilla is better. But by far the more important point is that I don't like example 2 or the PR. Regarding point 2, example 1 is surely more scalable. I already scaled it more than is possible with the PR. Of course you can edit the PR to make new key names on each call so that the RDirectory call can create more things. But scalable means I did it without needing to modify the underlying implementation or interface (which someone else might maintain) to get three plots instead of one. Furthermore, coming back to issue 1, **if you do edit the PR to have flexible (sequential or passed) RDirectory names, you also (edit: might) need to add explicit deletes (more lines of code) somewhere if you run it all in a batch loop, or you'll have a leak.**(**edit**: depending on exactly how the looping and naming is done, but it can easily happen) In other words a portion of the new/delete problem has just been hidden under new with a different name. This is exactly what I mean by modern ownership models. In example 1 the top level code asked for memory that it owns. In my class version it made an instance that it owns.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:3994,Performance,scalab,scalable,3994," my_subroutine() {; x.reset(); ; x.reset(new TH1F());; // .. do something with it.; }; ```; except for maybe quick temporary scripts. So we have about 2.5 issues. ; 1) The global command,; 2) the interface and ownership model, and; 2.5) with the way it's done in the PR also the non-castable syntax issue. Issue 2.5 is already covered. I do still like C++ globals better even in example 2. It separates how to make a TH1 from how to make it global. The RDirectory is more self-documenting than ""new"", but C++ one makes the file self documenting, not just the line of code. And, all else equal, vanilla is better. But by far the more important point is that I don't like example 2 or the PR. Regarding point 2, example 1 is surely more scalable. I already scaled it more than is possible with the PR. Of course you can edit the PR to make new key names on each call so that the RDirectory call can create more things. But scalable means I did it without needing to modify the underlying implementation or interface (which someone else might maintain) to get three plots instead of one. Furthermore, coming back to issue 1, **if you do edit the PR to have flexible (sequential or passed) RDirectory names, you also (edit: might) need to add explicit deletes (more lines of code) somewhere if you run it all in a batch loop, or you'll have a leak.**(**edit**: depending on exactly how the looping and naming is done, but it can easily happen) In other words a portion of the new/delete problem has just been hidden under new with a different name. This is exactly what I mean by modern ownership models. In example 1 the top level code asked for memory that it owns. In my class version it made an instance that it owns. Objects are scoped only as far as requested. When that scope dies, or the container is reset, it's cleaned up where it is made. That's what smart pointers are all about. The PR as-is won't leak, but only because it's not flexible enough to create different things. It's a fragile gr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:5823,Performance,perform,perform,5823," far as requested. When that scope dies, or the container is reset, it's cleaned up where it is made. That's what smart pointers are all about. The PR as-is won't leak, but only because it's not flexible enough to create different things. It's a fragile grammar and in the end I'd rather worry about adding top-level ""keep"" statements than top level ""deletes"". In the C++ global version of example 2, to get the serial loop over 3 parallel histograms, you'd need the global to be a vector and you'd have to push_back() onto it, but you're in the same (bad) place then. I wrote a script just like that this week exactly to fit a number of peaks determined by a file read inside one routine, and looped over outside, and I used example 1, not example 2, and future use of the base routine will never cause leaks. . The code structure is problematic to me. RDirectory itself isn't terrible, but I just don't see what it solves other than more syntax to remember. A final point, the shared pointers supposedly perform worse than unique pointers. I don't know how much it matters, but when you're fitting millions of waveforms maybe it does. Of course then you shouldn't be using RDirectory, but you can still use my_subroutines.C to do your fit if you're looping the million without RDirectory or to examining one of those fits with RDirectory, without rewriting the routine. I'm going to skip the point about empty root objects just to limit the scope for now. ### How to skip globals entirely. Of course you can just let the top level code return an object or structure. The downside is just that you have to .L the code and call it with auto ret=make_th1(). It can't be a complied main(), but that's no big deal. It violates the spirit of ""scripting"" but is of course very clean:. example 3: ; ```cpp; //subroutine.C. // my_subroutines.C; void my_subroutine(unique_ptr<TH1> &x) {; x.reset(); // not needed for TH1F, but safer in general.; x.reset(new TH1F());; // .. do something with it.; }; ```; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:1134,Safety,safe,safer,1134,"; Thanks for the link to the docs. I got a little confused about Heap().Create details when I looked at first (and there you go) but I get it now. I learned two things:. a) RDirectory can take an existing shared_ptr using Add() instead of Create(), super!; b) Little thing but it looks like Create() syntax cannot cast a TH1F to a TH1. I've learned to always want a TH1 and never a TH1F, as their interfaces are identical after construction (nothing sliced). Implicit casts make it not a huge issue but I'd still prefer to cast to a TH1 smart pointer first and then use Add(), a trivial nuisance. Maybe Create has a way to cast that I'm missing, or could. Now, There's a lot to unpack here. Let's just stick with my pure subroutine version (not class version) for direct comparison for now. I could pass a structure anyway obviously. Now I can do this, with a TH1F... example 1: ; ```cpp; //my_subtrounes.C. // my_subroutines.C; void my_subroutine(shared_ptr<TH1> &x) {; x.reset(); // not needed for TH1F, but safer in general.; x.reset(new TH1F());; // .. do something with it.; }; ```; ```cpp; //make_th1.C; #include <ROOT/RDirectory.hxx> // one extra line ;); #ifdef __CINT__; // shared_ptr<TH1> mc_global_x,mc_global_y,mc_global_z; // but saved one line here...; #endif. void make_th1() {; shared_ptr<TH1> x,y,z;; my_subroutine(x);; my_subroutine(y);; my_subroutine(z);. // and the last we do is leave globals on the heap for interactive user if needed:; #ifdef __CINT__ // I wouldn't leave the globals in compiled code. ; RDirectory::Heap().Add(""test1"",x); // this line is ""extra"" compared to PR, but puts caller in control.; RDirectory::Heap().Add(""test2"",y); // but using RDirectory requires 3 lines now ;); RDirectory::Heap().Add(""test3"",z); // ; #endif; }; ```; I'm ok with this. I like vanilla better, but I got a clean ownership model up until the end here, and made the globals right before exiting, almost like a return statement. If I want to put this in a compiled batch code that loop",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:6736,Safety,safe,safer,6736,"loop over 3 parallel histograms, you'd need the global to be a vector and you'd have to push_back() onto it, but you're in the same (bad) place then. I wrote a script just like that this week exactly to fit a number of peaks determined by a file read inside one routine, and looped over outside, and I used example 1, not example 2, and future use of the base routine will never cause leaks. . The code structure is problematic to me. RDirectory itself isn't terrible, but I just don't see what it solves other than more syntax to remember. A final point, the shared pointers supposedly perform worse than unique pointers. I don't know how much it matters, but when you're fitting millions of waveforms maybe it does. Of course then you shouldn't be using RDirectory, but you can still use my_subroutines.C to do your fit if you're looping the million without RDirectory or to examining one of those fits with RDirectory, without rewriting the routine. I'm going to skip the point about empty root objects just to limit the scope for now. ### How to skip globals entirely. Of course you can just let the top level code return an object or structure. The downside is just that you have to .L the code and call it with auto ret=make_th1(). It can't be a complied main(), but that's no big deal. It violates the spirit of ""scripting"" but is of course very clean:. example 3: ; ```cpp; //subroutine.C. // my_subroutines.C; void my_subroutine(unique_ptr<TH1> &x) {; x.reset(); // not needed for TH1F, but safer in general.; x.reset(new TH1F());; // .. do something with it.; }; ```; ```cpp; //make_th1.C. vector<unique_ptr<TH1>> make_th1() { //edit: changed to TH1's here; vector<unique_ptr<TH1>> retvec(3); // and here, as intended.; for (int i=0; i<3; i++) {; my_subroutine(retvec[i]);; }; return retvec;; }; ```. But the end-user can decide. Again, the subroutine works regardless. The PR is an improvement, and I don't object to it. I think more improvement is possible. (minor edits made for cleanup)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:2879,Security,access,access,2879,"// ; #endif; }; ```; I'm ok with this. I like vanilla better, but I got a clean ownership model up until the end here, and made the globals right before exiting, almost like a return statement. If I want to put this in a compiled batch code that loops over this 50 times, pauses 1 second, and displays 3 things each time, I'd just add a loop with sleeps, and Bob's your uncle without even modifying the underlying implementation to get three instances. But this RDirectory version shown here and the C++ global version here are certainly not different in that respect. The C++ globals actually win on line count here if you like this code structure better (I do). I'd argue if one needs the extern header declarations to pass things around in compiled code, he should ask if he's doing it wrong, and that's not an usual sentiment. The whole point is I think to make things visible from the interpreter or other things spawned from it. That's surely why we got here, and if C++ globals makes it tedious to access them everywhere in compiled code, I call that a bonus. . On the other hand I don't like this ; example2: ; ```cpp; {; // my_subroutines.C; unique_ptr<TH1> x // used in my_subroutine. void my_subroutine() {; x.reset(); ; x.reset(new TH1F());; // .. do something with it.; }; ```; except for maybe quick temporary scripts. So we have about 2.5 issues. ; 1) The global command,; 2) the interface and ownership model, and; 2.5) with the way it's done in the PR also the non-castable syntax issue. Issue 2.5 is already covered. I do still like C++ globals better even in example 2. It separates how to make a TH1 from how to make it global. The RDirectory is more self-documenting than ""new"", but C++ one makes the file self documenting, not just the line of code. And, all else equal, vanilla is better. But by far the more important point is that I don't like example 2 or the PR. Regarding point 2, example 1 is surely more scalable. I already scaled it more than is possible with the PR. O",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:79,Usability,learn,learn,79,"> Thanks for your comments! . Thanks for the discussion. I think many students learn C++ from root examples so it matters.; ; Thanks for the link to the docs. I got a little confused about Heap().Create details when I looked at first (and there you go) but I get it now. I learned two things:. a) RDirectory can take an existing shared_ptr using Add() instead of Create(), super!; b) Little thing but it looks like Create() syntax cannot cast a TH1F to a TH1. I've learned to always want a TH1 and never a TH1F, as their interfaces are identical after construction (nothing sliced). Implicit casts make it not a huge issue but I'd still prefer to cast to a TH1 smart pointer first and then use Add(), a trivial nuisance. Maybe Create has a way to cast that I'm missing, or could. Now, There's a lot to unpack here. Let's just stick with my pure subroutine version (not class version) for direct comparison for now. I could pass a structure anyway obviously. Now I can do this, with a TH1F... example 1: ; ```cpp; //my_subtrounes.C. // my_subroutines.C; void my_subroutine(shared_ptr<TH1> &x) {; x.reset(); // not needed for TH1F, but safer in general.; x.reset(new TH1F());; // .. do something with it.; }; ```; ```cpp; //make_th1.C; #include <ROOT/RDirectory.hxx> // one extra line ;); #ifdef __CINT__; // shared_ptr<TH1> mc_global_x,mc_global_y,mc_global_z; // but saved one line here...; #endif. void make_th1() {; shared_ptr<TH1> x,y,z;; my_subroutine(x);; my_subroutine(y);; my_subroutine(z);. // and the last we do is leave globals on the heap for interactive user if needed:; #ifdef __CINT__ // I wouldn't leave the globals in compiled code. ; RDirectory::Heap().Add(""test1"",x); // this line is ""extra"" compared to PR, but puts caller in control.; RDirectory::Heap().Add(""test2"",y); // but using RDirectory requires 3 lines now ;); RDirectory::Heap().Add(""test3"",z); // ; #endif; }; ```; I'm ok with this. I like vanilla better, but I got a clean ownership model up until the end here, and made",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:273,Usability,learn,learned,273,"> Thanks for your comments! . Thanks for the discussion. I think many students learn C++ from root examples so it matters.; ; Thanks for the link to the docs. I got a little confused about Heap().Create details when I looked at first (and there you go) but I get it now. I learned two things:. a) RDirectory can take an existing shared_ptr using Add() instead of Create(), super!; b) Little thing but it looks like Create() syntax cannot cast a TH1F to a TH1. I've learned to always want a TH1 and never a TH1F, as their interfaces are identical after construction (nothing sliced). Implicit casts make it not a huge issue but I'd still prefer to cast to a TH1 smart pointer first and then use Add(), a trivial nuisance. Maybe Create has a way to cast that I'm missing, or could. Now, There's a lot to unpack here. Let's just stick with my pure subroutine version (not class version) for direct comparison for now. I could pass a structure anyway obviously. Now I can do this, with a TH1F... example 1: ; ```cpp; //my_subtrounes.C. // my_subroutines.C; void my_subroutine(shared_ptr<TH1> &x) {; x.reset(); // not needed for TH1F, but safer in general.; x.reset(new TH1F());; // .. do something with it.; }; ```; ```cpp; //make_th1.C; #include <ROOT/RDirectory.hxx> // one extra line ;); #ifdef __CINT__; // shared_ptr<TH1> mc_global_x,mc_global_y,mc_global_z; // but saved one line here...; #endif. void make_th1() {; shared_ptr<TH1> x,y,z;; my_subroutine(x);; my_subroutine(y);; my_subroutine(z);. // and the last we do is leave globals on the heap for interactive user if needed:; #ifdef __CINT__ // I wouldn't leave the globals in compiled code. ; RDirectory::Heap().Add(""test1"",x); // this line is ""extra"" compared to PR, but puts caller in control.; RDirectory::Heap().Add(""test2"",y); // but using RDirectory requires 3 lines now ;); RDirectory::Heap().Add(""test3"",z); // ; #endif; }; ```; I'm ok with this. I like vanilla better, but I got a clean ownership model up until the end here, and made",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:465,Usability,learn,learned,465,"> Thanks for your comments! . Thanks for the discussion. I think many students learn C++ from root examples so it matters.; ; Thanks for the link to the docs. I got a little confused about Heap().Create details when I looked at first (and there you go) but I get it now. I learned two things:. a) RDirectory can take an existing shared_ptr using Add() instead of Create(), super!; b) Little thing but it looks like Create() syntax cannot cast a TH1F to a TH1. I've learned to always want a TH1 and never a TH1F, as their interfaces are identical after construction (nothing sliced). Implicit casts make it not a huge issue but I'd still prefer to cast to a TH1 smart pointer first and then use Add(), a trivial nuisance. Maybe Create has a way to cast that I'm missing, or could. Now, There's a lot to unpack here. Let's just stick with my pure subroutine version (not class version) for direct comparison for now. I could pass a structure anyway obviously. Now I can do this, with a TH1F... example 1: ; ```cpp; //my_subtrounes.C. // my_subroutines.C; void my_subroutine(shared_ptr<TH1> &x) {; x.reset(); // not needed for TH1F, but safer in general.; x.reset(new TH1F());; // .. do something with it.; }; ```; ```cpp; //make_th1.C; #include <ROOT/RDirectory.hxx> // one extra line ;); #ifdef __CINT__; // shared_ptr<TH1> mc_global_x,mc_global_y,mc_global_z; // but saved one line here...; #endif. void make_th1() {; shared_ptr<TH1> x,y,z;; my_subroutine(x);; my_subroutine(y);; my_subroutine(z);. // and the last we do is leave globals on the heap for interactive user if needed:; #ifdef __CINT__ // I wouldn't leave the globals in compiled code. ; RDirectory::Heap().Add(""test1"",x); // this line is ""extra"" compared to PR, but puts caller in control.; RDirectory::Heap().Add(""test2"",y); // but using RDirectory requires 3 lines now ;); RDirectory::Heap().Add(""test3"",z); // ; #endif; }; ```; I'm ok with this. I like vanilla better, but I got a clean ownership model up until the end here, and made",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-791104038:2146,Usability,pause,pauses,2146,"th it.; }; ```; ```cpp; //make_th1.C; #include <ROOT/RDirectory.hxx> // one extra line ;); #ifdef __CINT__; // shared_ptr<TH1> mc_global_x,mc_global_y,mc_global_z; // but saved one line here...; #endif. void make_th1() {; shared_ptr<TH1> x,y,z;; my_subroutine(x);; my_subroutine(y);; my_subroutine(z);. // and the last we do is leave globals on the heap for interactive user if needed:; #ifdef __CINT__ // I wouldn't leave the globals in compiled code. ; RDirectory::Heap().Add(""test1"",x); // this line is ""extra"" compared to PR, but puts caller in control.; RDirectory::Heap().Add(""test2"",y); // but using RDirectory requires 3 lines now ;); RDirectory::Heap().Add(""test3"",z); // ; #endif; }; ```; I'm ok with this. I like vanilla better, but I got a clean ownership model up until the end here, and made the globals right before exiting, almost like a return statement. If I want to put this in a compiled batch code that loops over this 50 times, pauses 1 second, and displays 3 things each time, I'd just add a loop with sleeps, and Bob's your uncle without even modifying the underlying implementation to get three instances. But this RDirectory version shown here and the C++ global version here are certainly not different in that respect. The C++ globals actually win on line count here if you like this code structure better (I do). I'd argue if one needs the extern header declarations to pass things around in compiled code, he should ask if he's doing it wrong, and that's not an usual sentiment. The whole point is I think to make things visible from the interpreter or other things spawned from it. That's surely why we got here, and if C++ globals makes it tedious to access them everywhere in compiled code, I call that a bonus. . On the other hand I don't like this ; example2: ; ```cpp; {; // my_subroutines.C; unique_ptr<TH1> x // used in my_subroutine. void my_subroutine() {; x.reset(); ; x.reset(new TH1F());; // .. do something with it.; }; ```; except for maybe quick temporary",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038
https://github.com/root-project/root/pull/7305#issuecomment-795003958:626,Availability,down,down,626,"> The intent is the opposite. The RDirectory's internal representation and what it returns is a kind of shared_ptr. The user register the same name twice then if they hold a 'reference' to it, they keep and if they don't it is deleted. I do appreciate that as written it works and prevents a leak. New and delete have also worked for 20 years of root, and when written correctly do prevent leaks and get the job done, so there's no crisis of course. This offers a little more protection in some usages, but maybe new things to understand in others. I think stack-based lifetime management is simple, intuitive, encourages top-down code design and configuration, and avoids side effects. The smart pointer is interesting. It wasn't obvious to me that create would behave like shared_ptr::reset(), in the sense of allowing copies to persist (rather than redirecting some pointers they contain to the the new thing). . I kind of see a way now that it's possible to get the scalability (produce variable N plots at a time) without editing the PR routine. From my caller I'd need to call the subroutine, then do an RDirectory::Find() to get a shared pointer which will preserve the created thing, then call the routine again to get a new one. And if I still want to keep the first one for the interactive prompt, I have to make it global again with a new RDirectory::Add() of the contained thing, with a new name. So that cat can be skinned, but it's a bit comical compared to just passing the pointer, and certainly less obvious.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-795003958
https://github.com/root-project/root/pull/7305#issuecomment-795003958:647,Deployability,configurat,configuration,647,"> The intent is the opposite. The RDirectory's internal representation and what it returns is a kind of shared_ptr. The user register the same name twice then if they hold a 'reference' to it, they keep and if they don't it is deleted. I do appreciate that as written it works and prevents a leak. New and delete have also worked for 20 years of root, and when written correctly do prevent leaks and get the job done, so there's no crisis of course. This offers a little more protection in some usages, but maybe new things to understand in others. I think stack-based lifetime management is simple, intuitive, encourages top-down code design and configuration, and avoids side effects. The smart pointer is interesting. It wasn't obvious to me that create would behave like shared_ptr::reset(), in the sense of allowing copies to persist (rather than redirecting some pointers they contain to the the new thing). . I kind of see a way now that it's possible to get the scalability (produce variable N plots at a time) without editing the PR routine. From my caller I'd need to call the subroutine, then do an RDirectory::Find() to get a shared pointer which will preserve the created thing, then call the routine again to get a new one. And if I still want to keep the first one for the interactive prompt, I have to make it global again with a new RDirectory::Add() of the contained thing, with a new name. So that cat can be skinned, but it's a bit comical compared to just passing the pointer, and certainly less obvious.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-795003958
https://github.com/root-project/root/pull/7305#issuecomment-795003958:1042,Integrability,rout,routine,1042,"> The intent is the opposite. The RDirectory's internal representation and what it returns is a kind of shared_ptr. The user register the same name twice then if they hold a 'reference' to it, they keep and if they don't it is deleted. I do appreciate that as written it works and prevents a leak. New and delete have also worked for 20 years of root, and when written correctly do prevent leaks and get the job done, so there's no crisis of course. This offers a little more protection in some usages, but maybe new things to understand in others. I think stack-based lifetime management is simple, intuitive, encourages top-down code design and configuration, and avoids side effects. The smart pointer is interesting. It wasn't obvious to me that create would behave like shared_ptr::reset(), in the sense of allowing copies to persist (rather than redirecting some pointers they contain to the the new thing). . I kind of see a way now that it's possible to get the scalability (produce variable N plots at a time) without editing the PR routine. From my caller I'd need to call the subroutine, then do an RDirectory::Find() to get a shared pointer which will preserve the created thing, then call the routine again to get a new one. And if I still want to keep the first one for the interactive prompt, I have to make it global again with a new RDirectory::Add() of the contained thing, with a new name. So that cat can be skinned, but it's a bit comical compared to just passing the pointer, and certainly less obvious.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-795003958
https://github.com/root-project/root/pull/7305#issuecomment-795003958:1206,Integrability,rout,routine,1206,"> The intent is the opposite. The RDirectory's internal representation and what it returns is a kind of shared_ptr. The user register the same name twice then if they hold a 'reference' to it, they keep and if they don't it is deleted. I do appreciate that as written it works and prevents a leak. New and delete have also worked for 20 years of root, and when written correctly do prevent leaks and get the job done, so there's no crisis of course. This offers a little more protection in some usages, but maybe new things to understand in others. I think stack-based lifetime management is simple, intuitive, encourages top-down code design and configuration, and avoids side effects. The smart pointer is interesting. It wasn't obvious to me that create would behave like shared_ptr::reset(), in the sense of allowing copies to persist (rather than redirecting some pointers they contain to the the new thing). . I kind of see a way now that it's possible to get the scalability (produce variable N plots at a time) without editing the PR routine. From my caller I'd need to call the subroutine, then do an RDirectory::Find() to get a shared pointer which will preserve the created thing, then call the routine again to get a new one. And if I still want to keep the first one for the interactive prompt, I have to make it global again with a new RDirectory::Add() of the contained thing, with a new name. So that cat can be skinned, but it's a bit comical compared to just passing the pointer, and certainly less obvious.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-795003958
https://github.com/root-project/root/pull/7305#issuecomment-795003958:647,Modifiability,config,configuration,647,"> The intent is the opposite. The RDirectory's internal representation and what it returns is a kind of shared_ptr. The user register the same name twice then if they hold a 'reference' to it, they keep and if they don't it is deleted. I do appreciate that as written it works and prevents a leak. New and delete have also worked for 20 years of root, and when written correctly do prevent leaks and get the job done, so there's no crisis of course. This offers a little more protection in some usages, but maybe new things to understand in others. I think stack-based lifetime management is simple, intuitive, encourages top-down code design and configuration, and avoids side effects. The smart pointer is interesting. It wasn't obvious to me that create would behave like shared_ptr::reset(), in the sense of allowing copies to persist (rather than redirecting some pointers they contain to the the new thing). . I kind of see a way now that it's possible to get the scalability (produce variable N plots at a time) without editing the PR routine. From my caller I'd need to call the subroutine, then do an RDirectory::Find() to get a shared pointer which will preserve the created thing, then call the routine again to get a new one. And if I still want to keep the first one for the interactive prompt, I have to make it global again with a new RDirectory::Add() of the contained thing, with a new name. So that cat can be skinned, but it's a bit comical compared to just passing the pointer, and certainly less obvious.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-795003958
https://github.com/root-project/root/pull/7305#issuecomment-795003958:991,Modifiability,variab,variable,991,"> The intent is the opposite. The RDirectory's internal representation and what it returns is a kind of shared_ptr. The user register the same name twice then if they hold a 'reference' to it, they keep and if they don't it is deleted. I do appreciate that as written it works and prevents a leak. New and delete have also worked for 20 years of root, and when written correctly do prevent leaks and get the job done, so there's no crisis of course. This offers a little more protection in some usages, but maybe new things to understand in others. I think stack-based lifetime management is simple, intuitive, encourages top-down code design and configuration, and avoids side effects. The smart pointer is interesting. It wasn't obvious to me that create would behave like shared_ptr::reset(), in the sense of allowing copies to persist (rather than redirecting some pointers they contain to the the new thing). . I kind of see a way now that it's possible to get the scalability (produce variable N plots at a time) without editing the PR routine. From my caller I'd need to call the subroutine, then do an RDirectory::Find() to get a shared pointer which will preserve the created thing, then call the routine again to get a new one. And if I still want to keep the first one for the interactive prompt, I have to make it global again with a new RDirectory::Add() of the contained thing, with a new name. So that cat can be skinned, but it's a bit comical compared to just passing the pointer, and certainly less obvious.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-795003958
https://github.com/root-project/root/pull/7305#issuecomment-795003958:970,Performance,scalab,scalability,970,"> The intent is the opposite. The RDirectory's internal representation and what it returns is a kind of shared_ptr. The user register the same name twice then if they hold a 'reference' to it, they keep and if they don't it is deleted. I do appreciate that as written it works and prevents a leak. New and delete have also worked for 20 years of root, and when written correctly do prevent leaks and get the job done, so there's no crisis of course. This offers a little more protection in some usages, but maybe new things to understand in others. I think stack-based lifetime management is simple, intuitive, encourages top-down code design and configuration, and avoids side effects. The smart pointer is interesting. It wasn't obvious to me that create would behave like shared_ptr::reset(), in the sense of allowing copies to persist (rather than redirecting some pointers they contain to the the new thing). . I kind of see a way now that it's possible to get the scalability (produce variable N plots at a time) without editing the PR routine. From my caller I'd need to call the subroutine, then do an RDirectory::Find() to get a shared pointer which will preserve the created thing, then call the routine again to get a new one. And if I still want to keep the first one for the interactive prompt, I have to make it global again with a new RDirectory::Add() of the contained thing, with a new name. So that cat can be skinned, but it's a bit comical compared to just passing the pointer, and certainly less obvious.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-795003958
https://github.com/root-project/root/pull/7305#issuecomment-795003958:666,Safety,avoid,avoids,666,"> The intent is the opposite. The RDirectory's internal representation and what it returns is a kind of shared_ptr. The user register the same name twice then if they hold a 'reference' to it, they keep and if they don't it is deleted. I do appreciate that as written it works and prevents a leak. New and delete have also worked for 20 years of root, and when written correctly do prevent leaks and get the job done, so there's no crisis of course. This offers a little more protection in some usages, but maybe new things to understand in others. I think stack-based lifetime management is simple, intuitive, encourages top-down code design and configuration, and avoids side effects. The smart pointer is interesting. It wasn't obvious to me that create would behave like shared_ptr::reset(), in the sense of allowing copies to persist (rather than redirecting some pointers they contain to the the new thing). . I kind of see a way now that it's possible to get the scalability (produce variable N plots at a time) without editing the PR routine. From my caller I'd need to call the subroutine, then do an RDirectory::Find() to get a shared pointer which will preserve the created thing, then call the routine again to get a new one. And if I still want to keep the first one for the interactive prompt, I have to make it global again with a new RDirectory::Add() of the contained thing, with a new name. So that cat can be skinned, but it's a bit comical compared to just passing the pointer, and certainly less obvious.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-795003958
https://github.com/root-project/root/pull/7305#issuecomment-795003958:592,Usability,simpl,simple,592,"> The intent is the opposite. The RDirectory's internal representation and what it returns is a kind of shared_ptr. The user register the same name twice then if they hold a 'reference' to it, they keep and if they don't it is deleted. I do appreciate that as written it works and prevents a leak. New and delete have also worked for 20 years of root, and when written correctly do prevent leaks and get the job done, so there's no crisis of course. This offers a little more protection in some usages, but maybe new things to understand in others. I think stack-based lifetime management is simple, intuitive, encourages top-down code design and configuration, and avoids side effects. The smart pointer is interesting. It wasn't obvious to me that create would behave like shared_ptr::reset(), in the sense of allowing copies to persist (rather than redirecting some pointers they contain to the the new thing). . I kind of see a way now that it's possible to get the scalability (produce variable N plots at a time) without editing the PR routine. From my caller I'd need to call the subroutine, then do an RDirectory::Find() to get a shared pointer which will preserve the created thing, then call the routine again to get a new one. And if I still want to keep the first one for the interactive prompt, I have to make it global again with a new RDirectory::Add() of the contained thing, with a new name. So that cat can be skinned, but it's a bit comical compared to just passing the pointer, and certainly less obvious.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-795003958
https://github.com/root-project/root/pull/7305#issuecomment-795003958:600,Usability,intuit,intuitive,600,"> The intent is the opposite. The RDirectory's internal representation and what it returns is a kind of shared_ptr. The user register the same name twice then if they hold a 'reference' to it, they keep and if they don't it is deleted. I do appreciate that as written it works and prevents a leak. New and delete have also worked for 20 years of root, and when written correctly do prevent leaks and get the job done, so there's no crisis of course. This offers a little more protection in some usages, but maybe new things to understand in others. I think stack-based lifetime management is simple, intuitive, encourages top-down code design and configuration, and avoids side effects. The smart pointer is interesting. It wasn't obvious to me that create would behave like shared_ptr::reset(), in the sense of allowing copies to persist (rather than redirecting some pointers they contain to the the new thing). . I kind of see a way now that it's possible to get the scalability (produce variable N plots at a time) without editing the PR routine. From my caller I'd need to call the subroutine, then do an RDirectory::Find() to get a shared pointer which will preserve the created thing, then call the routine again to get a new one. And if I still want to keep the first one for the interactive prompt, I have to make it global again with a new RDirectory::Add() of the contained thing, with a new name. So that cat can be skinned, but it's a bit comical compared to just passing the pointer, and certainly less obvious.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-795003958
https://github.com/root-project/root/issues/7332#issuecomment-844076534:123,Usability,clear,clearly,123,"@lmoneta Regarding the method parameters, it is fine to pass them through the string API. The point is that this should be clearly documented in `TUnuran` doxygen and for the `TUnuranSampler` doxy it should be mentioned and redirected to `TUnuran` doxy. Right now the information is hidden in tutorials and the code. I am not sure if there is an elegant way to add methods to `TUnuranSampler`/`TUnuran` that would set the parameters. Maybe something like; ```; SetParameter(const TString& name); SetParameter(const TString& name, const double value); ```; that would build the string passed to the string API when `Init()` is called.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7332#issuecomment-844076534
https://github.com/root-project/root/issues/7332#issuecomment-864844142:384,Usability,clear,clearing,384,"@lmoneta Actually out of the above the most pressing is `SetMode(const double* mode)`, because this is the only one for which I don't have a workaround (I need to use `DistSampler` not `TUnuran` in the respective code). I can provide a pull request with mode data member being a `std::vector<double>` and `SetMode(const double mode)` setting a single entry and both 1D and ND setters clearing any previous entries. Should I provide the PR or do you prefer to implement it yourself (I guess this is faster than actual review of the PR and merging)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7332#issuecomment-864844142
https://github.com/root-project/root/issues/7332#issuecomment-864851951:18,Usability,feedback,feedback,18,Thank you for the feedback. I 'll try to implement something in the next days and open a PR. If you then could have a look will be great; Cheers,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7332#issuecomment-864851951
https://github.com/root-project/root/issues/7332#issuecomment-876389035:134,Usability,clear,clear,134,"@AntoniMarcinek I have made a PR implementing the functionality you requested. ; Only the support for `_chg_truncated`, but it is not clear to me exactly what is it and what is your use case for this ; Cheers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7332#issuecomment-876389035
https://github.com/root-project/root/pull/7334#issuecomment-788975309:63,Usability,feedback,feedback,63,"Not sure it is relevant but he said:. _Rearrange ""Provide your feedback""; I think github issues should go before the Forum in the list of options (if there are really two ways), because one can see closed and open issues (on the Forum I found several complaints about the links, but it's not clear whether they are open or closed without opening them)._",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7334#issuecomment-788975309
https://github.com/root-project/root/pull/7334#issuecomment-788975309:292,Usability,clear,clear,292,"Not sure it is relevant but he said:. _Rearrange ""Provide your feedback""; I think github issues should go before the Forum in the list of options (if there are really two ways), because one can see closed and open issues (on the Forum I found several complaints about the links, but it's not clear whether they are open or closed without opening them)._",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7334#issuecomment-788975309
https://github.com/root-project/root/pull/7334#issuecomment-789011675:244,Deployability,integrat,integrated,244,"It's your decision about how you organize your work, but maybe it would be better to simply suggest to users to. - submit bugs to github; - ask questions on the forum. Why I wrote that github is better for ""feedback"", is because its issues are integrated with push and pull releases, and they won't be lost (as forum reports can be), they will stay open until closed or fixed. . Maybe you can invent a better wording for that paragraph.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7334#issuecomment-789011675
https://github.com/root-project/root/pull/7334#issuecomment-789011675:274,Deployability,release,releases,274,"It's your decision about how you organize your work, but maybe it would be better to simply suggest to users to. - submit bugs to github; - ask questions on the forum. Why I wrote that github is better for ""feedback"", is because its issues are integrated with push and pull releases, and they won't be lost (as forum reports can be), they will stay open until closed or fixed. . Maybe you can invent a better wording for that paragraph.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7334#issuecomment-789011675
https://github.com/root-project/root/pull/7334#issuecomment-789011675:244,Integrability,integrat,integrated,244,"It's your decision about how you organize your work, but maybe it would be better to simply suggest to users to. - submit bugs to github; - ask questions on the forum. Why I wrote that github is better for ""feedback"", is because its issues are integrated with push and pull releases, and they won't be lost (as forum reports can be), they will stay open until closed or fixed. . Maybe you can invent a better wording for that paragraph.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7334#issuecomment-789011675
https://github.com/root-project/root/pull/7334#issuecomment-789011675:85,Usability,simpl,simply,85,"It's your decision about how you organize your work, but maybe it would be better to simply suggest to users to. - submit bugs to github; - ask questions on the forum. Why I wrote that github is better for ""feedback"", is because its issues are integrated with push and pull releases, and they won't be lost (as forum reports can be), they will stay open until closed or fixed. . Maybe you can invent a better wording for that paragraph.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7334#issuecomment-789011675
https://github.com/root-project/root/pull/7334#issuecomment-789011675:207,Usability,feedback,feedback,207,"It's your decision about how you organize your work, but maybe it would be better to simply suggest to users to. - submit bugs to github; - ask questions on the forum. Why I wrote that github is better for ""feedback"", is because its issues are integrated with push and pull releases, and they won't be lost (as forum reports can be), they will stay open until closed or fixed. . Maybe you can invent a better wording for that paragraph.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7334#issuecomment-789011675
https://github.com/root-project/root/pull/7343#issuecomment-789911011:97,Availability,alive,alive,97,> Use a unique_ptr which guarantees the reference to stay valid for as long as the referencee is alive. But it changes the cardinality ... where there was a guarantee to have only one there is no one per SectionMemoryManager. ; Is that okay? If it is why wasn't that simpler pattern used (by llvm) in the first place?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7343#issuecomment-789911011
https://github.com/root-project/root/pull/7343#issuecomment-789911011:267,Usability,simpl,simpler,267,> Use a unique_ptr which guarantees the reference to stay valid for as long as the referencee is alive. But it changes the cardinality ... where there was a guarantee to have only one there is no one per SectionMemoryManager. ; Is that okay? If it is why wasn't that simpler pattern used (by llvm) in the first place?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7343#issuecomment-789911011
https://github.com/root-project/root/pull/7344#issuecomment-792681797:87,Integrability,message,message,87,"> Hi @hageboeck, thank you very much for the review! I will fix the typo in the commit message in the end once I `--autosquash` the fixup commits.; > ; > I addressed all of your comments, but for one comment I'm not sure if I made the right choice.; > ; > My hesitation concerns the new member variables in `RooAbsOptTestStatistic` that relate to the batched mode: I don't know if they should take part in the IO or not. On one hand, I don't know why flags about how the test statistic is evaluated need to be stored. On the other hand, the `_batchEvaluations` flag that is currently in `RooNLLVar` and that this PR moves to `RooAbsOptTestStatistic` [is not excluded from the IO](https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooNLLVar.h#L82). I guess you had a good reason for this choice, so I kept the new flags in `RooAbsOptTestStatistic` also for the IO. You think this is the right choice?. The reason is simple: When `_batchMode` is not persistified, you create a test statistic in BatchMode, write it to file, read it back, it will run in scalar mode. That's at best ""annoying"". > ; > Since you mentioned IO: I also increased the class version of `RooNLLVar` since the `_batchEvaluations` flag got moved out of the class. That's good, but the above will happen also now. If you wrote an old test statistic to a file, which had the batch flag set in the derived class, it will now run in scalar mode, because nobody moves the info up to the base class. It's somehow possible to do that, but I need to look this up myself.; Let's first think if this is the best way to do it, and solve the schema evolution later. Remind me, please: Why did the flag have to go to the base class?. NB: There's also the RooChi2Var, which could make use of the batch mode. Maybe for this alone, it's already nice to have the flag in the base.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7344#issuecomment-792681797
https://github.com/root-project/root/pull/7344#issuecomment-792681797:294,Modifiability,variab,variables,294,"> Hi @hageboeck, thank you very much for the review! I will fix the typo in the commit message in the end once I `--autosquash` the fixup commits.; > ; > I addressed all of your comments, but for one comment I'm not sure if I made the right choice.; > ; > My hesitation concerns the new member variables in `RooAbsOptTestStatistic` that relate to the batched mode: I don't know if they should take part in the IO or not. On one hand, I don't know why flags about how the test statistic is evaluated need to be stored. On the other hand, the `_batchEvaluations` flag that is currently in `RooNLLVar` and that this PR moves to `RooAbsOptTestStatistic` [is not excluded from the IO](https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooNLLVar.h#L82). I guess you had a good reason for this choice, so I kept the new flags in `RooAbsOptTestStatistic` also for the IO. You think this is the right choice?. The reason is simple: When `_batchMode` is not persistified, you create a test statistic in BatchMode, write it to file, read it back, it will run in scalar mode. That's at best ""annoying"". > ; > Since you mentioned IO: I also increased the class version of `RooNLLVar` since the `_batchEvaluations` flag got moved out of the class. That's good, but the above will happen also now. If you wrote an old test statistic to a file, which had the batch flag set in the derived class, it will now run in scalar mode, because nobody moves the info up to the base class. It's somehow possible to do that, but I need to look this up myself.; Let's first think if this is the best way to do it, and solve the schema evolution later. Remind me, please: Why did the flag have to go to the base class?. NB: There's also the RooChi2Var, which could make use of the batch mode. Maybe for this alone, it's already nice to have the flag in the base.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7344#issuecomment-792681797
https://github.com/root-project/root/pull/7344#issuecomment-792681797:471,Testability,test,test,471,"> Hi @hageboeck, thank you very much for the review! I will fix the typo in the commit message in the end once I `--autosquash` the fixup commits.; > ; > I addressed all of your comments, but for one comment I'm not sure if I made the right choice.; > ; > My hesitation concerns the new member variables in `RooAbsOptTestStatistic` that relate to the batched mode: I don't know if they should take part in the IO or not. On one hand, I don't know why flags about how the test statistic is evaluated need to be stored. On the other hand, the `_batchEvaluations` flag that is currently in `RooNLLVar` and that this PR moves to `RooAbsOptTestStatistic` [is not excluded from the IO](https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooNLLVar.h#L82). I guess you had a good reason for this choice, so I kept the new flags in `RooAbsOptTestStatistic` also for the IO. You think this is the right choice?. The reason is simple: When `_batchMode` is not persistified, you create a test statistic in BatchMode, write it to file, read it back, it will run in scalar mode. That's at best ""annoying"". > ; > Since you mentioned IO: I also increased the class version of `RooNLLVar` since the `_batchEvaluations` flag got moved out of the class. That's good, but the above will happen also now. If you wrote an old test statistic to a file, which had the batch flag set in the derived class, it will now run in scalar mode, because nobody moves the info up to the base class. It's somehow possible to do that, but I need to look this up myself.; Let's first think if this is the best way to do it, and solve the schema evolution later. Remind me, please: Why did the flag have to go to the base class?. NB: There's also the RooChi2Var, which could make use of the batch mode. Maybe for this alone, it's already nice to have the flag in the base.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7344#issuecomment-792681797
https://github.com/root-project/root/pull/7344#issuecomment-792681797:996,Testability,test,test,996,"> Hi @hageboeck, thank you very much for the review! I will fix the typo in the commit message in the end once I `--autosquash` the fixup commits.; > ; > I addressed all of your comments, but for one comment I'm not sure if I made the right choice.; > ; > My hesitation concerns the new member variables in `RooAbsOptTestStatistic` that relate to the batched mode: I don't know if they should take part in the IO or not. On one hand, I don't know why flags about how the test statistic is evaluated need to be stored. On the other hand, the `_batchEvaluations` flag that is currently in `RooNLLVar` and that this PR moves to `RooAbsOptTestStatistic` [is not excluded from the IO](https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooNLLVar.h#L82). I guess you had a good reason for this choice, so I kept the new flags in `RooAbsOptTestStatistic` also for the IO. You think this is the right choice?. The reason is simple: When `_batchMode` is not persistified, you create a test statistic in BatchMode, write it to file, read it back, it will run in scalar mode. That's at best ""annoying"". > ; > Since you mentioned IO: I also increased the class version of `RooNLLVar` since the `_batchEvaluations` flag got moved out of the class. That's good, but the above will happen also now. If you wrote an old test statistic to a file, which had the batch flag set in the derived class, it will now run in scalar mode, because nobody moves the info up to the base class. It's somehow possible to do that, but I need to look this up myself.; Let's first think if this is the best way to do it, and solve the schema evolution later. Remind me, please: Why did the flag have to go to the base class?. NB: There's also the RooChi2Var, which could make use of the batch mode. Maybe for this alone, it's already nice to have the flag in the base.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7344#issuecomment-792681797
https://github.com/root-project/root/pull/7344#issuecomment-792681797:1324,Testability,test,test,1324,"> Hi @hageboeck, thank you very much for the review! I will fix the typo in the commit message in the end once I `--autosquash` the fixup commits.; > ; > I addressed all of your comments, but for one comment I'm not sure if I made the right choice.; > ; > My hesitation concerns the new member variables in `RooAbsOptTestStatistic` that relate to the batched mode: I don't know if they should take part in the IO or not. On one hand, I don't know why flags about how the test statistic is evaluated need to be stored. On the other hand, the `_batchEvaluations` flag that is currently in `RooNLLVar` and that this PR moves to `RooAbsOptTestStatistic` [is not excluded from the IO](https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooNLLVar.h#L82). I guess you had a good reason for this choice, so I kept the new flags in `RooAbsOptTestStatistic` also for the IO. You think this is the right choice?. The reason is simple: When `_batchMode` is not persistified, you create a test statistic in BatchMode, write it to file, read it back, it will run in scalar mode. That's at best ""annoying"". > ; > Since you mentioned IO: I also increased the class version of `RooNLLVar` since the `_batchEvaluations` flag got moved out of the class. That's good, but the above will happen also now. If you wrote an old test statistic to a file, which had the batch flag set in the derived class, it will now run in scalar mode, because nobody moves the info up to the base class. It's somehow possible to do that, but I need to look this up myself.; Let's first think if this is the best way to do it, and solve the schema evolution later. Remind me, please: Why did the flag have to go to the base class?. NB: There's also the RooChi2Var, which could make use of the batch mode. Maybe for this alone, it's already nice to have the flag in the base.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7344#issuecomment-792681797
https://github.com/root-project/root/pull/7344#issuecomment-792681797:936,Usability,simpl,simple,936,"> Hi @hageboeck, thank you very much for the review! I will fix the typo in the commit message in the end once I `--autosquash` the fixup commits.; > ; > I addressed all of your comments, but for one comment I'm not sure if I made the right choice.; > ; > My hesitation concerns the new member variables in `RooAbsOptTestStatistic` that relate to the batched mode: I don't know if they should take part in the IO or not. On one hand, I don't know why flags about how the test statistic is evaluated need to be stored. On the other hand, the `_batchEvaluations` flag that is currently in `RooNLLVar` and that this PR moves to `RooAbsOptTestStatistic` [is not excluded from the IO](https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooNLLVar.h#L82). I guess you had a good reason for this choice, so I kept the new flags in `RooAbsOptTestStatistic` also for the IO. You think this is the right choice?. The reason is simple: When `_batchMode` is not persistified, you create a test statistic in BatchMode, write it to file, read it back, it will run in scalar mode. That's at best ""annoying"". > ; > Since you mentioned IO: I also increased the class version of `RooNLLVar` since the `_batchEvaluations` flag got moved out of the class. That's good, but the above will happen also now. If you wrote an old test statistic to a file, which had the batch flag set in the derived class, it will now run in scalar mode, because nobody moves the info up to the base class. It's somehow possible to do that, but I need to look this up myself.; Let's first think if this is the best way to do it, and solve the schema evolution later. Remind me, please: Why did the flag have to go to the base class?. NB: There's also the RooChi2Var, which could make use of the batch mode. Maybe for this alone, it's already nice to have the flag in the base.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7344#issuecomment-792681797
https://github.com/root-project/root/pull/7352#issuecomment-799383258:21,Usability,feedback,feedback,21,"Cool, thanks for the feedback!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7352#issuecomment-799383258
https://github.com/root-project/root/pull/7382#issuecomment-791547695:338,Deployability,configurat,configuration,338,"> > @pcanal has suggested leveraging the old behavior to disable optimizations before, so I would wait for his ok before merging.; > EDIT: just to be clear, I am convinced the old behavior is a bug. The old behavior was:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g (and default compiler optimization); + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; The new behavior seems to be:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g -O3 ; + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; So this is fine as we **MUST** have a way to completely disable optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7382#issuecomment-791547695
https://github.com/root-project/root/pull/7382#issuecomment-791547695:705,Deployability,configurat,configuration,705,"> > @pcanal has suggested leveraging the old behavior to disable optimizations before, so I would wait for his ok before merging.; > EDIT: just to be clear, I am convinced the old behavior is a bug. The old behavior was:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g (and default compiler optimization); + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; The new behavior seems to be:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g -O3 ; + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; So this is fine as we **MUST** have a way to completely disable optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7382#issuecomment-791547695
https://github.com/root-project/root/pull/7382#issuecomment-791547695:421,Integrability,depend,depending,421,"> > @pcanal has suggested leveraging the old behavior to disable optimizations before, so I would wait for his ok before merging.; > EDIT: just to be clear, I am convinced the old behavior is a bug. The old behavior was:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g (and default compiler optimization); + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; The new behavior seems to be:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g -O3 ; + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; So this is fine as we **MUST** have a way to completely disable optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7382#issuecomment-791547695
https://github.com/root-project/root/pull/7382#issuecomment-791547695:757,Integrability,depend,depending,757,"> > @pcanal has suggested leveraging the old behavior to disable optimizations before, so I would wait for his ok before merging.; > EDIT: just to be clear, I am convinced the old behavior is a bug. The old behavior was:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g (and default compiler optimization); + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; The new behavior seems to be:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g -O3 ; + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; So this is fine as we **MUST** have a way to completely disable optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7382#issuecomment-791547695
https://github.com/root-project/root/pull/7382#issuecomment-791547695:338,Modifiability,config,configuration,338,"> > @pcanal has suggested leveraging the old behavior to disable optimizations before, so I would wait for his ok before merging.; > EDIT: just to be clear, I am convinced the old behavior is a bug. The old behavior was:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g (and default compiler optimization); + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; The new behavior seems to be:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g -O3 ; + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; So this is fine as we **MUST** have a way to completely disable optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7382#issuecomment-791547695
https://github.com/root-project/root/pull/7382#issuecomment-791547695:705,Modifiability,config,configuration,705,"> > @pcanal has suggested leveraging the old behavior to disable optimizations before, so I would wait for his ok before merging.; > EDIT: just to be clear, I am convinced the old behavior is a bug. The old behavior was:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g (and default compiler optimization); + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; The new behavior seems to be:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g -O3 ; + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; So this is fine as we **MUST** have a way to completely disable optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7382#issuecomment-791547695
https://github.com/root-project/root/pull/7382#issuecomment-791547695:65,Performance,optimiz,optimizations,65,"> > @pcanal has suggested leveraging the old behavior to disable optimizations before, so I would wait for his ok before merging.; > EDIT: just to be clear, I am convinced the old behavior is a bug. The old behavior was:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g (and default compiler optimization); + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; The new behavior seems to be:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g -O3 ; + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; So this is fine as we **MUST** have a way to completely disable optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7382#issuecomment-791547695
https://github.com/root-project/root/pull/7382#issuecomment-791547695:258,Performance,optimiz,optimization,258,"> > @pcanal has suggested leveraging the old behavior to disable optimizations before, so I would wait for his ok before merging.; > EDIT: just to be clear, I am convinced the old behavior is a bug. The old behavior was:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g (and default compiler optimization); + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; The new behavior seems to be:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g -O3 ; + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; So this is fine as we **MUST** have a way to completely disable optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7382#issuecomment-791547695
https://github.com/root-project/root/pull/7382#issuecomment-791547695:304,Performance,optimiz,optimization,304,"> > @pcanal has suggested leveraging the old behavior to disable optimizations before, so I would wait for his ok before merging.; > EDIT: just to be clear, I am convinced the old behavior is a bug. The old behavior was:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g (and default compiler optimization); + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; The new behavior seems to be:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g -O3 ; + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; So this is fine as we **MUST** have a way to completely disable optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7382#issuecomment-791547695
https://github.com/root-project/root/pull/7382#issuecomment-791547695:391,Performance,optimiz,optimization,391,"> > @pcanal has suggested leveraging the old behavior to disable optimizations before, so I would wait for his ok before merging.; > EDIT: just to be clear, I am convinced the old behavior is a bug. The old behavior was:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g (and default compiler optimization); + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; The new behavior seems to be:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g -O3 ; + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; So this is fine as we **MUST** have a way to completely disable optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7382#issuecomment-791547695
https://github.com/root-project/root/pull/7382#issuecomment-791547695:625,Performance,optimiz,optimization,625,"> > @pcanal has suggested leveraging the old behavior to disable optimizations before, so I would wait for his ok before merging.; > EDIT: just to be clear, I am convinced the old behavior is a bug. The old behavior was:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g (and default compiler optimization); + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; The new behavior seems to be:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g -O3 ; + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; So this is fine as we **MUST** have a way to completely disable optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7382#issuecomment-791547695
https://github.com/root-project/root/pull/7382#issuecomment-791547695:671,Performance,optimiz,optimization,671,"> > @pcanal has suggested leveraging the old behavior to disable optimizations before, so I would wait for his ok before merging.; > EDIT: just to be clear, I am convinced the old behavior is a bug. The old behavior was:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g (and default compiler optimization); + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; The new behavior seems to be:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g -O3 ; + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; So this is fine as we **MUST** have a way to completely disable optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7382#issuecomment-791547695
https://github.com/root-project/root/pull/7382#issuecomment-791547695:958,Performance,optimiz,optimization,958,"> > @pcanal has suggested leveraging the old behavior to disable optimizations before, so I would wait for his ok before merging.; > EDIT: just to be clear, I am convinced the old behavior is a bug. The old behavior was:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g (and default compiler optimization); + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; The new behavior seems to be:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g -O3 ; + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; So this is fine as we **MUST** have a way to completely disable optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7382#issuecomment-791547695
https://github.com/root-project/root/pull/7382#issuecomment-791547695:150,Usability,clear,clear,150,"> > @pcanal has suggested leveraging the old behavior to disable optimizations before, so I would wait for his ok before merging.; > EDIT: just to be clear, I am convinced the old behavior is a bug. The old behavior was:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g (and default compiler optimization); + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; The new behavior seems to be:; ```; +g -> -g (and default compiler optimization); +O -> -O3 (or more exactly the optimization level select at ROOT configuration time); +gO -> -g -O3 ; + -> -g or -O3 depending on whether ROOT was build in debug mode ... except that this is broken since the move to CMake :( so actually always -O3; ```; So this is fine as we **MUST** have a way to completely disable optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7382#issuecomment-791547695
https://github.com/root-project/root/pull/7388#issuecomment-795263440:104,Usability,feedback,feedback,104,"Merging so we have the improvements in tomorrow morning, thank you Stefan for the thorough review. More feedback is always welcome -- in case it comes in, I'll address it in future PRs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7388#issuecomment-795263440
https://github.com/root-project/root/issues/7412#issuecomment-794193604:13,Usability,simpl,simple,13,"Seems to be, simple `// NOLINT` should do the job",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7412#issuecomment-794193604
https://github.com/root-project/root/issues/7418#issuecomment-795128879:10,Usability,simpl,simple,10,"@pcanal a simple work-around would be to check whether `gEnv` and / or `gROOT` are `nullptr` in `DefaultErrorHandler`, and if so, to assume sane defaults rather than initializing ""the system"". Comments, opinions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7418#issuecomment-795128879
https://github.com/root-project/root/pull/7419#issuecomment-799389082:1264,Deployability,release,release,1264,"Without a better place to put this (should I open a follow-up issue?):. > 1. Try to reproduce the problem with vanilla lli of LLVM 9 to check that this is not related to the way Cling incrementally JITs and executes. I can reproduce the problem with vanilla `lli -O0` of LLVM 9.0.1 for the following simple C program compiled to LLVM IR with `clang -S -emit-llvm print.c`:; ```c; #include <stdio.h>. int main() {; printf(""Hello from JIT\n"");; }; ```. Higher optimization levels (default is `-O2`) make the problem go away, as does `--global-isel=0`. So far, so consistent. > 2. Figure out exactly why GlobalISel emits different branch instructions, and whether this is a problem in the framework or of the generated IR.; > 3. Verify if the same happens with LLVM 11/12 (whatever Cling will move to next), and possibly fix the underlying issue in LLVM upstream's `main`. LLVM 11.1.0 does not show the problem with `lli -O0` by default due to https://github.com/llvm/llvm-project/commit/366ab0d086a457b085e3c9ba1c987d5499079cd6, but forcing `--global-isel=1` still fails. The commit message is light on details, but I'd say this confirms it's a framework problem of GlobalISel. I would guess that the problem persists in `main` (unless somebody fixed since the last release).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7419#issuecomment-799389082
https://github.com/root-project/root/pull/7419#issuecomment-799389082:1081,Integrability,message,message,1081,"Without a better place to put this (should I open a follow-up issue?):. > 1. Try to reproduce the problem with vanilla lli of LLVM 9 to check that this is not related to the way Cling incrementally JITs and executes. I can reproduce the problem with vanilla `lli -O0` of LLVM 9.0.1 for the following simple C program compiled to LLVM IR with `clang -S -emit-llvm print.c`:; ```c; #include <stdio.h>. int main() {; printf(""Hello from JIT\n"");; }; ```. Higher optimization levels (default is `-O2`) make the problem go away, as does `--global-isel=0`. So far, so consistent. > 2. Figure out exactly why GlobalISel emits different branch instructions, and whether this is a problem in the framework or of the generated IR.; > 3. Verify if the same happens with LLVM 11/12 (whatever Cling will move to next), and possibly fix the underlying issue in LLVM upstream's `main`. LLVM 11.1.0 does not show the problem with `lli -O0` by default due to https://github.com/llvm/llvm-project/commit/366ab0d086a457b085e3c9ba1c987d5499079cd6, but forcing `--global-isel=1` still fails. The commit message is light on details, but I'd say this confirms it's a framework problem of GlobalISel. I would guess that the problem persists in `main` (unless somebody fixed since the last release).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7419#issuecomment-799389082
https://github.com/root-project/root/pull/7419#issuecomment-799389082:458,Performance,optimiz,optimization,458,"Without a better place to put this (should I open a follow-up issue?):. > 1. Try to reproduce the problem with vanilla lli of LLVM 9 to check that this is not related to the way Cling incrementally JITs and executes. I can reproduce the problem with vanilla `lli -O0` of LLVM 9.0.1 for the following simple C program compiled to LLVM IR with `clang -S -emit-llvm print.c`:; ```c; #include <stdio.h>. int main() {; printf(""Hello from JIT\n"");; }; ```. Higher optimization levels (default is `-O2`) make the problem go away, as does `--global-isel=0`. So far, so consistent. > 2. Figure out exactly why GlobalISel emits different branch instructions, and whether this is a problem in the framework or of the generated IR.; > 3. Verify if the same happens with LLVM 11/12 (whatever Cling will move to next), and possibly fix the underlying issue in LLVM upstream's `main`. LLVM 11.1.0 does not show the problem with `lli -O0` by default due to https://github.com/llvm/llvm-project/commit/366ab0d086a457b085e3c9ba1c987d5499079cd6, but forcing `--global-isel=1` still fails. The commit message is light on details, but I'd say this confirms it's a framework problem of GlobalISel. I would guess that the problem persists in `main` (unless somebody fixed since the last release).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7419#issuecomment-799389082
https://github.com/root-project/root/pull/7419#issuecomment-799389082:300,Usability,simpl,simple,300,"Without a better place to put this (should I open a follow-up issue?):. > 1. Try to reproduce the problem with vanilla lli of LLVM 9 to check that this is not related to the way Cling incrementally JITs and executes. I can reproduce the problem with vanilla `lli -O0` of LLVM 9.0.1 for the following simple C program compiled to LLVM IR with `clang -S -emit-llvm print.c`:; ```c; #include <stdio.h>. int main() {; printf(""Hello from JIT\n"");; }; ```. Higher optimization levels (default is `-O2`) make the problem go away, as does `--global-isel=0`. So far, so consistent. > 2. Figure out exactly why GlobalISel emits different branch instructions, and whether this is a problem in the framework or of the generated IR.; > 3. Verify if the same happens with LLVM 11/12 (whatever Cling will move to next), and possibly fix the underlying issue in LLVM upstream's `main`. LLVM 11.1.0 does not show the problem with `lli -O0` by default due to https://github.com/llvm/llvm-project/commit/366ab0d086a457b085e3c9ba1c987d5499079cd6, but forcing `--global-isel=1` still fails. The commit message is light on details, but I'd say this confirms it's a framework problem of GlobalISel. I would guess that the problem persists in `main` (unless somebody fixed since the last release).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7419#issuecomment-799389082
https://github.com/root-project/root/issues/7421#issuecomment-799535019:52,Usability,guid,guide,52,"I'm saying only about the Manual, not the reference guide. пн, 15 мар. 2021 г., 17:54 Olivier Couet ***@***.***>:. > You would like to have the whole Reference Guide generated via Doxygen in; > pdf format ?; > Doxygen is able to generate Latex (then pdf) ... We can try but I am; > afraid that will be a monster file...; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/7421#issuecomment-799484591>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAJGF4TWOCCX734TA6DZN5LTDYNTFANCNFSM4Y4OKGDA>; > .; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7421#issuecomment-799535019
https://github.com/root-project/root/issues/7422#issuecomment-2326891590:10,Usability,learn,learned,10,"I finally learned how to reproduce these kind of warnings with a new version of the LLVM tools. You need to make sure that the relevant ROOT subdirectory is compiled with `set(CMAKE_EXPORT_COMPILE_COMMANDS 1)` (it also helps to disable this for llvm-project to not get spammed by warnings from LLVM). For example, if you want to scan the `math` directory, you can do:; ```diff; diff --git a/interpreter/llvm-project/llvm/CMakeLists.txt b/interpreter/llvm-project/llvm/CMakeLists.txt; index 0b046717ba..b685291490 100644; --- a/interpreter/llvm-project/llvm/CMakeLists.txt; +++ b/interpreter/llvm-project/llvm/CMakeLists.txt; @@ -283,7 +283,7 @@ list(INSERT CMAKE_MODULE_PATH 0. # Generate a CompilationDatabase (compile_commands.json file) for our build,; # for use by clang_complete, YouCompleteMe, etc.; -set(CMAKE_EXPORT_COMPILE_COMMANDS 1); +set(CMAKE_EXPORT_COMPILE_COMMANDS 0). option(LLVM_INSTALL_BINUTILS_SYMLINKS; ""Install symlinks from the binutils tool names to the corresponding LLVM tools."" OFF); diff --git a/math/CMakeLists.txt b/math/CMakeLists.txt; index 543adbf6b1..12f5930901 100644; --- a/math/CMakeLists.txt; +++ b/math/CMakeLists.txt; @@ -4,6 +4,10 @@; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. +set(CMAKE_EXPORT_COMPILE_COMMANDS 1); +; add_subdirectory(mathcore); if(mathmore); add_subdirectory(mathmore); ```; Then, after building, you go into equivalent subdirectory in the build directory (e.g. `build/math`) and run this:; ```bash; run-clang-tidy -checks='clang-analyzer-*' . -j20; ```. So the warnings are easy to reproduce and we are aware that these exist for all for ROOT in general. Therefore, I'd suggest to close this particular issue so that we can focus on feature development and fixing confirmed bugs. We can't afford separate GitHub issues for all groups of `clang-tidy` warnings in all subdirectories. Thank you very much @ferdymercury for the initiative thought! We learned a lot from this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7422#issuecomment-2326891590
https://github.com/root-project/root/issues/7422#issuecomment-2326891590:1974,Usability,learn,learned,1974,"I finally learned how to reproduce these kind of warnings with a new version of the LLVM tools. You need to make sure that the relevant ROOT subdirectory is compiled with `set(CMAKE_EXPORT_COMPILE_COMMANDS 1)` (it also helps to disable this for llvm-project to not get spammed by warnings from LLVM). For example, if you want to scan the `math` directory, you can do:; ```diff; diff --git a/interpreter/llvm-project/llvm/CMakeLists.txt b/interpreter/llvm-project/llvm/CMakeLists.txt; index 0b046717ba..b685291490 100644; --- a/interpreter/llvm-project/llvm/CMakeLists.txt; +++ b/interpreter/llvm-project/llvm/CMakeLists.txt; @@ -283,7 +283,7 @@ list(INSERT CMAKE_MODULE_PATH 0. # Generate a CompilationDatabase (compile_commands.json file) for our build,; # for use by clang_complete, YouCompleteMe, etc.; -set(CMAKE_EXPORT_COMPILE_COMMANDS 1); +set(CMAKE_EXPORT_COMPILE_COMMANDS 0). option(LLVM_INSTALL_BINUTILS_SYMLINKS; ""Install symlinks from the binutils tool names to the corresponding LLVM tools."" OFF); diff --git a/math/CMakeLists.txt b/math/CMakeLists.txt; index 543adbf6b1..12f5930901 100644; --- a/math/CMakeLists.txt; +++ b/math/CMakeLists.txt; @@ -4,6 +4,10 @@; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. +set(CMAKE_EXPORT_COMPILE_COMMANDS 1); +; add_subdirectory(mathcore); if(mathmore); add_subdirectory(mathmore); ```; Then, after building, you go into equivalent subdirectory in the build directory (e.g. `build/math`) and run this:; ```bash; run-clang-tidy -checks='clang-analyzer-*' . -j20; ```. So the warnings are easy to reproduce and we are aware that these exist for all for ROOT in general. Therefore, I'd suggest to close this particular issue so that we can focus on feature development and fixing confirmed bugs. We can't afford separate GitHub issues for all groups of `clang-tidy` warnings in all subdirectories. Thank you very much @ferdymercury for the initiative thought! We learned a lot from this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7422#issuecomment-2326891590
https://github.com/root-project/root/issues/7435#issuecomment-799543441:40,Usability,simpl,simply,40,"This is not really a bug, the layout is simply not set to expand X & Y, The PR #7516 solves it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7435#issuecomment-799543441
https://github.com/root-project/root/issues/7440#issuecomment-801758247:81,Security,access,access,81,I agree that it would be best for users to have all functions in one place. Menu access to that place should be good and clear though.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7440#issuecomment-801758247
https://github.com/root-project/root/issues/7440#issuecomment-801758247:121,Usability,clear,clear,121,I agree that it would be best for users to have all functions in one place. Menu access to that place should be good and clear though.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7440#issuecomment-801758247
https://github.com/root-project/root/pull/7446#issuecomment-796556844:40,Deployability,patch,patches,40,"> > @bellenot, could you submit the two patches we have in this area to reviews.llvm.org?; > ; > @vgvassilev thanks for the review, but what do you mean? Should I do a PR? Where exactly? I'm not sure to understand what to do in reviews.llvm.org. The http://reviews.llvm.org is a website where llvm changes are reviewed before being merged (something like github for svn, historically). The idea is to propose the two changes we got in that header file (the warnings and the other issue that we had to fix with is_trivial) and ask somebody to review it and/or give us guidance. The whole process is not hard -- just get `git show -U9999 hash` and upload the patch. You can add me as a subscriber/reviewer and I will add some relevant people for reviewing it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7446#issuecomment-796556844
https://github.com/root-project/root/pull/7446#issuecomment-796556844:657,Deployability,patch,patch,657,"> > @bellenot, could you submit the two patches we have in this area to reviews.llvm.org?; > ; > @vgvassilev thanks for the review, but what do you mean? Should I do a PR? Where exactly? I'm not sure to understand what to do in reviews.llvm.org. The http://reviews.llvm.org is a website where llvm changes are reviewed before being merged (something like github for svn, historically). The idea is to propose the two changes we got in that header file (the warnings and the other issue that we had to fix with is_trivial) and ask somebody to review it and/or give us guidance. The whole process is not hard -- just get `git show -U9999 hash` and upload the patch. You can add me as a subscriber/reviewer and I will add some relevant people for reviewing it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7446#issuecomment-796556844
https://github.com/root-project/root/pull/7446#issuecomment-796556844:636,Security,hash,hash,636,"> > @bellenot, could you submit the two patches we have in this area to reviews.llvm.org?; > ; > @vgvassilev thanks for the review, but what do you mean? Should I do a PR? Where exactly? I'm not sure to understand what to do in reviews.llvm.org. The http://reviews.llvm.org is a website where llvm changes are reviewed before being merged (something like github for svn, historically). The idea is to propose the two changes we got in that header file (the warnings and the other issue that we had to fix with is_trivial) and ask somebody to review it and/or give us guidance. The whole process is not hard -- just get `git show -U9999 hash` and upload the patch. You can add me as a subscriber/reviewer and I will add some relevant people for reviewing it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7446#issuecomment-796556844
https://github.com/root-project/root/pull/7446#issuecomment-796556844:567,Usability,guid,guidance,567,"> > @bellenot, could you submit the two patches we have in this area to reviews.llvm.org?; > ; > @vgvassilev thanks for the review, but what do you mean? Should I do a PR? Where exactly? I'm not sure to understand what to do in reviews.llvm.org. The http://reviews.llvm.org is a website where llvm changes are reviewed before being merged (something like github for svn, historically). The idea is to propose the two changes we got in that header file (the warnings and the other issue that we had to fix with is_trivial) and ask somebody to review it and/or give us guidance. The whole process is not hard -- just get `git show -U9999 hash` and upload the patch. You can add me as a subscriber/reviewer and I will add some relevant people for reviewing it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7446#issuecomment-796556844
https://github.com/root-project/root/pull/7463#issuecomment-796811095:98,Usability,clear,clear,98,> Only lingering question is whether a `out.reserve(strlen(in)*2)` would be useful ... (it is not clear if it would). It would be really strange.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7463#issuecomment-796811095
https://github.com/root-project/root/pull/7488#issuecomment-797417462:121,Availability,reliab,reliably,121,"The idea for this change comes from my own experiments with upgrading LLVM during my time as student worker (and I can't reliably tell if I wrote the code during paid hours or in my free time, hence the funny list of authorships). It would allow to drop one possibly contentious patch for Clang, so I wanted to get the change out for feedback. One thing I currently don't understand are two test failures in `gtest-math-mathcore-test-CladDerivatorTests` and `gtest-hist-hist-test-TFormulaGradientTests` - but only with the second commit that removes the then unneeded patch. I can make the tests pass again by adding back only the `WasReplaced` bit:; ```diff; diff --git a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; index 403b88ac3a..5e1581f098 100644; --- a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; +++ b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; @@ -131,7 +131,8 @@ protected:; ; unsigned : NumStmtBits;; ; - unsigned NumStmts : 32 - NumStmtBits;; + unsigned WasReplaced : 1;; + unsigned NumStmts : 32 - (NumStmtBits + 1);; ; /// The location of the opening ""{"".; SourceLocation LBraceLoc;; @@ -1328,6 +1329,7 @@ public:; explicit CompoundStmt(SourceLocation Loc); : Stmt(CompoundStmtClass), RBraceLoc(Loc) {; CompoundStmtBits.NumStmts = 0;; + CompoundStmtBits.WasReplaced = 0;; CompoundStmtBits.LBraceLoc = Loc;; }; ; diff --git a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; index 0a4d403106..cc8c6888b8 100644; --- a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; +++ b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; @@ -293,6 +293,7 @@ CompoundStmt::CompoundStmt(ArrayRef<Stmt *> Stmts, SourceLocation LB,; SourceLocation RB); : Stmt(CompoundStmtClass), RBraceLoc(RB) {; CompoundStmtBits.NumStmts = Stmts.size();; + CompoundStmtBits.WasReplaced = 0;; setStmts(Stmts);; CompoundStmtBits.LBraceLoc = LB;; }; @@ -316,6 +3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-797417462
https://github.com/root-project/root/pull/7488#issuecomment-797417462:396,Availability,failure,failures,396,"The idea for this change comes from my own experiments with upgrading LLVM during my time as student worker (and I can't reliably tell if I wrote the code during paid hours or in my free time, hence the funny list of authorships). It would allow to drop one possibly contentious patch for Clang, so I wanted to get the change out for feedback. One thing I currently don't understand are two test failures in `gtest-math-mathcore-test-CladDerivatorTests` and `gtest-hist-hist-test-TFormulaGradientTests` - but only with the second commit that removes the then unneeded patch. I can make the tests pass again by adding back only the `WasReplaced` bit:; ```diff; diff --git a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; index 403b88ac3a..5e1581f098 100644; --- a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; +++ b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; @@ -131,7 +131,8 @@ protected:; ; unsigned : NumStmtBits;; ; - unsigned NumStmts : 32 - NumStmtBits;; + unsigned WasReplaced : 1;; + unsigned NumStmts : 32 - (NumStmtBits + 1);; ; /// The location of the opening ""{"".; SourceLocation LBraceLoc;; @@ -1328,6 +1329,7 @@ public:; explicit CompoundStmt(SourceLocation Loc); : Stmt(CompoundStmtClass), RBraceLoc(Loc) {; CompoundStmtBits.NumStmts = 0;; + CompoundStmtBits.WasReplaced = 0;; CompoundStmtBits.LBraceLoc = Loc;; }; ; diff --git a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; index 0a4d403106..cc8c6888b8 100644; --- a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; +++ b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; @@ -293,6 +293,7 @@ CompoundStmt::CompoundStmt(ArrayRef<Stmt *> Stmts, SourceLocation LB,; SourceLocation RB); : Stmt(CompoundStmtClass), RBraceLoc(RB) {; CompoundStmtBits.NumStmts = Stmts.size();; + CompoundStmtBits.WasReplaced = 0;; setStmts(Stmts);; CompoundStmtBits.LBraceLoc = LB;; }; @@ -316,6 +3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-797417462
https://github.com/root-project/root/pull/7488#issuecomment-797417462:2365,Availability,down,down,2365,"torTests` and `gtest-hist-hist-test-TFormulaGradientTests` - but only with the second commit that removes the then unneeded patch. I can make the tests pass again by adding back only the `WasReplaced` bit:; ```diff; diff --git a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; index 403b88ac3a..5e1581f098 100644; --- a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; +++ b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; @@ -131,7 +131,8 @@ protected:; ; unsigned : NumStmtBits;; ; - unsigned NumStmts : 32 - NumStmtBits;; + unsigned WasReplaced : 1;; + unsigned NumStmts : 32 - (NumStmtBits + 1);; ; /// The location of the opening ""{"".; SourceLocation LBraceLoc;; @@ -1328,6 +1329,7 @@ public:; explicit CompoundStmt(SourceLocation Loc); : Stmt(CompoundStmtClass), RBraceLoc(Loc) {; CompoundStmtBits.NumStmts = 0;; + CompoundStmtBits.WasReplaced = 0;; CompoundStmtBits.LBraceLoc = Loc;; }; ; diff --git a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; index 0a4d403106..cc8c6888b8 100644; --- a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; +++ b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; @@ -293,6 +293,7 @@ CompoundStmt::CompoundStmt(ArrayRef<Stmt *> Stmts, SourceLocation LB,; SourceLocation RB); : Stmt(CompoundStmtClass), RBraceLoc(RB) {; CompoundStmtBits.NumStmts = Stmts.size();; + CompoundStmtBits.WasReplaced = 0;; setStmts(Stmts);; CompoundStmtBits.LBraceLoc = LB;; }; @@ -316,6 +317,7 @@ CompoundStmt *CompoundStmt::CreateEmpty(const ASTContext &C,; void *Mem =; C.Allocate(totalSizeToAlloc<Stmt *>(NumStmts), alignof(CompoundStmt));; CompoundStmt *New = new (Mem) CompoundStmt(EmptyShell());; + New->CompoundStmtBits.WasReplaced = 0;; New->CompoundStmtBits.NumStmts = NumStmts;; return New;; }; ```; which smells fishy (but I don't want to go down that rabbit hole if the patch is not deemed suitable for other reasons)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-797417462
https://github.com/root-project/root/pull/7488#issuecomment-797417462:279,Deployability,patch,patch,279,"The idea for this change comes from my own experiments with upgrading LLVM during my time as student worker (and I can't reliably tell if I wrote the code during paid hours or in my free time, hence the funny list of authorships). It would allow to drop one possibly contentious patch for Clang, so I wanted to get the change out for feedback. One thing I currently don't understand are two test failures in `gtest-math-mathcore-test-CladDerivatorTests` and `gtest-hist-hist-test-TFormulaGradientTests` - but only with the second commit that removes the then unneeded patch. I can make the tests pass again by adding back only the `WasReplaced` bit:; ```diff; diff --git a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; index 403b88ac3a..5e1581f098 100644; --- a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; +++ b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; @@ -131,7 +131,8 @@ protected:; ; unsigned : NumStmtBits;; ; - unsigned NumStmts : 32 - NumStmtBits;; + unsigned WasReplaced : 1;; + unsigned NumStmts : 32 - (NumStmtBits + 1);; ; /// The location of the opening ""{"".; SourceLocation LBraceLoc;; @@ -1328,6 +1329,7 @@ public:; explicit CompoundStmt(SourceLocation Loc); : Stmt(CompoundStmtClass), RBraceLoc(Loc) {; CompoundStmtBits.NumStmts = 0;; + CompoundStmtBits.WasReplaced = 0;; CompoundStmtBits.LBraceLoc = Loc;; }; ; diff --git a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; index 0a4d403106..cc8c6888b8 100644; --- a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; +++ b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; @@ -293,6 +293,7 @@ CompoundStmt::CompoundStmt(ArrayRef<Stmt *> Stmts, SourceLocation LB,; SourceLocation RB); : Stmt(CompoundStmtClass), RBraceLoc(RB) {; CompoundStmtBits.NumStmts = Stmts.size();; + CompoundStmtBits.WasReplaced = 0;; setStmts(Stmts);; CompoundStmtBits.LBraceLoc = LB;; }; @@ -316,6 +3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-797417462
https://github.com/root-project/root/pull/7488#issuecomment-797417462:568,Deployability,patch,patch,568,"The idea for this change comes from my own experiments with upgrading LLVM during my time as student worker (and I can't reliably tell if I wrote the code during paid hours or in my free time, hence the funny list of authorships). It would allow to drop one possibly contentious patch for Clang, so I wanted to get the change out for feedback. One thing I currently don't understand are two test failures in `gtest-math-mathcore-test-CladDerivatorTests` and `gtest-hist-hist-test-TFormulaGradientTests` - but only with the second commit that removes the then unneeded patch. I can make the tests pass again by adding back only the `WasReplaced` bit:; ```diff; diff --git a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; index 403b88ac3a..5e1581f098 100644; --- a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; +++ b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; @@ -131,7 +131,8 @@ protected:; ; unsigned : NumStmtBits;; ; - unsigned NumStmts : 32 - NumStmtBits;; + unsigned WasReplaced : 1;; + unsigned NumStmts : 32 - (NumStmtBits + 1);; ; /// The location of the opening ""{"".; SourceLocation LBraceLoc;; @@ -1328,6 +1329,7 @@ public:; explicit CompoundStmt(SourceLocation Loc); : Stmt(CompoundStmtClass), RBraceLoc(Loc) {; CompoundStmtBits.NumStmts = 0;; + CompoundStmtBits.WasReplaced = 0;; CompoundStmtBits.LBraceLoc = Loc;; }; ; diff --git a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; index 0a4d403106..cc8c6888b8 100644; --- a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; +++ b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; @@ -293,6 +293,7 @@ CompoundStmt::CompoundStmt(ArrayRef<Stmt *> Stmts, SourceLocation LB,; SourceLocation RB); : Stmt(CompoundStmtClass), RBraceLoc(RB) {; CompoundStmtBits.NumStmts = Stmts.size();; + CompoundStmtBits.WasReplaced = 0;; setStmts(Stmts);; CompoundStmtBits.LBraceLoc = LB;; }; @@ -316,6 +3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-797417462
https://github.com/root-project/root/pull/7488#issuecomment-797417462:2394,Deployability,patch,patch,2394,"torTests` and `gtest-hist-hist-test-TFormulaGradientTests` - but only with the second commit that removes the then unneeded patch. I can make the tests pass again by adding back only the `WasReplaced` bit:; ```diff; diff --git a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; index 403b88ac3a..5e1581f098 100644; --- a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; +++ b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; @@ -131,7 +131,8 @@ protected:; ; unsigned : NumStmtBits;; ; - unsigned NumStmts : 32 - NumStmtBits;; + unsigned WasReplaced : 1;; + unsigned NumStmts : 32 - (NumStmtBits + 1);; ; /// The location of the opening ""{"".; SourceLocation LBraceLoc;; @@ -1328,6 +1329,7 @@ public:; explicit CompoundStmt(SourceLocation Loc); : Stmt(CompoundStmtClass), RBraceLoc(Loc) {; CompoundStmtBits.NumStmts = 0;; + CompoundStmtBits.WasReplaced = 0;; CompoundStmtBits.LBraceLoc = Loc;; }; ; diff --git a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; index 0a4d403106..cc8c6888b8 100644; --- a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; +++ b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; @@ -293,6 +293,7 @@ CompoundStmt::CompoundStmt(ArrayRef<Stmt *> Stmts, SourceLocation LB,; SourceLocation RB); : Stmt(CompoundStmtClass), RBraceLoc(RB) {; CompoundStmtBits.NumStmts = Stmts.size();; + CompoundStmtBits.WasReplaced = 0;; setStmts(Stmts);; CompoundStmtBits.LBraceLoc = LB;; }; @@ -316,6 +317,7 @@ CompoundStmt *CompoundStmt::CreateEmpty(const ASTContext &C,; void *Mem =; C.Allocate(totalSizeToAlloc<Stmt *>(NumStmts), alignof(CompoundStmt));; CompoundStmt *New = new (Mem) CompoundStmt(EmptyShell());; + New->CompoundStmtBits.WasReplaced = 0;; New->CompoundStmtBits.NumStmts = NumStmts;; return New;; }; ```; which smells fishy (but I don't want to go down that rabbit hole if the patch is not deemed suitable for other reasons)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-797417462
https://github.com/root-project/root/pull/7488#issuecomment-797417462:391,Testability,test,test,391,"The idea for this change comes from my own experiments with upgrading LLVM during my time as student worker (and I can't reliably tell if I wrote the code during paid hours or in my free time, hence the funny list of authorships). It would allow to drop one possibly contentious patch for Clang, so I wanted to get the change out for feedback. One thing I currently don't understand are two test failures in `gtest-math-mathcore-test-CladDerivatorTests` and `gtest-hist-hist-test-TFormulaGradientTests` - but only with the second commit that removes the then unneeded patch. I can make the tests pass again by adding back only the `WasReplaced` bit:; ```diff; diff --git a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; index 403b88ac3a..5e1581f098 100644; --- a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; +++ b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; @@ -131,7 +131,8 @@ protected:; ; unsigned : NumStmtBits;; ; - unsigned NumStmts : 32 - NumStmtBits;; + unsigned WasReplaced : 1;; + unsigned NumStmts : 32 - (NumStmtBits + 1);; ; /// The location of the opening ""{"".; SourceLocation LBraceLoc;; @@ -1328,6 +1329,7 @@ public:; explicit CompoundStmt(SourceLocation Loc); : Stmt(CompoundStmtClass), RBraceLoc(Loc) {; CompoundStmtBits.NumStmts = 0;; + CompoundStmtBits.WasReplaced = 0;; CompoundStmtBits.LBraceLoc = Loc;; }; ; diff --git a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; index 0a4d403106..cc8c6888b8 100644; --- a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; +++ b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; @@ -293,6 +293,7 @@ CompoundStmt::CompoundStmt(ArrayRef<Stmt *> Stmts, SourceLocation LB,; SourceLocation RB); : Stmt(CompoundStmtClass), RBraceLoc(RB) {; CompoundStmtBits.NumStmts = Stmts.size();; + CompoundStmtBits.WasReplaced = 0;; setStmts(Stmts);; CompoundStmtBits.LBraceLoc = LB;; }; @@ -316,6 +3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-797417462
https://github.com/root-project/root/pull/7488#issuecomment-797417462:429,Testability,test,test-CladDerivatorTests,429,"The idea for this change comes from my own experiments with upgrading LLVM during my time as student worker (and I can't reliably tell if I wrote the code during paid hours or in my free time, hence the funny list of authorships). It would allow to drop one possibly contentious patch for Clang, so I wanted to get the change out for feedback. One thing I currently don't understand are two test failures in `gtest-math-mathcore-test-CladDerivatorTests` and `gtest-hist-hist-test-TFormulaGradientTests` - but only with the second commit that removes the then unneeded patch. I can make the tests pass again by adding back only the `WasReplaced` bit:; ```diff; diff --git a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; index 403b88ac3a..5e1581f098 100644; --- a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; +++ b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; @@ -131,7 +131,8 @@ protected:; ; unsigned : NumStmtBits;; ; - unsigned NumStmts : 32 - NumStmtBits;; + unsigned WasReplaced : 1;; + unsigned NumStmts : 32 - (NumStmtBits + 1);; ; /// The location of the opening ""{"".; SourceLocation LBraceLoc;; @@ -1328,6 +1329,7 @@ public:; explicit CompoundStmt(SourceLocation Loc); : Stmt(CompoundStmtClass), RBraceLoc(Loc) {; CompoundStmtBits.NumStmts = 0;; + CompoundStmtBits.WasReplaced = 0;; CompoundStmtBits.LBraceLoc = Loc;; }; ; diff --git a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; index 0a4d403106..cc8c6888b8 100644; --- a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; +++ b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; @@ -293,6 +293,7 @@ CompoundStmt::CompoundStmt(ArrayRef<Stmt *> Stmts, SourceLocation LB,; SourceLocation RB); : Stmt(CompoundStmtClass), RBraceLoc(RB) {; CompoundStmtBits.NumStmts = Stmts.size();; + CompoundStmtBits.WasReplaced = 0;; setStmts(Stmts);; CompoundStmtBits.LBraceLoc = LB;; }; @@ -316,6 +3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-797417462
https://github.com/root-project/root/pull/7488#issuecomment-797417462:475,Testability,test,test-TFormulaGradientTests,475,"The idea for this change comes from my own experiments with upgrading LLVM during my time as student worker (and I can't reliably tell if I wrote the code during paid hours or in my free time, hence the funny list of authorships). It would allow to drop one possibly contentious patch for Clang, so I wanted to get the change out for feedback. One thing I currently don't understand are two test failures in `gtest-math-mathcore-test-CladDerivatorTests` and `gtest-hist-hist-test-TFormulaGradientTests` - but only with the second commit that removes the then unneeded patch. I can make the tests pass again by adding back only the `WasReplaced` bit:; ```diff; diff --git a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; index 403b88ac3a..5e1581f098 100644; --- a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; +++ b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; @@ -131,7 +131,8 @@ protected:; ; unsigned : NumStmtBits;; ; - unsigned NumStmts : 32 - NumStmtBits;; + unsigned WasReplaced : 1;; + unsigned NumStmts : 32 - (NumStmtBits + 1);; ; /// The location of the opening ""{"".; SourceLocation LBraceLoc;; @@ -1328,6 +1329,7 @@ public:; explicit CompoundStmt(SourceLocation Loc); : Stmt(CompoundStmtClass), RBraceLoc(Loc) {; CompoundStmtBits.NumStmts = 0;; + CompoundStmtBits.WasReplaced = 0;; CompoundStmtBits.LBraceLoc = Loc;; }; ; diff --git a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; index 0a4d403106..cc8c6888b8 100644; --- a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; +++ b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; @@ -293,6 +293,7 @@ CompoundStmt::CompoundStmt(ArrayRef<Stmt *> Stmts, SourceLocation LB,; SourceLocation RB); : Stmt(CompoundStmtClass), RBraceLoc(RB) {; CompoundStmtBits.NumStmts = Stmts.size();; + CompoundStmtBits.WasReplaced = 0;; setStmts(Stmts);; CompoundStmtBits.LBraceLoc = LB;; }; @@ -316,6 +3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-797417462
https://github.com/root-project/root/pull/7488#issuecomment-797417462:590,Testability,test,tests,590,"The idea for this change comes from my own experiments with upgrading LLVM during my time as student worker (and I can't reliably tell if I wrote the code during paid hours or in my free time, hence the funny list of authorships). It would allow to drop one possibly contentious patch for Clang, so I wanted to get the change out for feedback. One thing I currently don't understand are two test failures in `gtest-math-mathcore-test-CladDerivatorTests` and `gtest-hist-hist-test-TFormulaGradientTests` - but only with the second commit that removes the then unneeded patch. I can make the tests pass again by adding back only the `WasReplaced` bit:; ```diff; diff --git a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; index 403b88ac3a..5e1581f098 100644; --- a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; +++ b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; @@ -131,7 +131,8 @@ protected:; ; unsigned : NumStmtBits;; ; - unsigned NumStmts : 32 - NumStmtBits;; + unsigned WasReplaced : 1;; + unsigned NumStmts : 32 - (NumStmtBits + 1);; ; /// The location of the opening ""{"".; SourceLocation LBraceLoc;; @@ -1328,6 +1329,7 @@ public:; explicit CompoundStmt(SourceLocation Loc); : Stmt(CompoundStmtClass), RBraceLoc(Loc) {; CompoundStmtBits.NumStmts = 0;; + CompoundStmtBits.WasReplaced = 0;; CompoundStmtBits.LBraceLoc = Loc;; }; ; diff --git a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; index 0a4d403106..cc8c6888b8 100644; --- a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; +++ b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; @@ -293,6 +293,7 @@ CompoundStmt::CompoundStmt(ArrayRef<Stmt *> Stmts, SourceLocation LB,; SourceLocation RB); : Stmt(CompoundStmtClass), RBraceLoc(RB) {; CompoundStmtBits.NumStmts = Stmts.size();; + CompoundStmtBits.WasReplaced = 0;; setStmts(Stmts);; CompoundStmtBits.LBraceLoc = LB;; }; @@ -316,6 +3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-797417462
https://github.com/root-project/root/pull/7488#issuecomment-797417462:334,Usability,feedback,feedback,334,"The idea for this change comes from my own experiments with upgrading LLVM during my time as student worker (and I can't reliably tell if I wrote the code during paid hours or in my free time, hence the funny list of authorships). It would allow to drop one possibly contentious patch for Clang, so I wanted to get the change out for feedback. One thing I currently don't understand are two test failures in `gtest-math-mathcore-test-CladDerivatorTests` and `gtest-hist-hist-test-TFormulaGradientTests` - but only with the second commit that removes the then unneeded patch. I can make the tests pass again by adding back only the `WasReplaced` bit:; ```diff; diff --git a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; index 403b88ac3a..5e1581f098 100644; --- a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; +++ b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; @@ -131,7 +131,8 @@ protected:; ; unsigned : NumStmtBits;; ; - unsigned NumStmts : 32 - NumStmtBits;; + unsigned WasReplaced : 1;; + unsigned NumStmts : 32 - (NumStmtBits + 1);; ; /// The location of the opening ""{"".; SourceLocation LBraceLoc;; @@ -1328,6 +1329,7 @@ public:; explicit CompoundStmt(SourceLocation Loc); : Stmt(CompoundStmtClass), RBraceLoc(Loc) {; CompoundStmtBits.NumStmts = 0;; + CompoundStmtBits.WasReplaced = 0;; CompoundStmtBits.LBraceLoc = Loc;; }; ; diff --git a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; index 0a4d403106..cc8c6888b8 100644; --- a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; +++ b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; @@ -293,6 +293,7 @@ CompoundStmt::CompoundStmt(ArrayRef<Stmt *> Stmts, SourceLocation LB,; SourceLocation RB); : Stmt(CompoundStmtClass), RBraceLoc(RB) {; CompoundStmtBits.NumStmts = Stmts.size();; + CompoundStmtBits.WasReplaced = 0;; setStmts(Stmts);; CompoundStmtBits.LBraceLoc = LB;; }; @@ -316,6 +3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-797417462
https://github.com/root-project/root/pull/7499#issuecomment-828637952:193,Availability,redundant,redundant,193,"Yes I would like some feedback on the use of std::vector so I can take care of that appropriately together with rebasing. If this strategy is agreed I can also clean up a bit more to avoid the redundant size counters, etc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7499#issuecomment-828637952
https://github.com/root-project/root/pull/7499#issuecomment-828637952:183,Safety,avoid,avoid,183,"Yes I would like some feedback on the use of std::vector so I can take care of that appropriately together with rebasing. If this strategy is agreed I can also clean up a bit more to avoid the redundant size counters, etc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7499#issuecomment-828637952
https://github.com/root-project/root/pull/7499#issuecomment-828637952:193,Safety,redund,redundant,193,"Yes I would like some feedback on the use of std::vector so I can take care of that appropriately together with rebasing. If this strategy is agreed I can also clean up a bit more to avoid the redundant size counters, etc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7499#issuecomment-828637952
https://github.com/root-project/root/pull/7499#issuecomment-828637952:22,Usability,feedback,feedback,22,"Yes I would like some feedback on the use of std::vector so I can take care of that appropriately together with rebasing. If this strategy is agreed I can also clean up a bit more to avoid the redundant size counters, etc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7499#issuecomment-828637952
https://github.com/root-project/root/pull/7502#issuecomment-806477941:233,Deployability,patch,patch,233,"Sorry too much info, too little bandwidth :sweat_smile: If I understand correctly:. - the `is_equal` redefinition is a real issue but unrelated to RVec 2.0 (thanks @wlav for pointing that out) and now tracked by #7678 ; - you have a patch that works around the cppyy bug with `operator[]`; - iteration is broken because `RVec::begin` returns a raw pointer. In principle `begin` can absolutely return a raw pointer (I _think_ LLVM's SmallVector was designed like that for simplicity, to avoid having to define a custom iterator type). But raw pointers make for fine iterators :smile: Seems like a bug in PyROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-806477941
https://github.com/root-project/root/pull/7502#issuecomment-806477941:486,Safety,avoid,avoid,486,"Sorry too much info, too little bandwidth :sweat_smile: If I understand correctly:. - the `is_equal` redefinition is a real issue but unrelated to RVec 2.0 (thanks @wlav for pointing that out) and now tracked by #7678 ; - you have a patch that works around the cppyy bug with `operator[]`; - iteration is broken because `RVec::begin` returns a raw pointer. In principle `begin` can absolutely return a raw pointer (I _think_ LLVM's SmallVector was designed like that for simplicity, to avoid having to define a custom iterator type). But raw pointers make for fine iterators :smile: Seems like a bug in PyROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-806477941
https://github.com/root-project/root/pull/7502#issuecomment-806477941:471,Usability,simpl,simplicity,471,"Sorry too much info, too little bandwidth :sweat_smile: If I understand correctly:. - the `is_equal` redefinition is a real issue but unrelated to RVec 2.0 (thanks @wlav for pointing that out) and now tracked by #7678 ; - you have a patch that works around the cppyy bug with `operator[]`; - iteration is broken because `RVec::begin` returns a raw pointer. In principle `begin` can absolutely return a raw pointer (I _think_ LLVM's SmallVector was designed like that for simplicity, to avoid having to define a custom iterator type). But raw pointers make for fine iterators :smile: Seems like a bug in PyROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-806477941
https://github.com/root-project/root/pull/7502#issuecomment-806482531:131,Safety,avoid,avoid,131,"> In principle `begin` can absolutely return a raw pointer (I _think_ LLVM's SmallVector was designed like that for simplicity, to avoid having to define a custom iterator type). But raw pointers make for fine iterators 😄 Seems like a bug in PyROOT?. I just had a quick look, but it seems to me that this is a corner case which doesn't trigger any mechanic for a proper pythonization, which enables the `for x in rvec` syntax in Python. Let's see, the final word is not yet spoken ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-806482531
https://github.com/root-project/root/pull/7502#issuecomment-806482531:116,Usability,simpl,simplicity,116,"> In principle `begin` can absolutely return a raw pointer (I _think_ LLVM's SmallVector was designed like that for simplicity, to avoid having to define a custom iterator type). But raw pointers make for fine iterators 😄 Seems like a bug in PyROOT?. I just had a quick look, but it seems to me that this is a corner case which doesn't trigger any mechanic for a proper pythonization, which enables the `for x in rvec` syntax in Python. Let's see, the final word is not yet spoken ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-806482531
https://github.com/root-project/root/pull/7502#issuecomment-851591863:433,Testability,log,logic,433,"I will make a push with the latest changes as soon as I solve the capacity-as-sentinel-for-ownership thing -- it's a bit tricky because the capacity is unsigned (so can't use -1 unless we change it to signed) and we can't use 0 because `clear()` happens to set the capacity and the size to 0 in the current implementation (and it's not easy to have `clear()` set the capacity to a more meaningful value without lowering a lot of the logic from `SmallVectorImpl` to `RVec`, as far as I can tell).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-851591863
https://github.com/root-project/root/pull/7502#issuecomment-851591863:237,Usability,clear,clear,237,"I will make a push with the latest changes as soon as I solve the capacity-as-sentinel-for-ownership thing -- it's a bit tricky because the capacity is unsigned (so can't use -1 unless we change it to signed) and we can't use 0 because `clear()` happens to set the capacity and the size to 0 in the current implementation (and it's not easy to have `clear()` set the capacity to a more meaningful value without lowering a lot of the logic from `SmallVectorImpl` to `RVec`, as far as I can tell).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-851591863
https://github.com/root-project/root/pull/7502#issuecomment-851591863:350,Usability,clear,clear,350,"I will make a push with the latest changes as soon as I solve the capacity-as-sentinel-for-ownership thing -- it's a bit tricky because the capacity is unsigned (so can't use -1 unless we change it to signed) and we can't use 0 because `clear()` happens to set the capacity and the size to 0 in the current implementation (and it's not easy to have `clear()` set the capacity to a more meaningful value without lowering a lot of the logic from `SmallVectorImpl` to `RVec`, as far as I can tell).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-851591863
https://github.com/root-project/root/pull/7502#issuecomment-869834863:176,Modifiability,inherit,inherits,176,"Rebased to fix conflicts, the last 3 commits are the only new ones. A type `RVecN` has been introduced which exposes the small buffer size as a template parameters, and `RVec` inherits publicly from it fixing the small buffer size to a reasonable value. For now all mathematical operators and helper functions still deal with `RVec`, simply switching everything to taking _and returning_ `RVecN` instead is a breaking change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-869834863
https://github.com/root-project/root/pull/7502#issuecomment-869834863:109,Security,expose,exposes,109,"Rebased to fix conflicts, the last 3 commits are the only new ones. A type `RVecN` has been introduced which exposes the small buffer size as a template parameters, and `RVec` inherits publicly from it fixing the small buffer size to a reasonable value. For now all mathematical operators and helper functions still deal with `RVec`, simply switching everything to taking _and returning_ `RVecN` instead is a breaking change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-869834863
https://github.com/root-project/root/pull/7502#issuecomment-869834863:334,Usability,simpl,simply,334,"Rebased to fix conflicts, the last 3 commits are the only new ones. A type `RVecN` has been introduced which exposes the small buffer size as a template parameters, and `RVec` inherits publicly from it fixing the small buffer size to a reasonable value. For now all mathematical operators and helper functions still deal with `RVec`, simply switching everything to taking _and returning_ `RVecN` instead is a breaking change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-869834863
https://github.com/root-project/root/issues/7518#issuecomment-808738232:254,Availability,avail,available,254,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling.; * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214); * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518#issuecomment-808738232
https://github.com/root-project/root/issues/7518#issuecomment-808738232:421,Availability,avail,available,421,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling.; * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214); * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518#issuecomment-808738232
https://github.com/root-project/root/issues/7518#issuecomment-808738232:445,Availability,error,errors,445,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling.; * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214); * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518#issuecomment-808738232
https://github.com/root-project/root/issues/7518#issuecomment-808738232:453,Availability,error,error,453,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling.; * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214); * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518#issuecomment-808738232
https://github.com/root-project/root/issues/7518#issuecomment-808738232:459,Integrability,message,messages,459,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling.; * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214); * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518#issuecomment-808738232
https://github.com/root-project/root/issues/7518#issuecomment-808738232:885,Integrability,inject,injected,885,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling.; * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214); * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518#issuecomment-808738232
https://github.com/root-project/root/issues/7518#issuecomment-808738232:885,Security,inject,injected,885,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling.; * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214); * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518#issuecomment-808738232
https://github.com/root-project/root/issues/7518#issuecomment-808738232:109,Usability,simpl,simplify,109,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling.; * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214); * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7518#issuecomment-808738232
https://github.com/root-project/root/issues/7536#issuecomment-804250769:30,Usability,simpl,simply,30,Hi @linev! I would suggest to simply delete the line with `x1 = *iter2;` ([here a link to it](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooCurve.cxx#L388)). The value of `x2` is already set correctly [a few lines before](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooCurve.cxx#L373).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7536#issuecomment-804250769
https://github.com/root-project/root/issues/7541#issuecomment-1862729596:55,Deployability,patch,patches,55,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541#issuecomment-1862729596
https://github.com/root-project/root/issues/7541#issuecomment-1862729596:330,Deployability,configurat,configuration,330,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541#issuecomment-1862729596
https://github.com/root-project/root/issues/7541#issuecomment-1862729596:330,Modifiability,config,configuration,330,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541#issuecomment-1862729596
https://github.com/root-project/root/issues/7541#issuecomment-1862729596:101,Testability,test,test,101,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541#issuecomment-1862729596
https://github.com/root-project/root/issues/7541#issuecomment-1862729596:211,Usability,clear,clear,211,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7541#issuecomment-1862729596
https://github.com/root-project/root/issues/7561#issuecomment-807097352:8,Usability,learn,learned,8,What we learned from todays PPP:. - We probably want to call it better like `Describe` (done); - We have to document clearly that the output is subject to change and should not be parsed (done); - Add number of DF runs is useful (done); - We have to figure out what to show if there are hundreds of columns; - ~We should try to follow a markdown style formatting to make it look nice in jupyter and friends~ (IMHO: Too complex),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561#issuecomment-807097352
https://github.com/root-project/root/issues/7561#issuecomment-807097352:117,Usability,clear,clearly,117,What we learned from todays PPP:. - We probably want to call it better like `Describe` (done); - We have to document clearly that the output is subject to change and should not be parsed (done); - Add number of DF runs is useful (done); - We have to figure out what to show if there are hundreds of columns; - ~We should try to follow a markdown style formatting to make it look nice in jupyter and friends~ (IMHO: Too complex),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561#issuecomment-807097352
https://github.com/root-project/root/issues/7561#issuecomment-809409719:364,Usability,simpl,simple,364,"Right, good point, the name of the tree (or let's call it dataset) is useful!. Personally I find the markdown syntax too heavy. But if we find a majority for it, I'm happy to implement it ;). Edit: There's the problem for the dataset name that it's not given for all data sources and we would have to make a difference between TTree datasource and for example the simple one with the `RDataFrame(N)` constructor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561#issuecomment-809409719
https://github.com/root-project/root/issues/7561#issuecomment-817629082:416,Deployability,update,update,416,"Discussion with @eguiraud and @vepadulano:; - Rename DataSource to Dataset; - Add type and name of dataset; - Add type of datasource; - Number of slots; - Make ""Numbers of ..."" and other information a simple table; - Add it to the cheat sheet. To do so we need an additional public API:; - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561#issuecomment-817629082
https://github.com/root-project/root/issues/7561#issuecomment-817629082:201,Usability,simpl,simple,201,"Discussion with @eguiraud and @vepadulano:; - Rename DataSource to Dataset; - Add type and name of dataset; - Add type of datasource; - Number of slots; - Make ""Numbers of ..."" and other information a simple table; - Add it to the cheat sheet. To do so we need an additional public API:; - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561#issuecomment-817629082
https://github.com/root-project/root/issues/7561#issuecomment-817717882:183,Usability,simpl,simple,183,"We also want a dedicated `GetDataSourceInfo`, because we have either `fDataSet->GetLabel()`, if there's a `fDataSource`, or a `TTree/TChain` type if there is a `df.GetTree` or it's a simple dataframe aka `RDataFrame(N)` if none if this is true. Coming in a separate PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561#issuecomment-817717882
https://github.com/root-project/root/issues/7561#issuecomment-817863318:654,Testability,log,logical,654,"> To do so we need an additional public API:; GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:; * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does.; * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases.; * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:; * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion; * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little re",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561#issuecomment-817863318
https://github.com/root-project/root/issues/7561#issuecomment-817863318:282,Usability,simpl,simple,282,"> To do so we need an additional public API:; GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:; * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does.; * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases.; * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:; * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion; * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little re",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561#issuecomment-817863318
https://github.com/root-project/root/issues/7561#issuecomment-817863318:1775,Usability,clear,clearly,1775,"/path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:; * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does.; * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases.; * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:; * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion; * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little relevance with the other RDataFrame constructors that use TTree as the data format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7561#issuecomment-817863318
https://github.com/root-project/root/issues/7584#issuecomment-802168332:41,Usability,simpl,simple,41,"Mmmh _get_friend_info might be a bit too simple, looks how it's done here: https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/tree/treeplayer/src/TTreeProcessorMT.cxx#L374",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7584#issuecomment-802168332
https://github.com/root-project/root/issues/7604#issuecomment-804226765:1746,Availability,error,error,1746,"roducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version!. ```bash; $ # Environment; $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh; $ which g++; /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++; $ which clang++; /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long); $ # Using 10k LOC, results are not as clear with 1k LOC; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++; 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only); $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation; $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0; 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k; $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; g++: internal compiler error: Segmentation fault signal terminated program cc1plus; Please submit a full bug report,; with preprocessed source if appropriate.; See <https://gcc.gnu.org/bugs/> for instructions.; 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604#issuecomment-804226765
https://github.com/root-project/root/issues/7604#issuecomment-804226765:1766,Availability,fault,fault,1766,"roducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version!. ```bash; $ # Environment; $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh; $ which g++; /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++; $ which clang++; /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long); $ # Using 10k LOC, results are not as clear with 1k LOC; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++; 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only); $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation; $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0; 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k; $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; g++: internal compiler error: Segmentation fault signal terminated program cc1plus; Please submit a full bug report,; with preprocessed source if appropriate.; See <https://gcc.gnu.org/bugs/> for instructions.; 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604#issuecomment-804226765
https://github.com/root-project/root/issues/7604#issuecomment-804226765:347,Deployability,release,releases,347,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version!. ```bash; $ # Environment; $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh; $ which g++; /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++; $ which clang++; /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long); $ # Using 10k LOC, results are not as clear with 1k LOC; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++; 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only); $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation; $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0; 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k; $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; g++: internal compiler error: Segmentation fault signal terminated program cc1plus; Please submit a full bug report,; with preprocessed source if appropriate.; See <https://gcc.gnu.org/bugs/> for instructions.; 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 33810",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604#issuecomment-804226765
https://github.com/root-project/root/issues/7604#issuecomment-804226765:436,Deployability,release,releases,436,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version!. ```bash; $ # Environment; $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh; $ which g++; /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++; $ which clang++; /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long); $ # Using 10k LOC, results are not as clear with 1k LOC; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++; 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only); $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation; $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0; 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k; $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; g++: internal compiler error: Segmentation fault signal terminated program cc1plus; Please submit a full bug report,; with preprocessed source if appropriate.; See <https://gcc.gnu.org/bugs/> for instructions.; 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 33810",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604#issuecomment-804226765
https://github.com/root-project/root/issues/7604#issuecomment-804226765:1098,Deployability,release,releases,1098,"roducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version!. ```bash; $ # Environment; $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh; $ which g++; /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++; $ which clang++; /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long); $ # Using 10k LOC, results are not as clear with 1k LOC; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++; 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only); $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation; $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0; 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k; $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; g++: internal compiler error: Segmentation fault signal terminated program cc1plus; Please submit a full bug report,; with preprocessed source if appropriate.; See <https://gcc.gnu.org/bugs/> for instructions.; 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604#issuecomment-804226765
https://github.com/root-project/root/issues/7604#issuecomment-804226765:1615,Deployability,release,releases,1615,"roducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version!. ```bash; $ # Environment; $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh; $ which g++; /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++; $ which clang++; /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long); $ # Using 10k LOC, results are not as clear with 1k LOC; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++; 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only); $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation; $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0; 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k; $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; g++: internal compiler error: Segmentation fault signal terminated program cc1plus; Please submit a full bug report,; with preprocessed source if appropriate.; See <https://gcc.gnu.org/bugs/> for instructions.; 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 3381072maxresident)k; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604#issuecomment-804226765
https://github.com/root-project/root/issues/7604#issuecomment-804226765:52,Modifiability,config,config,52,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version!. ```bash; $ # Environment; $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh; $ which g++; /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++; $ which clang++; /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long); $ # Using 10k LOC, results are not as clear with 1k LOC; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++; 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only); $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation; $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0; 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k; $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; g++: internal compiler error: Segmentation fault signal terminated program cc1plus; Please submit a full bug report,; with preprocessed source if appropriate.; See <https://gcc.gnu.org/bugs/> for instructions.; 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 33810",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604#issuecomment-804226765
https://github.com/root-project/root/issues/7604#issuecomment-804226765:592,Usability,clear,clear,592,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version!. ```bash; $ # Environment; $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh; $ which g++; /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++; $ which clang++; /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long); $ # Using 10k LOC, results are not as clear with 1k LOC; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++; 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only); $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation; $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0; 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k; $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; g++: internal compiler error: Segmentation fault signal terminated program cc1plus; Please submit a full bug report,; with preprocessed source if appropriate.; See <https://gcc.gnu.org/bugs/> for instructions.; 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 33810",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7604#issuecomment-804226765
https://github.com/root-project/root/pull/7630#issuecomment-804399962:17,Modifiability,variab,variable,17,"Fixed the unused variable warnings, and simplified the template overloads so that Book can be called directly from python. (At least in the jitted case. I'm not sure how to call a template function like this from cppyy with partially specified template parameters, and it's not possible to explicitly specify the Helper type because it comes after the parameter pack.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630#issuecomment-804399962
https://github.com/root-project/root/pull/7630#issuecomment-804399962:40,Usability,simpl,simplified,40,"Fixed the unused variable warnings, and simplified the template overloads so that Book can be called directly from python. (At least in the jitted case. I'm not sure how to call a template function like this from cppyy with partially specified template parameters, and it's not possible to explicitly specify the Helper type because it comes after the parameter pack.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7630#issuecomment-804399962
https://github.com/root-project/root/issues/7644#issuecomment-1833527467:70,Usability,simpl,simple,70,"@bellenot If I understand correctly, what @dpiparo is suggesting is a simple. ```cmake; set(ROOT_CXX_STANDARD @CMAKE_CXX_STANDARD@); ```; somewhere in `ROOTConfig.cmake.in`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7644#issuecomment-1833527467
https://github.com/root-project/root/issues/7657#issuecomment-805575762:178,Availability,error,error,178,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657#issuecomment-805575762
https://github.com/root-project/root/issues/7657#issuecomment-805575762:224,Availability,error,error,224,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657#issuecomment-805575762
https://github.com/root-project/root/issues/7657#issuecomment-805575762:230,Integrability,message,message,230,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657#issuecomment-805575762
https://github.com/root-project/root/issues/7657#issuecomment-805575762:217,Usability,simpl,simple,217,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7657#issuecomment-805575762
https://github.com/root-project/root/issues/7669#issuecomment-1926805717:489,Usability,simpl,simply,489,"A soft-break would require the effort of fixing the wild card import just to drop it afterwards.... There is a structural problem with Python 3.11 that prevents the wildcard import with the lazy lookup to work. Upstream CPyCppyy dropped that feature even:; https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005; Quote:; > As of py3.11, there is no longer a lookup function pointer in the dict object to replace. Since this feature is not widely advertised, it's simply droped. The dropped `SetCppLazyLookup()` function is exactly the one we used for `from ROOT import *`.; https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L162. @vepadulano, given this new information that it will never work with Python 3.11 onward, maybe we should remove the code path for `import ROOT *`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669#issuecomment-1926805717
https://github.com/root-project/root/issues/7669#issuecomment-1926883056:178,Usability,simpl,simply,178,"I am always wary about dropping support for a feature completely without a deprecation notice, even if that feature was buggy and incomplete. This might be one occasion where we simply can't do otherwise",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7669#issuecomment-1926883056
https://github.com/root-project/root/issues/7673#issuecomment-806026334:497,Modifiability,extend,extend,497,"Please see https://root.cern/doc/master/classTHistPainter.html#HP20a AXIS option is not listed for TH2Poly.; If I run your code example under ROOT 6.22/06 I get the attached figure; ![c1](https://user-images.githubusercontent.com/55505042/112357480-91467500-8c9d-11eb-9f04-4bbf630ecafe.png); As you can see, a frame is drawn around the bin. What happens in fact, and what is not seen, since the code example fills the histogram with a negative value, is that what is drawn is a scatter plot. If I extend the code as follows:; ```; TH2Poly* h2pol = new TH2Poly(""p2"",""p2"",0,4,0,4);; Double_t x[4] = {0.,0.,2.,2.};; Double_t y[4] = {0.,2.,2.,0.};; TGraph *g = new TGraph(4,x,y);; h2pol->AddBin(g);; h2pol->Fill(1.,1.,-3);. Double_t x2[4] = {1.,1.,3.,3.};; Double_t y2[4] = {2.,4.,4.,2.};; TGraph *g2 = new TGraph(4,x2,y2);; h2pol->AddBin(g2);; h2pol->Fill(2.,3.,3);; h2pol->Draw(""axis""); ```; I get the following picture which clearly demonstrates it; ![c2](https://user-images.githubusercontent.com/55505042/112357745-ceab0280-8c9d-11eb-8167-3b3b2cd603bb.png); So if I draw h2pol with ""AXIS"" option, it is simply ignored, and a scatter plot is drawn.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7673#issuecomment-806026334
https://github.com/root-project/root/issues/7673#issuecomment-806026334:924,Usability,clear,clearly,924,"Please see https://root.cern/doc/master/classTHistPainter.html#HP20a AXIS option is not listed for TH2Poly.; If I run your code example under ROOT 6.22/06 I get the attached figure; ![c1](https://user-images.githubusercontent.com/55505042/112357480-91467500-8c9d-11eb-9f04-4bbf630ecafe.png); As you can see, a frame is drawn around the bin. What happens in fact, and what is not seen, since the code example fills the histogram with a negative value, is that what is drawn is a scatter plot. If I extend the code as follows:; ```; TH2Poly* h2pol = new TH2Poly(""p2"",""p2"",0,4,0,4);; Double_t x[4] = {0.,0.,2.,2.};; Double_t y[4] = {0.,2.,2.,0.};; TGraph *g = new TGraph(4,x,y);; h2pol->AddBin(g);; h2pol->Fill(1.,1.,-3);. Double_t x2[4] = {1.,1.,3.,3.};; Double_t y2[4] = {2.,4.,4.,2.};; TGraph *g2 = new TGraph(4,x2,y2);; h2pol->AddBin(g2);; h2pol->Fill(2.,3.,3);; h2pol->Draw(""axis""); ```; I get the following picture which clearly demonstrates it; ![c2](https://user-images.githubusercontent.com/55505042/112357745-ceab0280-8c9d-11eb-8167-3b3b2cd603bb.png); So if I draw h2pol with ""AXIS"" option, it is simply ignored, and a scatter plot is drawn.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7673#issuecomment-806026334
https://github.com/root-project/root/issues/7673#issuecomment-806026334:1104,Usability,simpl,simply,1104,"Please see https://root.cern/doc/master/classTHistPainter.html#HP20a AXIS option is not listed for TH2Poly.; If I run your code example under ROOT 6.22/06 I get the attached figure; ![c1](https://user-images.githubusercontent.com/55505042/112357480-91467500-8c9d-11eb-9f04-4bbf630ecafe.png); As you can see, a frame is drawn around the bin. What happens in fact, and what is not seen, since the code example fills the histogram with a negative value, is that what is drawn is a scatter plot. If I extend the code as follows:; ```; TH2Poly* h2pol = new TH2Poly(""p2"",""p2"",0,4,0,4);; Double_t x[4] = {0.,0.,2.,2.};; Double_t y[4] = {0.,2.,2.,0.};; TGraph *g = new TGraph(4,x,y);; h2pol->AddBin(g);; h2pol->Fill(1.,1.,-3);. Double_t x2[4] = {1.,1.,3.,3.};; Double_t y2[4] = {2.,4.,4.,2.};; TGraph *g2 = new TGraph(4,x2,y2);; h2pol->AddBin(g2);; h2pol->Fill(2.,3.,3);; h2pol->Draw(""axis""); ```; I get the following picture which clearly demonstrates it; ![c2](https://user-images.githubusercontent.com/55505042/112357745-ceab0280-8c9d-11eb-8167-3b3b2cd603bb.png); So if I draw h2pol with ""AXIS"" option, it is simply ignored, and a scatter plot is drawn.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7673#issuecomment-806026334
https://github.com/root-project/root/issues/7685#issuecomment-1925198788:10,Usability,simpl,simple,10,Is this a simple pythonisation or do we need something more?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7685#issuecomment-1925198788
https://github.com/root-project/root/pull/7687#issuecomment-809247589:140,Usability,simpl,simply,140,"Oh I see - this was about the bug, not this PR. Well - that's a visible, existing, long-standing limitation. It won't be a blocker for 6.24 simply because I expect to not be able to fix it in time...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7687#issuecomment-809247589
https://github.com/root-project/root/issues/7697#issuecomment-1952800171:186,Usability,clear,clear,186,"This issue was brought up for discussion within the team. As things currently stand, the benefits of introducing the uppercase version of these function in the `VecOps` namespace is not clear. The decision is to close this issue for now, if more users will identify this as a blocker for their use cases then we can reassess the decision. Thanks a lot @jolly-chen for taking the time to address this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7697#issuecomment-1952800171
https://github.com/root-project/root/pull/7705#issuecomment-810141972:138,Deployability,install,installing,138,"> Indeed, you are right. I still want to give some hints though. How about; > ; > ```; > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details.; > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705#issuecomment-810141972
https://github.com/root-project/root/pull/7705#issuecomment-810141972:162,Deployability,install,install,162,"> Indeed, you are right. I still want to give some hints though. How about; > ; > ```; > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details.; > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705#issuecomment-810141972
https://github.com/root-project/root/pull/7705#issuecomment-810141972:189,Deployability,install,install,189,"> Indeed, you are right. I still want to give some hints though. How about; > ; > ```; > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details.; > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705#issuecomment-810141972
https://github.com/root-project/root/pull/7705#issuecomment-810141972:370,Deployability,install,installation,370,"> Indeed, you are right. I still want to give some hints though. How about; > ; > ```; > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details.; > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705#issuecomment-810141972
https://github.com/root-project/root/pull/7705#issuecomment-810141972:540,Deployability,install,install,540,"> Indeed, you are right. I still want to give some hints though. How about; > ; > ```; > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details.; > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705#issuecomment-810141972
https://github.com/root-project/root/pull/7705#issuecomment-810141972:606,Deployability,configurat,configuration,606,"> Indeed, you are right. I still want to give some hints though. How about; > ; > ```; > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details.; > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705#issuecomment-810141972
https://github.com/root-project/root/pull/7705#issuecomment-810141972:606,Modifiability,config,configuration,606,"> Indeed, you are right. I still want to give some hints though. How about; > ; > ```; > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details.; > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705#issuecomment-810141972
https://github.com/root-project/root/pull/7705#issuecomment-810141972:493,Usability,simpl,simple,493,"> Indeed, you are right. I still want to give some hints though. How about; > ; > ```; > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details.; > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705#issuecomment-810141972
https://github.com/root-project/root/pull/7705#issuecomment-810153069:104,Deployability,install,installation,104,"> I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). Alright, latest commit uses this wording :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705#issuecomment-810153069
https://github.com/root-project/root/pull/7705#issuecomment-810153069:227,Usability,simpl,simple,227,"> I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). Alright, latest commit uses this wording :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7705#issuecomment-810153069
https://github.com/root-project/root/issues/7709#issuecomment-847752725:1151,Modifiability,variab,variable,1151,"TLOOP=4 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [784MB/2.09GB][ 36%][==================> ][11.04MB/s]; ```; ```; $ ps aux | grep xrdcp; vpadulan 2875 14.5 0.4 698364 77920 pts/0 Sl+ 12:15 0:03 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 2875 | wc -l; 10; ```; ### XRD_PARALLELEVTLOOP=1; This should use 1 thread, I see 7; ```; $ XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [184MB/2.09GB][ 8%][====> ][10.82MB/s]; ```. ```; $ ps aux | grep xrdcp; vpadulan 3000 20.0 0.2 608092 46488 pts/0 Sl+ 12:18 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 3000 | wc -l; 7; ```. ### XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1; I have found another environment variable in the xrootd docs https://xrootd.slac.stanford.edu/doc/xrdcl-docs/xrdcldocs.pdf described as ""Number of threads processing user callbacks."" with default value 3 . Setting both variables to 1 leads to 5 threads. ```; $ XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [192MB/2.09GB][ 8%][====> ][10.67MB/s]; ```. ```; $ ps aux | grep xrdcp; vpadulan 3036 17.3 0.2 460628 48240 pts/0 Sl+ 12:21 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 3036 | wc -l; 5; ```. So for now:; 1. Setting XRD_PARALLELEVTLOOP=1 makes the xrdcp process use 7 thread, of which 3 are explicable by the default value of XRD_WORKERTHREADS, 1 is the event loop, but I still can't reason about the other 3 threads.; 2. The two variables seem to be independently adding threads to the `xrd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709#issuecomment-847752725
https://github.com/root-project/root/issues/7709#issuecomment-847752725:1337,Modifiability,variab,variables,1337,"ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [784MB/2.09GB][ 36%][==================> ][11.04MB/s]; ```; ```; $ ps aux | grep xrdcp; vpadulan 2875 14.5 0.4 698364 77920 pts/0 Sl+ 12:15 0:03 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 2875 | wc -l; 10; ```; ### XRD_PARALLELEVTLOOP=1; This should use 1 thread, I see 7; ```; $ XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [184MB/2.09GB][ 8%][====> ][10.82MB/s]; ```. ```; $ ps aux | grep xrdcp; vpadulan 3000 20.0 0.2 608092 46488 pts/0 Sl+ 12:18 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 3000 | wc -l; 7; ```. ### XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1; I have found another environment variable in the xrootd docs https://xrootd.slac.stanford.edu/doc/xrdcl-docs/xrdcldocs.pdf described as ""Number of threads processing user callbacks."" with default value 3 . Setting both variables to 1 leads to 5 threads. ```; $ XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [192MB/2.09GB][ 8%][====> ][10.67MB/s]; ```. ```; $ ps aux | grep xrdcp; vpadulan 3036 17.3 0.2 460628 48240 pts/0 Sl+ 12:21 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 3036 | wc -l; 5; ```. So for now:; 1. Setting XRD_PARALLELEVTLOOP=1 makes the xrdcp process use 7 thread, of which 3 are explicable by the default value of XRD_WORKERTHREADS, 1 is the event loop, but I still can't reason about the other 3 threads.; 2. The two variables seem to be independently adding threads to the `xrdcp` process when they are increased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709#issuecomment-847752725
https://github.com/root-project/root/issues/7709#issuecomment-847752725:2071,Modifiability,variab,variables,2071,"ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [784MB/2.09GB][ 36%][==================> ][11.04MB/s]; ```; ```; $ ps aux | grep xrdcp; vpadulan 2875 14.5 0.4 698364 77920 pts/0 Sl+ 12:15 0:03 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 2875 | wc -l; 10; ```; ### XRD_PARALLELEVTLOOP=1; This should use 1 thread, I see 7; ```; $ XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [184MB/2.09GB][ 8%][====> ][10.82MB/s]; ```. ```; $ ps aux | grep xrdcp; vpadulan 3000 20.0 0.2 608092 46488 pts/0 Sl+ 12:18 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 3000 | wc -l; 7; ```. ### XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1; I have found another environment variable in the xrootd docs https://xrootd.slac.stanford.edu/doc/xrdcl-docs/xrdcldocs.pdf described as ""Number of threads processing user callbacks."" with default value 3 . Setting both variables to 1 leads to 5 threads. ```; $ XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [192MB/2.09GB][ 8%][====> ][10.67MB/s]; ```. ```; $ ps aux | grep xrdcp; vpadulan 3036 17.3 0.2 460628 48240 pts/0 Sl+ 12:21 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 3036 | wc -l; 5; ```. So for now:; 1. Setting XRD_PARALLELEVTLOOP=1 makes the xrdcp process use 7 thread, of which 3 are explicable by the default value of XRD_WORKERTHREADS, 1 is the event loop, but I still can't reason about the other 3 threads.; 2. The two variables seem to be independently adding threads to the `xrdcp` process when they are increased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709#issuecomment-847752725
https://github.com/root-project/root/issues/7709#issuecomment-847752725:13,Testability,test,tests,13,"First simple tests:. ### XRD_PARALLELEVTLOOP=4; In theory this should use 4 threads, but there are 10 instead; ```; $ XRD_PARALLELEVTLOOP=4 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [784MB/2.09GB][ 36%][==================> ][11.04MB/s]; ```; ```; $ ps aux | grep xrdcp; vpadulan 2875 14.5 0.4 698364 77920 pts/0 Sl+ 12:15 0:03 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 2875 | wc -l; 10; ```; ### XRD_PARALLELEVTLOOP=1; This should use 1 thread, I see 7; ```; $ XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [184MB/2.09GB][ 8%][====> ][10.82MB/s]; ```. ```; $ ps aux | grep xrdcp; vpadulan 3000 20.0 0.2 608092 46488 pts/0 Sl+ 12:18 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 3000 | wc -l; 7; ```. ### XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1; I have found another environment variable in the xrootd docs https://xrootd.slac.stanford.edu/doc/xrdcl-docs/xrdcldocs.pdf described as ""Number of threads processing user callbacks."" with default value 3 . Setting both variables to 1 leads to 5 threads. ```; $ XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [192MB/2.09GB][ 8%][====> ][10.67MB/s]; ```. ```; $ ps aux | grep xrdcp; vpadulan 3036 17.3 0.2 460628 48240 pts/0 Sl+ 12:21 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 3036 | wc -l; 5; ```. So for now:; 1. Setting XRD_PARALLELEVTLOOP=1 makes the xrdcp process use 7 thread, of which 3 are explicable by the default value of XRD_WORKERTHREADS, 1 is the event ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709#issuecomment-847752725
https://github.com/root-project/root/issues/7709#issuecomment-847752725:6,Usability,simpl,simple,6,"First simple tests:. ### XRD_PARALLELEVTLOOP=4; In theory this should use 4 threads, but there are 10 instead; ```; $ XRD_PARALLELEVTLOOP=4 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [784MB/2.09GB][ 36%][==================> ][11.04MB/s]; ```; ```; $ ps aux | grep xrdcp; vpadulan 2875 14.5 0.4 698364 77920 pts/0 Sl+ 12:15 0:03 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 2875 | wc -l; 10; ```; ### XRD_PARALLELEVTLOOP=1; This should use 1 thread, I see 7; ```; $ XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [184MB/2.09GB][ 8%][====> ][10.82MB/s]; ```. ```; $ ps aux | grep xrdcp; vpadulan 3000 20.0 0.2 608092 46488 pts/0 Sl+ 12:18 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 3000 | wc -l; 7; ```. ### XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1; I have found another environment variable in the xrootd docs https://xrootd.slac.stanford.edu/doc/xrdcl-docs/xrdcldocs.pdf described as ""Number of threads processing user callbacks."" with default value 3 . Setting both variables to 1 leads to 5 threads. ```; $ XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [192MB/2.09GB][ 8%][====> ][10.67MB/s]; ```. ```; $ ps aux | grep xrdcp; vpadulan 3036 17.3 0.2 460628 48240 pts/0 Sl+ 12:21 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 3036 | wc -l; 5; ```. So for now:; 1. Setting XRD_PARALLELEVTLOOP=1 makes the xrdcp process use 7 thread, of which 3 are explicable by the default value of XRD_WORKERTHREADS, 1 is the event ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709#issuecomment-847752725
https://github.com/root-project/root/issues/7709#issuecomment-1833892432:31,Usability,intuit,intuition,31,"Yes, @amadio , that was a nice intuition of yours. The comment also goes beyond this particular item and shows we really explored the topic in depth :) I am closing the issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7709#issuecomment-1833892432
https://github.com/root-project/root/pull/7711#issuecomment-828443447:15,Usability,feedback,feedback,15,Thanks for the feedback!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7711#issuecomment-828443447
https://github.com/root-project/root/issues/7718#issuecomment-948087157:63,Usability,undo,undo,63,"@pcanal, this is a bit of a pain for CMS as we have to put an ""undo commit"" on all our 6.24 and master branches, e.g.:; https://github.com/cms-sw/root/commit/425ac414ef564c1cdc5fa490967d95d63df3b8eb. We probably have several incarnation of this undo in various branches :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-948087157
https://github.com/root-project/root/issues/7718#issuecomment-948087157:245,Usability,undo,undo,245,"@pcanal, this is a bit of a pain for CMS as we have to put an ""undo commit"" on all our 6.24 and master branches, e.g.:; https://github.com/cms-sw/root/commit/425ac414ef564c1cdc5fa490967d95d63df3b8eb. We probably have several incarnation of this undo in various branches :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-948087157
https://github.com/root-project/root/issues/7718#issuecomment-948203246:182,Testability,test,test,182,@pcanal. If it is any help I reference here a simple cmssw module [1]. When compile it with FWLite (built with root master) you can reproduce the crash. Below is the binary from the test module and the sample file:; test-bname-for.exe /eos/cms/store/group/phys_muon/dmytro/tmp/BPH-RunIIAutumn18DRPremix-00015.root. Crash is the line https://github.com/alja/OssTests/blob/root-test/BranchAddr/bin/test-bname-for.cc#L95. [1] https://github.com/alja/OssTests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-948203246
https://github.com/root-project/root/issues/7718#issuecomment-948203246:216,Testability,test,test-bname-for,216,@pcanal. If it is any help I reference here a simple cmssw module [1]. When compile it with FWLite (built with root master) you can reproduce the crash. Below is the binary from the test module and the sample file:; test-bname-for.exe /eos/cms/store/group/phys_muon/dmytro/tmp/BPH-RunIIAutumn18DRPremix-00015.root. Crash is the line https://github.com/alja/OssTests/blob/root-test/BranchAddr/bin/test-bname-for.cc#L95. [1] https://github.com/alja/OssTests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-948203246
https://github.com/root-project/root/issues/7718#issuecomment-948203246:376,Testability,test,test,376,@pcanal. If it is any help I reference here a simple cmssw module [1]. When compile it with FWLite (built with root master) you can reproduce the crash. Below is the binary from the test module and the sample file:; test-bname-for.exe /eos/cms/store/group/phys_muon/dmytro/tmp/BPH-RunIIAutumn18DRPremix-00015.root. Crash is the line https://github.com/alja/OssTests/blob/root-test/BranchAddr/bin/test-bname-for.cc#L95. [1] https://github.com/alja/OssTests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-948203246
https://github.com/root-project/root/issues/7718#issuecomment-948203246:396,Testability,test,test-bname-for,396,@pcanal. If it is any help I reference here a simple cmssw module [1]. When compile it with FWLite (built with root master) you can reproduce the crash. Below is the binary from the test module and the sample file:; test-bname-for.exe /eos/cms/store/group/phys_muon/dmytro/tmp/BPH-RunIIAutumn18DRPremix-00015.root. Crash is the line https://github.com/alja/OssTests/blob/root-test/BranchAddr/bin/test-bname-for.cc#L95. [1] https://github.com/alja/OssTests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-948203246
https://github.com/root-project/root/issues/7718#issuecomment-948203246:46,Usability,simpl,simple,46,@pcanal. If it is any help I reference here a simple cmssw module [1]. When compile it with FWLite (built with root master) you can reproduce the crash. Below is the binary from the test module and the sample file:; test-bname-for.exe /eos/cms/store/group/phys_muon/dmytro/tmp/BPH-RunIIAutumn18DRPremix-00015.root. Crash is the line https://github.com/alja/OssTests/blob/root-test/BranchAddr/bin/test-bname-for.cc#L95. [1] https://github.com/alja/OssTests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-948203246
https://github.com/root-project/root/issues/7740#issuecomment-810160931:108,Deployability,integrat,integration,108,What about including [this](https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html#numerical-integration) in the reference guide on [this page](https://root.cern/doc/master/group__Integration.html) ?. @lmoneta what do you think ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-810160931
https://github.com/root-project/root/issues/7740#issuecomment-810160931:108,Integrability,integrat,integration,108,What about including [this](https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html#numerical-integration) in the reference guide on [this page](https://root.cern/doc/master/group__Integration.html) ?. @lmoneta what do you think ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-810160931
https://github.com/root-project/root/issues/7740#issuecomment-810160931:59,Usability,guid,guides,59,What about including [this](https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html#numerical-integration) in the reference guide on [this page](https://root.cern/doc/master/group__Integration.html) ?. @lmoneta what do you think ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-810160931
https://github.com/root-project/root/issues/7740#issuecomment-810160931:72,Usability,guid,guide,72,What about including [this](https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html#numerical-integration) in the reference guide on [this page](https://root.cern/doc/master/group__Integration.html) ?. @lmoneta what do you think ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-810160931
https://github.com/root-project/root/issues/7740#issuecomment-810160931:138,Usability,guid,guide,138,What about including [this](https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html#numerical-integration) in the reference guide on [this page](https://root.cern/doc/master/group__Integration.html) ?. @lmoneta what do you think ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-810160931
https://github.com/root-project/root/issues/7740#issuecomment-810332566:148,Deployability,integrat,integration,148,"Hi, ; There is some documentation in the ROOT Users guide, see ; https://root.cern.ch/root/htmldoc/guides/users-guide/ROOTUsersGuide.html#numerical-integration. Maybe it is not too visible, and I agree @couet we should probably include in the DOxygen description of the Integration classes. ; We are also missing a tutorial on the INtegratorMultiDim and we should add one before closing this issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-810332566
https://github.com/root-project/root/issues/7740#issuecomment-810332566:148,Integrability,integrat,integration,148,"Hi, ; There is some documentation in the ROOT Users guide, see ; https://root.cern.ch/root/htmldoc/guides/users-guide/ROOTUsersGuide.html#numerical-integration. Maybe it is not too visible, and I agree @couet we should probably include in the DOxygen description of the Integration classes. ; We are also missing a tutorial on the INtegratorMultiDim and we should add one before closing this issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-810332566
https://github.com/root-project/root/issues/7740#issuecomment-810332566:52,Usability,guid,guide,52,"Hi, ; There is some documentation in the ROOT Users guide, see ; https://root.cern.ch/root/htmldoc/guides/users-guide/ROOTUsersGuide.html#numerical-integration. Maybe it is not too visible, and I agree @couet we should probably include in the DOxygen description of the Integration classes. ; We are also missing a tutorial on the INtegratorMultiDim and we should add one before closing this issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-810332566
https://github.com/root-project/root/issues/7740#issuecomment-810332566:99,Usability,guid,guides,99,"Hi, ; There is some documentation in the ROOT Users guide, see ; https://root.cern.ch/root/htmldoc/guides/users-guide/ROOTUsersGuide.html#numerical-integration. Maybe it is not too visible, and I agree @couet we should probably include in the DOxygen description of the Integration classes. ; We are also missing a tutorial on the INtegratorMultiDim and we should add one before closing this issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-810332566
https://github.com/root-project/root/issues/7740#issuecomment-810332566:112,Usability,guid,guide,112,"Hi, ; There is some documentation in the ROOT Users guide, see ; https://root.cern.ch/root/htmldoc/guides/users-guide/ROOTUsersGuide.html#numerical-integration. Maybe it is not too visible, and I agree @couet we should probably include in the DOxygen description of the Integration classes. ; We are also missing a tutorial on the INtegratorMultiDim and we should add one before closing this issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-810332566
https://github.com/root-project/root/issues/7740#issuecomment-1943742763:141,Deployability,integrat,integration,141,"Hi @lmoneta @couet . I checked the [current documentation](https://root.cern.ch/root/htmldoc/guides/users-guide/MathLibraries.html#numerical-integration), and the point `15.8.3.1 Using ROOT::Math::IntegratorMultiDim` actually shows an example of the IntegratorMultiDim and the usage of different algorithms. . There is a typo, probably caused by copypasting: `Here is a code example on how to use the ROOT::Math::IntegratorOneDim class`, actually it is an example of `IntegratorMultiDim`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-1943742763
https://github.com/root-project/root/issues/7740#issuecomment-1943742763:141,Integrability,integrat,integration,141,"Hi @lmoneta @couet . I checked the [current documentation](https://root.cern.ch/root/htmldoc/guides/users-guide/MathLibraries.html#numerical-integration), and the point `15.8.3.1 Using ROOT::Math::IntegratorMultiDim` actually shows an example of the IntegratorMultiDim and the usage of different algorithms. . There is a typo, probably caused by copypasting: `Here is a code example on how to use the ROOT::Math::IntegratorOneDim class`, actually it is an example of `IntegratorMultiDim`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-1943742763
https://github.com/root-project/root/issues/7740#issuecomment-1943742763:93,Usability,guid,guides,93,"Hi @lmoneta @couet . I checked the [current documentation](https://root.cern.ch/root/htmldoc/guides/users-guide/MathLibraries.html#numerical-integration), and the point `15.8.3.1 Using ROOT::Math::IntegratorMultiDim` actually shows an example of the IntegratorMultiDim and the usage of different algorithms. . There is a typo, probably caused by copypasting: `Here is a code example on how to use the ROOT::Math::IntegratorOneDim class`, actually it is an example of `IntegratorMultiDim`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-1943742763
https://github.com/root-project/root/issues/7740#issuecomment-1943742763:106,Usability,guid,guide,106,"Hi @lmoneta @couet . I checked the [current documentation](https://root.cern.ch/root/htmldoc/guides/users-guide/MathLibraries.html#numerical-integration), and the point `15.8.3.1 Using ROOT::Math::IntegratorMultiDim` actually shows an example of the IntegratorMultiDim and the usage of different algorithms. . There is a typo, probably caused by copypasting: `Here is a code example on how to use the ROOT::Math::IntegratorOneDim class`, actually it is an example of `IntegratorMultiDim`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-1943742763
https://github.com/root-project/root/pull/7753#issuecomment-831297263:547,Deployability,update,updates,547,"Hi @etejedor, thanks for your comments!. Enric and I had a meeting that resulted in the following action items for me:. 1. Remove the `test_` prefix from the roofit pythonization test files; 2. Come up with a mechanism that uses all the functions defined in the RooFit pythonization proxy classes for the pythonization, not excluding magic functions (which are often pythonized); 3. Check if the pythonization abstraction in this PR also allows for pythonizations with the C API; 4. Introduce Doxygen documentation for RooFit pyROOT. In my recent updates, I addressed bullet points 1, 2, and 3. 1. Was trivial to address; 2. I use now a combination of `mro()` and `funcname in klass.__dict__` to check if a new member function was defined in the corresponding Python class or any of it's base classes (inspired by [this stackoverflow post](https://stackoverflow.com/questions/5253397/check-if-class-attribute-was-defined-or-derived-in-given-class)); 3. I made a relatively [simple test](https://github.com/root-project/root/commit/96d76be74f347eb36bd4d785d6689efebb17408b) to verify that if one updates the Python classes with the C API, this is propagated as a pythonization to the correct RooFit class.; Indeed, if you make the changes to the code in my test branch, then this code gives the expected behaviour (using pythonized version of `__getattr__`:; ```Python; import ROOT; a = ROOT.RooRealVar(""x"", ""x"", 0, 0, 10.); getattr(a, ""Hello""); ```. 4. For the documentation, I still have to do that later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7753#issuecomment-831297263
https://github.com/root-project/root/pull/7753#issuecomment-831297263:1095,Deployability,update,updates,1095,"Hi @etejedor, thanks for your comments!. Enric and I had a meeting that resulted in the following action items for me:. 1. Remove the `test_` prefix from the roofit pythonization test files; 2. Come up with a mechanism that uses all the functions defined in the RooFit pythonization proxy classes for the pythonization, not excluding magic functions (which are often pythonized); 3. Check if the pythonization abstraction in this PR also allows for pythonizations with the C API; 4. Introduce Doxygen documentation for RooFit pyROOT. In my recent updates, I addressed bullet points 1, 2, and 3. 1. Was trivial to address; 2. I use now a combination of `mro()` and `funcname in klass.__dict__` to check if a new member function was defined in the corresponding Python class or any of it's base classes (inspired by [this stackoverflow post](https://stackoverflow.com/questions/5253397/check-if-class-attribute-was-defined-or-derived-in-given-class)); 3. I made a relatively [simple test](https://github.com/root-project/root/commit/96d76be74f347eb36bd4d785d6689efebb17408b) to verify that if one updates the Python classes with the C API, this is propagated as a pythonization to the correct RooFit class.; Indeed, if you make the changes to the code in my test branch, then this code gives the expected behaviour (using pythonized version of `__getattr__`:; ```Python; import ROOT; a = ROOT.RooRealVar(""x"", ""x"", 0, 0, 10.); getattr(a, ""Hello""); ```. 4. For the documentation, I still have to do that later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7753#issuecomment-831297263
https://github.com/root-project/root/pull/7753#issuecomment-831297263:179,Testability,test,test,179,"Hi @etejedor, thanks for your comments!. Enric and I had a meeting that resulted in the following action items for me:. 1. Remove the `test_` prefix from the roofit pythonization test files; 2. Come up with a mechanism that uses all the functions defined in the RooFit pythonization proxy classes for the pythonization, not excluding magic functions (which are often pythonized); 3. Check if the pythonization abstraction in this PR also allows for pythonizations with the C API; 4. Introduce Doxygen documentation for RooFit pyROOT. In my recent updates, I addressed bullet points 1, 2, and 3. 1. Was trivial to address; 2. I use now a combination of `mro()` and `funcname in klass.__dict__` to check if a new member function was defined in the corresponding Python class or any of it's base classes (inspired by [this stackoverflow post](https://stackoverflow.com/questions/5253397/check-if-class-attribute-was-defined-or-derived-in-given-class)); 3. I made a relatively [simple test](https://github.com/root-project/root/commit/96d76be74f347eb36bd4d785d6689efebb17408b) to verify that if one updates the Python classes with the C API, this is propagated as a pythonization to the correct RooFit class.; Indeed, if you make the changes to the code in my test branch, then this code gives the expected behaviour (using pythonized version of `__getattr__`:; ```Python; import ROOT; a = ROOT.RooRealVar(""x"", ""x"", 0, 0, 10.); getattr(a, ""Hello""); ```. 4. For the documentation, I still have to do that later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7753#issuecomment-831297263
https://github.com/root-project/root/pull/7753#issuecomment-831297263:981,Testability,test,test,981,"Hi @etejedor, thanks for your comments!. Enric and I had a meeting that resulted in the following action items for me:. 1. Remove the `test_` prefix from the roofit pythonization test files; 2. Come up with a mechanism that uses all the functions defined in the RooFit pythonization proxy classes for the pythonization, not excluding magic functions (which are often pythonized); 3. Check if the pythonization abstraction in this PR also allows for pythonizations with the C API; 4. Introduce Doxygen documentation for RooFit pyROOT. In my recent updates, I addressed bullet points 1, 2, and 3. 1. Was trivial to address; 2. I use now a combination of `mro()` and `funcname in klass.__dict__` to check if a new member function was defined in the corresponding Python class or any of it's base classes (inspired by [this stackoverflow post](https://stackoverflow.com/questions/5253397/check-if-class-attribute-was-defined-or-derived-in-given-class)); 3. I made a relatively [simple test](https://github.com/root-project/root/commit/96d76be74f347eb36bd4d785d6689efebb17408b) to verify that if one updates the Python classes with the C API, this is propagated as a pythonization to the correct RooFit class.; Indeed, if you make the changes to the code in my test branch, then this code gives the expected behaviour (using pythonized version of `__getattr__`:; ```Python; import ROOT; a = ROOT.RooRealVar(""x"", ""x"", 0, 0, 10.); getattr(a, ""Hello""); ```. 4. For the documentation, I still have to do that later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7753#issuecomment-831297263
https://github.com/root-project/root/pull/7753#issuecomment-831297263:1256,Testability,test,test,1256,"Hi @etejedor, thanks for your comments!. Enric and I had a meeting that resulted in the following action items for me:. 1. Remove the `test_` prefix from the roofit pythonization test files; 2. Come up with a mechanism that uses all the functions defined in the RooFit pythonization proxy classes for the pythonization, not excluding magic functions (which are often pythonized); 3. Check if the pythonization abstraction in this PR also allows for pythonizations with the C API; 4. Introduce Doxygen documentation for RooFit pyROOT. In my recent updates, I addressed bullet points 1, 2, and 3. 1. Was trivial to address; 2. I use now a combination of `mro()` and `funcname in klass.__dict__` to check if a new member function was defined in the corresponding Python class or any of it's base classes (inspired by [this stackoverflow post](https://stackoverflow.com/questions/5253397/check-if-class-attribute-was-defined-or-derived-in-given-class)); 3. I made a relatively [simple test](https://github.com/root-project/root/commit/96d76be74f347eb36bd4d785d6689efebb17408b) to verify that if one updates the Python classes with the C API, this is propagated as a pythonization to the correct RooFit class.; Indeed, if you make the changes to the code in my test branch, then this code gives the expected behaviour (using pythonized version of `__getattr__`:; ```Python; import ROOT; a = ROOT.RooRealVar(""x"", ""x"", 0, 0, 10.); getattr(a, ""Hello""); ```. 4. For the documentation, I still have to do that later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7753#issuecomment-831297263
https://github.com/root-project/root/pull/7753#issuecomment-831297263:974,Usability,simpl,simple,974,"Hi @etejedor, thanks for your comments!. Enric and I had a meeting that resulted in the following action items for me:. 1. Remove the `test_` prefix from the roofit pythonization test files; 2. Come up with a mechanism that uses all the functions defined in the RooFit pythonization proxy classes for the pythonization, not excluding magic functions (which are often pythonized); 3. Check if the pythonization abstraction in this PR also allows for pythonizations with the C API; 4. Introduce Doxygen documentation for RooFit pyROOT. In my recent updates, I addressed bullet points 1, 2, and 3. 1. Was trivial to address; 2. I use now a combination of `mro()` and `funcname in klass.__dict__` to check if a new member function was defined in the corresponding Python class or any of it's base classes (inspired by [this stackoverflow post](https://stackoverflow.com/questions/5253397/check-if-class-attribute-was-defined-or-derived-in-given-class)); 3. I made a relatively [simple test](https://github.com/root-project/root/commit/96d76be74f347eb36bd4d785d6689efebb17408b) to verify that if one updates the Python classes with the C API, this is propagated as a pythonization to the correct RooFit class.; Indeed, if you make the changes to the code in my test branch, then this code gives the expected behaviour (using pythonized version of `__getattr__`:; ```Python; import ROOT; a = ROOT.RooRealVar(""x"", ""x"", 0, 0, 10.); getattr(a, ""Hello""); ```. 4. For the documentation, I still have to do that later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7753#issuecomment-831297263
https://github.com/root-project/root/issues/7754#issuecomment-966525290:882,Performance,load,load,882,"> probably due to filtering and skimming using a software that has the new persistency. CloneTree currently can only handle schema evolution if the 'fast' option is selected. For slow cloning it does not (yet?) deal well with the fact that the on-file and in-memory representation does not match (the reading part is 'sorta' fine but the writing part is confused because the cloned branches are (for now) the exact same as the input and thus we are now in the case were we attempt to write in a different format than the one in memory. The ""Info"" above are clear/exact that some data is lost because those field are no longer in memory (but they still have a branch for them on the output, so behavior will be strange). I am unclear why this leads to the behavior I have seen/reported but it might be linked. Thanks to your new file (that I can clone to a smaller if I make sure to load none of the pluto libraries), I seem to be back on track. thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7754#issuecomment-966525290
https://github.com/root-project/root/issues/7754#issuecomment-966525290:557,Usability,clear,clear,557,"> probably due to filtering and skimming using a software that has the new persistency. CloneTree currently can only handle schema evolution if the 'fast' option is selected. For slow cloning it does not (yet?) deal well with the fact that the on-file and in-memory representation does not match (the reading part is 'sorta' fine but the writing part is confused because the cloned branches are (for now) the exact same as the input and thus we are now in the case were we attempt to write in a different format than the one in memory. The ""Info"" above are clear/exact that some data is lost because those field are no longer in memory (but they still have a branch for them on the output, so behavior will be strange). I am unclear why this leads to the behavior I have seen/reported but it might be linked. Thanks to your new file (that I can clone to a smaller if I make sure to load none of the pluto libraries), I seem to be back on track. thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7754#issuecomment-966525290
https://github.com/root-project/root/pull/7757#issuecomment-813881052:218,Availability,ping,ping,218,"@vgvassilev In theory, everybody with commit access can review and approve patches. In practice Lang's commits didn't touch the instruction selection, and I'd really prefer to get feedback from an expert on this. I'll ping the patch probably tomorrow, people might have been off last week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7757#issuecomment-813881052
https://github.com/root-project/root/pull/7757#issuecomment-813881052:75,Deployability,patch,patches,75,"@vgvassilev In theory, everybody with commit access can review and approve patches. In practice Lang's commits didn't touch the instruction selection, and I'd really prefer to get feedback from an expert on this. I'll ping the patch probably tomorrow, people might have been off last week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7757#issuecomment-813881052
https://github.com/root-project/root/pull/7757#issuecomment-813881052:227,Deployability,patch,patch,227,"@vgvassilev In theory, everybody with commit access can review and approve patches. In practice Lang's commits didn't touch the instruction selection, and I'd really prefer to get feedback from an expert on this. I'll ping the patch probably tomorrow, people might have been off last week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7757#issuecomment-813881052
https://github.com/root-project/root/pull/7757#issuecomment-813881052:45,Security,access,access,45,"@vgvassilev In theory, everybody with commit access can review and approve patches. In practice Lang's commits didn't touch the instruction selection, and I'd really prefer to get feedback from an expert on this. I'll ping the patch probably tomorrow, people might have been off last week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7757#issuecomment-813881052
https://github.com/root-project/root/pull/7757#issuecomment-813881052:180,Usability,feedback,feedback,180,"@vgvassilev In theory, everybody with commit access can review and approve patches. In practice Lang's commits didn't touch the instruction selection, and I'd really prefer to get feedback from an expert on this. I'll ping the patch probably tomorrow, people might have been off last week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7757#issuecomment-813881052
https://github.com/root-project/root/pull/7766#issuecomment-814066020:193,Usability,feedback,feedback,193,"Hi @guitargeek , I have incorporated the comments that you had made earlier. it is unclear to me why why one of the travis CI build fails, please review the current version and provide us your feedback and suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7766#issuecomment-814066020
https://github.com/root-project/root/pull/7771#issuecomment-811770636:234,Usability,feedback,feedback,234,"## DeepCode failed to analyze this pull request; Something went wrong despite trying multiple times, sorry about that.; Please comment this pull request with ""Retry DeepCode"" to manually retry, or [contact us](https://www.deepcode.ai/feedback?select=4&utm_source=gh_review) so that a human can look into the issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7771#issuecomment-811770636
https://github.com/root-project/root/pull/7776#issuecomment-823939722:360,Performance,perform,performs,360,"Ha, that was again a nice rabbit hole. Here's a summary of what I found:; 1. We'll never run into problems with GCC's `libstdc++` since [version 4.5](https://gcc.gnu.org/gcc-4.5/changes.html): ""The default behavior for comparing typeinfo names has changed, so in `<typeinfo>`, `__GXX_MERGED_TYPEINFO_NAMES` now defaults to zero"", which means that `operator==` performs the string comparison in all cases.; 2. `libc++` by now has three different implementations: https://github.com/llvm/llvm-project/blob/066b8f2fc6d584635a017a0a15494ce4460744e3/libcxx/include/typeinfo#L120-L169 For all platforms except Windows and Apple M1, the library ""assume[s] the Itanium C++ ABI and use[s] the Unique implementation"". This may be fine for compiled programs where the linker can unify the `type_info`s, but not if the JIT emits a new copy. I have yet to find an example where this can go wrong, it would be great to have a test that fails if somebody attempts to ""simplify"" things. For this particular method however, the Itanium ABI mandates that the `std::type_info` objects of the checked types live in the run-time support library: https://itanium-cxx-abi.github.io/cxx-abi/abi.html#rtti-emission With exactly one object for those types, even `operator==` cannot mess up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-823939722
https://github.com/root-project/root/pull/7776#issuecomment-823939722:912,Testability,test,test,912,"Ha, that was again a nice rabbit hole. Here's a summary of what I found:; 1. We'll never run into problems with GCC's `libstdc++` since [version 4.5](https://gcc.gnu.org/gcc-4.5/changes.html): ""The default behavior for comparing typeinfo names has changed, so in `<typeinfo>`, `__GXX_MERGED_TYPEINFO_NAMES` now defaults to zero"", which means that `operator==` performs the string comparison in all cases.; 2. `libc++` by now has three different implementations: https://github.com/llvm/llvm-project/blob/066b8f2fc6d584635a017a0a15494ce4460744e3/libcxx/include/typeinfo#L120-L169 For all platforms except Windows and Apple M1, the library ""assume[s] the Itanium C++ ABI and use[s] the Unique implementation"". This may be fine for compiled programs where the linker can unify the `type_info`s, but not if the JIT emits a new copy. I have yet to find an example where this can go wrong, it would be great to have a test that fails if somebody attempts to ""simplify"" things. For this particular method however, the Itanium ABI mandates that the `std::type_info` objects of the checked types live in the run-time support library: https://itanium-cxx-abi.github.io/cxx-abi/abi.html#rtti-emission With exactly one object for those types, even `operator==` cannot mess up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-823939722
https://github.com/root-project/root/pull/7776#issuecomment-823939722:953,Usability,simpl,simplify,953,"Ha, that was again a nice rabbit hole. Here's a summary of what I found:; 1. We'll never run into problems with GCC's `libstdc++` since [version 4.5](https://gcc.gnu.org/gcc-4.5/changes.html): ""The default behavior for comparing typeinfo names has changed, so in `<typeinfo>`, `__GXX_MERGED_TYPEINFO_NAMES` now defaults to zero"", which means that `operator==` performs the string comparison in all cases.; 2. `libc++` by now has three different implementations: https://github.com/llvm/llvm-project/blob/066b8f2fc6d584635a017a0a15494ce4460744e3/libcxx/include/typeinfo#L120-L169 For all platforms except Windows and Apple M1, the library ""assume[s] the Itanium C++ ABI and use[s] the Unique implementation"". This may be fine for compiled programs where the linker can unify the `type_info`s, but not if the JIT emits a new copy. I have yet to find an example where this can go wrong, it would be great to have a test that fails if somebody attempts to ""simplify"" things. For this particular method however, the Itanium ABI mandates that the `std::type_info` objects of the checked types live in the run-time support library: https://itanium-cxx-abi.github.io/cxx-abi/abi.html#rtti-emission With exactly one object for those types, even `operator==` cannot mess up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-823939722
https://github.com/root-project/root/pull/7776#issuecomment-831409669:80,Testability,test,test,80,> Approving. Could you still open a new PR (probably on roottest) to explicitly test the multi library setups for both simple types and complex type. Thanks. Once more: There is nothing to test for complex types wrt `TDataType::GetType` - it's not handled anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-831409669
https://github.com/root-project/root/pull/7776#issuecomment-831409669:189,Testability,test,test,189,> Approving. Could you still open a new PR (probably on roottest) to explicitly test the multi library setups for both simple types and complex type. Thanks. Once more: There is nothing to test for complex types wrt `TDataType::GetType` - it's not handled anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-831409669
https://github.com/root-project/root/pull/7776#issuecomment-831409669:119,Usability,simpl,simple,119,> Approving. Could you still open a new PR (probably on roottest) to explicitly test the multi library setups for both simple types and complex type. Thanks. Once more: There is nothing to test for complex types wrt `TDataType::GetType` - it's not handled anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-831409669
https://github.com/root-project/root/issues/7781#issuecomment-813669671:45,Deployability,patch,patch,45,"Indeed, we don't guarantee ABI stability for patch releases. Most people cope (it has never been a huge issue) and it gives us the freedom to keep the LHC experiments working at a reasonable cost ;-) Patch level for us simply means ""it does not have new features, only bug fixes"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7781#issuecomment-813669671
https://github.com/root-project/root/issues/7781#issuecomment-813669671:51,Deployability,release,releases,51,"Indeed, we don't guarantee ABI stability for patch releases. Most people cope (it has never been a huge issue) and it gives us the freedom to keep the LHC experiments working at a reasonable cost ;-) Patch level for us simply means ""it does not have new features, only bug fixes"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7781#issuecomment-813669671
https://github.com/root-project/root/issues/7781#issuecomment-813669671:219,Usability,simpl,simply,219,"Indeed, we don't guarantee ABI stability for patch releases. Most people cope (it has never been a huge issue) and it gives us the freedom to keep the LHC experiments working at a reasonable cost ;-) Patch level for us simply means ""it does not have new features, only bug fixes"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7781#issuecomment-813669671
https://github.com/root-project/root/pull/7785#issuecomment-816500613:8688,Availability,error,error,8688,"tes Compression= 1.00 *; *............................................................................*; ```; Result from rdf.Display()->Print():; ```; y | treefriend.y | ; 0 | 0 | ; 1 | 1 | ; 2 | 2 | ; 0 | 0 | ; 1 | 1 | ; 2 | 2 | ; 0 | 0 | ; 1 | 1 | ; 2 | 2 | ; ```. Everything still works, but we already see something missing in `TTree::Print`: only the information of the parent chain is printed!. ## Sub-case 2.2; If we don't give a name to the friend chain, then we're in a strange situation. Somehow magically I can do a Scan(y:treefriend1.y) that returns; Result from TTree:Scan(""y:treefriend1.y""):; ```; ************************************; * Row * y * treefrien *; ************************************; * 0 * 0 * 0 *; * 1 * 1 * 1 *; * 2 * 2 * 2 *; * 3 * 0 * 0 *; * 4 * 1 * 1 *; * 5 * 2 * 2 *; * 6 * 0 * 0 *; * 7 * 1 * 1 *; * 8 * 2 * 2 *; ************************************; ```; But a Scan(y:treefriend[23].y) returns the same error both times, still printing an empty ""treefrien"" column; ```; Error in <TTreeFormula::Compile>: Bad numerical expression : ""treefriend2.y""; ************************************; * Row * y * treefrien *; ************************************; * 0 * 0 * *; * 1 * 1 * *; * 2 * 2 * *; * 3 * 0 * *; * 4 * 1 * *; * 5 * 2 * *; * 6 * 0 * *; * 7 * 1 * *; * 8 * 2 * *; ************************************; ```; A very weird behaviour imho. Fortunately RDataFrame returns an error in any case if the friend chain does not have a name, which Enrico discussed many times in the comments and I now fully agree it's the best behaviour possible.; ```; terminate called after throwing an instance of 'std::runtime_error'; what(): Unknown column: treefriend.y; ```. # Case 3; Code to create the trees; ```cpp; void write_parent_tree(std::string_view filename, std::string_view treename); {; int x{};. TFile file{filename.data(), ""recreate""};; TTree tree{treename.data(), ""test friend trees""};; tree.Branch(""x"", &x, ""x/I"");. for (int i = 0; i < 9; i++); {; x = i;; tree.Fill(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:9157,Availability,error,error,9157," in a strange situation. Somehow magically I can do a Scan(y:treefriend1.y) that returns; Result from TTree:Scan(""y:treefriend1.y""):; ```; ************************************; * Row * y * treefrien *; ************************************; * 0 * 0 * 0 *; * 1 * 1 * 1 *; * 2 * 2 * 2 *; * 3 * 0 * 0 *; * 4 * 1 * 1 *; * 5 * 2 * 2 *; * 6 * 0 * 0 *; * 7 * 1 * 1 *; * 8 * 2 * 2 *; ************************************; ```; But a Scan(y:treefriend[23].y) returns the same error both times, still printing an empty ""treefrien"" column; ```; Error in <TTreeFormula::Compile>: Bad numerical expression : ""treefriend2.y""; ************************************; * Row * y * treefrien *; ************************************; * 0 * 0 * *; * 1 * 1 * *; * 2 * 2 * *; * 3 * 0 * *; * 4 * 1 * *; * 5 * 2 * *; * 6 * 0 * *; * 7 * 1 * *; * 8 * 2 * *; ************************************; ```; A very weird behaviour imho. Fortunately RDataFrame returns an error in any case if the friend chain does not have a name, which Enrico discussed many times in the comments and I now fully agree it's the best behaviour possible.; ```; terminate called after throwing an instance of 'std::runtime_error'; what(): Unknown column: treefriend.y; ```. # Case 3; Code to create the trees; ```cpp; void write_parent_tree(std::string_view filename, std::string_view treename); {; int x{};. TFile file{filename.data(), ""recreate""};; TTree tree{treename.data(), ""test friend trees""};; tree.Branch(""x"", &x, ""x/I"");. for (int i = 0; i < 9; i++); {; x = i;; tree.Fill();; }; tree.Write();; }. void write_friend_tree(std::string_view filename, std::string_view treename); {; int y{};. TFile file{filename.data(), ""recreate""};; TTree tree{treename.data(), ""test friend trees""};; tree.Branch(""y"", &y, ""y/I"");. for (int i = 0; i < 3; i++); {; y = i;; tree.Fill();; }; tree.Write();; }. void write_tree_and_friends(); {; // Write parent tree to disk.; write_parent_tree(""treeparent.root"", ""treeparent"");; // Write friend trees to disk.; for (int ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:14791,Availability,error,error,14791,"**************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 556 bytes File Size = 87 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ```. ## Sub-case 3.1; If we call the friend variable ""treefriend.y"", we get; Result from TTree:Scan(""x:treefriend.y""):; ```; Error in <TTreeFormula::Compile>: Bad numerical expression : ""treefriend.y""; ************************************; * Row * x * treefrien *; ************************************; * 0 * 0 * *; * 1 * 1 * *; * 2 * 2 * *; * 3 * 3 * *; * 4 * 4 * *; * 5 * 5 * *; * 6 * 6 * *; * 7 * 7 * *; * 8 * 8 * *; ************************************; ```; Result from rdf.Display()->Print():; ```; Error in <TTreeReaderValueBase::CreateProxy()>: The branch treefriend.y is contained in a Friend TTree that is not directly attached to the main.; This is not yet supported by TTreeReader.; terminate called after throwing an instance of 'std::runtime_error'; what(): An error was encountered while processing the data. TTreeReader status code is: 6; Aborted (core dumped); ```; Which are both somewhat unexpected since the friend chain has a name and it should be easy to distinguish its entries from the main tree. I do like better the RDataFrame (TTreeReader) error here though since it gives me somewhat of an hint that I need to do something about my friend chain. ## Sub-case 3.2; Somehow inconsistently, calling the friend variable just ""y"" works for TTree::Scan; Result from TTree:Scan(""x:y""):; ```; ************************************; * Row * x * y *; ************************************; * 0 * 0 * 0 *; * 1 * 1 * 1 *; * 2 * 2 * 2 *; * 3 * 3 * 0 *; * 4 * 4 * 1 *; * 5 * 5 * 2 *; * 6 * 6 * 0 *; * 7 * 7 * 1 *; * 8 * 8 * 2 *; ************************************; ```; But fortunately RDataFrame(TTreeReader) still gives the same error; Result from rdf.Display()->Print():; ```; Error in <TTreeReaderValueBase::CreateProxy()>: The branch treefr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:15083,Availability,error,error,15083,"we get; Result from TTree:Scan(""x:treefriend.y""):; ```; Error in <TTreeFormula::Compile>: Bad numerical expression : ""treefriend.y""; ************************************; * Row * x * treefrien *; ************************************; * 0 * 0 * *; * 1 * 1 * *; * 2 * 2 * *; * 3 * 3 * *; * 4 * 4 * *; * 5 * 5 * *; * 6 * 6 * *; * 7 * 7 * *; * 8 * 8 * *; ************************************; ```; Result from rdf.Display()->Print():; ```; Error in <TTreeReaderValueBase::CreateProxy()>: The branch treefriend.y is contained in a Friend TTree that is not directly attached to the main.; This is not yet supported by TTreeReader.; terminate called after throwing an instance of 'std::runtime_error'; what(): An error was encountered while processing the data. TTreeReader status code is: 6; Aborted (core dumped); ```; Which are both somewhat unexpected since the friend chain has a name and it should be easy to distinguish its entries from the main tree. I do like better the RDataFrame (TTreeReader) error here though since it gives me somewhat of an hint that I need to do something about my friend chain. ## Sub-case 3.2; Somehow inconsistently, calling the friend variable just ""y"" works for TTree::Scan; Result from TTree:Scan(""x:y""):; ```; ************************************; * Row * x * y *; ************************************; * 0 * 0 * 0 *; * 1 * 1 * 1 *; * 2 * 2 * 2 *; * 3 * 3 * 0 *; * 4 * 4 * 1 *; * 5 * 5 * 2 *; * 6 * 6 * 0 *; * 7 * 7 * 1 *; * 8 * 8 * 2 *; ************************************; ```; But fortunately RDataFrame(TTreeReader) still gives the same error; Result from rdf.Display()->Print():; ```; Error in <TTreeReaderValueBase::CreateProxy()>: The branch treefriend.y is contained in a Friend TTree that is not directly attached to the main.; This is not yet supported by TTreeReader.; terminate called after throwing an instance of 'std::runtime_error'; what(): An error was encountered while processing the data. TTreeReader status code is: 6; Aborted (core dumped); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:15660,Availability,error,error,15660,"we get; Result from TTree:Scan(""x:treefriend.y""):; ```; Error in <TTreeFormula::Compile>: Bad numerical expression : ""treefriend.y""; ************************************; * Row * x * treefrien *; ************************************; * 0 * 0 * *; * 1 * 1 * *; * 2 * 2 * *; * 3 * 3 * *; * 4 * 4 * *; * 5 * 5 * *; * 6 * 6 * *; * 7 * 7 * *; * 8 * 8 * *; ************************************; ```; Result from rdf.Display()->Print():; ```; Error in <TTreeReaderValueBase::CreateProxy()>: The branch treefriend.y is contained in a Friend TTree that is not directly attached to the main.; This is not yet supported by TTreeReader.; terminate called after throwing an instance of 'std::runtime_error'; what(): An error was encountered while processing the data. TTreeReader status code is: 6; Aborted (core dumped); ```; Which are both somewhat unexpected since the friend chain has a name and it should be easy to distinguish its entries from the main tree. I do like better the RDataFrame (TTreeReader) error here though since it gives me somewhat of an hint that I need to do something about my friend chain. ## Sub-case 3.2; Somehow inconsistently, calling the friend variable just ""y"" works for TTree::Scan; Result from TTree:Scan(""x:y""):; ```; ************************************; * Row * x * y *; ************************************; * 0 * 0 * 0 *; * 1 * 1 * 1 *; * 2 * 2 * 2 *; * 3 * 3 * 0 *; * 4 * 4 * 1 *; * 5 * 5 * 2 *; * 6 * 6 * 0 *; * 7 * 7 * 1 *; * 8 * 8 * 2 *; ************************************; ```; But fortunately RDataFrame(TTreeReader) still gives the same error; Result from rdf.Display()->Print():; ```; Error in <TTreeReaderValueBase::CreateProxy()>: The branch treefriend.y is contained in a Friend TTree that is not directly attached to the main.; This is not yet supported by TTreeReader.; terminate called after throwing an instance of 'std::runtime_error'; what(): An error was encountered while processing the data. TTreeReader status code is: 6; Aborted (core dumped); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:15979,Availability,error,error,15979,"we get; Result from TTree:Scan(""x:treefriend.y""):; ```; Error in <TTreeFormula::Compile>: Bad numerical expression : ""treefriend.y""; ************************************; * Row * x * treefrien *; ************************************; * 0 * 0 * *; * 1 * 1 * *; * 2 * 2 * *; * 3 * 3 * *; * 4 * 4 * *; * 5 * 5 * *; * 6 * 6 * *; * 7 * 7 * *; * 8 * 8 * *; ************************************; ```; Result from rdf.Display()->Print():; ```; Error in <TTreeReaderValueBase::CreateProxy()>: The branch treefriend.y is contained in a Friend TTree that is not directly attached to the main.; This is not yet supported by TTreeReader.; terminate called after throwing an instance of 'std::runtime_error'; what(): An error was encountered while processing the data. TTreeReader status code is: 6; Aborted (core dumped); ```; Which are both somewhat unexpected since the friend chain has a name and it should be easy to distinguish its entries from the main tree. I do like better the RDataFrame (TTreeReader) error here though since it gives me somewhat of an hint that I need to do something about my friend chain. ## Sub-case 3.2; Somehow inconsistently, calling the friend variable just ""y"" works for TTree::Scan; Result from TTree:Scan(""x:y""):; ```; ************************************; * Row * x * y *; ************************************; * 0 * 0 * 0 *; * 1 * 1 * 1 *; * 2 * 2 * 2 *; * 3 * 3 * 0 *; * 4 * 4 * 1 *; * 5 * 5 * 2 *; * 6 * 6 * 0 *; * 7 * 7 * 1 *; * 8 * 8 * 2 *; ************************************; ```; But fortunately RDataFrame(TTreeReader) still gives the same error; Result from rdf.Display()->Print():; ```; Error in <TTreeReaderValueBase::CreateProxy()>: The branch treefriend.y is contained in a Friend TTree that is not directly attached to the main.; This is not yet supported by TTreeReader.; terminate called after throwing an instance of 'std::runtime_error'; what(): An error was encountered while processing the data. TTreeReader status code is: 6; Aborted (core dumped); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:14060,Modifiability,variab,variable,14060,"***********************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 556 bytes File Size = 87 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ******************************************************************************; *Chain :treefriend: treefriend3.root *; ******************************************************************************; ******************************************************************************; *Tree :treefriend3: test friend trees *; *Entries : 3 : Total = 933 bytes File Size = 471 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 556 bytes File Size = 87 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ```. ## Sub-case 3.1; If we call the friend variable ""treefriend.y"", we get; Result from TTree:Scan(""x:treefriend.y""):; ```; Error in <TTreeFormula::Compile>: Bad numerical expression : ""treefriend.y""; ************************************; * Row * x * treefrien *; ************************************; * 0 * 0 * *; * 1 * 1 * *; * 2 * 2 * *; * 3 * 3 * *; * 4 * 4 * *; * 5 * 5 * *; * 6 * 6 * *; * 7 * 7 * *; * 8 * 8 * *; ************************************; ```; Result from rdf.Display()->Print():; ```; Error in <TTreeReaderValueBase::CreateProxy()>: The branch treefriend.y is contained in a Friend TTree that is not directly attached to the main.; This is not yet supported by TTreeReader.; terminate called after throwing an instance of 'std::runtime_error'; what(): An error was encountered while processing the data. TTreeReader status code is: 6; Aborted (core dumped); ```; Which are both somewhat unexpected since the friend chain has a name and it should be easy to distinguish its entries from the main tree. I do like better the ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:15250,Modifiability,variab,variable,15250,"we get; Result from TTree:Scan(""x:treefriend.y""):; ```; Error in <TTreeFormula::Compile>: Bad numerical expression : ""treefriend.y""; ************************************; * Row * x * treefrien *; ************************************; * 0 * 0 * *; * 1 * 1 * *; * 2 * 2 * *; * 3 * 3 * *; * 4 * 4 * *; * 5 * 5 * *; * 6 * 6 * *; * 7 * 7 * *; * 8 * 8 * *; ************************************; ```; Result from rdf.Display()->Print():; ```; Error in <TTreeReaderValueBase::CreateProxy()>: The branch treefriend.y is contained in a Friend TTree that is not directly attached to the main.; This is not yet supported by TTreeReader.; terminate called after throwing an instance of 'std::runtime_error'; what(): An error was encountered while processing the data. TTreeReader status code is: 6; Aborted (core dumped); ```; Which are both somewhat unexpected since the friend chain has a name and it should be easy to distinguish its entries from the main tree. I do like better the RDataFrame (TTreeReader) error here though since it gives me somewhat of an hint that I need to do something about my friend chain. ## Sub-case 3.2; Somehow inconsistently, calling the friend variable just ""y"" works for TTree::Scan; Result from TTree:Scan(""x:y""):; ```; ************************************; * Row * x * y *; ************************************; * 0 * 0 * 0 *; * 1 * 1 * 1 *; * 2 * 2 * 2 *; * 3 * 3 * 0 *; * 4 * 4 * 1 *; * 5 * 5 * 2 *; * 6 * 6 * 0 *; * 7 * 7 * 1 *; * 8 * 8 * 2 *; ************************************; ```; But fortunately RDataFrame(TTreeReader) still gives the same error; Result from rdf.Display()->Print():; ```; Error in <TTreeReaderValueBase::CreateProxy()>: The branch treefriend.y is contained in a Friend TTree that is not directly attached to the main.; This is not yet supported by TTreeReader.; terminate called after throwing an instance of 'std::runtime_error'; what(): An error was encountered while processing the data. TTreeReader status code is: 6; Aborted (core dumped); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:1519,Testability,test,test,1519,"; | 1 | 1 |; | 2 | 2 |; | 3 | 3 |; | 4 | 4 |; | 5 | 5 |; | 6 | 6 |; | 7 | 7 |; | 8 | 8 |. I can do that through:; 1. Two TTrees, each with 9 entries, each saved to one single file.; 2. Two TChains, each chain has 9 total entries, each chain is made of three files, each file has internally one TTree with 3 entries.; 3. One TTree with 9 entries saved to one file, plus one TChain with 9 total entries, three files each with a TTree with 3 entries. In each scenario I will create the datasets, read the files back, add one of the two datasets as a friend to the other. Finally, I will try to print the columns both with `TTree::Print` and rdf's `Display`. Plus, I will also use `TTree::Scan` to get more information on the internal structure of the tree and its friend. # Case 1; This is the code I use to recreate the scenario. ```cpp; void write_tree(std::string_view filename, std::string_view treename); {; int x{};. TFile file{filename.data(), ""recreate""};; TTree tree{treename.data(), ""test friend trees""};; tree.Branch(""x"", &x, ""x/I"");. for (int i = 0; i < 9; i++); {; x = i;; tree.Fill();; }; tree.Write();; }; ; int main(){; write_tree(""treeparent.root"", ""treeparent"");; write_tree(""treefriend.root"", ""treefriend"");; TFile parentfile{""treeparent.root"", ""read""};; TFile friendfile{""treefriend.root"", ""read""};. std::unique_ptr<TTree> parenttree{parentfile.Get<TTree>(""treeparent"")};; std::unique_ptr<TTree> friendtree{friendfile.Get<TTree>(""treefriend"")};. parenttree->AddFriend(friendtree.get());; parenttree->Scan(""x:treefriend.x"");; parenttree->Print(""all"");. ROOT::RDataFrame rdf{*parenttree};; auto display = rdf.Display("""");; std::cout << ""Result from rdf.Display()->Print():\n"";; display->Print();; }; ```. Result from TTree:Scan(""x:treefriend.x""):; ```; ************************************; * Row * x * treefrien *; ************************************; * 0 * 0 * 0 *; * 1 * 1 * 1 *; * 2 * 2 * 2 *; * 3 * 3 * 3 *; * 4 * 4 * 4 *; * 5 * 5 * 5 *; * 6 * 6 * 6 *; * 7 * 7 * 7 *; * 8 * 8 * 8",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:2712,Testability,test,test,2712,"(""x"", &x, ""x/I"");. for (int i = 0; i < 9; i++); {; x = i;; tree.Fill();; }; tree.Write();; }; ; int main(){; write_tree(""treeparent.root"", ""treeparent"");; write_tree(""treefriend.root"", ""treefriend"");; TFile parentfile{""treeparent.root"", ""read""};; TFile friendfile{""treefriend.root"", ""read""};. std::unique_ptr<TTree> parenttree{parentfile.Get<TTree>(""treeparent"")};; std::unique_ptr<TTree> friendtree{friendfile.Get<TTree>(""treefriend"")};. parenttree->AddFriend(friendtree.get());; parenttree->Scan(""x:treefriend.x"");; parenttree->Print(""all"");. ROOT::RDataFrame rdf{*parenttree};; auto display = rdf.Display("""");; std::cout << ""Result from rdf.Display()->Print():\n"";; display->Print();; }; ```. Result from TTree:Scan(""x:treefriend.x""):; ```; ************************************; * Row * x * treefrien *; ************************************; * 0 * 0 * 0 *; * 1 * 1 * 1 *; * 2 * 2 * 2 *; * 3 * 3 * 3 *; * 4 * 4 * 4 *; * 5 * 5 * 5 *; * 6 * 6 * 6 *; * 7 * 7 * 7 *; * 8 * 8 * 8 *; ************************************; ```; Result from TTree:Print(""all""):; ```; ******************************************************************************; *Tree :treeparent: test friend trees *; *Entries : 9 : Total = 1074 bytes File Size = 494 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :x : x/I *; *Entries : 9 : Total Size= 583 bytes File Size = 110 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ******************************************************************************; *Tree :treefriend: test friend trees *; *Entries : 9 : Total = 958 bytes File Size = 490 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :x : x/I *; *Entries : 9 : Total Size= 583 bytes File Size = 110 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:3220,Testability,test,test,3220,"isplay->Print();; }; ```. Result from TTree:Scan(""x:treefriend.x""):; ```; ************************************; * Row * x * treefrien *; ************************************; * 0 * 0 * 0 *; * 1 * 1 * 1 *; * 2 * 2 * 2 *; * 3 * 3 * 3 *; * 4 * 4 * 4 *; * 5 * 5 * 5 *; * 6 * 6 * 6 *; * 7 * 7 * 7 *; * 8 * 8 * 8 *; ************************************; ```; Result from TTree:Print(""all""):; ```; ******************************************************************************; *Tree :treeparent: test friend trees *; *Entries : 9 : Total = 1074 bytes File Size = 494 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :x : x/I *; *Entries : 9 : Total Size= 583 bytes File Size = 110 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ******************************************************************************; *Tree :treefriend: test friend trees *; *Entries : 9 : Total = 958 bytes File Size = 490 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :x : x/I *; *Entries : 9 : Total Size= 583 bytes File Size = 110 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ```; Result from rdf.Display()->Print():; ```; x | treefriend.x | ; 0 | 0 | ; 1 | 1 | ; 2 | 2 | ; 3 | 3 | ; 4 | 4 | ; 5 | 5 | ; 6 | 6 | ; 7 | 7 | ; 8 | 8 | ; ```; So far so good! Nothing special here, fortunately :smile: . # Case 2; Code; ```cpp. void write_tree(std::string_view filename, std::string_view treename); {; int y{};. TFile file{filename.data(), ""recreate""};; TTree tree{treename.data(), ""test friend trees""};; tree.Branch(""y"", &y, ""y/I"");. for (int i = 0; i < 3; i++); {; y = i;; tree.Fill();; }; tree.Write();; }. void write_chain_and_friends(); {; // Write parent chain to disk.;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:4030,Testability,test,test,4030,"; *............................................................................*; ******************************************************************************; *Tree :treefriend: test friend trees *; *Entries : 9 : Total = 958 bytes File Size = 490 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :x : x/I *; *Entries : 9 : Total Size= 583 bytes File Size = 110 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ```; Result from rdf.Display()->Print():; ```; x | treefriend.x | ; 0 | 0 | ; 1 | 1 | ; 2 | 2 | ; 3 | 3 | ; 4 | 4 | ; 5 | 5 | ; 6 | 6 | ; 7 | 7 | ; 8 | 8 | ; ```; So far so good! Nothing special here, fortunately :smile: . # Case 2; Code; ```cpp. void write_tree(std::string_view filename, std::string_view treename); {; int y{};. TFile file{filename.data(), ""recreate""};; TTree tree{treename.data(), ""test friend trees""};; tree.Branch(""y"", &y, ""y/I"");. for (int i = 0; i < 3; i++); {; y = i;; tree.Fill();; }; tree.Write();; }. void write_chain_and_friends(); {; // Write parent chain to disk.; for (int i = 1; i < 4; i++); {; std::string indexstr = std::to_string(i);; std::string treename{""treeparent""};; std::string filename{treename + indexstr + "".root""};; write_tree(filename, treename);; }; // Write friend chain to disk.; for (int i = 1; i < 4; i++); {; std::string indexstr = std::to_string(i);; std::string treename{""treefriend""};; treename += indexstr;; std::string filename{treename + "".root""};; write_tree(filename, treename);; }; }. int main(){; TChain parentchain{""treeparent""};; parentchain.Add(""treeparent1.root"");; parentchain.Add(""treeparent2.root"");; parentchain.Add(""treeparent3.root"");; // DIFFERENT SCENARIOS IF WE ADD A CHAIN NAME OR NOT, SEE BELOW; TChain friendchain{""treefriend""};; friendchain.Add(""treefriend1.root/treefriend1"");; friendchain.Add(""treefriend2.root/treefriend2"");; fr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:6034,Testability,test,test,6034,"hain.Add(""treefriend2.root/treefriend2"");; friendchain.Add(""treefriend3.root/treefriend3"");; ; parentchain.AddFriend(&friendchain);. parentchain.Scan(""y:treefriend.y"");; parentchain.Print(""all"");. ROOT::RDataFrame rdf{parentchain};; auto display = rdf.Display("""");; display->Print();; }; ```; ## Sub-case 2.1; If we have a name for the friend chain ""treefriend"", then we get; Result from TTree:Scan(""y:treefriend.y""):; ```; ************************************; * Row * y * treefrien *; ************************************; * 0 * 0 * 0 *; * 1 * 1 * 1 *; * 2 * 2 * 2 *; * 3 * 0 * 0 *; * 4 * 1 * 1 *; * 5 * 2 * 2 *; * 6 * 0 * 0 *; * 7 * 1 * 1 *; * 8 * 2 * 2 *; ************************************; ```; Result from TTree:Print(""all""):; ```; ******************************************************************************; *Chain :treeparent: treeparent1.root *; ******************************************************************************; ******************************************************************************; *Tree :treeparent: test friend trees *; *Entries : 3 : Total = 930 bytes File Size = 470 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 555 bytes File Size = 86 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ******************************************************************************; *Chain :treeparent: treeparent2.root *; ******************************************************************************; ******************************************************************************; *Tree :treeparent: test friend trees *; *Entries : 3 : Total = 930 bytes File Size = 470 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 555 bytes File S",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:6740,Testability,test,test,6740,"ult from TTree:Print(""all""):; ```; ******************************************************************************; *Chain :treeparent: treeparent1.root *; ******************************************************************************; ******************************************************************************; *Tree :treeparent: test friend trees *; *Entries : 3 : Total = 930 bytes File Size = 470 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 555 bytes File Size = 86 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ******************************************************************************; *Chain :treeparent: treeparent2.root *; ******************************************************************************; ******************************************************************************; *Tree :treeparent: test friend trees *; *Entries : 3 : Total = 930 bytes File Size = 470 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 555 bytes File Size = 86 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ******************************************************************************; *Chain :treeparent: treeparent3.root *; ******************************************************************************; ******************************************************************************; *Tree :treeparent: test friend trees *; *Entries : 3 : Total = 930 bytes File Size = 470 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 555 bytes File S",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:7446,Testability,test,test,7446,"................................*; ******************************************************************************; *Chain :treeparent: treeparent2.root *; ******************************************************************************; ******************************************************************************; *Tree :treeparent: test friend trees *; *Entries : 3 : Total = 930 bytes File Size = 470 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 555 bytes File Size = 86 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ******************************************************************************; *Chain :treeparent: treeparent3.root *; ******************************************************************************; ******************************************************************************; *Tree :treeparent: test friend trees *; *Entries : 3 : Total = 930 bytes File Size = 470 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 555 bytes File Size = 86 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ```; Result from rdf.Display()->Print():; ```; y | treefriend.y | ; 0 | 0 | ; 1 | 1 | ; 2 | 2 | ; 0 | 0 | ; 1 | 1 | ; 2 | 2 | ; 0 | 0 | ; 1 | 1 | ; 2 | 2 | ; ```. Everything still works, but we already see something missing in `TTree::Print`: only the information of the parent chain is printed!. ## Sub-case 2.2; If we don't give a name to the friend chain, then we're in a strange situation. Somehow magically I can do a Scan(y:treefriend1.y) that returns; Result from TTree:Scan(""y:treefriend1.y""):; ```; ************************************; * Row *",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:9647,Testability,test,test,9647,"efriend[23].y) returns the same error both times, still printing an empty ""treefrien"" column; ```; Error in <TTreeFormula::Compile>: Bad numerical expression : ""treefriend2.y""; ************************************; * Row * y * treefrien *; ************************************; * 0 * 0 * *; * 1 * 1 * *; * 2 * 2 * *; * 3 * 0 * *; * 4 * 1 * *; * 5 * 2 * *; * 6 * 0 * *; * 7 * 1 * *; * 8 * 2 * *; ************************************; ```; A very weird behaviour imho. Fortunately RDataFrame returns an error in any case if the friend chain does not have a name, which Enrico discussed many times in the comments and I now fully agree it's the best behaviour possible.; ```; terminate called after throwing an instance of 'std::runtime_error'; what(): Unknown column: treefriend.y; ```. # Case 3; Code to create the trees; ```cpp; void write_parent_tree(std::string_view filename, std::string_view treename); {; int x{};. TFile file{filename.data(), ""recreate""};; TTree tree{treename.data(), ""test friend trees""};; tree.Branch(""x"", &x, ""x/I"");. for (int i = 0; i < 9; i++); {; x = i;; tree.Fill();; }; tree.Write();; }. void write_friend_tree(std::string_view filename, std::string_view treename); {; int y{};. TFile file{filename.data(), ""recreate""};; TTree tree{treename.data(), ""test friend trees""};; tree.Branch(""y"", &y, ""y/I"");. for (int i = 0; i < 3; i++); {; y = i;; tree.Fill();; }; tree.Write();; }. void write_tree_and_friends(); {; // Write parent tree to disk.; write_parent_tree(""treeparent.root"", ""treeparent"");; // Write friend trees to disk.; for (int i = 1; i < 4; i++); {; std::string indexstr = std::to_string(i);; std::string treename{""treefriend""};; treename += indexstr;; std::string filename{treename + "".root""};; write_friend_tree(filename, treename);; }; }; ```. Main function; ```cpp; int main(){; write_tree_and_friends();. TFile parentfile{""treeparent.root"", ""read""};. std::unique_ptr<TTree> parenttree{parentfile.Get<TTree>(""treeparent"")};. TChain friendchain{""treefriend""}",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:9936,Testability,test,test,9936,"; * 1 * 1 * *; * 2 * 2 * *; * 3 * 0 * *; * 4 * 1 * *; * 5 * 2 * *; * 6 * 0 * *; * 7 * 1 * *; * 8 * 2 * *; ************************************; ```; A very weird behaviour imho. Fortunately RDataFrame returns an error in any case if the friend chain does not have a name, which Enrico discussed many times in the comments and I now fully agree it's the best behaviour possible.; ```; terminate called after throwing an instance of 'std::runtime_error'; what(): Unknown column: treefriend.y; ```. # Case 3; Code to create the trees; ```cpp; void write_parent_tree(std::string_view filename, std::string_view treename); {; int x{};. TFile file{filename.data(), ""recreate""};; TTree tree{treename.data(), ""test friend trees""};; tree.Branch(""x"", &x, ""x/I"");. for (int i = 0; i < 9; i++); {; x = i;; tree.Fill();; }; tree.Write();; }. void write_friend_tree(std::string_view filename, std::string_view treename); {; int y{};. TFile file{filename.data(), ""recreate""};; TTree tree{treename.data(), ""test friend trees""};; tree.Branch(""y"", &y, ""y/I"");. for (int i = 0; i < 3; i++); {; y = i;; tree.Fill();; }; tree.Write();; }. void write_tree_and_friends(); {; // Write parent tree to disk.; write_parent_tree(""treeparent.root"", ""treeparent"");; // Write friend trees to disk.; for (int i = 1; i < 4; i++); {; std::string indexstr = std::to_string(i);; std::string treename{""treefriend""};; treename += indexstr;; std::string filename{treename + "".root""};; write_friend_tree(filename, treename);; }; }; ```. Main function; ```cpp; int main(){; write_tree_and_friends();. TFile parentfile{""treeparent.root"", ""read""};. std::unique_ptr<TTree> parenttree{parentfile.Get<TTree>(""treeparent"")};. TChain friendchain{""treefriend""};; for (int i = 1; i < 4; i++); {; std::string indexstr = std::to_string(i);; std::string treename{""treefriend""};; treename += indexstr;; std::string filename{treename + "".root""};; std::string fullpath{filename + ""/"" + treename};; friendchain.Add(fullpath.c_str());; }; parenttree->AddFrie",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:11486,Testability,test,test,11486,"ain(){; write_tree_and_friends();. TFile parentfile{""treeparent.root"", ""read""};. std::unique_ptr<TTree> parenttree{parentfile.Get<TTree>(""treeparent"")};. TChain friendchain{""treefriend""};; for (int i = 1; i < 4; i++); {; std::string indexstr = std::to_string(i);; std::string treename{""treefriend""};; treename += indexstr;; std::string filename{treename + "".root""};; std::string fullpath{filename + ""/"" + treename};; friendchain.Add(fullpath.c_str());; }; parenttree->AddFriend(&friendchain);; // DIFFERENT SUBCASES ACCORDING TO THE NAME OF THE FRIEND VARIABLE; parenttree->Scan(""x:treefriend.y"");; parenttree->Print(""all"");; ROOT::RDataFrame rdf{*parenttree};; auto display = rdf.Display("""");; display->Print();; }; ```. In this scenario, the only consistent behaviour is given by `TTree::Print(""all"")` that always outputs both info on the parent tree and on the friend chain.; Result from TTree:Print(""all""):; ```; ******************************************************************************; *Tree :treeparent: test friend trees *; *Entries : 9 : Total = 1059 bytes File Size = 494 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :x : x/I *; *Entries : 9 : Total Size= 583 bytes File Size = 110 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ******************************************************************************; *Chain :treefriend: treefriend1.root *; ******************************************************************************; ******************************************************************************; *Tree :treefriend1: test friend trees *; *Entries : 3 : Total = 933 bytes File Size = 470 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 556 bytes File Size = 87 *; *Baskets :",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:12195,Testability,test,test,12195,"play("""");; display->Print();; }; ```. In this scenario, the only consistent behaviour is given by `TTree::Print(""all"")` that always outputs both info on the parent tree and on the friend chain.; Result from TTree:Print(""all""):; ```; ******************************************************************************; *Tree :treeparent: test friend trees *; *Entries : 9 : Total = 1059 bytes File Size = 494 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :x : x/I *; *Entries : 9 : Total Size= 583 bytes File Size = 110 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ******************************************************************************; *Chain :treefriend: treefriend1.root *; ******************************************************************************; ******************************************************************************; *Tree :treefriend1: test friend trees *; *Entries : 3 : Total = 933 bytes File Size = 470 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 556 bytes File Size = 87 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ******************************************************************************; *Chain :treefriend: treefriend2.root *; ******************************************************************************; ******************************************************************************; *Tree :treefriend2: test friend trees *; *Entries : 3 : Total = 933 bytes File Size = 471 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 556 bytes File ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:12902,Testability,test,test,12902,...............................*; ******************************************************************************; *Chain :treefriend: treefriend1.root *; ******************************************************************************; ******************************************************************************; *Tree :treefriend1: test friend trees *; *Entries : 3 : Total = 933 bytes File Size = 470 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 556 bytes File Size = 87 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ******************************************************************************; *Chain :treefriend: treefriend2.root *; ******************************************************************************; ******************************************************************************; *Tree :treefriend2: test friend trees *; *Entries : 3 : Total = 933 bytes File Size = 471 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 556 bytes File Size = 87 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ******************************************************************************; *Chain :treefriend: treefriend3.root *; ******************************************************************************; ******************************************************************************; *Tree :treefriend3: test friend trees *; *Entries : 3 : Total = 933 bytes File Size = 471 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 556 bytes File ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:13609,Testability,test,test,13609,"...............................*; ******************************************************************************; *Chain :treefriend: treefriend2.root *; ******************************************************************************; ******************************************************************************; *Tree :treefriend2: test friend trees *; *Entries : 3 : Total = 933 bytes File Size = 471 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 556 bytes File Size = 87 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ******************************************************************************; *Chain :treefriend: treefriend3.root *; ******************************************************************************; ******************************************************************************; *Tree :treefriend3: test friend trees *; *Entries : 3 : Total = 933 bytes File Size = 471 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :y : y/I *; *Entries : 3 : Total Size= 556 bytes File Size = 87 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; ```. ## Sub-case 3.1; If we call the friend variable ""treefriend.y"", we get; Result from TTree:Scan(""x:treefriend.y""):; ```; Error in <TTreeFormula::Compile>: Bad numerical expression : ""treefriend.y""; ************************************; * Row * x * treefrien *; ************************************; * 0 * 0 * *; * 1 * 1 * *; * 2 * 2 * *; * 3 * 3 * *; * 4 * 4 * *; * 5 * 5 * *; * 6 * 6 * *; * 7 * 7 * *; * 8 * 8 * *; ************************************; ```; Result from rdf.Display()->Print():; ```; Error in <TTreeReaderValueBase::CreateProxy()>: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-816500613:345,Usability,simpl,simple,345,"Alright, thanks for all the details and clarifications. Let me try to bring this PR a conclusion.; The original question was: is it right, at least for the usecases of the function `GetFriendInfo`, to retrieve the name of any friend chain via the following?; ```; const auto *realName = chainFiles->First()->GetName();; ```; Let me try to make (simple) examples of tree/chain friends and how RDataFrame deals with them. Let's say my final goal is to have this dataset. | parent.x | friend.x |; |----------|----------|; | 0 | 0 |; | 1 | 1 |; | 2 | 2 |; | 3 | 3 |; | 4 | 4 |; | 5 | 5 |; | 6 | 6 |; | 7 | 7 |; | 8 | 8 |. I can do that through:; 1. Two TTrees, each with 9 entries, each saved to one single file.; 2. Two TChains, each chain has 9 total entries, each chain is made of three files, each file has internally one TTree with 3 entries.; 3. One TTree with 9 entries saved to one file, plus one TChain with 9 total entries, three files each with a TTree with 3 entries. In each scenario I will create the datasets, read the files back, add one of the two datasets as a friend to the other. Finally, I will try to print the columns both with `TTree::Print` and rdf's `Display`. Plus, I will also use `TTree::Scan` to get more information on the internal structure of the tree and its friend. # Case 1; This is the code I use to recreate the scenario. ```cpp; void write_tree(std::string_view filename, std::string_view treename); {; int x{};. TFile file{filename.data(), ""recreate""};; TTree tree{treename.data(), ""test friend trees""};; tree.Branch(""x"", &x, ""x/I"");. for (int i = 0; i < 9; i++); {; x = i;; tree.Fill();; }; tree.Write();; }; ; int main(){; write_tree(""treeparent.root"", ""treeparent"");; write_tree(""treefriend.root"", ""treefriend"");; TFile parentfile{""treeparent.root"", ""read""};; TFile friendfile{""treefriend.root"", ""read""};. std::unique_ptr<TTree> parenttree{parentfile.Get<TTree>(""treeparent"")};; std::unique_ptr<TTree> friendtree{friendfile.Get<TTree>(""treefriend"")};. parenttree",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613
https://github.com/root-project/root/pull/7785#issuecomment-820202357:78,Usability,learn,learned,78,MASSIVE thanks to @eguiraud and @pcanal for all the suggestions and inputs! I learned so much from this :smile:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-820202357
https://github.com/root-project/root/issues/7790#issuecomment-828426447:1371,Usability,simpl,simple,1371,"\\""\\"", float f=1.f) with arguments:"" << std::endl;; std::cout << ""a: "" << a << std::endl;; std::cout << ""b: "" << b << std::endl;; std::cout << ""c: "" << c << std::endl;; std::cout << ""d: "" << d << std::endl;; std::cout << ""e: "" << e << std::endl;; std::cout << ""f: "" << f << std::endl;; }; Simple(float a, float b, float c,float d=1.f) {; std::cout << ""Simple(float a, float b, float c,float d=1.f) with arguments:"" << std::endl;; std::cout << ""a: "" << a << std::endl;; std::cout << ""b: "" << b << std::endl;; std::cout << ""c: "" << c << std::endl;; std::cout << ""d: "" << d << std::endl;; }; };. class Minimal{; public:; Minimal(int a, float b, float c=1.0f) {; std::cout << ""Minimal(int a, float b, float c=1.0f) with arguments:"" << std::endl;; std::cout << ""a: "" << a << std::endl;; std::cout << ""b: "" << b << std::endl;; std::cout << ""c: "" << c << std::endl;; }; Minimal(float a, float b) {; std::cout << ""Minimal(float a, float b) with arguments:"" << std::endl;; std::cout << ""a: "" << a << std::endl;; std::cout << ""b: "" << b << std::endl;; }; };; '''; ). a = int(1); b = float(2.2); c = float(3.3); d = float(4.4). simple = cppyy.gbl.Simple(a, b, c, d); minimal = cppyy.gbl.Minimal(a, b); ```. The constructors in `Simple` mimic the constructors of `TColor`. The `Minimal` class should show the same issue with less constructor arguments. Passing an `int` as first argument is not enough to distinguish between these two constructors; ```; Minimal(int a, float b, float c=1.0f); Minimal(float a, float b); ```; This is the result of the script above; ```; (cppyy-venv) vpadulan@fedorathinkpad-T550 [~/Projects/rootcode/ROOT-GITHUB-7790]: pip freeze; cppyy==1.9.5; cppyy-backend==1.14.3; cppyy-cling==6.21.6; CPyCppyy==1.12.4; (cppyy-venv) vpadulan@fedorathinkpad-T550 [~/Projects/rootcode/ROOT-GITHUB-7790]: python cppyy_simple_reproducer.py ; Simple(float a, float b, float c,float d=1.f) with arguments:; a: 1; b: 2.2; c: 3.3; d: 4.4; Minimal(float a, float b) with arguments:; a: 1; b: 2.2; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7790#issuecomment-828426447
https://github.com/root-project/root/pull/7801#issuecomment-815696117:138,Usability,guid,guide,138,"> I would rather make only only canvas with the two plot next to each other for a better comparison and a better display on the reference guide. Other wise it looks like a good example. Okay, i'll do that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7801#issuecomment-815696117
https://github.com/root-project/root/pull/7801#issuecomment-816540524:25,Usability,simpl,simpler,25,"And what about something simpler and faster to execute (no need for a TGraph2D) moreover with this new version the peaks appears much better on the 3D view. ```; /// \file; /// \ingroup tutorial_graphics; /// \notebook; /// Plot the Amplitude of a Hydrogen Atom.; ///; /// Visualize the Amplitude of a Hydrogen Atom in the n = 2, l = 0, m = 0 state.; /// Demonstrates how TH2F can be used in Quantum Mechanics.; ///; /// \macro_image; /// \macro_code; ///; /// \author Advait Dhingra. #include <cmath>. double WaveFunction(double x, double y) {; double r = sqrt(x *x + y*y);. double w = (1/pow((4*sqrt(2*TMath::Pi())* 1), 1.5)) * (2 - (r / 1)*pow(TMath::E(), (-1 * r)/2)); // Wavefunction formula for psi 2,0,0. return w*w; // Amplitude. }. void schroedinger_hydrogen() {; TH2F *h2D = new TH2F(""Hydrogen Atom"",; ""#Psi^{2}_{200} i.e. n = 2, l = 0, m = 0; Position in x direction; Position in y direction"",; 200, -10, 10, 200, -10, 10);. for (float i = -10; i < 10; i += 0.01) {; for (float j = -10; j < 10; j += 0.01) {; h2D->Fill(i, j, WaveFunction(i, j));; }; }. gStyle->SetPalette(kCividis);; gStyle->SetOptStat(0);. TCanvas *c1 = new TCanvas(""c1"", ""Schroedinger's Hydrogen Atom"", 1500, 750);; c1->Divide(2, 1);. auto c1_1 = c1->cd(1);; c1_1->SetRightMargin(0.14);; h2D->GetXaxis()->SetLabelSize(0.03);; h2D->GetYaxis()->SetLabelSize(0.03);; h2D->GetZaxis()->SetLabelSize(0.03);; h2D->SetContour(50);; h2D->Draw(""colz"");. TLatex *l = new TLatex(-10, -12.43, ""The Electron is more likely to be found in the yellow areas and less likely to be found in the blue areas."");; l->SetTextFont(42);; l->SetTextSize(0.02);; l->Draw();. auto c1_2 = c1->cd(2);; c1_2->SetTheta(42.);. TH2D *h2Dc = (TH2D*)h2D->Clone();; h2Dc->SetTitle(""3D view of probability amplitude;;"");; h2Dc->Draw(""surf2"");; }; ```. If you agree I let you commit this new version. I made several cosmetics changes also.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7801#issuecomment-816540524
https://github.com/root-project/root/pull/7801#issuecomment-816567262:27,Usability,simpl,simpler,27,"> And what about something simpler and faster to execute (no need for a TGraph2D) moreover with this new version the peaks appears much better on the 3D view. Ah yes, this looks much smoother, Thank you :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7801#issuecomment-816567262
https://github.com/root-project/root/pull/7801#issuecomment-816637869:284,Usability,guid,guide,284,"> Do you mean the header of the Canvas? Because I tried this and it is unable to render the symbols. (See the top of the window). No I mean in the comments, the header of the macro, the markdown part, where you put the comments which will then appear on the web in the root reference guide. You add a comment saying ""The formula is ... bla bla ... "" then you put the formula like:; \f$ the_formula_in_Latex_format \f$",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7801#issuecomment-816637869
https://github.com/root-project/root/pull/7801#issuecomment-816638539:292,Usability,guid,guide,292,"> > Do you mean the header of the Canvas? Because I tried this and it is unable to render the symbols. (See the top of the window); > ; > No I mean in the comments, the header of the macro, the markdown part, where you put the comments which will then appear on the web in the root reference guide. You add a comment saying ""The formula is ... bla bla ... "" then you put the formula like:; > \f$ the_formula_in_Latex_format \f$. Ohh ok. So I should remove the formula from the programm and add it to the markdown part?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7801#issuecomment-816638539
https://github.com/root-project/root/pull/7801#issuecomment-816710642:29,Usability,guid,guide,29,"I tried the macro in the ref guide. It works nice. The formula shows nicely:. <img width=""996"" alt=""Screenshot 2021-04-09 at 16 07 57"" src=""https://user-images.githubusercontent.com/4697738/114192490-d5986d00-994d-11eb-9b78-76c062a039f0.png"">. To show better in the ref guide it is preferable to put the two plots vertically instead of horizontally. ; Therefore you should change the TCanvas and Divide lines to:. ```; TCanvas *c1 = new TCanvas(""c1"", ""Schroedinger's Hydrogen Atom"", 750, 1500);; c1->Divide(1, 2);; ```. That will be the last changes. After that we can merge it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7801#issuecomment-816710642
https://github.com/root-project/root/pull/7801#issuecomment-816710642:270,Usability,guid,guide,270,"I tried the macro in the ref guide. It works nice. The formula shows nicely:. <img width=""996"" alt=""Screenshot 2021-04-09 at 16 07 57"" src=""https://user-images.githubusercontent.com/4697738/114192490-d5986d00-994d-11eb-9b78-76c062a039f0.png"">. To show better in the ref guide it is preferable to put the two plots vertically instead of horizontally. ; Therefore you should change the TCanvas and Divide lines to:. ```; TCanvas *c1 = new TCanvas(""c1"", ""Schroedinger's Hydrogen Atom"", 750, 1500);; c1->Divide(1, 2);; ```. That will be the last changes. After that we can merge it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7801#issuecomment-816710642
https://github.com/root-project/root/pull/7801#issuecomment-816712227:28,Usability,guid,guide,28,"> To show better in the ref guide it is preferable to put the two plots vertically instead of horizontally.; > Therefore you should change the TCanvas and Divide lines to:; > ; > ```; > TCanvas *c1 = new TCanvas(""c1"", ""Schroedinger's Hydrogen Atom"", 750, 1500);; > c1->Divide(1, 2);; > ```; > ; > That will be the last changes. After that we can merge it. Okay, thank you for you help",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7801#issuecomment-816712227
https://github.com/root-project/root/issues/7802#issuecomment-822528404:36,Deployability,install,installation,36,"@stwunsch : The machine running the installation of the reference guide is root-ubuntu-2004-2. I logged on this machine and simply tried (stupidly) to type ""pyspark"". I know nothing about this tool but surprisingly I got an answer saying it seems wrongly installed there ... Dod you have an idea about that ? what should be done ? A Python expert might know better. ```; sftnight@root-ubuntu-2004-2:~$ pyspark; Could not find valid SPARK_HOME while searching ['/home', '/usr/local/bin']. Did you install PySpark via a package manager such as pip or Conda? If so,; PySpark was not found in your Python environment. It is possible your; Python environment does not properly bind with your package manager. Please check your default 'python' and if you set PYSPARK_PYTHON and/or; PYSPARK_DRIVER_PYTHON environment variables, and see if you can import; PySpark, for example, 'python -c 'import pyspark'. If you cannot import, you can install by using the Python executable directly,; for example, 'python -m pip install pyspark [--user]'. Otherwise, you can also; explicitly set the Python executable, that has PySpark installed, to; PYSPARK_PYTHON or PYSPARK_DRIVER_PYTHON environment variables, for example,; 'PYSPARK_PYTHON=python3 pyspark'. /usr/local/bin/pyspark: line 24: /bin/load-spark-env.sh: No such file or directory; /usr/local/bin/pyspark: line 68: /bin/spark-submit: No such file or directory; sftnight@root-ubuntu-2004-2:~$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7802#issuecomment-822528404
https://github.com/root-project/root/issues/7802#issuecomment-822528404:255,Deployability,install,installed,255,"@stwunsch : The machine running the installation of the reference guide is root-ubuntu-2004-2. I logged on this machine and simply tried (stupidly) to type ""pyspark"". I know nothing about this tool but surprisingly I got an answer saying it seems wrongly installed there ... Dod you have an idea about that ? what should be done ? A Python expert might know better. ```; sftnight@root-ubuntu-2004-2:~$ pyspark; Could not find valid SPARK_HOME while searching ['/home', '/usr/local/bin']. Did you install PySpark via a package manager such as pip or Conda? If so,; PySpark was not found in your Python environment. It is possible your; Python environment does not properly bind with your package manager. Please check your default 'python' and if you set PYSPARK_PYTHON and/or; PYSPARK_DRIVER_PYTHON environment variables, and see if you can import; PySpark, for example, 'python -c 'import pyspark'. If you cannot import, you can install by using the Python executable directly,; for example, 'python -m pip install pyspark [--user]'. Otherwise, you can also; explicitly set the Python executable, that has PySpark installed, to; PYSPARK_PYTHON or PYSPARK_DRIVER_PYTHON environment variables, for example,; 'PYSPARK_PYTHON=python3 pyspark'. /usr/local/bin/pyspark: line 24: /bin/load-spark-env.sh: No such file or directory; /usr/local/bin/pyspark: line 68: /bin/spark-submit: No such file or directory; sftnight@root-ubuntu-2004-2:~$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7802#issuecomment-822528404
https://github.com/root-project/root/issues/7802#issuecomment-822528404:496,Deployability,install,install,496,"@stwunsch : The machine running the installation of the reference guide is root-ubuntu-2004-2. I logged on this machine and simply tried (stupidly) to type ""pyspark"". I know nothing about this tool but surprisingly I got an answer saying it seems wrongly installed there ... Dod you have an idea about that ? what should be done ? A Python expert might know better. ```; sftnight@root-ubuntu-2004-2:~$ pyspark; Could not find valid SPARK_HOME while searching ['/home', '/usr/local/bin']. Did you install PySpark via a package manager such as pip or Conda? If so,; PySpark was not found in your Python environment. It is possible your; Python environment does not properly bind with your package manager. Please check your default 'python' and if you set PYSPARK_PYTHON and/or; PYSPARK_DRIVER_PYTHON environment variables, and see if you can import; PySpark, for example, 'python -c 'import pyspark'. If you cannot import, you can install by using the Python executable directly,; for example, 'python -m pip install pyspark [--user]'. Otherwise, you can also; explicitly set the Python executable, that has PySpark installed, to; PYSPARK_PYTHON or PYSPARK_DRIVER_PYTHON environment variables, for example,; 'PYSPARK_PYTHON=python3 pyspark'. /usr/local/bin/pyspark: line 24: /bin/load-spark-env.sh: No such file or directory; /usr/local/bin/pyspark: line 68: /bin/spark-submit: No such file or directory; sftnight@root-ubuntu-2004-2:~$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7802#issuecomment-822528404
https://github.com/root-project/root/issues/7802#issuecomment-822528404:930,Deployability,install,install,930,"@stwunsch : The machine running the installation of the reference guide is root-ubuntu-2004-2. I logged on this machine and simply tried (stupidly) to type ""pyspark"". I know nothing about this tool but surprisingly I got an answer saying it seems wrongly installed there ... Dod you have an idea about that ? what should be done ? A Python expert might know better. ```; sftnight@root-ubuntu-2004-2:~$ pyspark; Could not find valid SPARK_HOME while searching ['/home', '/usr/local/bin']. Did you install PySpark via a package manager such as pip or Conda? If so,; PySpark was not found in your Python environment. It is possible your; Python environment does not properly bind with your package manager. Please check your default 'python' and if you set PYSPARK_PYTHON and/or; PYSPARK_DRIVER_PYTHON environment variables, and see if you can import; PySpark, for example, 'python -c 'import pyspark'. If you cannot import, you can install by using the Python executable directly,; for example, 'python -m pip install pyspark [--user]'. Otherwise, you can also; explicitly set the Python executable, that has PySpark installed, to; PYSPARK_PYTHON or PYSPARK_DRIVER_PYTHON environment variables, for example,; 'PYSPARK_PYTHON=python3 pyspark'. /usr/local/bin/pyspark: line 24: /bin/load-spark-env.sh: No such file or directory; /usr/local/bin/pyspark: line 68: /bin/spark-submit: No such file or directory; sftnight@root-ubuntu-2004-2:~$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7802#issuecomment-822528404
https://github.com/root-project/root/issues/7802#issuecomment-822528404:1008,Deployability,install,install,1008,"@stwunsch : The machine running the installation of the reference guide is root-ubuntu-2004-2. I logged on this machine and simply tried (stupidly) to type ""pyspark"". I know nothing about this tool but surprisingly I got an answer saying it seems wrongly installed there ... Dod you have an idea about that ? what should be done ? A Python expert might know better. ```; sftnight@root-ubuntu-2004-2:~$ pyspark; Could not find valid SPARK_HOME while searching ['/home', '/usr/local/bin']. Did you install PySpark via a package manager such as pip or Conda? If so,; PySpark was not found in your Python environment. It is possible your; Python environment does not properly bind with your package manager. Please check your default 'python' and if you set PYSPARK_PYTHON and/or; PYSPARK_DRIVER_PYTHON environment variables, and see if you can import; PySpark, for example, 'python -c 'import pyspark'. If you cannot import, you can install by using the Python executable directly,; for example, 'python -m pip install pyspark [--user]'. Otherwise, you can also; explicitly set the Python executable, that has PySpark installed, to; PYSPARK_PYTHON or PYSPARK_DRIVER_PYTHON environment variables, for example,; 'PYSPARK_PYTHON=python3 pyspark'. /usr/local/bin/pyspark: line 24: /bin/load-spark-env.sh: No such file or directory; /usr/local/bin/pyspark: line 68: /bin/spark-submit: No such file or directory; sftnight@root-ubuntu-2004-2:~$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7802#issuecomment-822528404
https://github.com/root-project/root/issues/7802#issuecomment-822528404:1115,Deployability,install,installed,1115,"@stwunsch : The machine running the installation of the reference guide is root-ubuntu-2004-2. I logged on this machine and simply tried (stupidly) to type ""pyspark"". I know nothing about this tool but surprisingly I got an answer saying it seems wrongly installed there ... Dod you have an idea about that ? what should be done ? A Python expert might know better. ```; sftnight@root-ubuntu-2004-2:~$ pyspark; Could not find valid SPARK_HOME while searching ['/home', '/usr/local/bin']. Did you install PySpark via a package manager such as pip or Conda? If so,; PySpark was not found in your Python environment. It is possible your; Python environment does not properly bind with your package manager. Please check your default 'python' and if you set PYSPARK_PYTHON and/or; PYSPARK_DRIVER_PYTHON environment variables, and see if you can import; PySpark, for example, 'python -c 'import pyspark'. If you cannot import, you can install by using the Python executable directly,; for example, 'python -m pip install pyspark [--user]'. Otherwise, you can also; explicitly set the Python executable, that has PySpark installed, to; PYSPARK_PYTHON or PYSPARK_DRIVER_PYTHON environment variables, for example,; 'PYSPARK_PYTHON=python3 pyspark'. /usr/local/bin/pyspark: line 24: /bin/load-spark-env.sh: No such file or directory; /usr/local/bin/pyspark: line 68: /bin/spark-submit: No such file or directory; sftnight@root-ubuntu-2004-2:~$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7802#issuecomment-822528404
https://github.com/root-project/root/issues/7802#issuecomment-822528404:811,Modifiability,variab,variables,811,"@stwunsch : The machine running the installation of the reference guide is root-ubuntu-2004-2. I logged on this machine and simply tried (stupidly) to type ""pyspark"". I know nothing about this tool but surprisingly I got an answer saying it seems wrongly installed there ... Dod you have an idea about that ? what should be done ? A Python expert might know better. ```; sftnight@root-ubuntu-2004-2:~$ pyspark; Could not find valid SPARK_HOME while searching ['/home', '/usr/local/bin']. Did you install PySpark via a package manager such as pip or Conda? If so,; PySpark was not found in your Python environment. It is possible your; Python environment does not properly bind with your package manager. Please check your default 'python' and if you set PYSPARK_PYTHON and/or; PYSPARK_DRIVER_PYTHON environment variables, and see if you can import; PySpark, for example, 'python -c 'import pyspark'. If you cannot import, you can install by using the Python executable directly,; for example, 'python -m pip install pyspark [--user]'. Otherwise, you can also; explicitly set the Python executable, that has PySpark installed, to; PYSPARK_PYTHON or PYSPARK_DRIVER_PYTHON environment variables, for example,; 'PYSPARK_PYTHON=python3 pyspark'. /usr/local/bin/pyspark: line 24: /bin/load-spark-env.sh: No such file or directory; /usr/local/bin/pyspark: line 68: /bin/spark-submit: No such file or directory; sftnight@root-ubuntu-2004-2:~$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7802#issuecomment-822528404
https://github.com/root-project/root/issues/7802#issuecomment-822528404:1182,Modifiability,variab,variables,1182,"@stwunsch : The machine running the installation of the reference guide is root-ubuntu-2004-2. I logged on this machine and simply tried (stupidly) to type ""pyspark"". I know nothing about this tool but surprisingly I got an answer saying it seems wrongly installed there ... Dod you have an idea about that ? what should be done ? A Python expert might know better. ```; sftnight@root-ubuntu-2004-2:~$ pyspark; Could not find valid SPARK_HOME while searching ['/home', '/usr/local/bin']. Did you install PySpark via a package manager such as pip or Conda? If so,; PySpark was not found in your Python environment. It is possible your; Python environment does not properly bind with your package manager. Please check your default 'python' and if you set PYSPARK_PYTHON and/or; PYSPARK_DRIVER_PYTHON environment variables, and see if you can import; PySpark, for example, 'python -c 'import pyspark'. If you cannot import, you can install by using the Python executable directly,; for example, 'python -m pip install pyspark [--user]'. Otherwise, you can also; explicitly set the Python executable, that has PySpark installed, to; PYSPARK_PYTHON or PYSPARK_DRIVER_PYTHON environment variables, for example,; 'PYSPARK_PYTHON=python3 pyspark'. /usr/local/bin/pyspark: line 24: /bin/load-spark-env.sh: No such file or directory; /usr/local/bin/pyspark: line 68: /bin/spark-submit: No such file or directory; sftnight@root-ubuntu-2004-2:~$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7802#issuecomment-822528404
https://github.com/root-project/root/issues/7802#issuecomment-822528404:1279,Performance,load,load-spark-env,1279,"@stwunsch : The machine running the installation of the reference guide is root-ubuntu-2004-2. I logged on this machine and simply tried (stupidly) to type ""pyspark"". I know nothing about this tool but surprisingly I got an answer saying it seems wrongly installed there ... Dod you have an idea about that ? what should be done ? A Python expert might know better. ```; sftnight@root-ubuntu-2004-2:~$ pyspark; Could not find valid SPARK_HOME while searching ['/home', '/usr/local/bin']. Did you install PySpark via a package manager such as pip or Conda? If so,; PySpark was not found in your Python environment. It is possible your; Python environment does not properly bind with your package manager. Please check your default 'python' and if you set PYSPARK_PYTHON and/or; PYSPARK_DRIVER_PYTHON environment variables, and see if you can import; PySpark, for example, 'python -c 'import pyspark'. If you cannot import, you can install by using the Python executable directly,; for example, 'python -m pip install pyspark [--user]'. Otherwise, you can also; explicitly set the Python executable, that has PySpark installed, to; PYSPARK_PYTHON or PYSPARK_DRIVER_PYTHON environment variables, for example,; 'PYSPARK_PYTHON=python3 pyspark'. /usr/local/bin/pyspark: line 24: /bin/load-spark-env.sh: No such file or directory; /usr/local/bin/pyspark: line 68: /bin/spark-submit: No such file or directory; sftnight@root-ubuntu-2004-2:~$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7802#issuecomment-822528404
https://github.com/root-project/root/issues/7802#issuecomment-822528404:97,Testability,log,logged,97,"@stwunsch : The machine running the installation of the reference guide is root-ubuntu-2004-2. I logged on this machine and simply tried (stupidly) to type ""pyspark"". I know nothing about this tool but surprisingly I got an answer saying it seems wrongly installed there ... Dod you have an idea about that ? what should be done ? A Python expert might know better. ```; sftnight@root-ubuntu-2004-2:~$ pyspark; Could not find valid SPARK_HOME while searching ['/home', '/usr/local/bin']. Did you install PySpark via a package manager such as pip or Conda? If so,; PySpark was not found in your Python environment. It is possible your; Python environment does not properly bind with your package manager. Please check your default 'python' and if you set PYSPARK_PYTHON and/or; PYSPARK_DRIVER_PYTHON environment variables, and see if you can import; PySpark, for example, 'python -c 'import pyspark'. If you cannot import, you can install by using the Python executable directly,; for example, 'python -m pip install pyspark [--user]'. Otherwise, you can also; explicitly set the Python executable, that has PySpark installed, to; PYSPARK_PYTHON or PYSPARK_DRIVER_PYTHON environment variables, for example,; 'PYSPARK_PYTHON=python3 pyspark'. /usr/local/bin/pyspark: line 24: /bin/load-spark-env.sh: No such file or directory; /usr/local/bin/pyspark: line 68: /bin/spark-submit: No such file or directory; sftnight@root-ubuntu-2004-2:~$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7802#issuecomment-822528404
https://github.com/root-project/root/issues/7802#issuecomment-822528404:66,Usability,guid,guide,66,"@stwunsch : The machine running the installation of the reference guide is root-ubuntu-2004-2. I logged on this machine and simply tried (stupidly) to type ""pyspark"". I know nothing about this tool but surprisingly I got an answer saying it seems wrongly installed there ... Dod you have an idea about that ? what should be done ? A Python expert might know better. ```; sftnight@root-ubuntu-2004-2:~$ pyspark; Could not find valid SPARK_HOME while searching ['/home', '/usr/local/bin']. Did you install PySpark via a package manager such as pip or Conda? If so,; PySpark was not found in your Python environment. It is possible your; Python environment does not properly bind with your package manager. Please check your default 'python' and if you set PYSPARK_PYTHON and/or; PYSPARK_DRIVER_PYTHON environment variables, and see if you can import; PySpark, for example, 'python -c 'import pyspark'. If you cannot import, you can install by using the Python executable directly,; for example, 'python -m pip install pyspark [--user]'. Otherwise, you can also; explicitly set the Python executable, that has PySpark installed, to; PYSPARK_PYTHON or PYSPARK_DRIVER_PYTHON environment variables, for example,; 'PYSPARK_PYTHON=python3 pyspark'. /usr/local/bin/pyspark: line 24: /bin/load-spark-env.sh: No such file or directory; /usr/local/bin/pyspark: line 68: /bin/spark-submit: No such file or directory; sftnight@root-ubuntu-2004-2:~$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7802#issuecomment-822528404
https://github.com/root-project/root/issues/7802#issuecomment-822528404:124,Usability,simpl,simply,124,"@stwunsch : The machine running the installation of the reference guide is root-ubuntu-2004-2. I logged on this machine and simply tried (stupidly) to type ""pyspark"". I know nothing about this tool but surprisingly I got an answer saying it seems wrongly installed there ... Dod you have an idea about that ? what should be done ? A Python expert might know better. ```; sftnight@root-ubuntu-2004-2:~$ pyspark; Could not find valid SPARK_HOME while searching ['/home', '/usr/local/bin']. Did you install PySpark via a package manager such as pip or Conda? If so,; PySpark was not found in your Python environment. It is possible your; Python environment does not properly bind with your package manager. Please check your default 'python' and if you set PYSPARK_PYTHON and/or; PYSPARK_DRIVER_PYTHON environment variables, and see if you can import; PySpark, for example, 'python -c 'import pyspark'. If you cannot import, you can install by using the Python executable directly,; for example, 'python -m pip install pyspark [--user]'. Otherwise, you can also; explicitly set the Python executable, that has PySpark installed, to; PYSPARK_PYTHON or PYSPARK_DRIVER_PYTHON environment variables, for example,; 'PYSPARK_PYTHON=python3 pyspark'. /usr/local/bin/pyspark: line 24: /bin/load-spark-env.sh: No such file or directory; /usr/local/bin/pyspark: line 68: /bin/spark-submit: No such file or directory; sftnight@root-ubuntu-2004-2:~$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7802#issuecomment-822528404
https://github.com/root-project/root/pull/7820#issuecomment-817615979:25,Usability,feedback,feedback,25,"@couet That you for your feedback. I will add some documentation and move the folder to bin/graphics. My thought process was that this could potentially be better than TikZ, as this is built completely using ROOT components and it can be changed over time. This class is also quite easy for beginners to contribute to, which would encourage more people to contribute.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-817615979
https://github.com/root-project/root/pull/7820#issuecomment-818692727:515,Usability,simpl,simple,515,"> > Thanks for the tips. I will try to do this. 😄; > ; > ; > ; > Of course any comments or criticism on what I suggested are welcome :-). Thanks. So if I understand correctly, instead of plotting the TLine, TArrow etc one adds them to the TFeynman object and then draws everything at once? I looked into the code for TLegend, and this is what I understand:. - The legend entries are added to a TList; - The Draw method takes an Option_p and appends it to the TPad. What is this option_p?. My apologies if these are simple questions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-818692727
https://github.com/root-project/root/pull/7820#issuecomment-819336796:283,Usability,simpl,simply,283,You do not have any Draw() method for the TFeynmanEntry. You have a Add() method which will add the new object in the list of object in TFeynman. So you need to have a Tlist in TFeynman holding the list of all the TFeynman entry buildingthe diagram. The Draw method of TFeynman will simply do AppendPad and will pout the whole diagram in the list of primates of the current pad (gPad) . TFeynmanEntry will have a Paint and the Paint method of TFeynman will call all the Paint of the TFeynmanEntry in the TList ... Really it is the same structure as TLegend.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-819336796
https://github.com/root-project/root/pull/7820#issuecomment-820332500:333,Usability,guid,guide,333,"> Good Morning Mr. @couet . I just realized that the paint method of TFeynman is never being called. When I call the draw > > > method, do I want to run the paint method first before ´AppendPad`?. The Paint() method is called automatically for you when the Pad will be display. You do not need to call it. See the figure in TPad ref guide .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-820332500
https://github.com/root-project/root/pull/7820#issuecomment-820333544:341,Usability,guid,guide,341,"> > Good Morning Mr. @couet . I just realized that the paint method of TFeynman is never being called. When I call the draw > > > method, do I want to run the paint method first before ´AppendPad`?; > ; > The Paint() method is called automatically for you when the Pad will be display. You do not need to call it. See the figure in TPad ref guide . Ah ok. And when I want to add a TFeynmanEntry to the TList, how can I do that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-820333544
https://github.com/root-project/root/pull/7820#issuecomment-829968031:870,Energy Efficiency,reduce,reduce,870,"> > I think almost everything is there now. I've tested it in both Ubuntu 20.04 LTS and Windows 10. Can we let @phsft-bot build it on other systems?; > ; > No, it is not, see my comments about the coordinates ... how do you define them ?. I added Doxygen comments on the parameters of the methods. The coordinates are like this:. For AddItem you provide x1, y1 which is the starting coordinate and x2, y2 which is the stopping coordinate and labelX and labelY whihc is where the label is. I'm trying to figure out a way where you don't need to set the coordinates, but that may take a while. For AddPair, you simply provide the x and y coordinate of the center of the arc. The labels are positioned automatically. For AddCurved, You also only provide the x and y coordinate of the center of the arc, along with phimin and phimax angles. I'm also trying to find a way to reduce the amount of parameters here (like in TikZ). The problem is that the main type of feynman Diagram, is one where you have the fermions at the left and right side, and a boson + virtual particles (in pairs) in the middle. If this were the only type of feynman diagram, I could do this easily, however sometimes there are other ""irregular"" diagrams, which would be harder to implement. Is there a way, where the particles can be positioned automatically, and then checked to make sure there is no overlapping?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-829968031
https://github.com/root-project/root/pull/7820#issuecomment-829968031:49,Testability,test,tested,49,"> > I think almost everything is there now. I've tested it in both Ubuntu 20.04 LTS and Windows 10. Can we let @phsft-bot build it on other systems?; > ; > No, it is not, see my comments about the coordinates ... how do you define them ?. I added Doxygen comments on the parameters of the methods. The coordinates are like this:. For AddItem you provide x1, y1 which is the starting coordinate and x2, y2 which is the stopping coordinate and labelX and labelY whihc is where the label is. I'm trying to figure out a way where you don't need to set the coordinates, but that may take a while. For AddPair, you simply provide the x and y coordinate of the center of the arc. The labels are positioned automatically. For AddCurved, You also only provide the x and y coordinate of the center of the arc, along with phimin and phimax angles. I'm also trying to find a way to reduce the amount of parameters here (like in TikZ). The problem is that the main type of feynman Diagram, is one where you have the fermions at the left and right side, and a boson + virtual particles (in pairs) in the middle. If this were the only type of feynman diagram, I could do this easily, however sometimes there are other ""irregular"" diagrams, which would be harder to implement. Is there a way, where the particles can be positioned automatically, and then checked to make sure there is no overlapping?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-829968031
https://github.com/root-project/root/pull/7820#issuecomment-829968031:609,Usability,simpl,simply,609,"> > I think almost everything is there now. I've tested it in both Ubuntu 20.04 LTS and Windows 10. Can we let @phsft-bot build it on other systems?; > ; > No, it is not, see my comments about the coordinates ... how do you define them ?. I added Doxygen comments on the parameters of the methods. The coordinates are like this:. For AddItem you provide x1, y1 which is the starting coordinate and x2, y2 which is the stopping coordinate and labelX and labelY whihc is where the label is. I'm trying to figure out a way where you don't need to set the coordinates, but that may take a while. For AddPair, you simply provide the x and y coordinate of the center of the arc. The labels are positioned automatically. For AddCurved, You also only provide the x and y coordinate of the center of the arc, along with phimin and phimax angles. I'm also trying to find a way to reduce the amount of parameters here (like in TikZ). The problem is that the main type of feynman Diagram, is one where you have the fermions at the left and right side, and a boson + virtual particles (in pairs) in the middle. If this were the only type of feynman diagram, I could do this easily, however sometimes there are other ""irregular"" diagrams, which would be harder to implement. Is there a way, where the particles can be positioned automatically, and then checked to make sure there is no overlapping?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-829968031
https://github.com/root-project/root/pull/7870#issuecomment-819446975:371,Usability,clear,clearing,371,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/114303/console).; ### Warnings:; - [2021-04-14T11:03:20.855Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-14T11:10:29.086Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7870#issuecomment-819446975
https://github.com/root-project/root/pull/7870#issuecomment-819446975:650,Usability,clear,clearing,650,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/114303/console).; ### Warnings:; - [2021-04-14T11:03:20.855Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-14T11:10:29.086Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7870#issuecomment-819446975
https://github.com/root-project/root/issues/7871#issuecomment-819540665:81,Availability,failure,failures,81,"> Failure to meet that signature leads to an explosion of template instantiation failures with gcc. We should have better SFINAE code that provides clearer errors. > Show how to do a parallel for using Map()?. I think `Foreach` should be used for that, see my comment at #7872",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7871#issuecomment-819540665
https://github.com/root-project/root/issues/7871#issuecomment-819540665:156,Availability,error,errors,156,"> Failure to meet that signature leads to an explosion of template instantiation failures with gcc. We should have better SFINAE code that provides clearer errors. > Show how to do a parallel for using Map()?. I think `Foreach` should be used for that, see my comment at #7872",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7871#issuecomment-819540665
https://github.com/root-project/root/issues/7871#issuecomment-819540665:148,Usability,clear,clearer,148,"> Failure to meet that signature leads to an explosion of template instantiation failures with gcc. We should have better SFINAE code that provides clearer errors. > Show how to do a parallel for using Map()?. I think `Foreach` should be used for that, see my comment at #7872",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7871#issuecomment-819540665
https://github.com/root-project/root/issues/7881#issuecomment-900729941:10,Usability,clear,cleared,10,"Should be cleared up. Using `depends_on :xcode if MacOS.version <= :catalina`, this gets the right paths and works. Will close here, and hopefully the PR will be merged soon in homebrew.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7881#issuecomment-900729941
https://github.com/root-project/root/issues/7881#issuecomment-900730523:102,Usability,simpl,simple,102,"Thanks, @vgvassilev!!! Once the problem was identified as the issue with those paths, a very nice and simple solution became obvious.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7881#issuecomment-900730523
https://github.com/root-project/root/pull/7884#issuecomment-820253733:371,Usability,clear,clearing,371,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/114424/console).; ### Warnings:; - [2021-04-15T08:33:00.572Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-15T08:40:21.736Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7884#issuecomment-820253733
https://github.com/root-project/root/pull/7884#issuecomment-820253733:650,Usability,clear,clearing,650,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/114424/console).; ### Warnings:; - [2021-04-15T08:33:00.572Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-15T08:40:21.736Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7884#issuecomment-820253733
https://github.com/root-project/root/pull/7885#issuecomment-841061484:15,Usability,feedback,feedback,15,After positive feedback from user I merging this PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7885#issuecomment-841061484
https://github.com/root-project/root/pull/7909#issuecomment-822312306:91,Usability,simpl,simple,91,"Thank you for this PR.; Since we include <cmath> I agree we should use `std::sqrt` instead simple `sqrt` that is defined in <math>. We should probably change other similar files in the genvector package. . For this PR, it would be nice if you cleanup the commit history and squash the commits in a single one to have a cleaner history; Thank you. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7909#issuecomment-822312306
https://github.com/root-project/root/pull/7909#issuecomment-822314822:87,Usability,simpl,simple,87,"> Thank you for this PR.; > Since we include I agree we should use `std::sqrt` instead simple `sqrt` that is defined in; > ; > We should probably change other similar files in the genvector package.; > ; > For this PR, it would be nice if you cleanup the commit history and squash the commits in a single one to have a cleaner history; > Thank you; > ; > Lorenzo. Sure, will do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7909#issuecomment-822314822
https://github.com/root-project/root/issues/7936#issuecomment-825474655:698,Availability,error,error,698,"@Axel-Naumann @eguiraud One of my dataframe tests fails because of this:; ```; 27/155 Test #1500: roottest-root-dataframe-test_snapshot .........................***Failed 13.13 sec; ...; --- /srv/root/src/roottest/root/dataframe/test_snapshot.ref	Tue Mar 17 09:11:36 2020; +++ /srv/root/build/roottest/root/dataframe/test_snapshot.log	Fri Apr 23 09:56:40 2021; @@ -1,4 +1,5 @@; ; +cling::DynamicLibraryManager::loadLibrary():/srv/root/build/roottest/root/dataframe/par:cannotdynamicallyloadposition-independentexecutable; ----Nowwithatreeintherootdirectory; Branch:b1; Branch:b1_square. -- END OUTDIFF OUTPUT --; CMake Error at /srv/root/build/RootTestDriver.cmake:264 (message):; compare 'stdout' error: 1; ```; Somehow ROOT should address the case of binaries built with -fpie, as at least Gentoo has enabled that by default in GCC to improve security. Other distros may do the same in the future. See e.g. https://docs.fedoraproject.org/en-US/packaging-guidelines/#_pie",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-825474655
https://github.com/root-project/root/issues/7936#issuecomment-825474655:670,Integrability,message,message,670,"@Axel-Naumann @eguiraud One of my dataframe tests fails because of this:; ```; 27/155 Test #1500: roottest-root-dataframe-test_snapshot .........................***Failed 13.13 sec; ...; --- /srv/root/src/roottest/root/dataframe/test_snapshot.ref	Tue Mar 17 09:11:36 2020; +++ /srv/root/build/roottest/root/dataframe/test_snapshot.log	Fri Apr 23 09:56:40 2021; @@ -1,4 +1,5 @@; ; +cling::DynamicLibraryManager::loadLibrary():/srv/root/build/roottest/root/dataframe/par:cannotdynamicallyloadposition-independentexecutable; ----Nowwithatreeintherootdirectory; Branch:b1; Branch:b1_square. -- END OUTDIFF OUTPUT --; CMake Error at /srv/root/build/RootTestDriver.cmake:264 (message):; compare 'stdout' error: 1; ```; Somehow ROOT should address the case of binaries built with -fpie, as at least Gentoo has enabled that by default in GCC to improve security. Other distros may do the same in the future. See e.g. https://docs.fedoraproject.org/en-US/packaging-guidelines/#_pie",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-825474655
https://github.com/root-project/root/issues/7936#issuecomment-825474655:411,Performance,load,loadLibrary,411,"@Axel-Naumann @eguiraud One of my dataframe tests fails because of this:; ```; 27/155 Test #1500: roottest-root-dataframe-test_snapshot .........................***Failed 13.13 sec; ...; --- /srv/root/src/roottest/root/dataframe/test_snapshot.ref	Tue Mar 17 09:11:36 2020; +++ /srv/root/build/roottest/root/dataframe/test_snapshot.log	Fri Apr 23 09:56:40 2021; @@ -1,4 +1,5 @@; ; +cling::DynamicLibraryManager::loadLibrary():/srv/root/build/roottest/root/dataframe/par:cannotdynamicallyloadposition-independentexecutable; ----Nowwithatreeintherootdirectory; Branch:b1; Branch:b1_square. -- END OUTDIFF OUTPUT --; CMake Error at /srv/root/build/RootTestDriver.cmake:264 (message):; compare 'stdout' error: 1; ```; Somehow ROOT should address the case of binaries built with -fpie, as at least Gentoo has enabled that by default in GCC to improve security. Other distros may do the same in the future. See e.g. https://docs.fedoraproject.org/en-US/packaging-guidelines/#_pie",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-825474655
https://github.com/root-project/root/issues/7936#issuecomment-825474655:845,Security,secur,security,845,"@Axel-Naumann @eguiraud One of my dataframe tests fails because of this:; ```; 27/155 Test #1500: roottest-root-dataframe-test_snapshot .........................***Failed 13.13 sec; ...; --- /srv/root/src/roottest/root/dataframe/test_snapshot.ref	Tue Mar 17 09:11:36 2020; +++ /srv/root/build/roottest/root/dataframe/test_snapshot.log	Fri Apr 23 09:56:40 2021; @@ -1,4 +1,5 @@; ; +cling::DynamicLibraryManager::loadLibrary():/srv/root/build/roottest/root/dataframe/par:cannotdynamicallyloadposition-independentexecutable; ----Nowwithatreeintherootdirectory; Branch:b1; Branch:b1_square. -- END OUTDIFF OUTPUT --; CMake Error at /srv/root/build/RootTestDriver.cmake:264 (message):; compare 'stdout' error: 1; ```; Somehow ROOT should address the case of binaries built with -fpie, as at least Gentoo has enabled that by default in GCC to improve security. Other distros may do the same in the future. See e.g. https://docs.fedoraproject.org/en-US/packaging-guidelines/#_pie",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-825474655
https://github.com/root-project/root/issues/7936#issuecomment-825474655:44,Testability,test,tests,44,"@Axel-Naumann @eguiraud One of my dataframe tests fails because of this:; ```; 27/155 Test #1500: roottest-root-dataframe-test_snapshot .........................***Failed 13.13 sec; ...; --- /srv/root/src/roottest/root/dataframe/test_snapshot.ref	Tue Mar 17 09:11:36 2020; +++ /srv/root/build/roottest/root/dataframe/test_snapshot.log	Fri Apr 23 09:56:40 2021; @@ -1,4 +1,5 @@; ; +cling::DynamicLibraryManager::loadLibrary():/srv/root/build/roottest/root/dataframe/par:cannotdynamicallyloadposition-independentexecutable; ----Nowwithatreeintherootdirectory; Branch:b1; Branch:b1_square. -- END OUTDIFF OUTPUT --; CMake Error at /srv/root/build/RootTestDriver.cmake:264 (message):; compare 'stdout' error: 1; ```; Somehow ROOT should address the case of binaries built with -fpie, as at least Gentoo has enabled that by default in GCC to improve security. Other distros may do the same in the future. See e.g. https://docs.fedoraproject.org/en-US/packaging-guidelines/#_pie",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-825474655
https://github.com/root-project/root/issues/7936#issuecomment-825474655:331,Testability,log,log,331,"@Axel-Naumann @eguiraud One of my dataframe tests fails because of this:; ```; 27/155 Test #1500: roottest-root-dataframe-test_snapshot .........................***Failed 13.13 sec; ...; --- /srv/root/src/roottest/root/dataframe/test_snapshot.ref	Tue Mar 17 09:11:36 2020; +++ /srv/root/build/roottest/root/dataframe/test_snapshot.log	Fri Apr 23 09:56:40 2021; @@ -1,4 +1,5 @@; ; +cling::DynamicLibraryManager::loadLibrary():/srv/root/build/roottest/root/dataframe/par:cannotdynamicallyloadposition-independentexecutable; ----Nowwithatreeintherootdirectory; Branch:b1; Branch:b1_square. -- END OUTDIFF OUTPUT --; CMake Error at /srv/root/build/RootTestDriver.cmake:264 (message):; compare 'stdout' error: 1; ```; Somehow ROOT should address the case of binaries built with -fpie, as at least Gentoo has enabled that by default in GCC to improve security. Other distros may do the same in the future. See e.g. https://docs.fedoraproject.org/en-US/packaging-guidelines/#_pie",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-825474655
https://github.com/root-project/root/issues/7936#issuecomment-825474655:956,Usability,guid,guidelines,956,"@Axel-Naumann @eguiraud One of my dataframe tests fails because of this:; ```; 27/155 Test #1500: roottest-root-dataframe-test_snapshot .........................***Failed 13.13 sec; ...; --- /srv/root/src/roottest/root/dataframe/test_snapshot.ref	Tue Mar 17 09:11:36 2020; +++ /srv/root/build/roottest/root/dataframe/test_snapshot.log	Fri Apr 23 09:56:40 2021; @@ -1,4 +1,5 @@; ; +cling::DynamicLibraryManager::loadLibrary():/srv/root/build/roottest/root/dataframe/par:cannotdynamicallyloadposition-independentexecutable; ----Nowwithatreeintherootdirectory; Branch:b1; Branch:b1_square. -- END OUTDIFF OUTPUT --; CMake Error at /srv/root/build/RootTestDriver.cmake:264 (message):; compare 'stdout' error: 1; ```; Somehow ROOT should address the case of binaries built with -fpie, as at least Gentoo has enabled that by default in GCC to improve security. Other distros may do the same in the future. See e.g. https://docs.fedoraproject.org/en-US/packaging-guidelines/#_pie",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-825474655
https://github.com/root-project/root/pull/7942#issuecomment-823498058:559,Testability,test,tests,559,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/console).; ### Warnings:; - [2021-04-20T17:41:07.506Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-823498058
https://github.com/root-project/root/pull/7942#issuecomment-823498058:726,Testability,test,testReport,726,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/console).; ### Warnings:; - [2021-04-20T17:41:07.506Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-823498058
https://github.com/root-project/root/pull/7942#issuecomment-823498058:989,Testability,test,testReport,989,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/console).; ### Warnings:; - [2021-04-20T17:41:07.506Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-823498058
https://github.com/root-project/root/pull/7942#issuecomment-823498058:1262,Testability,test,testReport,1262,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/console).; ### Warnings:; - [2021-04-20T17:41:07.506Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-823498058
https://github.com/root-project/root/pull/7942#issuecomment-823498058:374,Usability,clear,clearing,374,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/console).; ### Warnings:; - [2021-04-20T17:41:07.506Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-823498058
https://github.com/root-project/root/pull/7942#issuecomment-824222731:559,Testability,test,tests,559,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/console).; ### Warnings:; - [2021-04-21T16:53:52.297Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824222731
https://github.com/root-project/root/pull/7942#issuecomment-824222731:726,Testability,test,testReport,726,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/console).; ### Warnings:; - [2021-04-21T16:53:52.297Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824222731
https://github.com/root-project/root/pull/7942#issuecomment-824222731:989,Testability,test,testReport,989,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/console).; ### Warnings:; - [2021-04-21T16:53:52.297Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824222731
https://github.com/root-project/root/pull/7942#issuecomment-824222731:1262,Testability,test,testReport,1262,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/console).; ### Warnings:; - [2021-04-21T16:53:52.297Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824222731
https://github.com/root-project/root/pull/7942#issuecomment-824222731:374,Usability,clear,clearing,374,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/console).; ### Warnings:; - [2021-04-21T16:53:52.297Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824222731
https://github.com/root-project/root/pull/7942#issuecomment-824249820:559,Testability,test,tests,559,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/console).; ### Warnings:; - [2021-04-21T17:35:44.121Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824249820
https://github.com/root-project/root/pull/7942#issuecomment-824249820:726,Testability,test,testReport,726,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/console).; ### Warnings:; - [2021-04-21T17:35:44.121Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824249820
https://github.com/root-project/root/pull/7942#issuecomment-824249820:989,Testability,test,testReport,989,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/console).; ### Warnings:; - [2021-04-21T17:35:44.121Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824249820
https://github.com/root-project/root/pull/7942#issuecomment-824249820:1262,Testability,test,testReport,1262,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/console).; ### Warnings:; - [2021-04-21T17:35:44.121Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824249820
https://github.com/root-project/root/pull/7942#issuecomment-824249820:374,Usability,clear,clearing,374,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/console).; ### Warnings:; - [2021-04-21T17:35:44.121Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824249820
https://github.com/root-project/root/pull/7942#issuecomment-824351593:559,Testability,test,tests,559,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/console).; ### Warnings:; - [2021-04-21T20:32:03.524Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824351593
https://github.com/root-project/root/pull/7942#issuecomment-824351593:726,Testability,test,testReport,726,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/console).; ### Warnings:; - [2021-04-21T20:32:03.524Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824351593
https://github.com/root-project/root/pull/7942#issuecomment-824351593:989,Testability,test,testReport,989,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/console).; ### Warnings:; - [2021-04-21T20:32:03.524Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824351593
https://github.com/root-project/root/pull/7942#issuecomment-824351593:1262,Testability,test,testReport,1262,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/console).; ### Warnings:; - [2021-04-21T20:32:03.524Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824351593
https://github.com/root-project/root/pull/7942#issuecomment-824351593:374,Usability,clear,clearing,374,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/console).; ### Warnings:; - [2021-04-21T20:32:03.524Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824351593
https://github.com/root-project/root/pull/7942#issuecomment-824971382:779,Testability,test,tests,779,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/console).; ### Warnings:; - [2021-04-22T15:26:47.027Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-22T15:28:51.056Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824971382
https://github.com/root-project/root/pull/7942#issuecomment-824971382:961,Testability,test,testReport,961,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/console).; ### Warnings:; - [2021-04-22T15:26:47.027Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-22T15:28:51.056Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824971382
https://github.com/root-project/root/pull/7942#issuecomment-824971382:1234,Testability,test,testReport,1234,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/console).; ### Warnings:; - [2021-04-22T15:26:47.027Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-22T15:28:51.056Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824971382
https://github.com/root-project/root/pull/7942#issuecomment-824971382:1492,Testability,test,testReport,1492,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/console).; ### Warnings:; - [2021-04-22T15:26:47.027Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-22T15:28:51.056Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824971382
https://github.com/root-project/root/pull/7942#issuecomment-824971382:374,Usability,clear,clearing,374,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/console).; ### Warnings:; - [2021-04-22T15:26:47.027Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-22T15:28:51.056Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824971382
https://github.com/root-project/root/pull/7942#issuecomment-825024680:779,Testability,test,tests,779,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/console).; ### Warnings:; - [2021-04-22T16:40:55.816Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-22T16:41:34.121Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-825024680
https://github.com/root-project/root/pull/7942#issuecomment-825024680:946,Testability,test,testReport,946,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/console).; ### Warnings:; - [2021-04-22T16:40:55.816Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-22T16:41:34.121Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-825024680
https://github.com/root-project/root/pull/7942#issuecomment-825024680:1209,Testability,test,testReport,1209,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/console).; ### Warnings:; - [2021-04-22T16:40:55.816Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-22T16:41:34.121Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-825024680
https://github.com/root-project/root/pull/7942#issuecomment-825024680:1482,Testability,test,testReport,1482,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/console).; ### Warnings:; - [2021-04-22T16:40:55.816Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-22T16:41:34.121Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-825024680
https://github.com/root-project/root/pull/7942#issuecomment-825024680:374,Usability,clear,clearing,374,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/console).; ### Warnings:; - [2021-04-22T16:40:55.816Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-22T16:41:34.121Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-825024680
https://github.com/root-project/root/pull/7942#issuecomment-833862493:779,Testability,test,tests,779,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/console).; ### Warnings:; - [2021-05-06T20:26:40.917Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-05-06T20:28:24.470Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-833862493
https://github.com/root-project/root/pull/7942#issuecomment-833862493:946,Testability,test,testReport,946,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/console).; ### Warnings:; - [2021-05-06T20:26:40.917Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-05-06T20:28:24.470Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-833862493
https://github.com/root-project/root/pull/7942#issuecomment-833862493:1209,Testability,test,testReport,1209,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/console).; ### Warnings:; - [2021-05-06T20:26:40.917Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-05-06T20:28:24.470Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-833862493
https://github.com/root-project/root/pull/7942#issuecomment-833862493:1482,Testability,test,testReport,1482,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/console).; ### Warnings:; - [2021-05-06T20:26:40.917Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-05-06T20:28:24.470Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-833862493
https://github.com/root-project/root/pull/7942#issuecomment-833862493:374,Usability,clear,clearing,374,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/console).; ### Warnings:; - [2021-05-06T20:26:40.917Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-05-06T20:28:24.470Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-833862493
https://github.com/root-project/root/pull/7954#issuecomment-824721395:1342,Availability,down,down,1342,"This PR looks a big improvement in fixing #7890 and #7933. Here are some test results run on Ubuntu 20. - Test create/delete a RooArgSet, simple example shown in #7933. - with current mater (i.e. including #7904 and #7935): ; - Time to create/delete 10M RooArgSet : 125 sec; - Increase of Memory ~ 1 GB; - with master + this PR: ; - Time to create/delete 10M RooArgSet : 0.8 sec; - total memory increase + 25 Mb); - using 6.15 (before including current MemPoolForRooSets (-> #2866 ); - Time to create/delete 10M RooArgSet : 2.9 sec; - memory increase : 0 ; ; - Running RooStats toy generation + likelihood evaluation on Histfactory tutorial model using in totoal 300k toys: ; ```; StandardHypoTestInvDemo(""$ROOTSYS/tutorials/histfactory/results/example_combined_GaussExample_model.root"",""combined"",""ModelConfig"","""",""obsData"",0,0,true,2,0,5,100000); ```. - master : Time: 344 sec Memory : ~ 3.5 GB; - master + this PR : Time: 157 sec Memory: 570 Mb; - 6.15 Time: 197 sec Memory: 240 Mb; . Runing the master on MacOsX, I have observed a much smaller memory increase, but a much longer time spent with allocating/deallocating RooArgSet's when their total count increases.; This is not observed anymore after applying this PR. So in conclusion:. - this PR fixes the increase time spent in allocate/deallocate RooArgSet over time, which will slow down toys analysis when number of toys increase; - there is still some increase in memory usage, but it is much smaller than before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7954#issuecomment-824721395
https://github.com/root-project/root/pull/7954#issuecomment-824721395:1285,Energy Efficiency,allocate,allocate,1285,"This PR looks a big improvement in fixing #7890 and #7933. Here are some test results run on Ubuntu 20. - Test create/delete a RooArgSet, simple example shown in #7933. - with current mater (i.e. including #7904 and #7935): ; - Time to create/delete 10M RooArgSet : 125 sec; - Increase of Memory ~ 1 GB; - with master + this PR: ; - Time to create/delete 10M RooArgSet : 0.8 sec; - total memory increase + 25 Mb); - using 6.15 (before including current MemPoolForRooSets (-> #2866 ); - Time to create/delete 10M RooArgSet : 2.9 sec; - memory increase : 0 ; ; - Running RooStats toy generation + likelihood evaluation on Histfactory tutorial model using in totoal 300k toys: ; ```; StandardHypoTestInvDemo(""$ROOTSYS/tutorials/histfactory/results/example_combined_GaussExample_model.root"",""combined"",""ModelConfig"","""",""obsData"",0,0,true,2,0,5,100000); ```. - master : Time: 344 sec Memory : ~ 3.5 GB; - master + this PR : Time: 157 sec Memory: 570 Mb; - 6.15 Time: 197 sec Memory: 240 Mb; . Runing the master on MacOsX, I have observed a much smaller memory increase, but a much longer time spent with allocating/deallocating RooArgSet's when their total count increases.; This is not observed anymore after applying this PR. So in conclusion:. - this PR fixes the increase time spent in allocate/deallocate RooArgSet over time, which will slow down toys analysis when number of toys increase; - there is still some increase in memory usage, but it is much smaller than before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7954#issuecomment-824721395
https://github.com/root-project/root/pull/7954#issuecomment-824721395:73,Testability,test,test,73,"This PR looks a big improvement in fixing #7890 and #7933. Here are some test results run on Ubuntu 20. - Test create/delete a RooArgSet, simple example shown in #7933. - with current mater (i.e. including #7904 and #7935): ; - Time to create/delete 10M RooArgSet : 125 sec; - Increase of Memory ~ 1 GB; - with master + this PR: ; - Time to create/delete 10M RooArgSet : 0.8 sec; - total memory increase + 25 Mb); - using 6.15 (before including current MemPoolForRooSets (-> #2866 ); - Time to create/delete 10M RooArgSet : 2.9 sec; - memory increase : 0 ; ; - Running RooStats toy generation + likelihood evaluation on Histfactory tutorial model using in totoal 300k toys: ; ```; StandardHypoTestInvDemo(""$ROOTSYS/tutorials/histfactory/results/example_combined_GaussExample_model.root"",""combined"",""ModelConfig"","""",""obsData"",0,0,true,2,0,5,100000); ```. - master : Time: 344 sec Memory : ~ 3.5 GB; - master + this PR : Time: 157 sec Memory: 570 Mb; - 6.15 Time: 197 sec Memory: 240 Mb; . Runing the master on MacOsX, I have observed a much smaller memory increase, but a much longer time spent with allocating/deallocating RooArgSet's when their total count increases.; This is not observed anymore after applying this PR. So in conclusion:. - this PR fixes the increase time spent in allocate/deallocate RooArgSet over time, which will slow down toys analysis when number of toys increase; - there is still some increase in memory usage, but it is much smaller than before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7954#issuecomment-824721395
https://github.com/root-project/root/pull/7954#issuecomment-824721395:138,Usability,simpl,simple,138,"This PR looks a big improvement in fixing #7890 and #7933. Here are some test results run on Ubuntu 20. - Test create/delete a RooArgSet, simple example shown in #7933. - with current mater (i.e. including #7904 and #7935): ; - Time to create/delete 10M RooArgSet : 125 sec; - Increase of Memory ~ 1 GB; - with master + this PR: ; - Time to create/delete 10M RooArgSet : 0.8 sec; - total memory increase + 25 Mb); - using 6.15 (before including current MemPoolForRooSets (-> #2866 ); - Time to create/delete 10M RooArgSet : 2.9 sec; - memory increase : 0 ; ; - Running RooStats toy generation + likelihood evaluation on Histfactory tutorial model using in totoal 300k toys: ; ```; StandardHypoTestInvDemo(""$ROOTSYS/tutorials/histfactory/results/example_combined_GaussExample_model.root"",""combined"",""ModelConfig"","""",""obsData"",0,0,true,2,0,5,100000); ```. - master : Time: 344 sec Memory : ~ 3.5 GB; - master + this PR : Time: 157 sec Memory: 570 Mb; - 6.15 Time: 197 sec Memory: 240 Mb; . Runing the master on MacOsX, I have observed a much smaller memory increase, but a much longer time spent with allocating/deallocating RooArgSet's when their total count increases.; This is not observed anymore after applying this PR. So in conclusion:. - this PR fixes the increase time spent in allocate/deallocate RooArgSet over time, which will slow down toys analysis when number of toys increase; - there is still some increase in memory usage, but it is much smaller than before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7954#issuecomment-824721395
https://github.com/root-project/root/issues/7955#issuecomment-856839812:198,Deployability,release,release,198,"This is critical because we might load who knows what into the frameworks. But because the fix is rather intrusive, and the OP has a simple workaround, I'll *not* backport the fixes to our existing release branches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7955#issuecomment-856839812
https://github.com/root-project/root/issues/7955#issuecomment-856839812:34,Performance,load,load,34,"This is critical because we might load who knows what into the frameworks. But because the fix is rather intrusive, and the OP has a simple workaround, I'll *not* backport the fixes to our existing release branches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7955#issuecomment-856839812
https://github.com/root-project/root/issues/7955#issuecomment-856839812:133,Usability,simpl,simple,133,"This is critical because we might load who knows what into the frameworks. But because the fix is rather intrusive, and the OP has a simple workaround, I'll *not* backport the fixes to our existing release branches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7955#issuecomment-856839812
https://github.com/root-project/root/issues/7971#issuecomment-2241265389:217,Energy Efficiency,efficient,efficient-parall,217,"We are really grateful for this feedback. The initial RHist prototype benefited a lot from it and became an even better base for the work that came after (see, e.g. https://indico.cern.ch/event/1403741/#1-thoughts-on-efficient-parall). I am marking this item as ""Won't fix"", but it should really be ""Thank you!"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7971#issuecomment-2241265389
https://github.com/root-project/root/issues/7971#issuecomment-2241265389:32,Usability,feedback,feedback,32,"We are really grateful for this feedback. The initial RHist prototype benefited a lot from it and became an even better base for the work that came after (see, e.g. https://indico.cern.ch/event/1403741/#1-thoughts-on-efficient-parall). I am marking this item as ""Won't fix"", but it should really be ""Thank you!"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7971#issuecomment-2241265389
https://github.com/root-project/root/pull/7972#issuecomment-825088829:371,Usability,clear,clearing,371,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115423/console).; ### Warnings:; - [2021-04-22T18:04:52.119Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-22T18:12:25.124Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7972#issuecomment-825088829
https://github.com/root-project/root/pull/7972#issuecomment-825088829:650,Usability,clear,clearing,650,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115423/console).; ### Warnings:; - [2021-04-22T18:04:52.119Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-22T18:12:25.124Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7972#issuecomment-825088829
https://github.com/root-project/root/pull/7988#issuecomment-825759330:48,Testability,test,test,48,"I would feel *way* more confident if we had any test for this :-/ Would you be kind enough (and I really mean it...) to provide one? It's fairly simple, just copy `core/base/test/TNamedTests.cxx` to `core/base/test/TBitsTests.cxx` and use the usual `EXPECT_EQ` to check for the output to be what you'd expect. *Then* we can simplify things! :-) Let us know, please!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7988#issuecomment-825759330
https://github.com/root-project/root/pull/7988#issuecomment-825759330:174,Testability,test,test,174,"I would feel *way* more confident if we had any test for this :-/ Would you be kind enough (and I really mean it...) to provide one? It's fairly simple, just copy `core/base/test/TNamedTests.cxx` to `core/base/test/TBitsTests.cxx` and use the usual `EXPECT_EQ` to check for the output to be what you'd expect. *Then* we can simplify things! :-) Let us know, please!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7988#issuecomment-825759330
https://github.com/root-project/root/pull/7988#issuecomment-825759330:210,Testability,test,test,210,"I would feel *way* more confident if we had any test for this :-/ Would you be kind enough (and I really mean it...) to provide one? It's fairly simple, just copy `core/base/test/TNamedTests.cxx` to `core/base/test/TBitsTests.cxx` and use the usual `EXPECT_EQ` to check for the output to be what you'd expect. *Then* we can simplify things! :-) Let us know, please!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7988#issuecomment-825759330
https://github.com/root-project/root/pull/7988#issuecomment-825759330:145,Usability,simpl,simple,145,"I would feel *way* more confident if we had any test for this :-/ Would you be kind enough (and I really mean it...) to provide one? It's fairly simple, just copy `core/base/test/TNamedTests.cxx` to `core/base/test/TBitsTests.cxx` and use the usual `EXPECT_EQ` to check for the output to be what you'd expect. *Then* we can simplify things! :-) Let us know, please!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7988#issuecomment-825759330
https://github.com/root-project/root/pull/7988#issuecomment-825759330:324,Usability,simpl,simplify,324,"I would feel *way* more confident if we had any test for this :-/ Would you be kind enough (and I really mean it...) to provide one? It's fairly simple, just copy `core/base/test/TNamedTests.cxx` to `core/base/test/TBitsTests.cxx` and use the usual `EXPECT_EQ` to check for the output to be what you'd expect. *Then* we can simplify things! :-) Let us know, please!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7988#issuecomment-825759330
https://github.com/root-project/root/issues/7991#issuecomment-826815525:371,Integrability,synchroniz,synchronize,371,"Dear Jonas. A huge thank you for your investigation on this, and kind explanation. Almost everything on what you explained is clear to me. But let me give you a tiny point where I don't completely understand. **About the <55 instead of <=55. You are right : I made a mistake there in my minimum example. But the principle of the comment stay. I made the fix in order to ""synchronize"" with the numerical values that you gave in your kind answer (I deduced that you made the fix). -->ok for that. **Case option_normalize_hist=1. Your comment : ""n_times_pdf_continuum->getVal()*bin_width=0.0181818 : here n_times_pdf_continuum is a RooAddPdf, which automatically normalizes itself. You create it from the continuum with 55 bins and bin width one, so I'd expect 1/55 which is indeed 0.0181818""; -->I disagree : my pdf is not just ""pdf_continuum"" : I put *n* times pdf_continuum where n is here the number of bkg : n=2200.; So I would expect that n times pdf should be 2200 * (1/55) = 40. **n_times_pdf_continuum is a RooAddPdf (with one element in the addition) with one parameter of yield, and one parameter of shape, so it is a extended pdf : n_bkg * times a pdf.**. **Case option_normalize_hist=0.; From your log, you changed a bit my code since in my code, I was putting, for the case not normalize :; if (option_normalize_hist); value_pdf=nb_events*pdf->getVal()*bin_width;; else; value_pdf=pdf->getVal()*bin_width;. But I understood your point (and it is clear)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7991#issuecomment-826815525
https://github.com/root-project/root/issues/7991#issuecomment-826815525:1126,Modifiability,extend,extended,1126,"Dear Jonas. A huge thank you for your investigation on this, and kind explanation. Almost everything on what you explained is clear to me. But let me give you a tiny point where I don't completely understand. **About the <55 instead of <=55. You are right : I made a mistake there in my minimum example. But the principle of the comment stay. I made the fix in order to ""synchronize"" with the numerical values that you gave in your kind answer (I deduced that you made the fix). -->ok for that. **Case option_normalize_hist=1. Your comment : ""n_times_pdf_continuum->getVal()*bin_width=0.0181818 : here n_times_pdf_continuum is a RooAddPdf, which automatically normalizes itself. You create it from the continuum with 55 bins and bin width one, so I'd expect 1/55 which is indeed 0.0181818""; -->I disagree : my pdf is not just ""pdf_continuum"" : I put *n* times pdf_continuum where n is here the number of bkg : n=2200.; So I would expect that n times pdf should be 2200 * (1/55) = 40. **n_times_pdf_continuum is a RooAddPdf (with one element in the addition) with one parameter of yield, and one parameter of shape, so it is a extended pdf : n_bkg * times a pdf.**. **Case option_normalize_hist=0.; From your log, you changed a bit my code since in my code, I was putting, for the case not normalize :; if (option_normalize_hist); value_pdf=nb_events*pdf->getVal()*bin_width;; else; value_pdf=pdf->getVal()*bin_width;. But I understood your point (and it is clear)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7991#issuecomment-826815525
https://github.com/root-project/root/issues/7991#issuecomment-826815525:1208,Testability,log,log,1208,"Dear Jonas. A huge thank you for your investigation on this, and kind explanation. Almost everything on what you explained is clear to me. But let me give you a tiny point where I don't completely understand. **About the <55 instead of <=55. You are right : I made a mistake there in my minimum example. But the principle of the comment stay. I made the fix in order to ""synchronize"" with the numerical values that you gave in your kind answer (I deduced that you made the fix). -->ok for that. **Case option_normalize_hist=1. Your comment : ""n_times_pdf_continuum->getVal()*bin_width=0.0181818 : here n_times_pdf_continuum is a RooAddPdf, which automatically normalizes itself. You create it from the continuum with 55 bins and bin width one, so I'd expect 1/55 which is indeed 0.0181818""; -->I disagree : my pdf is not just ""pdf_continuum"" : I put *n* times pdf_continuum where n is here the number of bkg : n=2200.; So I would expect that n times pdf should be 2200 * (1/55) = 40. **n_times_pdf_continuum is a RooAddPdf (with one element in the addition) with one parameter of yield, and one parameter of shape, so it is a extended pdf : n_bkg * times a pdf.**. **Case option_normalize_hist=0.; From your log, you changed a bit my code since in my code, I was putting, for the case not normalize :; if (option_normalize_hist); value_pdf=nb_events*pdf->getVal()*bin_width;; else; value_pdf=pdf->getVal()*bin_width;. But I understood your point (and it is clear)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7991#issuecomment-826815525
https://github.com/root-project/root/issues/7991#issuecomment-826815525:126,Usability,clear,clear,126,"Dear Jonas. A huge thank you for your investigation on this, and kind explanation. Almost everything on what you explained is clear to me. But let me give you a tiny point where I don't completely understand. **About the <55 instead of <=55. You are right : I made a mistake there in my minimum example. But the principle of the comment stay. I made the fix in order to ""synchronize"" with the numerical values that you gave in your kind answer (I deduced that you made the fix). -->ok for that. **Case option_normalize_hist=1. Your comment : ""n_times_pdf_continuum->getVal()*bin_width=0.0181818 : here n_times_pdf_continuum is a RooAddPdf, which automatically normalizes itself. You create it from the continuum with 55 bins and bin width one, so I'd expect 1/55 which is indeed 0.0181818""; -->I disagree : my pdf is not just ""pdf_continuum"" : I put *n* times pdf_continuum where n is here the number of bkg : n=2200.; So I would expect that n times pdf should be 2200 * (1/55) = 40. **n_times_pdf_continuum is a RooAddPdf (with one element in the addition) with one parameter of yield, and one parameter of shape, so it is a extended pdf : n_bkg * times a pdf.**. **Case option_normalize_hist=0.; From your log, you changed a bit my code since in my code, I was putting, for the case not normalize :; if (option_normalize_hist); value_pdf=nb_events*pdf->getVal()*bin_width;; else; value_pdf=pdf->getVal()*bin_width;. But I understood your point (and it is clear)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7991#issuecomment-826815525
https://github.com/root-project/root/issues/7991#issuecomment-826815525:1457,Usability,clear,clear,1457,"Dear Jonas. A huge thank you for your investigation on this, and kind explanation. Almost everything on what you explained is clear to me. But let me give you a tiny point where I don't completely understand. **About the <55 instead of <=55. You are right : I made a mistake there in my minimum example. But the principle of the comment stay. I made the fix in order to ""synchronize"" with the numerical values that you gave in your kind answer (I deduced that you made the fix). -->ok for that. **Case option_normalize_hist=1. Your comment : ""n_times_pdf_continuum->getVal()*bin_width=0.0181818 : here n_times_pdf_continuum is a RooAddPdf, which automatically normalizes itself. You create it from the continuum with 55 bins and bin width one, so I'd expect 1/55 which is indeed 0.0181818""; -->I disagree : my pdf is not just ""pdf_continuum"" : I put *n* times pdf_continuum where n is here the number of bkg : n=2200.; So I would expect that n times pdf should be 2200 * (1/55) = 40. **n_times_pdf_continuum is a RooAddPdf (with one element in the addition) with one parameter of yield, and one parameter of shape, so it is a extended pdf : n_bkg * times a pdf.**. **Case option_normalize_hist=0.; From your log, you changed a bit my code since in my code, I was putting, for the case not normalize :; if (option_normalize_hist); value_pdf=nb_events*pdf->getVal()*bin_width;; else; value_pdf=pdf->getVal()*bin_width;. But I understood your point (and it is clear)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7991#issuecomment-826815525
https://github.com/root-project/root/issues/7991#issuecomment-827087008:99,Usability,clear,clear,99,"Jonas : thank you very much for your generous help. You are my hero for root/roofit. Everything is clear. Unfortunately, from this discussion, it seems that I found a mistake (in some specific cases) in the way roofit is computing the nll as provided by class RooFitResult and by RooAbsPdf->createNLL.; (since I am able to reproduce the value by hand if I do a *mistake on purpose* in the formula.). ->I will prepare the minimum possible program to try to prove it (maybe there is a cartesian explanation) and will create a new github entry.; Thank you",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7991#issuecomment-827087008
https://github.com/root-project/root/pull/7994#issuecomment-826711414:371,Usability,clear,clearing,371,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115591/console).; ### Warnings:; - [2021-04-26T09:53:09.957Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-26T09:59:59.673Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7994#issuecomment-826711414
https://github.com/root-project/root/pull/7994#issuecomment-826711414:650,Usability,clear,clearing,650,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115591/console).; ### Warnings:; - [2021-04-26T09:53:09.957Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-26T09:59:59.673Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7994#issuecomment-826711414
https://github.com/root-project/root/issues/7996#issuecomment-826896706:84,Usability,guid,guide,84,This is fixed by https://github.com/root-project/root/pull/7951 . Just wait the ref guide is rebuild. It is building now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7996#issuecomment-826896706
https://github.com/root-project/root/issues/8031#issuecomment-2142432497:181,Usability,feedback,feedback,181,"I would really like if we can do something about this, as also `nixpkgs` uses by default the `build` directory in the sources for building :slightly_smiling_face:. Does anyone have feedback on my suggestion?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8031#issuecomment-2142432497
https://github.com/root-project/root/pull/8044#issuecomment-831916158:84,Usability,clear,clear,84,"OK, I thought. > Another version of this will be reintroduced in llvm upstream. was clear enough. Thanks for the review!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8044#issuecomment-831916158
https://github.com/root-project/root/issues/8073#issuecomment-1000999629:341,Performance,concurren,concurrentfill,341,"Many of the tests in the list above were renamed in master, but they all succceed:; ```; 1027/1220 Test #1028: tutorial-v7-histops.cxx ............................................. Passed 6.00 sec; 1029/1220 Test #1031: tutorial-v7-simple.cxx .............................................. Passed 8.82 sec; 1033/1220 Test #1026: tutorial-v7-concurrentfill.cxx ...................................... Passed 20.39 sec; 1034/1220 Test #1036: tutorial-rcanvas-rframe.cxx ......................................... Passed 2.93 sec; 1035/1220 Test #1037: tutorial-rcanvas-rh1.cxx ............................................ Passed 2.91 sec; 1037/1220 Test #1038: tutorial-rcanvas-rh1_large.cxx ...................................... Passed 3.14 sec; 1039/1220 Test #1040: tutorial-rcanvas-rh2.cxx ............................................ Passed 4.41 sec; 1040/1220 Test #1041: tutorial-rcanvas-rh2_colz.cxx ....................................... Passed 4.62 sec; 1041/1220 Test #1042: tutorial-rcanvas-rh2_large.cxx ...................................... Passed 4.85 sec; 1042/1220 Test #1045: tutorial-rcanvas-rlegend.cxx ........................................ Passed 2.46 sec; 1047/1220 Test #1034: tutorial-rcanvas-rcanvas_mt.cxx ..................................... Passed 25.33 sec; 1051/1220 Test #1043: tutorial-rcanvas-rh3.cxx ............................................ Passed 13.34 sec; 1053/1220 Test #1044: tutorial-rcanvas-rh3_large.cxx ...................................... Passed 13.14 sec; 1059/1220 Test #1056: tutorial-rcanvas-subpads.cxx ........................................ Passed 2.22 sec; 1066/1220 Test #1029: tutorial-v7-perf.cxx ................................................ Passed 55.03 sec; 1199/1220 Test #1030: tutorial-v7-perfcomp.cxx ............................................ Passed 105.92 sec; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8073#issuecomment-1000999629
https://github.com/root-project/root/issues/8073#issuecomment-1000999629:12,Testability,test,tests,12,"Many of the tests in the list above were renamed in master, but they all succceed:; ```; 1027/1220 Test #1028: tutorial-v7-histops.cxx ............................................. Passed 6.00 sec; 1029/1220 Test #1031: tutorial-v7-simple.cxx .............................................. Passed 8.82 sec; 1033/1220 Test #1026: tutorial-v7-concurrentfill.cxx ...................................... Passed 20.39 sec; 1034/1220 Test #1036: tutorial-rcanvas-rframe.cxx ......................................... Passed 2.93 sec; 1035/1220 Test #1037: tutorial-rcanvas-rh1.cxx ............................................ Passed 2.91 sec; 1037/1220 Test #1038: tutorial-rcanvas-rh1_large.cxx ...................................... Passed 3.14 sec; 1039/1220 Test #1040: tutorial-rcanvas-rh2.cxx ............................................ Passed 4.41 sec; 1040/1220 Test #1041: tutorial-rcanvas-rh2_colz.cxx ....................................... Passed 4.62 sec; 1041/1220 Test #1042: tutorial-rcanvas-rh2_large.cxx ...................................... Passed 4.85 sec; 1042/1220 Test #1045: tutorial-rcanvas-rlegend.cxx ........................................ Passed 2.46 sec; 1047/1220 Test #1034: tutorial-rcanvas-rcanvas_mt.cxx ..................................... Passed 25.33 sec; 1051/1220 Test #1043: tutorial-rcanvas-rh3.cxx ............................................ Passed 13.34 sec; 1053/1220 Test #1044: tutorial-rcanvas-rh3_large.cxx ...................................... Passed 13.14 sec; 1059/1220 Test #1056: tutorial-rcanvas-subpads.cxx ........................................ Passed 2.22 sec; 1066/1220 Test #1029: tutorial-v7-perf.cxx ................................................ Passed 55.03 sec; 1199/1220 Test #1030: tutorial-v7-perfcomp.cxx ............................................ Passed 105.92 sec; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8073#issuecomment-1000999629
https://github.com/root-project/root/issues/8073#issuecomment-1000999629:232,Usability,simpl,simple,232,"Many of the tests in the list above were renamed in master, but they all succceed:; ```; 1027/1220 Test #1028: tutorial-v7-histops.cxx ............................................. Passed 6.00 sec; 1029/1220 Test #1031: tutorial-v7-simple.cxx .............................................. Passed 8.82 sec; 1033/1220 Test #1026: tutorial-v7-concurrentfill.cxx ...................................... Passed 20.39 sec; 1034/1220 Test #1036: tutorial-rcanvas-rframe.cxx ......................................... Passed 2.93 sec; 1035/1220 Test #1037: tutorial-rcanvas-rh1.cxx ............................................ Passed 2.91 sec; 1037/1220 Test #1038: tutorial-rcanvas-rh1_large.cxx ...................................... Passed 3.14 sec; 1039/1220 Test #1040: tutorial-rcanvas-rh2.cxx ............................................ Passed 4.41 sec; 1040/1220 Test #1041: tutorial-rcanvas-rh2_colz.cxx ....................................... Passed 4.62 sec; 1041/1220 Test #1042: tutorial-rcanvas-rh2_large.cxx ...................................... Passed 4.85 sec; 1042/1220 Test #1045: tutorial-rcanvas-rlegend.cxx ........................................ Passed 2.46 sec; 1047/1220 Test #1034: tutorial-rcanvas-rcanvas_mt.cxx ..................................... Passed 25.33 sec; 1051/1220 Test #1043: tutorial-rcanvas-rh3.cxx ............................................ Passed 13.34 sec; 1053/1220 Test #1044: tutorial-rcanvas-rh3_large.cxx ...................................... Passed 13.14 sec; 1059/1220 Test #1056: tutorial-rcanvas-subpads.cxx ........................................ Passed 2.22 sec; 1066/1220 Test #1029: tutorial-v7-perf.cxx ................................................ Passed 55.03 sec; 1199/1220 Test #1030: tutorial-v7-perfcomp.cxx ............................................ Passed 105.92 sec; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8073#issuecomment-1000999629
https://github.com/root-project/root/pull/8090#issuecomment-832034444:83,Testability,test,test,83,"> @guitargeek Maybe commit a comment on how to create the reference file above the test. Sorry that I didn't do that already. The way I did this was simply to open the v4 file with a newer ROOT version, use the copy constructor of RooDataHist and save the copied object. Is this the way that you would document, or is there an easier way?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8090#issuecomment-832034444
https://github.com/root-project/root/pull/8090#issuecomment-832034444:149,Usability,simpl,simply,149,"> @guitargeek Maybe commit a comment on how to create the reference file above the test. Sorry that I didn't do that already. The way I did this was simply to open the v4 file with a newer ROOT version, use the copy constructor of RooDataHist and save the copied object. Is this the way that you would document, or is there an easier way?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8090#issuecomment-832034444
https://github.com/root-project/root/pull/8090#issuecomment-832043953:422,Testability,test,test,422,"> The way I did this was simply to open the v4 file with a newer ROOT version, use the copy constructor of RooDataHist and save the copied object. Is this the way that you would document, or is there an easier way?. Ah, right. That will work. I thought you re-engineered that RooDataHist to document it in the style of:; https://github.com/root-project/root/blob/ef483dd32765470c702d72adf387d68663e28842/roofit/roofitcore/test/testProxiesAndCategories.cxx#L59-L80. In this case, it was probably this, but I don't remember:; https://github.com/root-project/root/blob/ef483dd32765470c702d72adf387d68663e28842/roofit/roofitcore/test/testRooDataHist.cxx#L242-L248",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8090#issuecomment-832043953
https://github.com/root-project/root/pull/8090#issuecomment-832043953:427,Testability,test,testProxiesAndCategories,427,"> The way I did this was simply to open the v4 file with a newer ROOT version, use the copy constructor of RooDataHist and save the copied object. Is this the way that you would document, or is there an easier way?. Ah, right. That will work. I thought you re-engineered that RooDataHist to document it in the style of:; https://github.com/root-project/root/blob/ef483dd32765470c702d72adf387d68663e28842/roofit/roofitcore/test/testProxiesAndCategories.cxx#L59-L80. In this case, it was probably this, but I don't remember:; https://github.com/root-project/root/blob/ef483dd32765470c702d72adf387d68663e28842/roofit/roofitcore/test/testRooDataHist.cxx#L242-L248",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8090#issuecomment-832043953
https://github.com/root-project/root/pull/8090#issuecomment-832043953:625,Testability,test,test,625,"> The way I did this was simply to open the v4 file with a newer ROOT version, use the copy constructor of RooDataHist and save the copied object. Is this the way that you would document, or is there an easier way?. Ah, right. That will work. I thought you re-engineered that RooDataHist to document it in the style of:; https://github.com/root-project/root/blob/ef483dd32765470c702d72adf387d68663e28842/roofit/roofitcore/test/testProxiesAndCategories.cxx#L59-L80. In this case, it was probably this, but I don't remember:; https://github.com/root-project/root/blob/ef483dd32765470c702d72adf387d68663e28842/roofit/roofitcore/test/testRooDataHist.cxx#L242-L248",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8090#issuecomment-832043953
https://github.com/root-project/root/pull/8090#issuecomment-832043953:630,Testability,test,testRooDataHist,630,"> The way I did this was simply to open the v4 file with a newer ROOT version, use the copy constructor of RooDataHist and save the copied object. Is this the way that you would document, or is there an easier way?. Ah, right. That will work. I thought you re-engineered that RooDataHist to document it in the style of:; https://github.com/root-project/root/blob/ef483dd32765470c702d72adf387d68663e28842/roofit/roofitcore/test/testProxiesAndCategories.cxx#L59-L80. In this case, it was probably this, but I don't remember:; https://github.com/root-project/root/blob/ef483dd32765470c702d72adf387d68663e28842/roofit/roofitcore/test/testRooDataHist.cxx#L242-L248",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8090#issuecomment-832043953
https://github.com/root-project/root/pull/8090#issuecomment-832043953:25,Usability,simpl,simply,25,"> The way I did this was simply to open the v4 file with a newer ROOT version, use the copy constructor of RooDataHist and save the copied object. Is this the way that you would document, or is there an easier way?. Ah, right. That will work. I thought you re-engineered that RooDataHist to document it in the style of:; https://github.com/root-project/root/blob/ef483dd32765470c702d72adf387d68663e28842/roofit/roofitcore/test/testProxiesAndCategories.cxx#L59-L80. In this case, it was probably this, but I don't remember:; https://github.com/root-project/root/blob/ef483dd32765470c702d72adf387d68663e28842/roofit/roofitcore/test/testRooDataHist.cxx#L242-L248",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8090#issuecomment-832043953
https://github.com/root-project/root/issues/8098#issuecomment-832849033:392,Deployability,continuous,continuous,392,"To separate those we have now, a simple way is to use this add-on: https://addons.mozilla.org/en-US/firefox/addon/grayscale-browsing/. It will show https://root.cern.ch/doc/master/classTColor.html in grayscale mode. ![image](https://user-images.githubusercontent.com/10653970/117177407-47d76280-add1-11eb-9081-9bac9d4b4bd5.png). You can immediately see that the color scale in rainbow is not continuous, which is then misleading for colour-blinded in a 2D plot (not so much in a 3D surf like this one). kCMYK is also not great because it's dark, then lighter, then half-dark again. Others like kAquamarine have almost no contrast, it would be almost impossible to see sth there. So that would be a quick way to separate them. The idea is that the grayscale should be as proportional as possible, and monotonously increasing or decreasing. Unless it is symmetrical, then it is fine to have white in the borders and black in the centre (for example for example an axis that goes between -40 degrees and + 40 degrees, the 0 has a meaning). I guess one could do something similar for just removing red, green or blue from the image using GIMP, but for the moment with just grayscale it would be already a step.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8098#issuecomment-832849033
https://github.com/root-project/root/issues/8098#issuecomment-832849033:1099,Energy Efficiency,green,green,1099,"To separate those we have now, a simple way is to use this add-on: https://addons.mozilla.org/en-US/firefox/addon/grayscale-browsing/. It will show https://root.cern.ch/doc/master/classTColor.html in grayscale mode. ![image](https://user-images.githubusercontent.com/10653970/117177407-47d76280-add1-11eb-9081-9bac9d4b4bd5.png). You can immediately see that the color scale in rainbow is not continuous, which is then misleading for colour-blinded in a 2D plot (not so much in a 3D surf like this one). kCMYK is also not great because it's dark, then lighter, then half-dark again. Others like kAquamarine have almost no contrast, it would be almost impossible to see sth there. So that would be a quick way to separate them. The idea is that the grayscale should be as proportional as possible, and monotonously increasing or decreasing. Unless it is symmetrical, then it is fine to have white in the borders and black in the centre (for example for example an axis that goes between -40 degrees and + 40 degrees, the 0 has a meaning). I guess one could do something similar for just removing red, green or blue from the image using GIMP, but for the moment with just grayscale it would be already a step.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8098#issuecomment-832849033
https://github.com/root-project/root/issues/8098#issuecomment-832849033:33,Usability,simpl,simple,33,"To separate those we have now, a simple way is to use this add-on: https://addons.mozilla.org/en-US/firefox/addon/grayscale-browsing/. It will show https://root.cern.ch/doc/master/classTColor.html in grayscale mode. ![image](https://user-images.githubusercontent.com/10653970/117177407-47d76280-add1-11eb-9081-9bac9d4b4bd5.png). You can immediately see that the color scale in rainbow is not continuous, which is then misleading for colour-blinded in a 2D plot (not so much in a 3D surf like this one). kCMYK is also not great because it's dark, then lighter, then half-dark again. Others like kAquamarine have almost no contrast, it would be almost impossible to see sth there. So that would be a quick way to separate them. The idea is that the grayscale should be as proportional as possible, and monotonously increasing or decreasing. Unless it is symmetrical, then it is fine to have white in the borders and black in the centre (for example for example an axis that goes between -40 degrees and + 40 degrees, the 0 has a meaning). I guess one could do something similar for just removing red, green or blue from the image using GIMP, but for the moment with just grayscale it would be already a step.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8098#issuecomment-832849033
https://github.com/root-project/root/issues/8098#issuecomment-832859001:592,Availability,down,downloads,592,"Concerning the ScientificColourMaps, more than having 'all of them', it would be useful to have them in a 'classified manner', clearly identified in the TColor documentation. Or maybe have one of each type. - Centric value type (only use when symmetric bin contents) + ""Inverted variant""; - Sequential type (usual case) + ""Inverted variant""; - Discrete variants; Here the full description: https://www.nature.com/articles/s41467-020-19160-7/figures/6. Another option I was thinking was that one could follow the approach of ""Themes"" used in many programs to define their color set. If a user downloads some themes from ScientificColourMaps and puts them in $HOME/.config/root/color-palettes/. then gStyle->SetPalette(""batlow"") would automatically load that one, if existing, using something like the script I posted above. This would make it pretty flexible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8098#issuecomment-832859001
https://github.com/root-project/root/issues/8098#issuecomment-832859001:664,Modifiability,config,config,664,"Concerning the ScientificColourMaps, more than having 'all of them', it would be useful to have them in a 'classified manner', clearly identified in the TColor documentation. Or maybe have one of each type. - Centric value type (only use when symmetric bin contents) + ""Inverted variant""; - Sequential type (usual case) + ""Inverted variant""; - Discrete variants; Here the full description: https://www.nature.com/articles/s41467-020-19160-7/figures/6. Another option I was thinking was that one could follow the approach of ""Themes"" used in many programs to define their color set. If a user downloads some themes from ScientificColourMaps and puts them in $HOME/.config/root/color-palettes/. then gStyle->SetPalette(""batlow"") would automatically load that one, if existing, using something like the script I posted above. This would make it pretty flexible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8098#issuecomment-832859001
https://github.com/root-project/root/issues/8098#issuecomment-832859001:849,Modifiability,flexible,flexible,849,"Concerning the ScientificColourMaps, more than having 'all of them', it would be useful to have them in a 'classified manner', clearly identified in the TColor documentation. Or maybe have one of each type. - Centric value type (only use when symmetric bin contents) + ""Inverted variant""; - Sequential type (usual case) + ""Inverted variant""; - Discrete variants; Here the full description: https://www.nature.com/articles/s41467-020-19160-7/figures/6. Another option I was thinking was that one could follow the approach of ""Themes"" used in many programs to define their color set. If a user downloads some themes from ScientificColourMaps and puts them in $HOME/.config/root/color-palettes/. then gStyle->SetPalette(""batlow"") would automatically load that one, if existing, using something like the script I posted above. This would make it pretty flexible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8098#issuecomment-832859001
https://github.com/root-project/root/issues/8098#issuecomment-832859001:747,Performance,load,load,747,"Concerning the ScientificColourMaps, more than having 'all of them', it would be useful to have them in a 'classified manner', clearly identified in the TColor documentation. Or maybe have one of each type. - Centric value type (only use when symmetric bin contents) + ""Inverted variant""; - Sequential type (usual case) + ""Inverted variant""; - Discrete variants; Here the full description: https://www.nature.com/articles/s41467-020-19160-7/figures/6. Another option I was thinking was that one could follow the approach of ""Themes"" used in many programs to define their color set. If a user downloads some themes from ScientificColourMaps and puts them in $HOME/.config/root/color-palettes/. then gStyle->SetPalette(""batlow"") would automatically load that one, if existing, using something like the script I posted above. This would make it pretty flexible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8098#issuecomment-832859001
https://github.com/root-project/root/issues/8098#issuecomment-832859001:127,Usability,clear,clearly,127,"Concerning the ScientificColourMaps, more than having 'all of them', it would be useful to have them in a 'classified manner', clearly identified in the TColor documentation. Or maybe have one of each type. - Centric value type (only use when symmetric bin contents) + ""Inverted variant""; - Sequential type (usual case) + ""Inverted variant""; - Discrete variants; Here the full description: https://www.nature.com/articles/s41467-020-19160-7/figures/6. Another option I was thinking was that one could follow the approach of ""Themes"" used in many programs to define their color set. If a user downloads some themes from ScientificColourMaps and puts them in $HOME/.config/root/color-palettes/. then gStyle->SetPalette(""batlow"") would automatically load that one, if existing, using something like the script I posted above. This would make it pretty flexible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8098#issuecomment-832859001
https://github.com/root-project/root/issues/8098#issuecomment-968998294:447,Availability,down,download,447,"This example would need to be modified before being put in tutorials:. 1. It should be formatted the proper way. See for instance [this one](https://github.com/root-project/root/blob/master/tutorials/graphics/arrows.C). The header should be formatted that way with a proper author name at the end.; 2. The description of the macro should be more than just a brief. May be some explanation about the site it refers to would help. In particular the download link should be to ScientificColourMaps7.zip I guess.; 3. You are using a TTree do read the .txt file. Why not, but that might be a bit ""too much"" just to read an ascii file of 3 columns. A standard C/C++ ASCII file reading is enough.; 4. The files have already 255 colors. So you do not need CreateGradientColorTable to interpolate the colors simply build the palette with the colors you read.; 5. Yes a static function in TColor would be also a possibiblity but the same comments apply.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8098#issuecomment-968998294
https://github.com/root-project/root/issues/8098#issuecomment-968998294:799,Usability,simpl,simply,799,"This example would need to be modified before being put in tutorials:. 1. It should be formatted the proper way. See for instance [this one](https://github.com/root-project/root/blob/master/tutorials/graphics/arrows.C). The header should be formatted that way with a proper author name at the end.; 2. The description of the macro should be more than just a brief. May be some explanation about the site it refers to would help. In particular the download link should be to ScientificColourMaps7.zip I guess.; 3. You are using a TTree do read the .txt file. Why not, but that might be a bit ""too much"" just to read an ascii file of 3 columns. A standard C/C++ ASCII file reading is enough.; 4. The files have already 255 colors. So you do not need CreateGradientColorTable to interpolate the colors simply build the palette with the colors you read.; 5. Yes a static function in TColor would be also a possibiblity but the same comments apply.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8098#issuecomment-968998294
https://github.com/root-project/root/issues/8110#issuecomment-2148504771:1173,Availability,avail,available,1173,"Hi @ynikitenko, thanks for the request! There are several reasons for not supporting PyPy. PyROOT, which is building on top of cppyy, is very deeply connected to the CPython implementation of CPyCppyy. Just like the CPython version of cppyy, PyROOT consists of a Python module and a compiled CPython extension (`libROOTPythonization`). And you can't use CPython extensions in PyPy. So to support PyPy, we would have to rewrite [all this code](https://github.com/root-project/root/tree/master/bindings/pyroot/pythonizations/src), and work closely with the cppyy team to make sure it's PyPy implementation also provides the interfaces that PyROOT expects. That would be a *huge* amount of work with no usecase to justify it. And there are so many alternative of fast analysis frameworks that people are trying out right now: RDataFrame, NumPy, numba, awkward arrays, etc. And let's not forget that pypy has it's limitations! It only supports a restricted subset of Python, and it would require large efforts to port PyROOT to this. One final point: the future of PyPy development is not very clear. Right now, they don't support Python 3.11 yet, for example. Builds are only available for [Python 3.9 and Python 3.10](https://www.pypy.org/download_advanced.html). So investing in PyPy compatibility is also risky because of that. Imagine we would spend half a year trying to support it, and then PyPy would not be maintained anymore :(. I'll therefore close this issue as ""not planned"". tldr; the HEP community is gravitation towards other C++ native of jit-based Python packages to speed up analysis, and at this point investing in pypy is not worth it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8110#issuecomment-2148504771
https://github.com/root-project/root/issues/8110#issuecomment-2148504771:622,Integrability,interface,interfaces,622,"Hi @ynikitenko, thanks for the request! There are several reasons for not supporting PyPy. PyROOT, which is building on top of cppyy, is very deeply connected to the CPython implementation of CPyCppyy. Just like the CPython version of cppyy, PyROOT consists of a Python module and a compiled CPython extension (`libROOTPythonization`). And you can't use CPython extensions in PyPy. So to support PyPy, we would have to rewrite [all this code](https://github.com/root-project/root/tree/master/bindings/pyroot/pythonizations/src), and work closely with the cppyy team to make sure it's PyPy implementation also provides the interfaces that PyROOT expects. That would be a *huge* amount of work with no usecase to justify it. And there are so many alternative of fast analysis frameworks that people are trying out right now: RDataFrame, NumPy, numba, awkward arrays, etc. And let's not forget that pypy has it's limitations! It only supports a restricted subset of Python, and it would require large efforts to port PyROOT to this. One final point: the future of PyPy development is not very clear. Right now, they don't support Python 3.11 yet, for example. Builds are only available for [Python 3.9 and Python 3.10](https://www.pypy.org/download_advanced.html). So investing in PyPy compatibility is also risky because of that. Imagine we would spend half a year trying to support it, and then PyPy would not be maintained anymore :(. I'll therefore close this issue as ""not planned"". tldr; the HEP community is gravitation towards other C++ native of jit-based Python packages to speed up analysis, and at this point investing in pypy is not worth it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8110#issuecomment-2148504771
https://github.com/root-project/root/issues/8110#issuecomment-2148504771:419,Modifiability,rewrite,rewrite,419,"Hi @ynikitenko, thanks for the request! There are several reasons for not supporting PyPy. PyROOT, which is building on top of cppyy, is very deeply connected to the CPython implementation of CPyCppyy. Just like the CPython version of cppyy, PyROOT consists of a Python module and a compiled CPython extension (`libROOTPythonization`). And you can't use CPython extensions in PyPy. So to support PyPy, we would have to rewrite [all this code](https://github.com/root-project/root/tree/master/bindings/pyroot/pythonizations/src), and work closely with the cppyy team to make sure it's PyPy implementation also provides the interfaces that PyROOT expects. That would be a *huge* amount of work with no usecase to justify it. And there are so many alternative of fast analysis frameworks that people are trying out right now: RDataFrame, NumPy, numba, awkward arrays, etc. And let's not forget that pypy has it's limitations! It only supports a restricted subset of Python, and it would require large efforts to port PyROOT to this. One final point: the future of PyPy development is not very clear. Right now, they don't support Python 3.11 yet, for example. Builds are only available for [Python 3.9 and Python 3.10](https://www.pypy.org/download_advanced.html). So investing in PyPy compatibility is also risky because of that. Imagine we would spend half a year trying to support it, and then PyPy would not be maintained anymore :(. I'll therefore close this issue as ""not planned"". tldr; the HEP community is gravitation towards other C++ native of jit-based Python packages to speed up analysis, and at this point investing in pypy is not worth it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8110#issuecomment-2148504771
https://github.com/root-project/root/issues/8110#issuecomment-2148504771:1305,Safety,risk,risky,1305,"Hi @ynikitenko, thanks for the request! There are several reasons for not supporting PyPy. PyROOT, which is building on top of cppyy, is very deeply connected to the CPython implementation of CPyCppyy. Just like the CPython version of cppyy, PyROOT consists of a Python module and a compiled CPython extension (`libROOTPythonization`). And you can't use CPython extensions in PyPy. So to support PyPy, we would have to rewrite [all this code](https://github.com/root-project/root/tree/master/bindings/pyroot/pythonizations/src), and work closely with the cppyy team to make sure it's PyPy implementation also provides the interfaces that PyROOT expects. That would be a *huge* amount of work with no usecase to justify it. And there are so many alternative of fast analysis frameworks that people are trying out right now: RDataFrame, NumPy, numba, awkward arrays, etc. And let's not forget that pypy has it's limitations! It only supports a restricted subset of Python, and it would require large efforts to port PyROOT to this. One final point: the future of PyPy development is not very clear. Right now, they don't support Python 3.11 yet, for example. Builds are only available for [Python 3.9 and Python 3.10](https://www.pypy.org/download_advanced.html). So investing in PyPy compatibility is also risky because of that. Imagine we would spend half a year trying to support it, and then PyPy would not be maintained anymore :(. I'll therefore close this issue as ""not planned"". tldr; the HEP community is gravitation towards other C++ native of jit-based Python packages to speed up analysis, and at this point investing in pypy is not worth it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8110#issuecomment-2148504771
https://github.com/root-project/root/issues/8110#issuecomment-2148504771:1090,Usability,clear,clear,1090,"Hi @ynikitenko, thanks for the request! There are several reasons for not supporting PyPy. PyROOT, which is building on top of cppyy, is very deeply connected to the CPython implementation of CPyCppyy. Just like the CPython version of cppyy, PyROOT consists of a Python module and a compiled CPython extension (`libROOTPythonization`). And you can't use CPython extensions in PyPy. So to support PyPy, we would have to rewrite [all this code](https://github.com/root-project/root/tree/master/bindings/pyroot/pythonizations/src), and work closely with the cppyy team to make sure it's PyPy implementation also provides the interfaces that PyROOT expects. That would be a *huge* amount of work with no usecase to justify it. And there are so many alternative of fast analysis frameworks that people are trying out right now: RDataFrame, NumPy, numba, awkward arrays, etc. And let's not forget that pypy has it's limitations! It only supports a restricted subset of Python, and it would require large efforts to port PyROOT to this. One final point: the future of PyPy development is not very clear. Right now, they don't support Python 3.11 yet, for example. Builds are only available for [Python 3.9 and Python 3.10](https://www.pypy.org/download_advanced.html). So investing in PyPy compatibility is also risky because of that. Imagine we would spend half a year trying to support it, and then PyPy would not be maintained anymore :(. I'll therefore close this issue as ""not planned"". tldr; the HEP community is gravitation towards other C++ native of jit-based Python packages to speed up analysis, and at this point investing in pypy is not worth it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8110#issuecomment-2148504771
https://github.com/root-project/root/pull/8137#issuecomment-838795380:307,Modifiability,inherit,inherit,307,"Thanks for the comment! I agree that it's not clear how meaningful `weightError` is for RooDataSet, but still the only two classes that derive from RooAbsData are RooDataHist and RooDataSet. Both of them reimplement `weightError` in a non-trivial way. Or are you thinking about some user classes that might inherit from `RooAbsData`? In that case they would not compile because not all purely virtual functions are implemented. But I'd argue that this a good thing, because then the user is made aware that `weightError` should be implemented with a dummy value. Actually, it can even be dangerous that we choose this dummy value ourselves (why zero and not `nan` for example?). I think purely virtual functions are safer than ""dummy functions"", and they are also more self-documenting because we know that every inheriting class will be overloading this function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8137#issuecomment-838795380
https://github.com/root-project/root/pull/8137#issuecomment-838795380:813,Modifiability,inherit,inheriting,813,"Thanks for the comment! I agree that it's not clear how meaningful `weightError` is for RooDataSet, but still the only two classes that derive from RooAbsData are RooDataHist and RooDataSet. Both of them reimplement `weightError` in a non-trivial way. Or are you thinking about some user classes that might inherit from `RooAbsData`? In that case they would not compile because not all purely virtual functions are implemented. But I'd argue that this a good thing, because then the user is made aware that `weightError` should be implemented with a dummy value. Actually, it can even be dangerous that we choose this dummy value ourselves (why zero and not `nan` for example?). I think purely virtual functions are safer than ""dummy functions"", and they are also more self-documenting because we know that every inheriting class will be overloading this function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8137#issuecomment-838795380
https://github.com/root-project/root/pull/8137#issuecomment-838795380:716,Safety,safe,safer,716,"Thanks for the comment! I agree that it's not clear how meaningful `weightError` is for RooDataSet, but still the only two classes that derive from RooAbsData are RooDataHist and RooDataSet. Both of them reimplement `weightError` in a non-trivial way. Or are you thinking about some user classes that might inherit from `RooAbsData`? In that case they would not compile because not all purely virtual functions are implemented. But I'd argue that this a good thing, because then the user is made aware that `weightError` should be implemented with a dummy value. Actually, it can even be dangerous that we choose this dummy value ourselves (why zero and not `nan` for example?). I think purely virtual functions are safer than ""dummy functions"", and they are also more self-documenting because we know that every inheriting class will be overloading this function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8137#issuecomment-838795380
https://github.com/root-project/root/pull/8137#issuecomment-838795380:46,Usability,clear,clear,46,"Thanks for the comment! I agree that it's not clear how meaningful `weightError` is for RooDataSet, but still the only two classes that derive from RooAbsData are RooDataHist and RooDataSet. Both of them reimplement `weightError` in a non-trivial way. Or are you thinking about some user classes that might inherit from `RooAbsData`? In that case they would not compile because not all purely virtual functions are implemented. But I'd argue that this a good thing, because then the user is made aware that `weightError` should be implemented with a dummy value. Actually, it can even be dangerous that we choose this dummy value ourselves (why zero and not `nan` for example?). I think purely virtual functions are safer than ""dummy functions"", and they are also more self-documenting because we know that every inheriting class will be overloading this function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8137#issuecomment-838795380
https://github.com/root-project/root/pull/8143#issuecomment-946555747:13,Usability,feedback,feedback,13,@lmoneta any feedback on the PR ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8143#issuecomment-946555747
https://github.com/root-project/root/issues/8152#issuecomment-839744359:98,Deployability,release,releases,98,"Dear @etejedor ; I have no local built of ROOT - it is too heavy for me - I am always rely on LCG releases or nightlies. ; The problem appeared not earlier than a week ago. There was a few days break in tests of my project, ; and restarting tests after this pause, couple of days ago, I've observed this behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8152#issuecomment-839744359
https://github.com/root-project/root/issues/8152#issuecomment-839744359:203,Testability,test,tests,203,"Dear @etejedor ; I have no local built of ROOT - it is too heavy for me - I am always rely on LCG releases or nightlies. ; The problem appeared not earlier than a week ago. There was a few days break in tests of my project, ; and restarting tests after this pause, couple of days ago, I've observed this behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8152#issuecomment-839744359
https://github.com/root-project/root/issues/8152#issuecomment-839744359:241,Testability,test,tests,241,"Dear @etejedor ; I have no local built of ROOT - it is too heavy for me - I am always rely on LCG releases or nightlies. ; The problem appeared not earlier than a week ago. There was a few days break in tests of my project, ; and restarting tests after this pause, couple of days ago, I've observed this behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8152#issuecomment-839744359
https://github.com/root-project/root/issues/8152#issuecomment-839744359:258,Usability,pause,pause,258,"Dear @etejedor ; I have no local built of ROOT - it is too heavy for me - I am always rely on LCG releases or nightlies. ; The problem appeared not earlier than a week ago. There was a few days break in tests of my project, ; and restarting tests after this pause, couple of days ago, I've observed this behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8152#issuecomment-839744359
https://github.com/root-project/root/pull/8169#issuecomment-842963722:434,Usability,learn,learned,434,"> @hahnjo thanks a lot, I wanted to ask if TBB_USE_CAPTURED_EXCEPTION is limited to particular version of TBB?. My understanding is that `TBB_USE_CAPTURED_EXCEPTION` is the fallback if TBB cannot determine that it can properly forward exceptions from the workers. In my setup, this happens with the packaged version TBB 2018 on CentOS 8 when compiling with Clang (because that advertises compatibility with GCC 4.2.1 and only 2019.U4 learned to ignore this).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8169#issuecomment-842963722
https://github.com/root-project/root/pull/8174#issuecomment-842217657:210,Security,access,access,210,"Hi Will!. We try to bring the behavior of the `RooAbsCollection`s closer to the STL containers like [std::vector](https://en.cppreference.com/w/cpp/container/vector). This means that `operator[]` should simply access an element as quickly as possible without any bounds checking for no overhead. That's why it changed from 6.24 to master. Only the `at()` member should do the bounds checking. I still have some work to do here because its behavior is inconsistent with `std::vector` (it returns a `nullptr` if the bounds check fails). So bringing the element-accessing behavior closer to Python behavior would unfortunately bring us further away from the STL behavior, and I would advise against the suggested change. However, I would agree that on the pyROOT side, the `RooAbsCollections` should behave more pythonic and we should absolutely implement a pythonization to support element access from the back with negative indices!. Is that a fair compromise? Did you intend to use the negative indices in C++?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8174#issuecomment-842217657
https://github.com/root-project/root/pull/8174#issuecomment-842217657:559,Security,access,accessing,559,"Hi Will!. We try to bring the behavior of the `RooAbsCollection`s closer to the STL containers like [std::vector](https://en.cppreference.com/w/cpp/container/vector). This means that `operator[]` should simply access an element as quickly as possible without any bounds checking for no overhead. That's why it changed from 6.24 to master. Only the `at()` member should do the bounds checking. I still have some work to do here because its behavior is inconsistent with `std::vector` (it returns a `nullptr` if the bounds check fails). So bringing the element-accessing behavior closer to Python behavior would unfortunately bring us further away from the STL behavior, and I would advise against the suggested change. However, I would agree that on the pyROOT side, the `RooAbsCollections` should behave more pythonic and we should absolutely implement a pythonization to support element access from the back with negative indices!. Is that a fair compromise? Did you intend to use the negative indices in C++?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8174#issuecomment-842217657
https://github.com/root-project/root/pull/8174#issuecomment-842217657:888,Security,access,access,888,"Hi Will!. We try to bring the behavior of the `RooAbsCollection`s closer to the STL containers like [std::vector](https://en.cppreference.com/w/cpp/container/vector). This means that `operator[]` should simply access an element as quickly as possible without any bounds checking for no overhead. That's why it changed from 6.24 to master. Only the `at()` member should do the bounds checking. I still have some work to do here because its behavior is inconsistent with `std::vector` (it returns a `nullptr` if the bounds check fails). So bringing the element-accessing behavior closer to Python behavior would unfortunately bring us further away from the STL behavior, and I would advise against the suggested change. However, I would agree that on the pyROOT side, the `RooAbsCollections` should behave more pythonic and we should absolutely implement a pythonization to support element access from the back with negative indices!. Is that a fair compromise? Did you intend to use the negative indices in C++?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8174#issuecomment-842217657
https://github.com/root-project/root/pull/8174#issuecomment-842217657:203,Usability,simpl,simply,203,"Hi Will!. We try to bring the behavior of the `RooAbsCollection`s closer to the STL containers like [std::vector](https://en.cppreference.com/w/cpp/container/vector). This means that `operator[]` should simply access an element as quickly as possible without any bounds checking for no overhead. That's why it changed from 6.24 to master. Only the `at()` member should do the bounds checking. I still have some work to do here because its behavior is inconsistent with `std::vector` (it returns a `nullptr` if the bounds check fails). So bringing the element-accessing behavior closer to Python behavior would unfortunately bring us further away from the STL behavior, and I would advise against the suggested change. However, I would agree that on the pyROOT side, the `RooAbsCollections` should behave more pythonic and we should absolutely implement a pythonization to support element access from the back with negative indices!. Is that a fair compromise? Did you intend to use the negative indices in C++?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8174#issuecomment-842217657
https://github.com/root-project/root/pull/8177#issuecomment-841335386:356,Safety,avoid,avoid,356,"> I take it from the warnings that I might have to add the other FindObject method (that accepts a TObject pointer) to satisfy the builds? Please confirm and I can do this. Exactly. Something like `auto ptr = dynamic_cast<const RooAbsArg*>; return ptr ? find(*ptr) : nullptr;` should do it. Could you include a one-line doxygen-readable comment (`///`) to avoid having two undocumented functions? Also note that `find(RooAbsArg&)` will find objects with the same name, not necessarily with the same pointer. You should decide with @guitargeek if that's actually desired when called from the Python side. In a second sentence, you should document whether that function will find objects with the same name (= equivalent objects as far as RooFit is concerned) or if it should only find the exact same object.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8177#issuecomment-841335386
https://github.com/root-project/root/pull/8177#issuecomment-841335386:373,Usability,undo,undocumented,373,"> I take it from the warnings that I might have to add the other FindObject method (that accepts a TObject pointer) to satisfy the builds? Please confirm and I can do this. Exactly. Something like `auto ptr = dynamic_cast<const RooAbsArg*>; return ptr ? find(*ptr) : nullptr;` should do it. Could you include a one-line doxygen-readable comment (`///`) to avoid having two undocumented functions? Also note that `find(RooAbsArg&)` will find objects with the same name, not necessarily with the same pointer. You should decide with @guitargeek if that's actually desired when called from the Python side. In a second sentence, you should document whether that function will find objects with the same name (= equivalent objects as far as RooFit is concerned) or if it should only find the exact same object.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8177#issuecomment-841335386
https://github.com/root-project/root/pull/8177#issuecomment-841340893:372,Safety,avoid,avoid,372,"> > I take it from the warnings that I might have to add the other FindObject method (that accepts a TObject pointer) to satisfy the builds? Please confirm and I can do this.; > ; > Exactly. Something like `auto ptr = dynamic_cast<const RooAbsArg*>; return ptr ? find(*ptr) : nullptr;` should do it.; > ; > Could you include a one-line doxygen-readable comment (`///`) to avoid having two undocumented functions? Also note that `find(RooAbsArg&)` will find objects with the same name, not necessarily with the same pointer. You should decide with @guitargeek if that's actually desired when called from the Python side. In a second sentence, you should document whether that function will find objects with the same name (= equivalent objects as far as RooFit is concerned) or if it should only find the exact same object. Indeed I thought about having `auto arg = dynamic_cast<const RooAbsArg*>(obj); return (arg && containsInstance(*arg)) ? obj : nullptr;` but given the 'find' method matches by name I think for consistency the FindObject should behave the same for these classes, unless there is some additional benefit to FindObject(obj) returning obj??",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8177#issuecomment-841340893
https://github.com/root-project/root/pull/8177#issuecomment-841340893:389,Usability,undo,undocumented,389,"> > I take it from the warnings that I might have to add the other FindObject method (that accepts a TObject pointer) to satisfy the builds? Please confirm and I can do this.; > ; > Exactly. Something like `auto ptr = dynamic_cast<const RooAbsArg*>; return ptr ? find(*ptr) : nullptr;` should do it.; > ; > Could you include a one-line doxygen-readable comment (`///`) to avoid having two undocumented functions? Also note that `find(RooAbsArg&)` will find objects with the same name, not necessarily with the same pointer. You should decide with @guitargeek if that's actually desired when called from the Python side. In a second sentence, you should document whether that function will find objects with the same name (= equivalent objects as far as RooFit is concerned) or if it should only find the exact same object. Indeed I thought about having `auto arg = dynamic_cast<const RooAbsArg*>(obj); return (arg && containsInstance(*arg)) ? obj : nullptr;` but given the 'find' method matches by name I think for consistency the FindObject should behave the same for these classes, unless there is some additional benefit to FindObject(obj) returning obj??",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8177#issuecomment-841340893
https://github.com/root-project/root/issues/8178#issuecomment-848621017:111,Usability,guid,guide,111,This looks like an inconsistency in your build. I don't know how to reproduce this. If you have a step-by-step guide on how to end up with this breakage please let us know and re-open this ticket!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8178#issuecomment-848621017
https://github.com/root-project/root/pull/8181#issuecomment-842273434:28,Usability,simpl,simple,28,"I convert into draft, while simple member name change does not work.; Also increase of class version does not help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8181#issuecomment-842273434
https://github.com/root-project/root/pull/8192#issuecomment-842960413:234,Usability,feedback,feedback,234,"## DeepCode failed to analyze this pull request; Something went wrong despite trying multiple times, sorry about that.; Please comment this pull request with ""Retry DeepCode"" to manually retry, or [contact us](https://www.deepcode.ai/feedback?select=4&utm_source=gh_review) so that a human can look into the issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8192#issuecomment-842960413
https://github.com/root-project/root/issues/8196#issuecomment-849462802:911,Usability,feedback,feedback,911,"The current idea is the following: . 1. For algorithms using only pdf: ; ```; TUnuranContDist dist(pdf); ; ```; 2. For algorithm using pdf + its derivative: ; ```; TUnuranContDist dist(pdf, &dpdf); ; ```; 3. For algorithms using pdf + derivative + pdf: ; ```; TUnuranContDist dist(pdf, &dpdf); ; dist.SetCdf(cdf);; ```; 4. For algorithms using only the cdf: ; ```; TUnuranContDist dist(); ; dist.SetCdf(cdf);; ```. I agree cases 3 and 4 are not very nice, also in case 4 one is forced to have the input functions cloned. ; I would prefer to not change the existing constructor for not breaking the backward compatibility. ; What about adding a constructor like this one: ; ```; TUnuranContDist dist(const ROOT::Math::IGenFunction * pdf, ; ROOT::Math::IGenFunction * dpdf, ; ROOT::Math::GenFunction * cpdf, bool isLogPdf = false, bool copyFunc = false); ; ```; and similar for the TF1 case ? . Thank you for the feedback !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8196#issuecomment-849462802
https://github.com/root-project/root/issues/8199#issuecomment-843369054:764,Integrability,wrap,wrapping,764,"A possible implementation, that could go in some ROOT::Math classes:. ```; #include <bitset>; #include <cmath>; #include <array>; #include <set>; #include <iostream>. using std::bitset;; using std::array;; using std::vector;; using std::set;; using std::cout;; using std::endl;. /**; * @brief Generation of pseudo-random bits using a linear feedback shift register (LFSR), until a register value is repeated (or maxPeriod is reached); * @tparam k the length of the LFSR, or the order of the monic polynomial PRBS-k (last exponent); * @tparam nTaps the number of taps; * @param start the start value of the LFSR; * @param taps the taps that will be XOR-ed to calculate the new bit. They are the exponents of the monic polynomial. Ordering is unimportant.; * @param wrapping if true, allow wrapping until maxPeriod or start is reached; * @param verbose if true, print the lfsr and new bit on each step; * @note Shift direction of the register is to the left <<, the newBit is set at bit position 0 (right); * @return the array of pseudo random bits, or an empty array if input was incorrect; * @see https://en.wikipedia.org/wiki/Monic_polynomial; * @see https://en.wikipedia.org/wiki/Linear-feedback_shift_register; * @see https://en.wikipedia.org/wiki/Pseudorandom_binary_sequence; */; template <size_t k, size_t nTaps>; vector<bool>; LFSR(const bitset<k> start, const array<uint16_t, nTaps> taps, const bool wrapping = false, const bool verbose = false); {; vector<bool> result;; //Sanity-checks; if(taps.size()<2); {; cerr << ""At least two taps are needed"" << endl;; return result;; }; for(auto tap : taps); {; if(tap > k); {; cerr << ""Out of range tap "" << tap << endl;; return result;; }; }; if(start.none()); {; cerr << ""A non-zero start value is needed"" << endl;; return result;; }. const uint32_t maxPeriod = pow(2,k) - 1;; result.reserve(maxPeriod);. set<uint32_t> lfsrHistory;; bitset<k> lfsr(start);; uint32_t i = 0;; do; {; // XOR of all the tapped bits. We use -1 because an exponent N in t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8199#issuecomment-843369054
https://github.com/root-project/root/issues/8199#issuecomment-843369054:788,Integrability,wrap,wrapping,788,"A possible implementation, that could go in some ROOT::Math classes:. ```; #include <bitset>; #include <cmath>; #include <array>; #include <set>; #include <iostream>. using std::bitset;; using std::array;; using std::vector;; using std::set;; using std::cout;; using std::endl;. /**; * @brief Generation of pseudo-random bits using a linear feedback shift register (LFSR), until a register value is repeated (or maxPeriod is reached); * @tparam k the length of the LFSR, or the order of the monic polynomial PRBS-k (last exponent); * @tparam nTaps the number of taps; * @param start the start value of the LFSR; * @param taps the taps that will be XOR-ed to calculate the new bit. They are the exponents of the monic polynomial. Ordering is unimportant.; * @param wrapping if true, allow wrapping until maxPeriod or start is reached; * @param verbose if true, print the lfsr and new bit on each step; * @note Shift direction of the register is to the left <<, the newBit is set at bit position 0 (right); * @return the array of pseudo random bits, or an empty array if input was incorrect; * @see https://en.wikipedia.org/wiki/Monic_polynomial; * @see https://en.wikipedia.org/wiki/Linear-feedback_shift_register; * @see https://en.wikipedia.org/wiki/Pseudorandom_binary_sequence; */; template <size_t k, size_t nTaps>; vector<bool>; LFSR(const bitset<k> start, const array<uint16_t, nTaps> taps, const bool wrapping = false, const bool verbose = false); {; vector<bool> result;; //Sanity-checks; if(taps.size()<2); {; cerr << ""At least two taps are needed"" << endl;; return result;; }; for(auto tap : taps); {; if(tap > k); {; cerr << ""Out of range tap "" << tap << endl;; return result;; }; }; if(start.none()); {; cerr << ""A non-zero start value is needed"" << endl;; return result;; }. const uint32_t maxPeriod = pow(2,k) - 1;; result.reserve(maxPeriod);. set<uint32_t> lfsrHistory;; bitset<k> lfsr(start);; uint32_t i = 0;; do; {; // XOR of all the tapped bits. We use -1 because an exponent N in t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8199#issuecomment-843369054
https://github.com/root-project/root/issues/8199#issuecomment-843369054:1408,Integrability,wrap,wrapping,1408,"until a register value is repeated (or maxPeriod is reached); * @tparam k the length of the LFSR, or the order of the monic polynomial PRBS-k (last exponent); * @tparam nTaps the number of taps; * @param start the start value of the LFSR; * @param taps the taps that will be XOR-ed to calculate the new bit. They are the exponents of the monic polynomial. Ordering is unimportant.; * @param wrapping if true, allow wrapping until maxPeriod or start is reached; * @param verbose if true, print the lfsr and new bit on each step; * @note Shift direction of the register is to the left <<, the newBit is set at bit position 0 (right); * @return the array of pseudo random bits, or an empty array if input was incorrect; * @see https://en.wikipedia.org/wiki/Monic_polynomial; * @see https://en.wikipedia.org/wiki/Linear-feedback_shift_register; * @see https://en.wikipedia.org/wiki/Pseudorandom_binary_sequence; */; template <size_t k, size_t nTaps>; vector<bool>; LFSR(const bitset<k> start, const array<uint16_t, nTaps> taps, const bool wrapping = false, const bool verbose = false); {; vector<bool> result;; //Sanity-checks; if(taps.size()<2); {; cerr << ""At least two taps are needed"" << endl;; return result;; }; for(auto tap : taps); {; if(tap > k); {; cerr << ""Out of range tap "" << tap << endl;; return result;; }; }; if(start.none()); {; cerr << ""A non-zero start value is needed"" << endl;; return result;; }. const uint32_t maxPeriod = pow(2,k) - 1;; result.reserve(maxPeriod);. set<uint32_t> lfsrHistory;; bitset<k> lfsr(start);; uint32_t i = 0;; do; {; // XOR of all the tapped bits. We use -1 because an exponent N in the monic polynomial corresponds to bitset index N-1; bool newBit = lfsr[taps.at(0) - 1];; for(uint16_t j = 1; j < taps.size() ; ++j); {; newBit ^= lfsr[taps.at(j) - 1];; }. lfsr <<= 1;; lfsr[0] = newBit;; if(verbose); {; cout << i << "" "" << newBit << "" "" << lfsr << endl;; }; result.emplace_back(newBit);; ++i;. if(!wrapping); {; if(lfsrHistory.count(lfsr.to_ulong())); {; ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8199#issuecomment-843369054
https://github.com/root-project/root/issues/8199#issuecomment-843369054:2317,Integrability,wrap,wrapping,2317,".org/wiki/Pseudorandom_binary_sequence; */; template <size_t k, size_t nTaps>; vector<bool>; LFSR(const bitset<k> start, const array<uint16_t, nTaps> taps, const bool wrapping = false, const bool verbose = false); {; vector<bool> result;; //Sanity-checks; if(taps.size()<2); {; cerr << ""At least two taps are needed"" << endl;; return result;; }; for(auto tap : taps); {; if(tap > k); {; cerr << ""Out of range tap "" << tap << endl;; return result;; }; }; if(start.none()); {; cerr << ""A non-zero start value is needed"" << endl;; return result;; }. const uint32_t maxPeriod = pow(2,k) - 1;; result.reserve(maxPeriod);. set<uint32_t> lfsrHistory;; bitset<k> lfsr(start);; uint32_t i = 0;; do; {; // XOR of all the tapped bits. We use -1 because an exponent N in the monic polynomial corresponds to bitset index N-1; bool newBit = lfsr[taps.at(0) - 1];; for(uint16_t j = 1; j < taps.size() ; ++j); {; newBit ^= lfsr[taps.at(j) - 1];; }. lfsr <<= 1;; lfsr[0] = newBit;; if(verbose); {; cout << i << "" "" << newBit << "" "" << lfsr << endl;; }; result.emplace_back(newBit);; ++i;. if(!wrapping); {; if(lfsrHistory.count(lfsr.to_ulong())); {; break;; }; lfsrHistory.insert(lfsr.to_ulong());; }; }; while(lfsr != start && i < maxPeriod);; result.shrink_to_fit();//only some special taps, namely the PRBS-k, will lead to the maxPeriod, others will stop earlier; return result;; }. void test_prbs(); {; //PRBS3; array<uint16_t, 2> taps3 = {2, 3}; // Exponents of the monic polynomial; auto prbs3 = LFSR(bitset<3>().flip(), taps3);// Start value all high. //PRBS4; array<uint16_t, 2> taps4 = {3, 4}; // Exponents of the monic polynomial; auto prbs4 = LFSR(bitset<4>().flip(), taps4);// Start value all high. //PRBS7; array<uint16_t, 2> taps7 = {7, 6}; // Exponents of the monic polynomial; auto prbs7 = LFSR(bitset<7>().flip(), taps7);// Start value all high. for(auto prbs : {prbs3, prbs4, prbs7}); {; cout << prbs.size() << "":\t"";; for(auto p : prbs); {; cout << p << "" "";; }; cout << endl;; }; return 0;; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8199#issuecomment-843369054
https://github.com/root-project/root/issues/8199#issuecomment-843369054:341,Usability,feedback,feedback,341,"A possible implementation, that could go in some ROOT::Math classes:. ```; #include <bitset>; #include <cmath>; #include <array>; #include <set>; #include <iostream>. using std::bitset;; using std::array;; using std::vector;; using std::set;; using std::cout;; using std::endl;. /**; * @brief Generation of pseudo-random bits using a linear feedback shift register (LFSR), until a register value is repeated (or maxPeriod is reached); * @tparam k the length of the LFSR, or the order of the monic polynomial PRBS-k (last exponent); * @tparam nTaps the number of taps; * @param start the start value of the LFSR; * @param taps the taps that will be XOR-ed to calculate the new bit. They are the exponents of the monic polynomial. Ordering is unimportant.; * @param wrapping if true, allow wrapping until maxPeriod or start is reached; * @param verbose if true, print the lfsr and new bit on each step; * @note Shift direction of the register is to the left <<, the newBit is set at bit position 0 (right); * @return the array of pseudo random bits, or an empty array if input was incorrect; * @see https://en.wikipedia.org/wiki/Monic_polynomial; * @see https://en.wikipedia.org/wiki/Linear-feedback_shift_register; * @see https://en.wikipedia.org/wiki/Pseudorandom_binary_sequence; */; template <size_t k, size_t nTaps>; vector<bool>; LFSR(const bitset<k> start, const array<uint16_t, nTaps> taps, const bool wrapping = false, const bool verbose = false); {; vector<bool> result;; //Sanity-checks; if(taps.size()<2); {; cerr << ""At least two taps are needed"" << endl;; return result;; }; for(auto tap : taps); {; if(tap > k); {; cerr << ""Out of range tap "" << tap << endl;; return result;; }; }; if(start.none()); {; cerr << ""A non-zero start value is needed"" << endl;; return result;; }. const uint32_t maxPeriod = pow(2,k) - 1;; result.reserve(maxPeriod);. set<uint32_t> lfsrHistory;; bitset<k> lfsr(start);; uint32_t i = 0;; do; {; // XOR of all the tapped bits. We use -1 because an exponent N in t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8199#issuecomment-843369054
https://github.com/root-project/root/pull/8204#issuecomment-844244254:996,Integrability,interface,interface,996,uild failed on ROOT-fedora31/noimt.; Running on root-fedora-31-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [proj,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844244254
https://github.com/root-project/root/pull/8204#issuecomment-844244254:1159,Integrability,interface,interface,1159,-jenkins/job/root-pullrequests-build/118088/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.r,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844244254
https://github.com/root-project/root/pull/8204#issuecomment-844244254:254,Testability,test,tests,254,Build failed on ROOT-fedora31/noimt.; Running on root-fedora-31-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [proj,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844244254
https://github.com/root-project/root/pull/8204#issuecomment-844244254:417,Testability,test,testReport,417,Build failed on ROOT-fedora31/noimt.; Running on root-fedora-31-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [proj,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844244254
https://github.com/root-project/root/pull/8204#issuecomment-844244254:654,Testability,test,testReport,654,Build failed on ROOT-fedora31/noimt.; Running on root-fedora-31-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [proj,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844244254
https://github.com/root-project/root/pull/8204#issuecomment-844244254:885,Testability,test,testReport,885,Build failed on ROOT-fedora31/noimt.; Running on root-fedora-31-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [proj,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844244254
https://github.com/root-project/root/pull/8204#issuecomment-844244254:1119,Testability,test,testReport,1119,root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.c,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844244254
https://github.com/root-project/root/pull/8204#issuecomment-844244254:1363,Testability,test,testReport,1363,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844244254
https://github.com/root-project/root/pull/8204#issuecomment-844244254:1614,Testability,test,testReport,1614,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844244254
https://github.com/root-project/root/pull/8204#issuecomment-844244254:1885,Testability,test,testReport,1885,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844244254
https://github.com/root-project/root/pull/8204#issuecomment-844244254:2155,Testability,test,testReport,2155,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844244254
https://github.com/root-project/root/pull/8204#issuecomment-844244254:1744,Usability,simpl,simple,1744,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844244254
https://github.com/root-project/root/pull/8204#issuecomment-844244254:1931,Usability,simpl,simple,1931,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118088/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844244254
https://github.com/root-project/root/pull/8204#issuecomment-844250497:995,Integrability,interface,interface,995,Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [proj,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844250497
https://github.com/root-project/root/pull/8204#issuecomment-844250497:1158,Integrability,interface,interface,1158,-jenkins/job/root-pullrequests-build/118087/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.r,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844250497
https://github.com/root-project/root/pull/8204#issuecomment-844250497:253,Testability,test,tests,253,Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [proje,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844250497
https://github.com/root-project/root/pull/8204#issuecomment-844250497:416,Testability,test,testReport,416,Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [proje,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844250497
https://github.com/root-project/root/pull/8204#issuecomment-844250497:653,Testability,test,testReport,653,Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [proje,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844250497
https://github.com/root-project/root/pull/8204#issuecomment-844250497:884,Testability,test,testReport,884,Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [proje,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844250497
https://github.com/root-project/root/pull/8204#issuecomment-844250497:1118,Testability,test,testReport,1118,root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.c,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844250497
https://github.com/root-project/root/pull/8204#issuecomment-844250497:1362,Testability,test,testReport,1362,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844250497
https://github.com/root-project/root/pull/8204#issuecomment-844250497:1613,Testability,test,testReport,1613,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844250497
https://github.com/root-project/root/pull/8204#issuecomment-844250497:1884,Testability,test,testReport,1884,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844250497
https://github.com/root-project/root/pull/8204#issuecomment-844250497:2154,Testability,test,testReport,2154,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844250497
https://github.com/root-project/root/pull/8204#issuecomment-844250497:1743,Usability,simpl,simple,1743,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844250497
https://github.com/root-project/root/pull/8204#issuecomment-844250497:1930,Usability,simpl,simple,1930,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118087/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844250497
https://github.com/root-project/root/pull/8204#issuecomment-844253147:1281,Integrability,interface,interface,1281,roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/datamodelevolution/roottest_root_io_datamodelevolution_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [proj,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844253147
https://github.com/root-project/root/pull/8204#issuecomment-844253147:1444,Integrability,interface,interface,1444,bj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/datamodelevolution/roottest_root_io_datamodelevolution_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.r,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844253147
https://github.com/root-project/root/pull/8204#issuecomment-844253147:21,Performance,perform,performance-,21,Build failed on ROOT-performance-centos8-multicore/default.; Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/datamodelevolution/roottest_root_io_datamodelevolution_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [project,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844253147
https://github.com/root-project/root/pull/8204#issuecomment-844253147:263,Testability,test,tests,263,Build failed on ROOT-performance-centos8-multicore/default.; Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/datamodelevolution/roottest_root_io_datamodelevolution_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [project,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844253147
https://github.com/root-project/root/pull/8204#issuecomment-844253147:426,Testability,test,testReport,426,Build failed on ROOT-performance-centos8-multicore/default.; Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/datamodelevolution/roottest_root_io_datamodelevolution_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [project,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844253147
https://github.com/root-project/root/pull/8204#issuecomment-844253147:663,Testability,test,testReport,663,Build failed on ROOT-performance-centos8-multicore/default.; Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/datamodelevolution/roottest_root_io_datamodelevolution_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [project,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844253147
https://github.com/root-project/root/pull/8204#issuecomment-844253147:894,Testability,test,testReport,894,Build failed on ROOT-performance-centos8-multicore/default.; Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/datamodelevolution/roottest_root_io_datamodelevolution_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [project,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844253147
https://github.com/root-project/root/pull/8204#issuecomment-844253147:1146,Testability,test,testReport,1146,build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/datamodelevolution/roottest_root_io_datamodelevolution_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenki,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844253147
https://github.com/root-project/root/pull/8204#issuecomment-844253147:1404,Testability,test,testReport,1404,/job/root-pullrequests-build/118086/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/datamodelevolution/roottest_root_io_datamodelevolution_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.c,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844253147
https://github.com/root-project/root/pull/8204#issuecomment-844253147:1648,Testability,test,testReport,1648,ttest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/datamodelevolution/roottest_root_io_datamodelevolution_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844253147
https://github.com/root-project/root/pull/8204#issuecomment-844253147:1899,Testability,test,testReport,1899,ttest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/datamodelevolution/roottest_root_io_datamodelevolution_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844253147
https://github.com/root-project/root/pull/8204#issuecomment-844253147:2170,Testability,test,testReport,2170,ttest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/datamodelevolution/roottest_root_io_datamodelevolution_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844253147
https://github.com/root-project/root/pull/8204#issuecomment-844253147:2440,Testability,test,testReport,2440,ttest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/datamodelevolution/roottest_root_io_datamodelevolution_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844253147
https://github.com/root-project/root/pull/8204#issuecomment-844253147:2029,Usability,simpl,simple,2029,ttest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/datamodelevolution/roottest_root_io_datamodelevolution_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844253147
https://github.com/root-project/root/pull/8204#issuecomment-844253147:2216,Usability,simpl,simple,2216,ttest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/datamodelevolution/roottest_root_io_datamodelevolution_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844253147
https://github.com/root-project/root/pull/8204#issuecomment-844261645:988,Integrability,interface,interface,988,Build failed on ROOT-ubuntu16/nortcxxmod.; Running on sft-ubuntu-1604-1.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844261645
https://github.com/root-project/root/pull/8204#issuecomment-844261645:1151,Integrability,interface,interface,1151,-jenkins/job/root-pullrequests-build/118089/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.r,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844261645
https://github.com/root-project/root/pull/8204#issuecomment-844261645:246,Testability,test,tests,246,Build failed on ROOT-ubuntu16/nortcxxmod.; Running on sft-ubuntu-1604-1.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844261645
https://github.com/root-project/root/pull/8204#issuecomment-844261645:409,Testability,test,testReport,409,Build failed on ROOT-ubuntu16/nortcxxmod.; Running on sft-ubuntu-1604-1.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844261645
https://github.com/root-project/root/pull/8204#issuecomment-844261645:646,Testability,test,testReport,646,Build failed on ROOT-ubuntu16/nortcxxmod.; Running on sft-ubuntu-1604-1.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844261645
https://github.com/root-project/root/pull/8204#issuecomment-844261645:877,Testability,test,testReport,877,Build failed on ROOT-ubuntu16/nortcxxmod.; Running on sft-ubuntu-1604-1.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844261645
https://github.com/root-project/root/pull/8204#issuecomment-844261645:1111,Testability,test,testReport,1111,root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/console).; ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.c,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844261645
https://github.com/root-project/root/pull/8204#issuecomment-844261645:1355,Testability,test,testReport,1355,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844261645
https://github.com/root-project/root/pull/8204#issuecomment-844261645:1606,Testability,test,testReport,1606,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844261645
https://github.com/root-project/root/pull/8204#issuecomment-844261645:1877,Testability,test,testReport,1877,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844261645
https://github.com/root-project/root/pull/8204#issuecomment-844261645:2147,Testability,test,testReport,2147,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844261645
https://github.com/root-project/root/pull/8204#issuecomment-844261645:1736,Usability,simpl,simple,1736,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844261645
https://github.com/root-project/root/pull/8204#issuecomment-844261645:1923,Usability,simpl,simple,1923,# Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_runf02](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_runf02/); - [projectroot.roottest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118089/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844261645
https://github.com/root-project/root/pull/8225#issuecomment-858035785:41,Usability,learn,learned,41,Thank you everyone for your tips. I have learned a bunch of new concepts. The last two commits have added those changes. I am very grateful for the help I have been getting. Thank you everyone.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8225#issuecomment-858035785
https://github.com/root-project/root/pull/8227#issuecomment-846080791:342,Deployability,update,update,342,"Unrelated note. > auto view = ntuple->GetView<float>(""double"");; > modelA->MakeField<std::int32_t>(""int"", 42);. We strive/want to have the name of the column to be usable identifiers (so that they can be used in reading code as-if they actually were identifier (See TTree::Draw syntax and RDataFrame). Could you (likely in a separate/new PR) update the test/example to not use just the datatype as column names?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8227#issuecomment-846080791
https://github.com/root-project/root/pull/8227#issuecomment-846080791:353,Testability,test,test,353,"Unrelated note. > auto view = ntuple->GetView<float>(""double"");; > modelA->MakeField<std::int32_t>(""int"", 42);. We strive/want to have the name of the column to be usable identifiers (so that they can be used in reading code as-if they actually were identifier (See TTree::Draw syntax and RDataFrame). Could you (likely in a separate/new PR) update the test/example to not use just the datatype as column names?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8227#issuecomment-846080791
https://github.com/root-project/root/pull/8227#issuecomment-846080791:164,Usability,usab,usable,164,"Unrelated note. > auto view = ntuple->GetView<float>(""double"");; > modelA->MakeField<std::int32_t>(""int"", 42);. We strive/want to have the name of the column to be usable identifiers (so that they can be used in reading code as-if they actually were identifier (See TTree::Draw syntax and RDataFrame). Could you (likely in a separate/new PR) update the test/example to not use just the datatype as column names?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8227#issuecomment-846080791
https://github.com/root-project/root/pull/8227#issuecomment-846119670:54,Usability,usab,usable,54,"> We strive/want to have the name of the column to be usable identifiers. Thank you Philippe, I've just pushed a new commit for this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8227#issuecomment-846119670
https://github.com/root-project/root/pull/8235#issuecomment-847886843:150,Usability,guid,guide,150,"We have this standard tutorial: https://root.cern/doc/master/canvas2_8C.html; Without your change, the axis titles appear as you see on the reference guide online.; With your change, all the titles disappear",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8235#issuecomment-847886843
https://github.com/root-project/root/pull/8235#issuecomment-847929734:388,Energy Efficiency,reduce,reduced,388,"> We have this standard tutorial: https://root.cern/doc/master/canvas2_8C.html; > Without your change the axis titles appear as you see on the reference guide online.; > With your change all the titles disappear. Ok I've just run this demo, thanks for pointing me to it, and yes I confirm with my fix the titles disappear. But that was only because an offset of ""5"" was now too big, so I reduced it to ""1"" and they reappear. But I see now that the way they reappear for the x-axis is great but for the y-axis they depended on the height of the pad, so I concede that the fix as it stands isn't going to giver desirable behaviour. I think what I was trying to achieve here was a title offset that scales sensibly with the label offset, so that you dont have to tune the title offset for each pad size you work with. For example, if I take the histogram from the example and plot it to its own canvas in current ROOT, suddenly the offset of 5 is way too big and the titles disappear. I tried the following which seems to work well. ```; charheight /= (gPad->GetWh()*((x1==x0) ? gPad->GetAbsWNDC() : gPad->GetAbsHNDC()));; ```. With this change, and making the titleoffsets in the example=1, things look pretty, and also if I plot the histogram to its own canvas the same offsets then things still look good. . See the attached screenshot. The plots on the left are existing ROOT and note the title offsets are 5 in both cases, so ok for top left but no good for bottom left. But with the line above in TGAxis, title offset of 1 in both cases looks pretty reasonable to me. But I appreciate this is a change in behaviour that may be undesirable. I dunno, what are your thoughts?; ![Screenshot 2021-05-25 at 15 41 38](https://user-images.githubusercontent.com/18280829/119517952-fb4bcb00-bd6f-11eb-86fc-7829ba2c4191.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8235#issuecomment-847929734
https://github.com/root-project/root/pull/8235#issuecomment-847929734:514,Integrability,depend,depended,514,"> We have this standard tutorial: https://root.cern/doc/master/canvas2_8C.html; > Without your change the axis titles appear as you see on the reference guide online.; > With your change all the titles disappear. Ok I've just run this demo, thanks for pointing me to it, and yes I confirm with my fix the titles disappear. But that was only because an offset of ""5"" was now too big, so I reduced it to ""1"" and they reappear. But I see now that the way they reappear for the x-axis is great but for the y-axis they depended on the height of the pad, so I concede that the fix as it stands isn't going to giver desirable behaviour. I think what I was trying to achieve here was a title offset that scales sensibly with the label offset, so that you dont have to tune the title offset for each pad size you work with. For example, if I take the histogram from the example and plot it to its own canvas in current ROOT, suddenly the offset of 5 is way too big and the titles disappear. I tried the following which seems to work well. ```; charheight /= (gPad->GetWh()*((x1==x0) ? gPad->GetAbsWNDC() : gPad->GetAbsHNDC()));; ```. With this change, and making the titleoffsets in the example=1, things look pretty, and also if I plot the histogram to its own canvas the same offsets then things still look good. . See the attached screenshot. The plots on the left are existing ROOT and note the title offsets are 5 in both cases, so ok for top left but no good for bottom left. But with the line above in TGAxis, title offset of 1 in both cases looks pretty reasonable to me. But I appreciate this is a change in behaviour that may be undesirable. I dunno, what are your thoughts?; ![Screenshot 2021-05-25 at 15 41 38](https://user-images.githubusercontent.com/18280829/119517952-fb4bcb00-bd6f-11eb-86fc-7829ba2c4191.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8235#issuecomment-847929734
https://github.com/root-project/root/pull/8235#issuecomment-847929734:760,Performance,tune,tune,760,"> We have this standard tutorial: https://root.cern/doc/master/canvas2_8C.html; > Without your change the axis titles appear as you see on the reference guide online.; > With your change all the titles disappear. Ok I've just run this demo, thanks for pointing me to it, and yes I confirm with my fix the titles disappear. But that was only because an offset of ""5"" was now too big, so I reduced it to ""1"" and they reappear. But I see now that the way they reappear for the x-axis is great but for the y-axis they depended on the height of the pad, so I concede that the fix as it stands isn't going to giver desirable behaviour. I think what I was trying to achieve here was a title offset that scales sensibly with the label offset, so that you dont have to tune the title offset for each pad size you work with. For example, if I take the histogram from the example and plot it to its own canvas in current ROOT, suddenly the offset of 5 is way too big and the titles disappear. I tried the following which seems to work well. ```; charheight /= (gPad->GetWh()*((x1==x0) ? gPad->GetAbsWNDC() : gPad->GetAbsHNDC()));; ```. With this change, and making the titleoffsets in the example=1, things look pretty, and also if I plot the histogram to its own canvas the same offsets then things still look good. . See the attached screenshot. The plots on the left are existing ROOT and note the title offsets are 5 in both cases, so ok for top left but no good for bottom left. But with the line above in TGAxis, title offset of 1 in both cases looks pretty reasonable to me. But I appreciate this is a change in behaviour that may be undesirable. I dunno, what are your thoughts?; ![Screenshot 2021-05-25 at 15 41 38](https://user-images.githubusercontent.com/18280829/119517952-fb4bcb00-bd6f-11eb-86fc-7829ba2c4191.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8235#issuecomment-847929734
https://github.com/root-project/root/pull/8235#issuecomment-847929734:153,Usability,guid,guide,153,"> We have this standard tutorial: https://root.cern/doc/master/canvas2_8C.html; > Without your change the axis titles appear as you see on the reference guide online.; > With your change all the titles disappear. Ok I've just run this demo, thanks for pointing me to it, and yes I confirm with my fix the titles disappear. But that was only because an offset of ""5"" was now too big, so I reduced it to ""1"" and they reappear. But I see now that the way they reappear for the x-axis is great but for the y-axis they depended on the height of the pad, so I concede that the fix as it stands isn't going to giver desirable behaviour. I think what I was trying to achieve here was a title offset that scales sensibly with the label offset, so that you dont have to tune the title offset for each pad size you work with. For example, if I take the histogram from the example and plot it to its own canvas in current ROOT, suddenly the offset of 5 is way too big and the titles disappear. I tried the following which seems to work well. ```; charheight /= (gPad->GetWh()*((x1==x0) ? gPad->GetAbsWNDC() : gPad->GetAbsHNDC()));; ```. With this change, and making the titleoffsets in the example=1, things look pretty, and also if I plot the histogram to its own canvas the same offsets then things still look good. . See the attached screenshot. The plots on the left are existing ROOT and note the title offsets are 5 in both cases, so ok for top left but no good for bottom left. But with the line above in TGAxis, title offset of 1 in both cases looks pretty reasonable to me. But I appreciate this is a change in behaviour that may be undesirable. I dunno, what are your thoughts?; ![Screenshot 2021-05-25 at 15 41 38](https://user-images.githubusercontent.com/18280829/119517952-fb4bcb00-bd6f-11eb-86fc-7829ba2c4191.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8235#issuecomment-847929734
https://github.com/root-project/root/pull/8265#issuecomment-946554582:4,Usability,feedback,feedback,4,any feedback on this PR ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8265#issuecomment-946554582
https://github.com/root-project/root/issues/8292#issuecomment-864610580:277,Deployability,install,installation,277,"Hi,; thank you very much, that you spend time on this!. I do not understand some things:; * In the Doc the packages that do need internet access are usually named - this does not seem to be correct; * Furthermore, all packages that need internet access should be turned off in installation by default - they are not; * I think it is a difference if a system is cut off from the internet by a firewall, or if a system has no network (maybe that's why cmake does not detect it properly?); * I do not understand why I have to make -Dsuchalognoption to make a simple basic installation. If you can't put out that packages from the default installation and if cmake can't detect that there is not valid connection and if you do not want to make an extra option please: write a chapter in the docs what you have to do in case you want to compile on a local system. Thanks; Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-864610580
https://github.com/root-project/root/issues/8292#issuecomment-864610580:569,Deployability,install,installation,569,"Hi,; thank you very much, that you spend time on this!. I do not understand some things:; * In the Doc the packages that do need internet access are usually named - this does not seem to be correct; * Furthermore, all packages that need internet access should be turned off in installation by default - they are not; * I think it is a difference if a system is cut off from the internet by a firewall, or if a system has no network (maybe that's why cmake does not detect it properly?); * I do not understand why I have to make -Dsuchalognoption to make a simple basic installation. If you can't put out that packages from the default installation and if cmake can't detect that there is not valid connection and if you do not want to make an extra option please: write a chapter in the docs what you have to do in case you want to compile on a local system. Thanks; Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-864610580
https://github.com/root-project/root/issues/8292#issuecomment-864610580:635,Deployability,install,installation,635,"Hi,; thank you very much, that you spend time on this!. I do not understand some things:; * In the Doc the packages that do need internet access are usually named - this does not seem to be correct; * Furthermore, all packages that need internet access should be turned off in installation by default - they are not; * I think it is a difference if a system is cut off from the internet by a firewall, or if a system has no network (maybe that's why cmake does not detect it properly?); * I do not understand why I have to make -Dsuchalognoption to make a simple basic installation. If you can't put out that packages from the default installation and if cmake can't detect that there is not valid connection and if you do not want to make an extra option please: write a chapter in the docs what you have to do in case you want to compile on a local system. Thanks; Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-864610580
https://github.com/root-project/root/issues/8292#issuecomment-864610580:465,Safety,detect,detect,465,"Hi,; thank you very much, that you spend time on this!. I do not understand some things:; * In the Doc the packages that do need internet access are usually named - this does not seem to be correct; * Furthermore, all packages that need internet access should be turned off in installation by default - they are not; * I think it is a difference if a system is cut off from the internet by a firewall, or if a system has no network (maybe that's why cmake does not detect it properly?); * I do not understand why I have to make -Dsuchalognoption to make a simple basic installation. If you can't put out that packages from the default installation and if cmake can't detect that there is not valid connection and if you do not want to make an extra option please: write a chapter in the docs what you have to do in case you want to compile on a local system. Thanks; Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-864610580
https://github.com/root-project/root/issues/8292#issuecomment-864610580:667,Safety,detect,detect,667,"Hi,; thank you very much, that you spend time on this!. I do not understand some things:; * In the Doc the packages that do need internet access are usually named - this does not seem to be correct; * Furthermore, all packages that need internet access should be turned off in installation by default - they are not; * I think it is a difference if a system is cut off from the internet by a firewall, or if a system has no network (maybe that's why cmake does not detect it properly?); * I do not understand why I have to make -Dsuchalognoption to make a simple basic installation. If you can't put out that packages from the default installation and if cmake can't detect that there is not valid connection and if you do not want to make an extra option please: write a chapter in the docs what you have to do in case you want to compile on a local system. Thanks; Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-864610580
https://github.com/root-project/root/issues/8292#issuecomment-864610580:138,Security,access,access,138,"Hi,; thank you very much, that you spend time on this!. I do not understand some things:; * In the Doc the packages that do need internet access are usually named - this does not seem to be correct; * Furthermore, all packages that need internet access should be turned off in installation by default - they are not; * I think it is a difference if a system is cut off from the internet by a firewall, or if a system has no network (maybe that's why cmake does not detect it properly?); * I do not understand why I have to make -Dsuchalognoption to make a simple basic installation. If you can't put out that packages from the default installation and if cmake can't detect that there is not valid connection and if you do not want to make an extra option please: write a chapter in the docs what you have to do in case you want to compile on a local system. Thanks; Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-864610580
https://github.com/root-project/root/issues/8292#issuecomment-864610580:246,Security,access,access,246,"Hi,; thank you very much, that you spend time on this!. I do not understand some things:; * In the Doc the packages that do need internet access are usually named - this does not seem to be correct; * Furthermore, all packages that need internet access should be turned off in installation by default - they are not; * I think it is a difference if a system is cut off from the internet by a firewall, or if a system has no network (maybe that's why cmake does not detect it properly?); * I do not understand why I have to make -Dsuchalognoption to make a simple basic installation. If you can't put out that packages from the default installation and if cmake can't detect that there is not valid connection and if you do not want to make an extra option please: write a chapter in the docs what you have to do in case you want to compile on a local system. Thanks; Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-864610580
https://github.com/root-project/root/issues/8292#issuecomment-864610580:392,Security,firewall,firewall,392,"Hi,; thank you very much, that you spend time on this!. I do not understand some things:; * In the Doc the packages that do need internet access are usually named - this does not seem to be correct; * Furthermore, all packages that need internet access should be turned off in installation by default - they are not; * I think it is a difference if a system is cut off from the internet by a firewall, or if a system has no network (maybe that's why cmake does not detect it properly?); * I do not understand why I have to make -Dsuchalognoption to make a simple basic installation. If you can't put out that packages from the default installation and if cmake can't detect that there is not valid connection and if you do not want to make an extra option please: write a chapter in the docs what you have to do in case you want to compile on a local system. Thanks; Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-864610580
https://github.com/root-project/root/issues/8292#issuecomment-864610580:556,Usability,simpl,simple,556,"Hi,; thank you very much, that you spend time on this!. I do not understand some things:; * In the Doc the packages that do need internet access are usually named - this does not seem to be correct; * Furthermore, all packages that need internet access should be turned off in installation by default - they are not; * I think it is a difference if a system is cut off from the internet by a firewall, or if a system has no network (maybe that's why cmake does not detect it properly?); * I do not understand why I have to make -Dsuchalognoption to make a simple basic installation. If you can't put out that packages from the default installation and if cmake can't detect that there is not valid connection and if you do not want to make an extra option please: write a chapter in the docs what you have to do in case you want to compile on a local system. Thanks; Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-864610580
https://github.com/root-project/root/issues/8292#issuecomment-872039777:21,Testability,test,testfile,21,or simply delete the testfile on the server :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-872039777
https://github.com/root-project/root/issues/8292#issuecomment-872039777:3,Usability,simpl,simply,3,or simply delete the testfile on the server :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-872039777
https://github.com/root-project/root/issues/8292#issuecomment-880610339:30,Usability,feedback,feedback,30,"@pamputt Cool, thanks for the feedback!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-880610339
https://github.com/root-project/root/issues/8295#issuecomment-851783548:7,Usability,simpl,simple,7,"as for simple; using struct instead of class should focus on the issue; ```; struct xy_t{; double x;; double y;; ClassDef(xy_t,1);; };; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8295#issuecomment-851783548
https://github.com/root-project/root/issues/8295#issuecomment-852277296:772,Availability,error,error,772,"Discussed and checked the problem with @pcanal . The root cause is that `TTree::CopyAddresses` has an implicit assumption that the input and output branches are of the same kind, while in this case we have a `TBranchElement` in input and a simple `TBranch` in output. In particular, `TBranchElement::SetAddress` would apply a correction to the wrong offset returned by `TBranchElement::GetAddress`, but `TBranch::SetAddress` does not. This bug is absolutely terrible: if the input dataset consists of multiple trees, starting from the second tree data members of types that were saved as TBranchElements are written out wrongly by Snapshot. The plan is the following:. 1. add a check in `TTree::CopyAddresses` that input and output branches are of the same kind, print an error otherwise; 2. refactor `Snapshot` so that instead of relying on `TChain::AddClone` and `TTree::CopyAddresses` to update the addresses of the output branches we instead reset the branches manually based on the addresses provided by TTreeReaderValue access -- we'll use the `TNotify` mechanism to reset the branches every time TChain switches input tree",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8295#issuecomment-852277296
https://github.com/root-project/root/issues/8295#issuecomment-852277296:891,Deployability,update,update,891,"Discussed and checked the problem with @pcanal . The root cause is that `TTree::CopyAddresses` has an implicit assumption that the input and output branches are of the same kind, while in this case we have a `TBranchElement` in input and a simple `TBranch` in output. In particular, `TBranchElement::SetAddress` would apply a correction to the wrong offset returned by `TBranchElement::GetAddress`, but `TBranch::SetAddress` does not. This bug is absolutely terrible: if the input dataset consists of multiple trees, starting from the second tree data members of types that were saved as TBranchElements are written out wrongly by Snapshot. The plan is the following:. 1. add a check in `TTree::CopyAddresses` that input and output branches are of the same kind, print an error otherwise; 2. refactor `Snapshot` so that instead of relying on `TChain::AddClone` and `TTree::CopyAddresses` to update the addresses of the output branches we instead reset the branches manually based on the addresses provided by TTreeReaderValue access -- we'll use the `TNotify` mechanism to reset the branches every time TChain switches input tree",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8295#issuecomment-852277296
https://github.com/root-project/root/issues/8295#issuecomment-852277296:792,Modifiability,refactor,refactor,792,"Discussed and checked the problem with @pcanal . The root cause is that `TTree::CopyAddresses` has an implicit assumption that the input and output branches are of the same kind, while in this case we have a `TBranchElement` in input and a simple `TBranch` in output. In particular, `TBranchElement::SetAddress` would apply a correction to the wrong offset returned by `TBranchElement::GetAddress`, but `TBranch::SetAddress` does not. This bug is absolutely terrible: if the input dataset consists of multiple trees, starting from the second tree data members of types that were saved as TBranchElements are written out wrongly by Snapshot. The plan is the following:. 1. add a check in `TTree::CopyAddresses` that input and output branches are of the same kind, print an error otherwise; 2. refactor `Snapshot` so that instead of relying on `TChain::AddClone` and `TTree::CopyAddresses` to update the addresses of the output branches we instead reset the branches manually based on the addresses provided by TTreeReaderValue access -- we'll use the `TNotify` mechanism to reset the branches every time TChain switches input tree",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8295#issuecomment-852277296
https://github.com/root-project/root/issues/8295#issuecomment-852277296:1026,Security,access,access,1026,"Discussed and checked the problem with @pcanal . The root cause is that `TTree::CopyAddresses` has an implicit assumption that the input and output branches are of the same kind, while in this case we have a `TBranchElement` in input and a simple `TBranch` in output. In particular, `TBranchElement::SetAddress` would apply a correction to the wrong offset returned by `TBranchElement::GetAddress`, but `TBranch::SetAddress` does not. This bug is absolutely terrible: if the input dataset consists of multiple trees, starting from the second tree data members of types that were saved as TBranchElements are written out wrongly by Snapshot. The plan is the following:. 1. add a check in `TTree::CopyAddresses` that input and output branches are of the same kind, print an error otherwise; 2. refactor `Snapshot` so that instead of relying on `TChain::AddClone` and `TTree::CopyAddresses` to update the addresses of the output branches we instead reset the branches manually based on the addresses provided by TTreeReaderValue access -- we'll use the `TNotify` mechanism to reset the branches every time TChain switches input tree",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8295#issuecomment-852277296
https://github.com/root-project/root/issues/8295#issuecomment-852277296:240,Usability,simpl,simple,240,"Discussed and checked the problem with @pcanal . The root cause is that `TTree::CopyAddresses` has an implicit assumption that the input and output branches are of the same kind, while in this case we have a `TBranchElement` in input and a simple `TBranch` in output. In particular, `TBranchElement::SetAddress` would apply a correction to the wrong offset returned by `TBranchElement::GetAddress`, but `TBranch::SetAddress` does not. This bug is absolutely terrible: if the input dataset consists of multiple trees, starting from the second tree data members of types that were saved as TBranchElements are written out wrongly by Snapshot. The plan is the following:. 1. add a check in `TTree::CopyAddresses` that input and output branches are of the same kind, print an error otherwise; 2. refactor `Snapshot` so that instead of relying on `TChain::AddClone` and `TTree::CopyAddresses` to update the addresses of the output branches we instead reset the branches manually based on the addresses provided by TTreeReaderValue access -- we'll use the `TNotify` mechanism to reset the branches every time TChain switches input tree",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8295#issuecomment-852277296
https://github.com/root-project/root/pull/8301#issuecomment-851918877:234,Usability,feedback,feedback,234,"## DeepCode failed to analyze this pull request; Something went wrong despite trying multiple times, sorry about that.; Please comment this pull request with ""Retry DeepCode"" to manually retry, or [contact us](https://www.deepcode.ai/feedback?select=4&utm_source=gh_review) so that a human can look into the issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8301#issuecomment-851918877
https://github.com/root-project/root/pull/8303#issuecomment-852018288:234,Usability,feedback,feedback,234,"## DeepCode failed to analyze this pull request; Something went wrong despite trying multiple times, sorry about that.; Please comment this pull request with ""Retry DeepCode"" to manually retry, or [contact us](https://www.deepcode.ai/feedback?select=4&utm_source=gh_review) so that a human can look into the issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8303#issuecomment-852018288
https://github.com/root-project/root/issues/8304#issuecomment-1943877354:149,Availability,error,error,149,"As @jalopezg-git mentioned, bool(foo) appears as a declaration (bool foo). The following simple C++ code also fails to compile with a re-declaration error and I think that should be the expected behavior.; ```C++; #include<iostream>; int main() {; int i = 54;; bool(i);; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8304#issuecomment-1943877354
https://github.com/root-project/root/issues/8304#issuecomment-1943877354:89,Usability,simpl,simple,89,"As @jalopezg-git mentioned, bool(foo) appears as a declaration (bool foo). The following simple C++ code also fails to compile with a re-declaration error and I think that should be the expected behavior.; ```C++; #include<iostream>; int main() {; int i = 54;; bool(i);; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8304#issuecomment-1943877354
https://github.com/root-project/root/issues/8308#issuecomment-856013049:274,Usability,usab,usable,274,"Actually, I tried moving the target_include_directories after and it doesn't work. Either that was broken by some more recent commit or it didn't work before, but we didn't notice any problem. Something that needs to be debugged, because I did try to make the properties be usable even when the target_include_directories command is added later. Maybe it's something that only works within ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8308#issuecomment-856013049
https://github.com/root-project/root/issues/8308#issuecomment-856211883:103,Availability,avail,available,103,"I was rather hoping that we could evolve `ROOT_GENERATE_DICTIONARY`, at least the version that we make available to users, so that it would be simpler to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8308#issuecomment-856211883
https://github.com/root-project/root/issues/8308#issuecomment-856211883:34,Modifiability,evolve,evolve,34,"I was rather hoping that we could evolve `ROOT_GENERATE_DICTIONARY`, at least the version that we make available to users, so that it would be simpler to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8308#issuecomment-856211883
https://github.com/root-project/root/issues/8308#issuecomment-856211883:143,Usability,simpl,simpler,143,"I was rather hoping that we could evolve `ROOT_GENERATE_DICTIONARY`, at least the version that we make available to users, so that it would be simpler to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8308#issuecomment-856211883
https://github.com/root-project/root/issues/8308#issuecomment-856227664:245,Usability,clear,clear,245,"> Evolve == break for current users. Not _necessarily_, right?. It shouldn't be a breaking change to e.g. have `ROOT_GENERATE_DICTIONARY` automatically call the appropriate `configure_file` or `target_include_directory`..?. P.S.; just so we are clear, I'm not suggesting to break anything for users :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8308#issuecomment-856227664
https://github.com/root-project/root/pull/8334#issuecomment-854489805:507,Performance,multi-thread,multi-threading,507,"Hi, some comments/questions:. 1. I guess the behavior of `TTaskGroup` should mimic what `TThreadExecutor` does, e.g. it should use the task arena if it exists, and it should construct one if it doesn't. What's the rationale for doing things independently of ROOT's task arena? Does this mean users might see more cores used than they expect in some cases?; 2. Are you ok with silently do nothing if R__IMT is undefined? Would it be better to print a warning?; 3. Can we also have a way to disable RNTuple's multi-threading even if implicit MT is enabled, like TTree has?. P.S.; this stuff is always tricky to reason about for me, sorry if i'm missing obvious stuff. the rationale behind my question is that we should not have N different multi-threading behaviors for N components (because then we can't reason about how these components interact with each other because there are too many possibilities), we should not surprisingly use more cores than users might expect (and we should play well with the TBB settings of frameworks such as CMSSW, but it's not clear to me how we do that now, actually)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8334#issuecomment-854489805
https://github.com/root-project/root/pull/8334#issuecomment-854489805:738,Performance,multi-thread,multi-threading,738,"Hi, some comments/questions:. 1. I guess the behavior of `TTaskGroup` should mimic what `TThreadExecutor` does, e.g. it should use the task arena if it exists, and it should construct one if it doesn't. What's the rationale for doing things independently of ROOT's task arena? Does this mean users might see more cores used than they expect in some cases?; 2. Are you ok with silently do nothing if R__IMT is undefined? Would it be better to print a warning?; 3. Can we also have a way to disable RNTuple's multi-threading even if implicit MT is enabled, like TTree has?. P.S.; this stuff is always tricky to reason about for me, sorry if i'm missing obvious stuff. the rationale behind my question is that we should not have N different multi-threading behaviors for N components (because then we can't reason about how these components interact with each other because there are too many possibilities), we should not surprisingly use more cores than users might expect (and we should play well with the TBB settings of frameworks such as CMSSW, but it's not clear to me how we do that now, actually)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8334#issuecomment-854489805
https://github.com/root-project/root/pull/8334#issuecomment-854489805:1061,Usability,clear,clear,1061,"Hi, some comments/questions:. 1. I guess the behavior of `TTaskGroup` should mimic what `TThreadExecutor` does, e.g. it should use the task arena if it exists, and it should construct one if it doesn't. What's the rationale for doing things independently of ROOT's task arena? Does this mean users might see more cores used than they expect in some cases?; 2. Are you ok with silently do nothing if R__IMT is undefined? Would it be better to print a warning?; 3. Can we also have a way to disable RNTuple's multi-threading even if implicit MT is enabled, like TTree has?. P.S.; this stuff is always tricky to reason about for me, sorry if i'm missing obvious stuff. the rationale behind my question is that we should not have N different multi-threading behaviors for N components (because then we can't reason about how these components interact with each other because there are too many possibilities), we should not surprisingly use more cores than users might expect (and we should play well with the TBB settings of frameworks such as CMSSW, but it's not clear to me how we do that now, actually)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8334#issuecomment-854489805
https://github.com/root-project/root/pull/8334#issuecomment-854977563:660,Performance,perform,perform,660,"Hi Enrico, thank you very much for taking a look. > 1. I guess the behavior of TTaskGroup should mimic what TThreadExecutor does, e.g. it should use the task arena if it exists, and it should construct one if it doesn't. What's the rationale for doing things independently of ROOT's task arena? Does this mean users might see more cores used than they expect in some cases?. I believe this change only removes an unnecessary restriction on when `TTaskGroup` can be used (i.e. after looking through the implementation, I don't think having IMT globally enabled is a precondition for the use of `TTaskGroup` and test benchmarks using this implementation seem to perform the same). > 2. Are you ok with silently do nothing if R__IMT is undefined? Would it be better to print a warning?. Thank you, yes, a warning would probably be better. > 3. Can we also have a way to disable RNTuple's multi-threading even if implicit MT is enabled, like TTree has?. Yes, this makes sense to me. It will probably need a big warning in the docs about when to call it and/or some graceful shutdown logic. Even if this PR doesn't make it that method might be valuable by itself. > the rationale behind my question is that we should not have N different multi-threading behaviors for N components. I completely agree, it is very nice to be able to say ""if you want multithreading, call `EnableImplicitMT` and you're done"". > and we should play well with the TBB settings of frameworks such as CMSSW, but it's not clear to me how we do that now, actually. For the RNTuple NanoAOD project, we were hoping to plug in the CMSSW tbb instance with `RPageStorage::SetTaskScheduler` (for both page sink and source): https://github.com/root-project/root/blob/a9c61d56afd70b74425779f330a4ec2cc581bb0b/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx#L136. by implementing a derived `RTaskScheduler` on the CMSSW side so they have control over task isolation etc. ; https://github.com/root-project/root/blob/4118c0cb6db03998ae77f56f57cc372ac",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8334#issuecomment-854977563
https://github.com/root-project/root/pull/8334#issuecomment-854977563:885,Performance,multi-thread,multi-threading,885,"Hi Enrico, thank you very much for taking a look. > 1. I guess the behavior of TTaskGroup should mimic what TThreadExecutor does, e.g. it should use the task arena if it exists, and it should construct one if it doesn't. What's the rationale for doing things independently of ROOT's task arena? Does this mean users might see more cores used than they expect in some cases?. I believe this change only removes an unnecessary restriction on when `TTaskGroup` can be used (i.e. after looking through the implementation, I don't think having IMT globally enabled is a precondition for the use of `TTaskGroup` and test benchmarks using this implementation seem to perform the same). > 2. Are you ok with silently do nothing if R__IMT is undefined? Would it be better to print a warning?. Thank you, yes, a warning would probably be better. > 3. Can we also have a way to disable RNTuple's multi-threading even if implicit MT is enabled, like TTree has?. Yes, this makes sense to me. It will probably need a big warning in the docs about when to call it and/or some graceful shutdown logic. Even if this PR doesn't make it that method might be valuable by itself. > the rationale behind my question is that we should not have N different multi-threading behaviors for N components. I completely agree, it is very nice to be able to say ""if you want multithreading, call `EnableImplicitMT` and you're done"". > and we should play well with the TBB settings of frameworks such as CMSSW, but it's not clear to me how we do that now, actually. For the RNTuple NanoAOD project, we were hoping to plug in the CMSSW tbb instance with `RPageStorage::SetTaskScheduler` (for both page sink and source): https://github.com/root-project/root/blob/a9c61d56afd70b74425779f330a4ec2cc581bb0b/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx#L136. by implementing a derived `RTaskScheduler` on the CMSSW side so they have control over task isolation etc. ; https://github.com/root-project/root/blob/4118c0cb6db03998ae77f56f57cc372ac",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8334#issuecomment-854977563
https://github.com/root-project/root/pull/8334#issuecomment-854977563:1233,Performance,multi-thread,multi-threading,1233,"guess the behavior of TTaskGroup should mimic what TThreadExecutor does, e.g. it should use the task arena if it exists, and it should construct one if it doesn't. What's the rationale for doing things independently of ROOT's task arena? Does this mean users might see more cores used than they expect in some cases?. I believe this change only removes an unnecessary restriction on when `TTaskGroup` can be used (i.e. after looking through the implementation, I don't think having IMT globally enabled is a precondition for the use of `TTaskGroup` and test benchmarks using this implementation seem to perform the same). > 2. Are you ok with silently do nothing if R__IMT is undefined? Would it be better to print a warning?. Thank you, yes, a warning would probably be better. > 3. Can we also have a way to disable RNTuple's multi-threading even if implicit MT is enabled, like TTree has?. Yes, this makes sense to me. It will probably need a big warning in the docs about when to call it and/or some graceful shutdown logic. Even if this PR doesn't make it that method might be valuable by itself. > the rationale behind my question is that we should not have N different multi-threading behaviors for N components. I completely agree, it is very nice to be able to say ""if you want multithreading, call `EnableImplicitMT` and you're done"". > and we should play well with the TBB settings of frameworks such as CMSSW, but it's not clear to me how we do that now, actually. For the RNTuple NanoAOD project, we were hoping to plug in the CMSSW tbb instance with `RPageStorage::SetTaskScheduler` (for both page sink and source): https://github.com/root-project/root/blob/a9c61d56afd70b74425779f330a4ec2cc581bb0b/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx#L136. by implementing a derived `RTaskScheduler` on the CMSSW side so they have control over task isolation etc. ; https://github.com/root-project/root/blob/4118c0cb6db03998ae77f56f57cc372ac150c9df/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx#L66-L76",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8334#issuecomment-854977563
https://github.com/root-project/root/pull/8334#issuecomment-854977563:610,Testability,test,test,610,"Hi Enrico, thank you very much for taking a look. > 1. I guess the behavior of TTaskGroup should mimic what TThreadExecutor does, e.g. it should use the task arena if it exists, and it should construct one if it doesn't. What's the rationale for doing things independently of ROOT's task arena? Does this mean users might see more cores used than they expect in some cases?. I believe this change only removes an unnecessary restriction on when `TTaskGroup` can be used (i.e. after looking through the implementation, I don't think having IMT globally enabled is a precondition for the use of `TTaskGroup` and test benchmarks using this implementation seem to perform the same). > 2. Are you ok with silently do nothing if R__IMT is undefined? Would it be better to print a warning?. Thank you, yes, a warning would probably be better. > 3. Can we also have a way to disable RNTuple's multi-threading even if implicit MT is enabled, like TTree has?. Yes, this makes sense to me. It will probably need a big warning in the docs about when to call it and/or some graceful shutdown logic. Even if this PR doesn't make it that method might be valuable by itself. > the rationale behind my question is that we should not have N different multi-threading behaviors for N components. I completely agree, it is very nice to be able to say ""if you want multithreading, call `EnableImplicitMT` and you're done"". > and we should play well with the TBB settings of frameworks such as CMSSW, but it's not clear to me how we do that now, actually. For the RNTuple NanoAOD project, we were hoping to plug in the CMSSW tbb instance with `RPageStorage::SetTaskScheduler` (for both page sink and source): https://github.com/root-project/root/blob/a9c61d56afd70b74425779f330a4ec2cc581bb0b/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx#L136. by implementing a derived `RTaskScheduler` on the CMSSW side so they have control over task isolation etc. ; https://github.com/root-project/root/blob/4118c0cb6db03998ae77f56f57cc372ac",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8334#issuecomment-854977563
https://github.com/root-project/root/pull/8334#issuecomment-854977563:615,Testability,benchmark,benchmarks,615,"Hi Enrico, thank you very much for taking a look. > 1. I guess the behavior of TTaskGroup should mimic what TThreadExecutor does, e.g. it should use the task arena if it exists, and it should construct one if it doesn't. What's the rationale for doing things independently of ROOT's task arena? Does this mean users might see more cores used than they expect in some cases?. I believe this change only removes an unnecessary restriction on when `TTaskGroup` can be used (i.e. after looking through the implementation, I don't think having IMT globally enabled is a precondition for the use of `TTaskGroup` and test benchmarks using this implementation seem to perform the same). > 2. Are you ok with silently do nothing if R__IMT is undefined? Would it be better to print a warning?. Thank you, yes, a warning would probably be better. > 3. Can we also have a way to disable RNTuple's multi-threading even if implicit MT is enabled, like TTree has?. Yes, this makes sense to me. It will probably need a big warning in the docs about when to call it and/or some graceful shutdown logic. Even if this PR doesn't make it that method might be valuable by itself. > the rationale behind my question is that we should not have N different multi-threading behaviors for N components. I completely agree, it is very nice to be able to say ""if you want multithreading, call `EnableImplicitMT` and you're done"". > and we should play well with the TBB settings of frameworks such as CMSSW, but it's not clear to me how we do that now, actually. For the RNTuple NanoAOD project, we were hoping to plug in the CMSSW tbb instance with `RPageStorage::SetTaskScheduler` (for both page sink and source): https://github.com/root-project/root/blob/a9c61d56afd70b74425779f330a4ec2cc581bb0b/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx#L136. by implementing a derived `RTaskScheduler` on the CMSSW side so they have control over task isolation etc. ; https://github.com/root-project/root/blob/4118c0cb6db03998ae77f56f57cc372ac",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8334#issuecomment-854977563
https://github.com/root-project/root/pull/8334#issuecomment-854977563:1079,Testability,log,logic,1079,"for taking a look. > 1. I guess the behavior of TTaskGroup should mimic what TThreadExecutor does, e.g. it should use the task arena if it exists, and it should construct one if it doesn't. What's the rationale for doing things independently of ROOT's task arena? Does this mean users might see more cores used than they expect in some cases?. I believe this change only removes an unnecessary restriction on when `TTaskGroup` can be used (i.e. after looking through the implementation, I don't think having IMT globally enabled is a precondition for the use of `TTaskGroup` and test benchmarks using this implementation seem to perform the same). > 2. Are you ok with silently do nothing if R__IMT is undefined? Would it be better to print a warning?. Thank you, yes, a warning would probably be better. > 3. Can we also have a way to disable RNTuple's multi-threading even if implicit MT is enabled, like TTree has?. Yes, this makes sense to me. It will probably need a big warning in the docs about when to call it and/or some graceful shutdown logic. Even if this PR doesn't make it that method might be valuable by itself. > the rationale behind my question is that we should not have N different multi-threading behaviors for N components. I completely agree, it is very nice to be able to say ""if you want multithreading, call `EnableImplicitMT` and you're done"". > and we should play well with the TBB settings of frameworks such as CMSSW, but it's not clear to me how we do that now, actually. For the RNTuple NanoAOD project, we were hoping to plug in the CMSSW tbb instance with `RPageStorage::SetTaskScheduler` (for both page sink and source): https://github.com/root-project/root/blob/a9c61d56afd70b74425779f330a4ec2cc581bb0b/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx#L136. by implementing a derived `RTaskScheduler` on the CMSSW side so they have control over task isolation etc. ; https://github.com/root-project/root/blob/4118c0cb6db03998ae77f56f57cc372ac150c9df/tree/ntuple/v7/inc/ROOT",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8334#issuecomment-854977563
https://github.com/root-project/root/pull/8334#issuecomment-854977563:1492,Usability,clear,clear,1492,"guess the behavior of TTaskGroup should mimic what TThreadExecutor does, e.g. it should use the task arena if it exists, and it should construct one if it doesn't. What's the rationale for doing things independently of ROOT's task arena? Does this mean users might see more cores used than they expect in some cases?. I believe this change only removes an unnecessary restriction on when `TTaskGroup` can be used (i.e. after looking through the implementation, I don't think having IMT globally enabled is a precondition for the use of `TTaskGroup` and test benchmarks using this implementation seem to perform the same). > 2. Are you ok with silently do nothing if R__IMT is undefined? Would it be better to print a warning?. Thank you, yes, a warning would probably be better. > 3. Can we also have a way to disable RNTuple's multi-threading even if implicit MT is enabled, like TTree has?. Yes, this makes sense to me. It will probably need a big warning in the docs about when to call it and/or some graceful shutdown logic. Even if this PR doesn't make it that method might be valuable by itself. > the rationale behind my question is that we should not have N different multi-threading behaviors for N components. I completely agree, it is very nice to be able to say ""if you want multithreading, call `EnableImplicitMT` and you're done"". > and we should play well with the TBB settings of frameworks such as CMSSW, but it's not clear to me how we do that now, actually. For the RNTuple NanoAOD project, we were hoping to plug in the CMSSW tbb instance with `RPageStorage::SetTaskScheduler` (for both page sink and source): https://github.com/root-project/root/blob/a9c61d56afd70b74425779f330a4ec2cc581bb0b/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx#L136. by implementing a derived `RTaskScheduler` on the CMSSW side so they have control over task isolation etc. ; https://github.com/root-project/root/blob/4118c0cb6db03998ae77f56f57cc372ac150c9df/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx#L66-L76",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8334#issuecomment-854977563
https://github.com/root-project/root/issues/8357#issuecomment-946590814:78,Usability,simpl,simpler,78,"> What about replacing them with a free alternative?. Yes, I think it will be simpler",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8357#issuecomment-946590814
https://github.com/root-project/root/pull/8379#issuecomment-857765612:258,Integrability,rout,routine,258,"> I am seeing a similar issue with TSystem.h, TSeqCollection *fTimers{nullptr}; //List of timers. I think we should tackle this in a separate PR. The simplest solution though is to always create the fTimers (i.e. move its creation to the constructor or init routine) and to mark it as a 'thread safe' collection:; ```; fTimers->UseRWLock();; ```; thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8379#issuecomment-857765612
https://github.com/root-project/root/pull/8379#issuecomment-857765612:295,Safety,safe,safe,295,"> I am seeing a similar issue with TSystem.h, TSeqCollection *fTimers{nullptr}; //List of timers. I think we should tackle this in a separate PR. The simplest solution though is to always create the fTimers (i.e. move its creation to the constructor or init routine) and to mark it as a 'thread safe' collection:; ```; fTimers->UseRWLock();; ```; thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8379#issuecomment-857765612
https://github.com/root-project/root/pull/8379#issuecomment-857765612:150,Usability,simpl,simplest,150,"> I am seeing a similar issue with TSystem.h, TSeqCollection *fTimers{nullptr}; //List of timers. I think we should tackle this in a separate PR. The simplest solution though is to always create the fTimers (i.e. move its creation to the constructor or init routine) and to mark it as a 'thread safe' collection:; ```; fTimers->UseRWLock();; ```; thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8379#issuecomment-857765612
https://github.com/root-project/root/pull/8379#issuecomment-857772652:146,Deployability,upgrade,upgraded,146,"> The simplest solution though is to always create the fTimers . Also I noted that TOrdCollection (the type of fTimes at the moment) has not been upgraded yet to support ```UseRWLock()``` (it will silently ignore it), so we will need to also change the type to ```TList```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8379#issuecomment-857772652
https://github.com/root-project/root/pull/8379#issuecomment-857772652:6,Usability,simpl,simplest,6,"> The simplest solution though is to always create the fTimers . Also I noted that TOrdCollection (the type of fTimes at the moment) has not been upgraded yet to support ```UseRWLock()``` (it will silently ignore it), so we will need to also change the type to ```TList```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8379#issuecomment-857772652
https://github.com/root-project/root/pull/8385#issuecomment-870411730:939,Deployability,configurat,configuration,939,"Thanks @amadio for the extensive input! Let me address it point by point:. First: the current choice for ""built-in only"". The built-in is there for two reasons: 1) as a dependency, obviously, but 2) also because the full source is needed to build `zmq::ppoll`. `ppoll` was written as an extension to libzmq itself. In the ideal world, I would have committed this back to libzmq (which they are open to, and which I'll do later, see https://github.com/zeromq/libzmq/issues/4220), but haven't had time yet. The interim solution is to just ship it with ROOT, but this requires (part of) the libzmq source to build against. We can do this in two ways: a) just include the necessary libzmq files or b) get them externally on the fly. I actually went with option a) first. However, when people started trying out this branch on their machines, it turned out that the `conda` libzmq build (which I was using in my dev setup) had a more favorable configuration than for instance most Linux native builds, especially because those native builds lack CMake configuration files. That latter fact made me decide to just make the built-in dependency the default; this way I wouldn't have to figure out how to best detect libzmq on each platform (or find / cobble together a good and freely licensed FindZeroMQ.cmake, but the general feeling around the ZeroMQ community is that this is a waste of effort, because the CMake config files that come along with libzmq itself already solve this finding problem; it's just unfortunate that the Linux distro's won't include them...). So in the end, because of time constraints, I made the choice to prioritize other things over putting a lot of effort into this dependency which will probably end up different in the near future anyway (because of the ppoll PR, which will make things a lot easier on the ROOT side). So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Then about the RooFitZ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870411730
https://github.com/root-project/root/pull/8385#issuecomment-870411730:1047,Deployability,configurat,configuration,1047,"Thanks @amadio for the extensive input! Let me address it point by point:. First: the current choice for ""built-in only"". The built-in is there for two reasons: 1) as a dependency, obviously, but 2) also because the full source is needed to build `zmq::ppoll`. `ppoll` was written as an extension to libzmq itself. In the ideal world, I would have committed this back to libzmq (which they are open to, and which I'll do later, see https://github.com/zeromq/libzmq/issues/4220), but haven't had time yet. The interim solution is to just ship it with ROOT, but this requires (part of) the libzmq source to build against. We can do this in two ways: a) just include the necessary libzmq files or b) get them externally on the fly. I actually went with option a) first. However, when people started trying out this branch on their machines, it turned out that the `conda` libzmq build (which I was using in my dev setup) had a more favorable configuration than for instance most Linux native builds, especially because those native builds lack CMake configuration files. That latter fact made me decide to just make the built-in dependency the default; this way I wouldn't have to figure out how to best detect libzmq on each platform (or find / cobble together a good and freely licensed FindZeroMQ.cmake, but the general feeling around the ZeroMQ community is that this is a waste of effort, because the CMake config files that come along with libzmq itself already solve this finding problem; it's just unfortunate that the Linux distro's won't include them...). So in the end, because of time constraints, I made the choice to prioritize other things over putting a lot of effort into this dependency which will probably end up different in the near future anyway (because of the ppoll PR, which will make things a lot easier on the ROOT side). So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Then about the RooFitZ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870411730
https://github.com/root-project/root/pull/8385#issuecomment-870411730:169,Integrability,depend,dependency,169,"Thanks @amadio for the extensive input! Let me address it point by point:. First: the current choice for ""built-in only"". The built-in is there for two reasons: 1) as a dependency, obviously, but 2) also because the full source is needed to build `zmq::ppoll`. `ppoll` was written as an extension to libzmq itself. In the ideal world, I would have committed this back to libzmq (which they are open to, and which I'll do later, see https://github.com/zeromq/libzmq/issues/4220), but haven't had time yet. The interim solution is to just ship it with ROOT, but this requires (part of) the libzmq source to build against. We can do this in two ways: a) just include the necessary libzmq files or b) get them externally on the fly. I actually went with option a) first. However, when people started trying out this branch on their machines, it turned out that the `conda` libzmq build (which I was using in my dev setup) had a more favorable configuration than for instance most Linux native builds, especially because those native builds lack CMake configuration files. That latter fact made me decide to just make the built-in dependency the default; this way I wouldn't have to figure out how to best detect libzmq on each platform (or find / cobble together a good and freely licensed FindZeroMQ.cmake, but the general feeling around the ZeroMQ community is that this is a waste of effort, because the CMake config files that come along with libzmq itself already solve this finding problem; it's just unfortunate that the Linux distro's won't include them...). So in the end, because of time constraints, I made the choice to prioritize other things over putting a lot of effort into this dependency which will probably end up different in the near future anyway (because of the ppoll PR, which will make things a lot easier on the ROOT side). So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Then about the RooFitZ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870411730
https://github.com/root-project/root/pull/8385#issuecomment-870411730:1126,Integrability,depend,dependency,1126,"bviously, but 2) also because the full source is needed to build `zmq::ppoll`. `ppoll` was written as an extension to libzmq itself. In the ideal world, I would have committed this back to libzmq (which they are open to, and which I'll do later, see https://github.com/zeromq/libzmq/issues/4220), but haven't had time yet. The interim solution is to just ship it with ROOT, but this requires (part of) the libzmq source to build against. We can do this in two ways: a) just include the necessary libzmq files or b) get them externally on the fly. I actually went with option a) first. However, when people started trying out this branch on their machines, it turned out that the `conda` libzmq build (which I was using in my dev setup) had a more favorable configuration than for instance most Linux native builds, especially because those native builds lack CMake configuration files. That latter fact made me decide to just make the built-in dependency the default; this way I wouldn't have to figure out how to best detect libzmq on each platform (or find / cobble together a good and freely licensed FindZeroMQ.cmake, but the general feeling around the ZeroMQ community is that this is a waste of effort, because the CMake config files that come along with libzmq itself already solve this finding problem; it's just unfortunate that the Linux distro's won't include them...). So in the end, because of time constraints, I made the choice to prioritize other things over putting a lot of effort into this dependency which will probably end up different in the near future anyway (because of the ppoll PR, which will make things a lot easier on the ROOT side). So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is Roo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870411730
https://github.com/root-project/root/pull/8385#issuecomment-870411730:1691,Integrability,depend,dependency,1691,"em externally on the fly. I actually went with option a) first. However, when people started trying out this branch on their machines, it turned out that the `conda` libzmq build (which I was using in my dev setup) had a more favorable configuration than for instance most Linux native builds, especially because those native builds lack CMake configuration files. That latter fact made me decide to just make the built-in dependency the default; this way I wouldn't have to figure out how to best detect libzmq on each platform (or find / cobble together a good and freely licensed FindZeroMQ.cmake, but the general feeling around the ZeroMQ community is that this is a waste of effort, because the CMake config files that come along with libzmq itself already solve this finding problem; it's just unfortunate that the Linux distro's won't include them...). So in the end, because of time constraints, I made the choice to prioritize other things over putting a lot of effort into this dependency which will probably end up different in the near future anyway (because of the ppoll PR, which will make things a lot easier on the ROOT side). So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is RooFit::MultiProcess, so I wanted to wait with such an option until that PR (hopefully I'll be able to submit that one today). In this PR, RooFitZMQ is not used for anything and later on it will just be a library for RooFit::MultiProcess as well, so there would typically not really be a point for a user to want to build RooFitZMQ but not RooFit::MultiProcess. Do you think in this situation it makes sense to add the option for RooFitZMQ already or should I just do it for RooFit::MultiProcess? So, this option (say `-Droof",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870411730
https://github.com/root-project/root/pull/8385#issuecomment-870411730:3220,Integrability,depend,depends,3220,"unity is that this is a waste of effort, because the CMake config files that come along with libzmq itself already solve this finding problem; it's just unfortunate that the Linux distro's won't include them...). So in the end, because of time constraints, I made the choice to prioritize other things over putting a lot of effort into this dependency which will probably end up different in the near future anyway (because of the ppoll PR, which will make things a lot easier on the ROOT side). So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is RooFit::MultiProcess, so I wanted to wait with such an option until that PR (hopefully I'll be able to submit that one today). In this PR, RooFitZMQ is not used for anything and later on it will just be a library for RooFit::MultiProcess as well, so there would typically not really be a point for a user to want to build RooFitZMQ but not RooFit::MultiProcess. Do you think in this situation it makes sense to add the option for RooFitZMQ already or should I just do it for RooFit::MultiProcess? So, this option (say `-Droofit_multiprocess=ON`) would activate both RooFit::MultiProcess and RooFitZMQ, and also builtin_zeromq. I think that fail-on-missing is only relevant in case there would be a non built-in option as well, right?. Finally, about git history: makes sense. I can do some reordering before merging. Otherwise, just squashing everything would make sense to me as well. The two independent things here are basically 1) the zmq builtin and 2) RooFitZMQ itself. These could indeed just be two commits, but since nothing really depends on RooFitZMQ at this point, including it with the libzmq builtin in one commit I think would give a clean history as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870411730
https://github.com/root-project/root/pull/8385#issuecomment-870411730:939,Modifiability,config,configuration,939,"Thanks @amadio for the extensive input! Let me address it point by point:. First: the current choice for ""built-in only"". The built-in is there for two reasons: 1) as a dependency, obviously, but 2) also because the full source is needed to build `zmq::ppoll`. `ppoll` was written as an extension to libzmq itself. In the ideal world, I would have committed this back to libzmq (which they are open to, and which I'll do later, see https://github.com/zeromq/libzmq/issues/4220), but haven't had time yet. The interim solution is to just ship it with ROOT, but this requires (part of) the libzmq source to build against. We can do this in two ways: a) just include the necessary libzmq files or b) get them externally on the fly. I actually went with option a) first. However, when people started trying out this branch on their machines, it turned out that the `conda` libzmq build (which I was using in my dev setup) had a more favorable configuration than for instance most Linux native builds, especially because those native builds lack CMake configuration files. That latter fact made me decide to just make the built-in dependency the default; this way I wouldn't have to figure out how to best detect libzmq on each platform (or find / cobble together a good and freely licensed FindZeroMQ.cmake, but the general feeling around the ZeroMQ community is that this is a waste of effort, because the CMake config files that come along with libzmq itself already solve this finding problem; it's just unfortunate that the Linux distro's won't include them...). So in the end, because of time constraints, I made the choice to prioritize other things over putting a lot of effort into this dependency which will probably end up different in the near future anyway (because of the ppoll PR, which will make things a lot easier on the ROOT side). So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Then about the RooFitZ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870411730
https://github.com/root-project/root/pull/8385#issuecomment-870411730:1047,Modifiability,config,configuration,1047,"Thanks @amadio for the extensive input! Let me address it point by point:. First: the current choice for ""built-in only"". The built-in is there for two reasons: 1) as a dependency, obviously, but 2) also because the full source is needed to build `zmq::ppoll`. `ppoll` was written as an extension to libzmq itself. In the ideal world, I would have committed this back to libzmq (which they are open to, and which I'll do later, see https://github.com/zeromq/libzmq/issues/4220), but haven't had time yet. The interim solution is to just ship it with ROOT, but this requires (part of) the libzmq source to build against. We can do this in two ways: a) just include the necessary libzmq files or b) get them externally on the fly. I actually went with option a) first. However, when people started trying out this branch on their machines, it turned out that the `conda` libzmq build (which I was using in my dev setup) had a more favorable configuration than for instance most Linux native builds, especially because those native builds lack CMake configuration files. That latter fact made me decide to just make the built-in dependency the default; this way I wouldn't have to figure out how to best detect libzmq on each platform (or find / cobble together a good and freely licensed FindZeroMQ.cmake, but the general feeling around the ZeroMQ community is that this is a waste of effort, because the CMake config files that come along with libzmq itself already solve this finding problem; it's just unfortunate that the Linux distro's won't include them...). So in the end, because of time constraints, I made the choice to prioritize other things over putting a lot of effort into this dependency which will probably end up different in the near future anyway (because of the ppoll PR, which will make things a lot easier on the ROOT side). So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Then about the RooFitZ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870411730
https://github.com/root-project/root/pull/8385#issuecomment-870411730:1409,Modifiability,config,config,1409," see https://github.com/zeromq/libzmq/issues/4220), but haven't had time yet. The interim solution is to just ship it with ROOT, but this requires (part of) the libzmq source to build against. We can do this in two ways: a) just include the necessary libzmq files or b) get them externally on the fly. I actually went with option a) first. However, when people started trying out this branch on their machines, it turned out that the `conda` libzmq build (which I was using in my dev setup) had a more favorable configuration than for instance most Linux native builds, especially because those native builds lack CMake configuration files. That latter fact made me decide to just make the built-in dependency the default; this way I wouldn't have to figure out how to best detect libzmq on each platform (or find / cobble together a good and freely licensed FindZeroMQ.cmake, but the general feeling around the ZeroMQ community is that this is a waste of effort, because the CMake config files that come along with libzmq itself already solve this finding problem; it's just unfortunate that the Linux distro's won't include them...). So in the end, because of time constraints, I made the choice to prioritize other things over putting a lot of effort into this dependency which will probably end up different in the near future anyway (because of the ppoll PR, which will make things a lot easier on the ROOT side). So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is RooFit::MultiProcess, so I wanted to wait with such an option until that PR (hopefully I'll be able to submit that one today). In this PR, RooFitZMQ is not used for anything and later on it will just be a library for RooFit::MultiProcess as well, so",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870411730
https://github.com/root-project/root/pull/8385#issuecomment-870411730:1201,Safety,detect,detect,1201,"bviously, but 2) also because the full source is needed to build `zmq::ppoll`. `ppoll` was written as an extension to libzmq itself. In the ideal world, I would have committed this back to libzmq (which they are open to, and which I'll do later, see https://github.com/zeromq/libzmq/issues/4220), but haven't had time yet. The interim solution is to just ship it with ROOT, but this requires (part of) the libzmq source to build against. We can do this in two ways: a) just include the necessary libzmq files or b) get them externally on the fly. I actually went with option a) first. However, when people started trying out this branch on their machines, it turned out that the `conda` libzmq build (which I was using in my dev setup) had a more favorable configuration than for instance most Linux native builds, especially because those native builds lack CMake configuration files. That latter fact made me decide to just make the built-in dependency the default; this way I wouldn't have to figure out how to best detect libzmq on each platform (or find / cobble together a good and freely licensed FindZeroMQ.cmake, but the general feeling around the ZeroMQ community is that this is a waste of effort, because the CMake config files that come along with libzmq itself already solve this finding problem; it's just unfortunate that the Linux distro's won't include them...). So in the end, because of time constraints, I made the choice to prioritize other things over putting a lot of effort into this dependency which will probably end up different in the near future anyway (because of the ppoll PR, which will make things a lot easier on the ROOT side). So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is Roo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870411730
https://github.com/root-project/root/pull/8385#issuecomment-870411730:1875,Usability,clear,clear,1875,"onda` libzmq build (which I was using in my dev setup) had a more favorable configuration than for instance most Linux native builds, especially because those native builds lack CMake configuration files. That latter fact made me decide to just make the built-in dependency the default; this way I wouldn't have to figure out how to best detect libzmq on each platform (or find / cobble together a good and freely licensed FindZeroMQ.cmake, but the general feeling around the ZeroMQ community is that this is a waste of effort, because the CMake config files that come along with libzmq itself already solve this finding problem; it's just unfortunate that the Linux distro's won't include them...). So in the end, because of time constraints, I made the choice to prioritize other things over putting a lot of effort into this dependency which will probably end up different in the near future anyway (because of the ppoll PR, which will make things a lot easier on the ROOT side). So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is RooFit::MultiProcess, so I wanted to wait with such an option until that PR (hopefully I'll be able to submit that one today). In this PR, RooFitZMQ is not used for anything and later on it will just be a library for RooFit::MultiProcess as well, so there would typically not really be a point for a user to want to build RooFitZMQ but not RooFit::MultiProcess. Do you think in this situation it makes sense to add the option for RooFitZMQ already or should I just do it for RooFit::MultiProcess? So, this option (say `-Droofit_multiprocess=ON`) would activate both RooFit::MultiProcess and RooFitZMQ, and also builtin_zeromq. I think that fail-on-missing is only relevant in case the",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870411730
https://github.com/root-project/root/pull/8385#issuecomment-870471097:334,Deployability,patch,patching,334,"That's right, I could (and did) use a system libzmq, except to build the ppoll file, I need to include a few headers from the libzmq source which are not distributed with Linux packages. Previously, I had included those headers with RooFitZMQ. I ripped them out again, because with the built-in they became unnecessary. Edit: indeed, patching is probably not the right word, it's an addition, but it uses libzmq internal headers. Hope I'm making myself clear, sorry for the confusion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870471097
https://github.com/root-project/root/pull/8385#issuecomment-870471097:453,Usability,clear,clear,453,"That's right, I could (and did) use a system libzmq, except to build the ppoll file, I need to include a few headers from the libzmq source which are not distributed with Linux packages. Previously, I had included those headers with RooFitZMQ. I ripped them out again, because with the built-in they became unnecessary. Edit: indeed, patching is probably not the right word, it's an addition, but it uses libzmq internal headers. Hope I'm making myself clear, sorry for the confusion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870471097
https://github.com/root-project/root/pull/8385#issuecomment-870483338:522,Integrability,depend,depend,522,"I agree, that is the best way to go in theory. In practice, I'm dealing with time constraints that will make this challenging. The timeline for including `ppoll` into libzmq would be a liability, because even though I'm not worried it will not be accepted (it is actually quite a simple addition, especially in the way that [a libzmq maintainer suggests here](https://github.com/zeromq/libzmq/issues/4220)), delaying this PR to wait for that one will probably result in extra merging efforts for the later RooFit PRs that depend on this one. In any case, if this is the way we must go (and I can totally understand that you would want it this way), I will do my best to split up the other PRs as much as possible, so that those can be merged independently asap and merging conflicts will hopefully be minimized.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870483338
https://github.com/root-project/root/pull/8385#issuecomment-870483338:280,Usability,simpl,simple,280,"I agree, that is the best way to go in theory. In practice, I'm dealing with time constraints that will make this challenging. The timeline for including `ppoll` into libzmq would be a liability, because even though I'm not worried it will not be accepted (it is actually quite a simple addition, especially in the way that [a libzmq maintainer suggests here](https://github.com/zeromq/libzmq/issues/4220)), delaying this PR to wait for that one will probably result in extra merging efforts for the later RooFit PRs that depend on this one. In any case, if this is the way we must go (and I can totally understand that you would want it this way), I will do my best to split up the other PRs as much as possible, so that those can be merged independently asap and merging conflicts will hopefully be minimized.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870483338
https://github.com/root-project/root/pull/8385#issuecomment-870570029:2102,Availability,reliab,reliably,2102,"ou can then adapt RooFitZMQ to that in a new pull request.; ; > Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is RooFit::MultiProcess, so I wanted to wait with such an option until that PR (hopefully I'll be able to submit that one today). In this PR, RooFitZMQ is not used for anything and later on it will just be a library for RooFit::MultiProcess as well, so there would typically not really be a point for a user to want to build RooFitZMQ but not RooFit::MultiProcess. Do you think in this situation it makes sense to add the option for RooFitZMQ already or should I just do it for RooFit::MultiProcess? So, this option (say `-Droofit_multiprocess=ON`) would activate both RooFit::MultiProcess and RooFitZMQ, and also builtin_zeromq. If RooFitZMQ only makes sense as a support library for RooFit::MultiProcess, it's better to put them together in a single pull request. It will be much easier to ensure everything works together that way.; ; > I think that fail-on-missing is only relevant in case there would be a non built-in option as well, right?. That is not what users generally think. They want `fail-on-missing` to work reliably and make configuration fail if a dependency cannot be met with system packages. The only exceptions to this rule should be LLVM/Clang.; ; > Finally, about git history: makes sense. I can do some reordering before merging. Otherwise, just squashing everything would make sense to me as well. The two independent things here are basically 1) the zmq builtin and 2) RooFitZMQ itself. These could indeed just be two commits, but since nothing really depends on RooFitZMQ at this point, including it with the libzmq builtin in one commit I think would give a clean history as well. Ok, as long as it's possible to use a vanilla zeromq, and the builtin addition is the last commit in the series, it should be ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870570029
https://github.com/root-project/root/pull/8385#issuecomment-870570029:212,Deployability,patch,patched,212,"> So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Sorry, but no, this is not acceptable if you ask me. In fact, the need for a patched zeromq raises a big red flag as that may make it not possible to ever use a system version of zeromq if your pull request gets stuck. I agree with Axel that the right course of action is to add the needed functionality to zeromq directly first, then add this work to ROOT. I don't think that time constraints should be used as a way to get hackish code into ROOT. Alternatively, if your addition is really independent to zeromq, you could just add it to the RooFitZMQ library instead, so that you can use the system version of zeromq as is. If in a later version they add your new functionality, you can then adapt RooFitZMQ to that in a new pull request.; ; > Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is RooFit::MultiProcess, so I wanted to wait with such an option until that PR (hopefully I'll be able to submit that one today). In this PR, RooFitZMQ is not used for anything and later on it will just be a library for RooFit::MultiProcess as well, so there would typically not really be a point for a user to want to build RooFitZMQ but not RooFit::MultiProcess. Do you think in this situation it makes sense to add the option for RooFitZMQ already or should I just do it for RooFit::MultiProcess? So, this option (say `-Droofit_multiprocess=ON`) would activate both RooFit::MultiProcess and RooFitZMQ, and also builtin_zeromq. If RooFitZMQ only makes sense as a support library for RooFit::MultiProcess, it's better to put them together in a single pull request. It will be much easier to ensure everything works together that way.; ; > I think that fail-on-missing is only relevant in case there would be a non built-in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870570029
https://github.com/root-project/root/pull/8385#issuecomment-870570029:2120,Deployability,configurat,configuration,2120,"ou can then adapt RooFitZMQ to that in a new pull request.; ; > Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is RooFit::MultiProcess, so I wanted to wait with such an option until that PR (hopefully I'll be able to submit that one today). In this PR, RooFitZMQ is not used for anything and later on it will just be a library for RooFit::MultiProcess as well, so there would typically not really be a point for a user to want to build RooFitZMQ but not RooFit::MultiProcess. Do you think in this situation it makes sense to add the option for RooFitZMQ already or should I just do it for RooFit::MultiProcess? So, this option (say `-Droofit_multiprocess=ON`) would activate both RooFit::MultiProcess and RooFitZMQ, and also builtin_zeromq. If RooFitZMQ only makes sense as a support library for RooFit::MultiProcess, it's better to put them together in a single pull request. It will be much easier to ensure everything works together that way.; ; > I think that fail-on-missing is only relevant in case there would be a non built-in option as well, right?. That is not what users generally think. They want `fail-on-missing` to work reliably and make configuration fail if a dependency cannot be met with system packages. The only exceptions to this rule should be LLVM/Clang.; ; > Finally, about git history: makes sense. I can do some reordering before merging. Otherwise, just squashing everything would make sense to me as well. The two independent things here are basically 1) the zmq builtin and 2) RooFitZMQ itself. These could indeed just be two commits, but since nothing really depends on RooFitZMQ at this point, including it with the libzmq builtin in one commit I think would give a clean history as well. Ok, as long as it's possible to use a vanilla zeromq, and the builtin addition is the last commit in the series, it should be ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870570029
https://github.com/root-project/root/pull/8385#issuecomment-870570029:829,Energy Efficiency,adapt,adapt,829,"> So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Sorry, but no, this is not acceptable if you ask me. In fact, the need for a patched zeromq raises a big red flag as that may make it not possible to ever use a system version of zeromq if your pull request gets stuck. I agree with Axel that the right course of action is to add the needed functionality to zeromq directly first, then add this work to ROOT. I don't think that time constraints should be used as a way to get hackish code into ROOT. Alternatively, if your addition is really independent to zeromq, you could just add it to the RooFitZMQ library instead, so that you can use the system version of zeromq as is. If in a later version they add your new functionality, you can then adapt RooFitZMQ to that in a new pull request.; ; > Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is RooFit::MultiProcess, so I wanted to wait with such an option until that PR (hopefully I'll be able to submit that one today). In this PR, RooFitZMQ is not used for anything and later on it will just be a library for RooFit::MultiProcess as well, so there would typically not really be a point for a user to want to build RooFitZMQ but not RooFit::MultiProcess. Do you think in this situation it makes sense to add the option for RooFitZMQ already or should I just do it for RooFit::MultiProcess? So, this option (say `-Droofit_multiprocess=ON`) would activate both RooFit::MultiProcess and RooFitZMQ, and also builtin_zeromq. If RooFitZMQ only makes sense as a support library for RooFit::MultiProcess, it's better to put them together in a single pull request. It will be much easier to ensure everything works together that way.; ; > I think that fail-on-missing is only relevant in case there would be a non built-in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870570029
https://github.com/root-project/root/pull/8385#issuecomment-870570029:2144,Integrability,depend,dependency,2144,"ou can then adapt RooFitZMQ to that in a new pull request.; ; > Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is RooFit::MultiProcess, so I wanted to wait with such an option until that PR (hopefully I'll be able to submit that one today). In this PR, RooFitZMQ is not used for anything and later on it will just be a library for RooFit::MultiProcess as well, so there would typically not really be a point for a user to want to build RooFitZMQ but not RooFit::MultiProcess. Do you think in this situation it makes sense to add the option for RooFitZMQ already or should I just do it for RooFit::MultiProcess? So, this option (say `-Droofit_multiprocess=ON`) would activate both RooFit::MultiProcess and RooFitZMQ, and also builtin_zeromq. If RooFitZMQ only makes sense as a support library for RooFit::MultiProcess, it's better to put them together in a single pull request. It will be much easier to ensure everything works together that way.; ; > I think that fail-on-missing is only relevant in case there would be a non built-in option as well, right?. That is not what users generally think. They want `fail-on-missing` to work reliably and make configuration fail if a dependency cannot be met with system packages. The only exceptions to this rule should be LLVM/Clang.; ; > Finally, about git history: makes sense. I can do some reordering before merging. Otherwise, just squashing everything would make sense to me as well. The two independent things here are basically 1) the zmq builtin and 2) RooFitZMQ itself. These could indeed just be two commits, but since nothing really depends on RooFitZMQ at this point, including it with the libzmq builtin in one commit I think would give a clean history as well. Ok, as long as it's possible to use a vanilla zeromq, and the builtin addition is the last commit in the series, it should be ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870570029
https://github.com/root-project/root/pull/8385#issuecomment-870570029:2557,Integrability,depend,depends,2557,"ou can then adapt RooFitZMQ to that in a new pull request.; ; > Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is RooFit::MultiProcess, so I wanted to wait with such an option until that PR (hopefully I'll be able to submit that one today). In this PR, RooFitZMQ is not used for anything and later on it will just be a library for RooFit::MultiProcess as well, so there would typically not really be a point for a user to want to build RooFitZMQ but not RooFit::MultiProcess. Do you think in this situation it makes sense to add the option for RooFitZMQ already or should I just do it for RooFit::MultiProcess? So, this option (say `-Droofit_multiprocess=ON`) would activate both RooFit::MultiProcess and RooFitZMQ, and also builtin_zeromq. If RooFitZMQ only makes sense as a support library for RooFit::MultiProcess, it's better to put them together in a single pull request. It will be much easier to ensure everything works together that way.; ; > I think that fail-on-missing is only relevant in case there would be a non built-in option as well, right?. That is not what users generally think. They want `fail-on-missing` to work reliably and make configuration fail if a dependency cannot be met with system packages. The only exceptions to this rule should be LLVM/Clang.; ; > Finally, about git history: makes sense. I can do some reordering before merging. Otherwise, just squashing everything would make sense to me as well. The two independent things here are basically 1) the zmq builtin and 2) RooFitZMQ itself. These could indeed just be two commits, but since nothing really depends on RooFitZMQ at this point, including it with the libzmq builtin in one commit I think would give a clean history as well. Ok, as long as it's possible to use a vanilla zeromq, and the builtin addition is the last commit in the series, it should be ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870570029
https://github.com/root-project/root/pull/8385#issuecomment-870570029:829,Modifiability,adapt,adapt,829,"> So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Sorry, but no, this is not acceptable if you ask me. In fact, the need for a patched zeromq raises a big red flag as that may make it not possible to ever use a system version of zeromq if your pull request gets stuck. I agree with Axel that the right course of action is to add the needed functionality to zeromq directly first, then add this work to ROOT. I don't think that time constraints should be used as a way to get hackish code into ROOT. Alternatively, if your addition is really independent to zeromq, you could just add it to the RooFitZMQ library instead, so that you can use the system version of zeromq as is. If in a later version they add your new functionality, you can then adapt RooFitZMQ to that in a new pull request.; ; > Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is RooFit::MultiProcess, so I wanted to wait with such an option until that PR (hopefully I'll be able to submit that one today). In this PR, RooFitZMQ is not used for anything and later on it will just be a library for RooFit::MultiProcess as well, so there would typically not really be a point for a user to want to build RooFitZMQ but not RooFit::MultiProcess. Do you think in this situation it makes sense to add the option for RooFitZMQ already or should I just do it for RooFit::MultiProcess? So, this option (say `-Droofit_multiprocess=ON`) would activate both RooFit::MultiProcess and RooFitZMQ, and also builtin_zeromq. If RooFitZMQ only makes sense as a support library for RooFit::MultiProcess, it's better to put them together in a single pull request. It will be much easier to ensure everything works together that way.; ; > I think that fail-on-missing is only relevant in case there would be a non built-in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870570029
https://github.com/root-project/root/pull/8385#issuecomment-870570029:2120,Modifiability,config,configuration,2120,"ou can then adapt RooFitZMQ to that in a new pull request.; ; > Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is RooFit::MultiProcess, so I wanted to wait with such an option until that PR (hopefully I'll be able to submit that one today). In this PR, RooFitZMQ is not used for anything and later on it will just be a library for RooFit::MultiProcess as well, so there would typically not really be a point for a user to want to build RooFitZMQ but not RooFit::MultiProcess. Do you think in this situation it makes sense to add the option for RooFitZMQ already or should I just do it for RooFit::MultiProcess? So, this option (say `-Droofit_multiprocess=ON`) would activate both RooFit::MultiProcess and RooFitZMQ, and also builtin_zeromq. If RooFitZMQ only makes sense as a support library for RooFit::MultiProcess, it's better to put them together in a single pull request. It will be much easier to ensure everything works together that way.; ; > I think that fail-on-missing is only relevant in case there would be a non built-in option as well, right?. That is not what users generally think. They want `fail-on-missing` to work reliably and make configuration fail if a dependency cannot be met with system packages. The only exceptions to this rule should be LLVM/Clang.; ; > Finally, about git history: makes sense. I can do some reordering before merging. Otherwise, just squashing everything would make sense to me as well. The two independent things here are basically 1) the zmq builtin and 2) RooFitZMQ itself. These could indeed just be two commits, but since nothing really depends on RooFitZMQ at this point, including it with the libzmq builtin in one commit I think would give a clean history as well. Ok, as long as it's possible to use a vanilla zeromq, and the builtin addition is the last commit in the series, it should be ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870570029
https://github.com/root-project/root/pull/8385#issuecomment-870570029:31,Usability,clear,clear,31,"> So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Sorry, but no, this is not acceptable if you ask me. In fact, the need for a patched zeromq raises a big red flag as that may make it not possible to ever use a system version of zeromq if your pull request gets stuck. I agree with Axel that the right course of action is to add the needed functionality to zeromq directly first, then add this work to ROOT. I don't think that time constraints should be used as a way to get hackish code into ROOT. Alternatively, if your addition is really independent to zeromq, you could just add it to the RooFitZMQ library instead, so that you can use the system version of zeromq as is. If in a later version they add your new functionality, you can then adapt RooFitZMQ to that in a new pull request.; ; > Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is RooFit::MultiProcess, so I wanted to wait with such an option until that PR (hopefully I'll be able to submit that one today). In this PR, RooFitZMQ is not used for anything and later on it will just be a library for RooFit::MultiProcess as well, so there would typically not really be a point for a user to want to build RooFitZMQ but not RooFit::MultiProcess. Do you think in this situation it makes sense to add the option for RooFitZMQ already or should I just do it for RooFit::MultiProcess? So, this option (say `-Droofit_multiprocess=ON`) would activate both RooFit::MultiProcess and RooFitZMQ, and also builtin_zeromq. If RooFitZMQ only makes sense as a support library for RooFit::MultiProcess, it's better to put them together in a single pull request. It will be much easier to ensure everything works together that way.; ; > I think that fail-on-missing is only relevant in case there would be a non built-in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870570029
https://github.com/root-project/root/issues/8387#issuecomment-861315969:109,Testability,test,test,109,Hi - this is breaking some more or less urgent ATLAS analyses - if there is any guidance as to what we could test that'd be much appreciated. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8387#issuecomment-861315969
https://github.com/root-project/root/issues/8387#issuecomment-861315969:80,Usability,guid,guidance,80,Hi - this is breaking some more or less urgent ATLAS analyses - if there is any guidance as to what we could test that'd be much appreciated. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8387#issuecomment-861315969
https://github.com/root-project/root/pull/8425#issuecomment-861618831:114,Usability,simpl,simply,114,"@pcanal I have thought of a ""solution"". If we remove the default value, set `event` to 0 in the method itself and simply warn the user that he/she has not provided a value for `event`, the user will know and other classes that rely on the default value of 0 still work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-861618831
https://github.com/root-project/root/pull/8425#issuecomment-861667463:167,Availability,error,error,167,> `!entry == true` if `entry == 0`: `0` is fals-y in C++. Ohh I didn't know that. Then maybe one could simply check if entry is undefined. Or does that cause the same error?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-861667463
https://github.com/root-project/root/pull/8425#issuecomment-861667463:103,Usability,simpl,simply,103,> `!entry == true` if `entry == 0`: `0` is fals-y in C++. Ohh I didn't know that. Then maybe one could simply check if entry is undefined. Or does that cause the same error?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-861667463
https://github.com/root-project/root/pull/8425#issuecomment-865182237:51,Usability,learn,learn,51,> Thank you very much!. Thank you for your help. I learn something new with every PR :D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-865182237
https://github.com/root-project/root/pull/8425#issuecomment-865184527:85,Safety,avoid,avoid,85,"Final note: In the commits left on the branch there was a ""merge"" commit, we want to avoid them. When updating your branch with the content of the master branch, please use 'git rebase' rather than `git merge`. Also we tend to prefer to simplify the history by keeping only the effective commits. [For example, in this case, you could (have done)/do `git rebase -i` to remove the commit that was reverse and its reversal :)]. For this PR, I effectively handled these changes by doing a ""merge and squash"" but this works out only for PR that have one effective commit (the case here).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-865184527
https://github.com/root-project/root/pull/8425#issuecomment-865184527:237,Usability,simpl,simplify,237,"Final note: In the commits left on the branch there was a ""merge"" commit, we want to avoid them. When updating your branch with the content of the master branch, please use 'git rebase' rather than `git merge`. Also we tend to prefer to simplify the history by keeping only the effective commits. [For example, in this case, you could (have done)/do `git rebase -i` to remove the commit that was reverse and its reversal :)]. For this PR, I effectively handled these changes by doing a ""merge and squash"" but this works out only for PR that have one effective commit (the case here).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-865184527
https://github.com/root-project/root/pull/8425#issuecomment-865186362:87,Safety,avoid,avoid,87,"> Final note: In the commits left on the branch there was a ""merge"" commit, we want to avoid them. When updating your branch with the content of the master branch, please use 'git rebase' rather than `git merge`. Also we tend to prefer to simplify the history by keeping only the effective commits. [For example, in this case, you could (have done)/do `git rebase -i` to remove the commit that was reverse and its reversal :)].; > ; > For this PR, I effectively handled these changes by doing a ""merge and squash"" but this works out only for PR that have one effective commit (the case here). Ah ok. I recently learned what rebase -i is, so I'll use that next time. Thanks for the tip",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-865186362
https://github.com/root-project/root/pull/8425#issuecomment-865186362:239,Usability,simpl,simplify,239,"> Final note: In the commits left on the branch there was a ""merge"" commit, we want to avoid them. When updating your branch with the content of the master branch, please use 'git rebase' rather than `git merge`. Also we tend to prefer to simplify the history by keeping only the effective commits. [For example, in this case, you could (have done)/do `git rebase -i` to remove the commit that was reverse and its reversal :)].; > ; > For this PR, I effectively handled these changes by doing a ""merge and squash"" but this works out only for PR that have one effective commit (the case here). Ah ok. I recently learned what rebase -i is, so I'll use that next time. Thanks for the tip",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-865186362
https://github.com/root-project/root/pull/8425#issuecomment-865186362:611,Usability,learn,learned,611,"> Final note: In the commits left on the branch there was a ""merge"" commit, we want to avoid them. When updating your branch with the content of the master branch, please use 'git rebase' rather than `git merge`. Also we tend to prefer to simplify the history by keeping only the effective commits. [For example, in this case, you could (have done)/do `git rebase -i` to remove the commit that was reverse and its reversal :)].; > ; > For this PR, I effectively handled these changes by doing a ""merge and squash"" but this works out only for PR that have one effective commit (the case here). Ah ok. I recently learned what rebase -i is, so I'll use that next time. Thanks for the tip",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-865186362
https://github.com/root-project/root/pull/8426#issuecomment-862436129:50,Usability,learn,learn,50,Very nice! Interactive rebase is awesome once you learn how to use it! 👏,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8426#issuecomment-862436129
https://github.com/root-project/root/pull/8426#issuecomment-862436434:52,Usability,learn,learn,52,"> Very nice! Interactive rebase is awesome once you learn how to use it!. Yeah, it is. Feels like I've been living under a rock hehe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8426#issuecomment-862436434
https://github.com/root-project/root/pull/8426#issuecomment-862486337:391,Usability,learn,learning,391,"> Yes they need to be fixed. I could tell you - but what I'd recommend (look, we're teaching you here :-) ) is to copy the warning text, search the Internet, and pick the most helpful posting on StackOverflow: that'll explain you what to do. And it's a key pattern to become a successful developer, it's how all of us fix our warnings. Ahh hehe. Okay, I'll try to fix it :D . Thanks for the learning opportunity",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8426#issuecomment-862486337
https://github.com/root-project/root/issues/8447#issuecomment-862518127:344,Usability,usab,usable,344,"@eguiraud while i agree with you, my thinking actually was also along having a common code base and also ""a la python"" usage: while there is the option of having an executable doing ""import module, run main function"" one can also do ""python -m module module_args"". so, my proposal was from a point of view of code (common code base, maybe also usable programatically in macros, as part maybe of some generic ROOT toolbox) and the second point of view was of actual usage where maybe `root -verb verb_args` could be easier and clearer to use than `root[verb] args` .. but in the end my proposal was more on the lines of ""wouldn't you (devs) be interested in such a usage/point of view ?"" ; and getting back to python: yes, it is exactly (also) a swiss-army knife like python :) and beside some bash script that i converted to python, i started to see a point of/play with having root scripts (with root in shebang ;) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8447#issuecomment-862518127
https://github.com/root-project/root/issues/8447#issuecomment-862518127:526,Usability,clear,clearer,526,"@eguiraud while i agree with you, my thinking actually was also along having a common code base and also ""a la python"" usage: while there is the option of having an executable doing ""import module, run main function"" one can also do ""python -m module module_args"". so, my proposal was from a point of view of code (common code base, maybe also usable programatically in macros, as part maybe of some generic ROOT toolbox) and the second point of view was of actual usage where maybe `root -verb verb_args` could be easier and clearer to use than `root[verb] args` .. but in the end my proposal was more on the lines of ""wouldn't you (devs) be interested in such a usage/point of view ?"" ; and getting back to python: yes, it is exactly (also) a swiss-army knife like python :) and beside some bash script that i converted to python, i started to see a point of/play with having root scripts (with root in shebang ;) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8447#issuecomment-862518127
https://github.com/root-project/root/issues/8474#issuecomment-864062658:118,Testability,test,test,118,"> Hi @VanyaBelyaev , do you think the fact that you are using RooFit through PyROOT is relevant? Would you be able to test in pure C++ ?. Dear @eguiraud; I am not using RooFit througt C++ . It would be expremently difficult or even impossible for me to conver tmy python stuff into C++.; Note that for simple models I have no problems.; It happens only for multidimensional multicomponent model, when I draw projecton; - first draw data set with `Invisible` flag ; - draw fit components; - draw data with normal vizibility ; ; And it segfaults at the second step. ; The relevant part of the stack is here: . ```. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum https://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at https://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #7 0x00007f36325eec01 in (anonymous namespace)::removeCommon(std::vector<RooAbsArg*, std::allocator<RooAbsArg*> >&, std::__ROOT::span<RooAbsArg* const>) () from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Fri/ROOT/HEAD/x86_64-centos7-gcc9-opt/lib/libRooFitCore.so; #8 0x00007f36325f2568 in RooProdPdf::factorizeProduct(RooArgSet const&, RooArgSet const&, RooLinkedList&, RooLinkedList&, RooLinkedList&, RooLinkedList&, RooLinkedList&) const () from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Fri/ROOT/HEAD/x86_64-centos7-gcc9-opt/lib/libRooFitCore.so; #9 0x00007f36325f94b9 in RooProdPdf::getPartIntList(RooArgSet const*, RooArgSet const*, char const*) const () from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Fri/ROOT/HEAD/x86_64-centos7-gcc9-opt/lib/libRooFitCore.so; #10 0x00007f36325fd52e in RooProdPdf::getAnalyticalIntegralWN(RooArgSet&, RooArgSet&, RooArgSet const*, char const*) const () from /cvmfs/sft-nightlies.cern.ch/lcg/nightli",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8474#issuecomment-864062658
https://github.com/root-project/root/issues/8474#issuecomment-864062658:302,Usability,simpl,simple,302,"> Hi @VanyaBelyaev , do you think the fact that you are using RooFit through PyROOT is relevant? Would you be able to test in pure C++ ?. Dear @eguiraud; I am not using RooFit througt C++ . It would be expremently difficult or even impossible for me to conver tmy python stuff into C++.; Note that for simple models I have no problems.; It happens only for multidimensional multicomponent model, when I draw projecton; - first draw data set with `Invisible` flag ; - draw fit components; - draw data with normal vizibility ; ; And it segfaults at the second step. ; The relevant part of the stack is here: . ```. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum https://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at https://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #7 0x00007f36325eec01 in (anonymous namespace)::removeCommon(std::vector<RooAbsArg*, std::allocator<RooAbsArg*> >&, std::__ROOT::span<RooAbsArg* const>) () from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Fri/ROOT/HEAD/x86_64-centos7-gcc9-opt/lib/libRooFitCore.so; #8 0x00007f36325f2568 in RooProdPdf::factorizeProduct(RooArgSet const&, RooArgSet const&, RooLinkedList&, RooLinkedList&, RooLinkedList&, RooLinkedList&, RooLinkedList&) const () from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Fri/ROOT/HEAD/x86_64-centos7-gcc9-opt/lib/libRooFitCore.so; #9 0x00007f36325f94b9 in RooProdPdf::getPartIntList(RooArgSet const*, RooArgSet const*, char const*) const () from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Fri/ROOT/HEAD/x86_64-centos7-gcc9-opt/lib/libRooFitCore.so; #10 0x00007f36325fd52e in RooProdPdf::getAnalyticalIntegralWN(RooArgSet&, RooArgSet&, RooArgSet const*, char const*) const () from /cvmfs/sft-nightlies.cern.ch/lcg/nightli",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8474#issuecomment-864062658
https://github.com/root-project/root/issues/8474#issuecomment-864089572:572,Usability,guid,guidelines,572,"Hi @VanyaBelyaev, yes the stack trace with a debug build is indeed helpful because of the line numbers. Seeing that `RooProdPdf::factorizeProduct` is involved, I am sure that the recently merged PR https://github.com/root-project/root/pull/7907 causes your problem. No need for a C++ producer then, this problem has nothing to do with pyROOT. But even knowing that, I don't know enough about the problem to solve it. Do you mind sharing your RooFit code that produces the problem? Even better of course with the data, but I understand if you can't share it because of the guidelines of your experiment. But even without the data, seeing the RooFit model would be super helpful for me to understand how the RooProdPdf enters the game. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8474#issuecomment-864089572
https://github.com/root-project/root/issues/8474#issuecomment-864243565:325,Testability,test,test,325,"Dear Jonas @guitargeek . my PDF is just a simple 3D functon in each dimenstion is is just a Gaussian + linear polynomial. In total one has 8 components: SSS + SSB + SBS + BSS + SBB + BSB + BBS + BBB . Creation of the function is done via my ostap project. https://github.com/OstapHEP/ostap ; You can see the actual (failing) test code in ; https://github.com/OstapHEP/ostap/blob/master/ostap/fitting/tests/test_fitting_components_3D.py; It does not rely any external data - all data is produced internally ; It is a bit more complicated that is actually needed, since the initial purpose of this particular test fiel was to see the change of the fit resutls with addion ""additional"" components mixed to the the base line model. ; But it relies on ""external"" project https://github.com/OstapHEP/ostap . cheers, Vanya. P.S. I'll provide the stack with debug build tomorrow",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8474#issuecomment-864243565
https://github.com/root-project/root/issues/8474#issuecomment-864243565:400,Testability,test,tests,400,"Dear Jonas @guitargeek . my PDF is just a simple 3D functon in each dimenstion is is just a Gaussian + linear polynomial. In total one has 8 components: SSS + SSB + SBS + BSS + SBB + BSB + BBS + BBB . Creation of the function is done via my ostap project. https://github.com/OstapHEP/ostap ; You can see the actual (failing) test code in ; https://github.com/OstapHEP/ostap/blob/master/ostap/fitting/tests/test_fitting_components_3D.py; It does not rely any external data - all data is produced internally ; It is a bit more complicated that is actually needed, since the initial purpose of this particular test fiel was to see the change of the fit resutls with addion ""additional"" components mixed to the the base line model. ; But it relies on ""external"" project https://github.com/OstapHEP/ostap . cheers, Vanya. P.S. I'll provide the stack with debug build tomorrow",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8474#issuecomment-864243565
https://github.com/root-project/root/issues/8474#issuecomment-864243565:607,Testability,test,test,607,"Dear Jonas @guitargeek . my PDF is just a simple 3D functon in each dimenstion is is just a Gaussian + linear polynomial. In total one has 8 components: SSS + SSB + SBS + BSS + SBB + BSB + BBS + BBB . Creation of the function is done via my ostap project. https://github.com/OstapHEP/ostap ; You can see the actual (failing) test code in ; https://github.com/OstapHEP/ostap/blob/master/ostap/fitting/tests/test_fitting_components_3D.py; It does not rely any external data - all data is produced internally ; It is a bit more complicated that is actually needed, since the initial purpose of this particular test fiel was to see the change of the fit resutls with addion ""additional"" components mixed to the the base line model. ; But it relies on ""external"" project https://github.com/OstapHEP/ostap . cheers, Vanya. P.S. I'll provide the stack with debug build tomorrow",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8474#issuecomment-864243565
https://github.com/root-project/root/issues/8474#issuecomment-864243565:42,Usability,simpl,simple,42,"Dear Jonas @guitargeek . my PDF is just a simple 3D functon in each dimenstion is is just a Gaussian + linear polynomial. In total one has 8 components: SSS + SSB + SBS + BSS + SBB + BSB + BBS + BBB . Creation of the function is done via my ostap project. https://github.com/OstapHEP/ostap ; You can see the actual (failing) test code in ; https://github.com/OstapHEP/ostap/blob/master/ostap/fitting/tests/test_fitting_components_3D.py; It does not rely any external data - all data is produced internally ; It is a bit more complicated that is actually needed, since the initial purpose of this particular test fiel was to see the change of the fit resutls with addion ""additional"" components mixed to the the base line model. ; But it relies on ""external"" project https://github.com/OstapHEP/ostap . cheers, Vanya. P.S. I'll provide the stack with debug build tomorrow",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8474#issuecomment-864243565
https://github.com/root-project/root/issues/8474#issuecomment-864414030:8,Deployability,patch,patch,8,"Hi, the patch will be applied in a matter of days. Possibly even on Monday because it is a simple change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8474#issuecomment-864414030
https://github.com/root-project/root/issues/8474#issuecomment-864414030:91,Usability,simpl,simple,91,"Hi, the patch will be applied in a matter of days. Possibly even on Monday because it is a simple change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8474#issuecomment-864414030
https://github.com/root-project/root/issues/8504#issuecomment-866145966:35,Usability,feedback,feedback,35,"Hallo Jonas,. thanks a lot for the feedback! My initial interest was to measure the speed of the new implementation. . I have now checked Section 2.3 of [your paper](https://arxiv.org/pdf/2106.02504.pdf) and I have missed this important point! I will add this to my code. . Thanks for the review.; Jirka",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8504#issuecomment-866145966
https://github.com/root-project/root/issues/8507#issuecomment-865994950:153,Usability,guid,guide,153,"I see some parameters in these header files are commented but not in the doxygen format. I can improve that to make the comments appear in the reference guide. But when the documentation is completely missing, an expert for these classes is needed. I think @lmoneta should be able to add the missing doc or ask somebody who knows about it to improve the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8507#issuecomment-865994950
https://github.com/root-project/root/issues/8517#issuecomment-867417636:270,Deployability,continuous,continuous,270,"Thanks, Philippe. I added that information to the old thread on the forum. I also found what you were saying in the manual (so it is present somewhere in the documentation, though I usually read the reference guide).; About my initial feature request: I think this is a continuous wish of users to have a vector for ints (and other types) when you have a vector for doubles. So it's up to you whether you add this support or not (me personally no longer need that).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8517#issuecomment-867417636
https://github.com/root-project/root/issues/8517#issuecomment-867417636:209,Usability,guid,guide,209,"Thanks, Philippe. I added that information to the old thread on the forum. I also found what you were saying in the manual (so it is present somewhere in the documentation, though I usually read the reference guide).; About my initial feature request: I think this is a continuous wish of users to have a vector for ints (and other types) when you have a vector for doubles. So it's up to you whether you add this support or not (me personally no longer need that).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8517#issuecomment-867417636
https://github.com/root-project/root/issues/8533#issuecomment-868348530:61,Usability,simpl,simple,61,"It seems to be a doxygen issue. I submitted an issue, with a simple reproducer, in the doxygen repository: ; https://github.com/doxygen/doxygen/issues/8620",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8533#issuecomment-868348530
https://github.com/root-project/root/pull/8546#issuecomment-1895306674:120,Usability,feedback,feedback,120,"Hi @guitargeek @lmoneta @dpiparo,; I would really benefit if this feature were merged, as I need it for my project. Any feedback to my observations on https://github.com/root-project/root/pull/8546#issuecomment-1814425550 ?; Thanks in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8546#issuecomment-1895306674
https://github.com/root-project/root/pull/8569#issuecomment-874002788:648,Usability,simpl,simply,648,"@hageboeck Thanks for the extensive review! I will implement some changes based on that and @guitargeek's comments today. In the meantime, perhaps it would be useful to check out #8596 as well. That PR introduces the second concrete MinimizerFcn. Possibly, seeing `RooAbsMinimizerFcn` ""in action"" through that new class (`RooGradMinimizerFcn`) will shed a different light on the design choices for this abstract class. Basically, we previously just had two classes, `RooMinimizerFcn` and `RooGradMinimizerFcn` (and then later on **another** one, which will be introduced in another PR this week) with tons of code duplication. `RooAbsMinimizerFcn` simply factors that stuff out into one class.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8569#issuecomment-874002788
https://github.com/root-project/root/issues/8582#issuecomment-1925302611:41,Usability,clear,clear,41,Just coming back to the issue. It is not clear to me whether we can close it as clarified or if some feature is still needed. @ferdymercury could you chime in?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8582#issuecomment-1925302611
https://github.com/root-project/root/pull/8587#issuecomment-873050997:33,Usability,feedback,feedback,33,OK closing then - thanks for the feedback @mxxo and @eguiraud . @eguiraud let me know if there's some other action you'd like me to do!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8587#issuecomment-873050997
https://github.com/root-project/root/pull/8596#issuecomment-879770741:646,Integrability,depend,depending,646,"Hi Patrick, thanks for the explanation, things make more sense for me now! Interesting that you also experimented with making the full RooAbsMinimizer templated. I agree that making the RooAbsMinimizer a templated class is not the best solution, but I still think we can even avoid the templated constructor, making the code more clear and reducing compile time/binary size. You already have this nice `FcnMode` enum class which I think is great because enum class is typesafe while enum is not. Taking this enum, you could have a RooMinimizer constructor with the signature:; ```; RooMinimizer(RooAbsReal &function, FcnMode fcnMode);; ```; Then depending on `fcnMode`, you can create the correct function instance. You would not even have to check for the `logic_error`, because with the enum class is is ensured that the value is either `classic` or `gradient`. You would just need a little helper struct to make the `RooMinimizer::create()` function work, something to translate from the function class to the FcnMode:. ```C++; class RooMinimizer { ; ; ... ; private: ; ; template <typename MinimizerFcn ; struct GetFcnMode { ; static const FcnMode value = FcnMode::classic; ; }; ; ; ... ; ; } ; ; ; template<> ; struct RooMinimizer::GetFcnMode<RooGradMinimizerFcn> { ; static const FcnMode value = FcnMode::gradient; ; }; ; ; ; // static function ; template <typename MinimizerFcn> ; std::unique_ptr<RooMinimizer> RooMinimizer::create(RooAbsReal &function) { ; return std::make_unique<RooMinimizer>(function, GetFcnMode<MinimizerFcn>::value); ; } ; ```. Would this approach also work with your upcoming developments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8596#issuecomment-879770741
https://github.com/root-project/root/pull/8596#issuecomment-879770741:276,Safety,avoid,avoid,276,"Hi Patrick, thanks for the explanation, things make more sense for me now! Interesting that you also experimented with making the full RooAbsMinimizer templated. I agree that making the RooAbsMinimizer a templated class is not the best solution, but I still think we can even avoid the templated constructor, making the code more clear and reducing compile time/binary size. You already have this nice `FcnMode` enum class which I think is great because enum class is typesafe while enum is not. Taking this enum, you could have a RooMinimizer constructor with the signature:; ```; RooMinimizer(RooAbsReal &function, FcnMode fcnMode);; ```; Then depending on `fcnMode`, you can create the correct function instance. You would not even have to check for the `logic_error`, because with the enum class is is ensured that the value is either `classic` or `gradient`. You would just need a little helper struct to make the `RooMinimizer::create()` function work, something to translate from the function class to the FcnMode:. ```C++; class RooMinimizer { ; ; ... ; private: ; ; template <typename MinimizerFcn ; struct GetFcnMode { ; static const FcnMode value = FcnMode::classic; ; }; ; ; ... ; ; } ; ; ; template<> ; struct RooMinimizer::GetFcnMode<RooGradMinimizerFcn> { ; static const FcnMode value = FcnMode::gradient; ; }; ; ; ; // static function ; template <typename MinimizerFcn> ; std::unique_ptr<RooMinimizer> RooMinimizer::create(RooAbsReal &function) { ; return std::make_unique<RooMinimizer>(function, GetFcnMode<MinimizerFcn>::value); ; } ; ```. Would this approach also work with your upcoming developments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8596#issuecomment-879770741
https://github.com/root-project/root/pull/8596#issuecomment-879770741:330,Usability,clear,clear,330,"Hi Patrick, thanks for the explanation, things make more sense for me now! Interesting that you also experimented with making the full RooAbsMinimizer templated. I agree that making the RooAbsMinimizer a templated class is not the best solution, but I still think we can even avoid the templated constructor, making the code more clear and reducing compile time/binary size. You already have this nice `FcnMode` enum class which I think is great because enum class is typesafe while enum is not. Taking this enum, you could have a RooMinimizer constructor with the signature:; ```; RooMinimizer(RooAbsReal &function, FcnMode fcnMode);; ```; Then depending on `fcnMode`, you can create the correct function instance. You would not even have to check for the `logic_error`, because with the enum class is is ensured that the value is either `classic` or `gradient`. You would just need a little helper struct to make the `RooMinimizer::create()` function work, something to translate from the function class to the FcnMode:. ```C++; class RooMinimizer { ; ; ... ; private: ; ; template <typename MinimizerFcn ; struct GetFcnMode { ; static const FcnMode value = FcnMode::classic; ; }; ; ; ... ; ; } ; ; ; template<> ; struct RooMinimizer::GetFcnMode<RooGradMinimizerFcn> { ; static const FcnMode value = FcnMode::gradient; ; }; ; ; ; // static function ; template <typename MinimizerFcn> ; std::unique_ptr<RooMinimizer> RooMinimizer::create(RooAbsReal &function) { ; return std::make_unique<RooMinimizer>(function, GetFcnMode<MinimizerFcn>::value); ; } ; ```. Would this approach also work with your upcoming developments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8596#issuecomment-879770741
https://github.com/root-project/root/issues/8618#issuecomment-875425406:360,Usability,simpl,simply,360,So commenting that line cures the problem with your initial macro . Now I need to understand why that line was put there and why it changes the axis attributes of your histogram ! ... I invite @osschar to this discussion as he is the author of this code (https://github.com/root-project/root/blob/master/graf3d/gl/src/TGLAxisPainter.cxx#L574) . I am temped to simply comment the line but that's weird as fAxis is [a member of TGLAxisPainterBox](https://github.com/root-project/root/blob/aa21d63ca3a1f4cdb2b559e4cb1c2c2d7eb65f34/graf3d/gl/inc/TGLAxisPainter.h#L145) and that should not affect the axis of your TH2F ... That's a real puzzle ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8618#issuecomment-875425406
https://github.com/root-project/root/issues/8618#issuecomment-875477436:21,Usability,clear,clearly,21,"I see, ... so that's clearly a bug in that case, the 3D viewer should not change the axis attributes silently ...; I am in favour to remove that line ..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8618#issuecomment-875477436
https://github.com/root-project/root/issues/8622#issuecomment-889485521:246,Usability,simpl,simple,246,"I got a similar warning when using `RDataFrame` in Python, presumably due to the same problem:. I'm using ROOT 6.24.02 with gcc10, compiled w/ C++ 17 standard. Here's a reproducer:; ```python; #!/usr/bin/env python. import ROOT. # Let's create a simple dataframe with ten rows and two columns; df = ROOT.RDataFrame(10) \; .Define(""x"", ""(int)rdfentry_"") \; .Define(""y"", ""1.f/(1.f+rdfentry_)""). npy = df.AsNumpy(); ``` . The warnings are:; ```; input_line_49:10:7: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]; ((const vector<int>*)obj)->empty();; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; input_line_56:10:7: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]; ((const vector<float>*)obj)->empty();; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8622#issuecomment-889485521
https://github.com/root-project/root/pull/8626#issuecomment-876311455:126,Deployability,integrat,integrated,126,"Thanks, @egpbos and @jspaaks ! Validation succeeds now. > suggest to add a GitHub Actions workflow. AFAICT we need this to be integrated with our release workflow. Once that's a GH Action we can also migrate the `CITATION.cff` generation and validation there. I *think* it's fairly hard to break the file given that it's generated by a script; I also dislike the pile of dependencies of `cffconvert` for a simple thing like validation, IMO it's too heavy to add it to the script producing `CITATION.cff`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8626#issuecomment-876311455
https://github.com/root-project/root/pull/8626#issuecomment-876311455:146,Deployability,release,release,146,"Thanks, @egpbos and @jspaaks ! Validation succeeds now. > suggest to add a GitHub Actions workflow. AFAICT we need this to be integrated with our release workflow. Once that's a GH Action we can also migrate the `CITATION.cff` generation and validation there. I *think* it's fairly hard to break the file given that it's generated by a script; I also dislike the pile of dependencies of `cffconvert` for a simple thing like validation, IMO it's too heavy to add it to the script producing `CITATION.cff`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8626#issuecomment-876311455
https://github.com/root-project/root/pull/8626#issuecomment-876311455:126,Integrability,integrat,integrated,126,"Thanks, @egpbos and @jspaaks ! Validation succeeds now. > suggest to add a GitHub Actions workflow. AFAICT we need this to be integrated with our release workflow. Once that's a GH Action we can also migrate the `CITATION.cff` generation and validation there. I *think* it's fairly hard to break the file given that it's generated by a script; I also dislike the pile of dependencies of `cffconvert` for a simple thing like validation, IMO it's too heavy to add it to the script producing `CITATION.cff`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8626#issuecomment-876311455
https://github.com/root-project/root/pull/8626#issuecomment-876311455:371,Integrability,depend,dependencies,371,"Thanks, @egpbos and @jspaaks ! Validation succeeds now. > suggest to add a GitHub Actions workflow. AFAICT we need this to be integrated with our release workflow. Once that's a GH Action we can also migrate the `CITATION.cff` generation and validation there. I *think* it's fairly hard to break the file given that it's generated by a script; I also dislike the pile of dependencies of `cffconvert` for a simple thing like validation, IMO it's too heavy to add it to the script producing `CITATION.cff`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8626#issuecomment-876311455
https://github.com/root-project/root/pull/8626#issuecomment-876311455:242,Security,validat,validation,242,"Thanks, @egpbos and @jspaaks ! Validation succeeds now. > suggest to add a GitHub Actions workflow. AFAICT we need this to be integrated with our release workflow. Once that's a GH Action we can also migrate the `CITATION.cff` generation and validation there. I *think* it's fairly hard to break the file given that it's generated by a script; I also dislike the pile of dependencies of `cffconvert` for a simple thing like validation, IMO it's too heavy to add it to the script producing `CITATION.cff`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8626#issuecomment-876311455
https://github.com/root-project/root/pull/8626#issuecomment-876311455:424,Security,validat,validation,424,"Thanks, @egpbos and @jspaaks ! Validation succeeds now. > suggest to add a GitHub Actions workflow. AFAICT we need this to be integrated with our release workflow. Once that's a GH Action we can also migrate the `CITATION.cff` generation and validation there. I *think* it's fairly hard to break the file given that it's generated by a script; I also dislike the pile of dependencies of `cffconvert` for a simple thing like validation, IMO it's too heavy to add it to the script producing `CITATION.cff`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8626#issuecomment-876311455
https://github.com/root-project/root/pull/8626#issuecomment-876311455:406,Usability,simpl,simple,406,"Thanks, @egpbos and @jspaaks ! Validation succeeds now. > suggest to add a GitHub Actions workflow. AFAICT we need this to be integrated with our release workflow. Once that's a GH Action we can also migrate the `CITATION.cff` generation and validation there. I *think* it's fairly hard to break the file given that it's generated by a script; I also dislike the pile of dependencies of `cffconvert` for a simple thing like validation, IMO it's too heavy to add it to the script producing `CITATION.cff`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8626#issuecomment-876311455
https://github.com/root-project/root/issues/8633#issuecomment-898355331:27,Availability,fault,fault,27,"> I don't think ROOT is at fault here for relying on this feature of CMake. As described in the blob post by a CMake maintainer (emphasis is mine):. > Even if find_package() were only redefined once though, it would still be relying on **undocumented** CMake behavior which may be modified or removed completely in a future version. Reliance on such behavior should be discouraged and as the above discussion shows, the technique is not safe to use in general. It's mostly sad that vcpkg did the same trick, making ROOT incompatible with it. Given the circumstances I think this cannot be fixed at the moment, since neither ROOT nor vcpkg can easily change and I also don't expect CMake to make such behavior defined and allow overriding build-ins multiple times. So I guess we need to close this is won't-fix?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8633#issuecomment-898355331
https://github.com/root-project/root/issues/8633#issuecomment-898355331:437,Safety,safe,safe,437,"> I don't think ROOT is at fault here for relying on this feature of CMake. As described in the blob post by a CMake maintainer (emphasis is mine):. > Even if find_package() were only redefined once though, it would still be relying on **undocumented** CMake behavior which may be modified or removed completely in a future version. Reliance on such behavior should be discouraged and as the above discussion shows, the technique is not safe to use in general. It's mostly sad that vcpkg did the same trick, making ROOT incompatible with it. Given the circumstances I think this cannot be fixed at the moment, since neither ROOT nor vcpkg can easily change and I also don't expect CMake to make such behavior defined and allow overriding build-ins multiple times. So I guess we need to close this is won't-fix?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8633#issuecomment-898355331
https://github.com/root-project/root/issues/8633#issuecomment-898355331:238,Usability,undo,undocumented,238,"> I don't think ROOT is at fault here for relying on this feature of CMake. As described in the blob post by a CMake maintainer (emphasis is mine):. > Even if find_package() were only redefined once though, it would still be relying on **undocumented** CMake behavior which may be modified or removed completely in a future version. Reliance on such behavior should be discouraged and as the above discussion shows, the technique is not safe to use in general. It's mostly sad that vcpkg did the same trick, making ROOT incompatible with it. Given the circumstances I think this cannot be fixed at the moment, since neither ROOT nor vcpkg can easily change and I also don't expect CMake to make such behavior defined and allow overriding build-ins multiple times. So I guess we need to close this is won't-fix?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8633#issuecomment-898355331
https://github.com/root-project/root/issues/8633#issuecomment-898406007:1127,Integrability,depend,dependencies,1127,"Here is a relevant [issue](https://gitlab.kitware.com/cmake/cmake/-/issues/17735) where this is discussed more in depth. One of the [comments](https://gitlab.kitware.com/cmake/cmake/-/issues/17735#note_487572) in this issue explains the rationale behind overriding `find_package` quite well. If there is a better solution that can work the way the current solution does (i.e. works also for LLVM without having to change its calls to `find_package(ZLIB)`, for example), we can implement it. However, so far I have not found a another way to do it. Maybe now that the required version of CMake is newer than 3.11, we may be able to improve things by using the [FetchContent](https://cmake.org/cmake/help/latest/module/FetchContent.html) module. It may also be possible to use [CMAKE_DISABLE_FIND_\<PackageName\>](https://cmake.org/cmake/help/v3.10/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.html) to skip checking for packages if that doesn't force packages to be considered not found when `<PackageName_FOUND>` is then also set by hand. The reality, though, is that CMake still kinda sucks for managing optionally bundled dependencies like ROOT wants to support. As for the undocumented nature of the feature, it's sad but, like the [CDash test measurements](https://cmake.org/cmake/help/latest/command/ctest_test.html?#additional-test-measurements) that were undocumented for a long time, if you offer it, people will try to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8633#issuecomment-898406007
https://github.com/root-project/root/issues/8633#issuecomment-898406007:847,Modifiability,variab,variable,847,"Here is a relevant [issue](https://gitlab.kitware.com/cmake/cmake/-/issues/17735) where this is discussed more in depth. One of the [comments](https://gitlab.kitware.com/cmake/cmake/-/issues/17735#note_487572) in this issue explains the rationale behind overriding `find_package` quite well. If there is a better solution that can work the way the current solution does (i.e. works also for LLVM without having to change its calls to `find_package(ZLIB)`, for example), we can implement it. However, so far I have not found a another way to do it. Maybe now that the required version of CMake is newer than 3.11, we may be able to improve things by using the [FetchContent](https://cmake.org/cmake/help/latest/module/FetchContent.html) module. It may also be possible to use [CMAKE_DISABLE_FIND_\<PackageName\>](https://cmake.org/cmake/help/v3.10/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.html) to skip checking for packages if that doesn't force packages to be considered not found when `<PackageName_FOUND>` is then also set by hand. The reality, though, is that CMake still kinda sucks for managing optionally bundled dependencies like ROOT wants to support. As for the undocumented nature of the feature, it's sad but, like the [CDash test measurements](https://cmake.org/cmake/help/latest/command/ctest_test.html?#additional-test-measurements) that were undocumented for a long time, if you offer it, people will try to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8633#issuecomment-898406007
https://github.com/root-project/root/issues/8633#issuecomment-898406007:1245,Testability,test,test,1245,"Here is a relevant [issue](https://gitlab.kitware.com/cmake/cmake/-/issues/17735) where this is discussed more in depth. One of the [comments](https://gitlab.kitware.com/cmake/cmake/-/issues/17735#note_487572) in this issue explains the rationale behind overriding `find_package` quite well. If there is a better solution that can work the way the current solution does (i.e. works also for LLVM without having to change its calls to `find_package(ZLIB)`, for example), we can implement it. However, so far I have not found a another way to do it. Maybe now that the required version of CMake is newer than 3.11, we may be able to improve things by using the [FetchContent](https://cmake.org/cmake/help/latest/module/FetchContent.html) module. It may also be possible to use [CMAKE_DISABLE_FIND_\<PackageName\>](https://cmake.org/cmake/help/v3.10/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.html) to skip checking for packages if that doesn't force packages to be considered not found when `<PackageName_FOUND>` is then also set by hand. The reality, though, is that CMake still kinda sucks for managing optionally bundled dependencies like ROOT wants to support. As for the undocumented nature of the feature, it's sad but, like the [CDash test measurements](https://cmake.org/cmake/help/latest/command/ctest_test.html?#additional-test-measurements) that were undocumented for a long time, if you offer it, people will try to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8633#issuecomment-898406007
https://github.com/root-project/root/issues/8633#issuecomment-898406007:1336,Testability,test,test-measurements,1336,"Here is a relevant [issue](https://gitlab.kitware.com/cmake/cmake/-/issues/17735) where this is discussed more in depth. One of the [comments](https://gitlab.kitware.com/cmake/cmake/-/issues/17735#note_487572) in this issue explains the rationale behind overriding `find_package` quite well. If there is a better solution that can work the way the current solution does (i.e. works also for LLVM without having to change its calls to `find_package(ZLIB)`, for example), we can implement it. However, so far I have not found a another way to do it. Maybe now that the required version of CMake is newer than 3.11, we may be able to improve things by using the [FetchContent](https://cmake.org/cmake/help/latest/module/FetchContent.html) module. It may also be possible to use [CMAKE_DISABLE_FIND_\<PackageName\>](https://cmake.org/cmake/help/v3.10/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.html) to skip checking for packages if that doesn't force packages to be considered not found when `<PackageName_FOUND>` is then also set by hand. The reality, though, is that CMake still kinda sucks for managing optionally bundled dependencies like ROOT wants to support. As for the undocumented nature of the feature, it's sad but, like the [CDash test measurements](https://cmake.org/cmake/help/latest/command/ctest_test.html?#additional-test-measurements) that were undocumented for a long time, if you offer it, people will try to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8633#issuecomment-898406007
https://github.com/root-project/root/issues/8633#issuecomment-898406007:1179,Usability,undo,undocumented,1179,"Here is a relevant [issue](https://gitlab.kitware.com/cmake/cmake/-/issues/17735) where this is discussed more in depth. One of the [comments](https://gitlab.kitware.com/cmake/cmake/-/issues/17735#note_487572) in this issue explains the rationale behind overriding `find_package` quite well. If there is a better solution that can work the way the current solution does (i.e. works also for LLVM without having to change its calls to `find_package(ZLIB)`, for example), we can implement it. However, so far I have not found a another way to do it. Maybe now that the required version of CMake is newer than 3.11, we may be able to improve things by using the [FetchContent](https://cmake.org/cmake/help/latest/module/FetchContent.html) module. It may also be possible to use [CMAKE_DISABLE_FIND_\<PackageName\>](https://cmake.org/cmake/help/v3.10/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.html) to skip checking for packages if that doesn't force packages to be considered not found when `<PackageName_FOUND>` is then also set by hand. The reality, though, is that CMake still kinda sucks for managing optionally bundled dependencies like ROOT wants to support. As for the undocumented nature of the feature, it's sad but, like the [CDash test measurements](https://cmake.org/cmake/help/latest/command/ctest_test.html?#additional-test-measurements) that were undocumented for a long time, if you offer it, people will try to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8633#issuecomment-898406007
https://github.com/root-project/root/issues/8633#issuecomment-898406007:1365,Usability,undo,undocumented,1365,"Here is a relevant [issue](https://gitlab.kitware.com/cmake/cmake/-/issues/17735) where this is discussed more in depth. One of the [comments](https://gitlab.kitware.com/cmake/cmake/-/issues/17735#note_487572) in this issue explains the rationale behind overriding `find_package` quite well. If there is a better solution that can work the way the current solution does (i.e. works also for LLVM without having to change its calls to `find_package(ZLIB)`, for example), we can implement it. However, so far I have not found a another way to do it. Maybe now that the required version of CMake is newer than 3.11, we may be able to improve things by using the [FetchContent](https://cmake.org/cmake/help/latest/module/FetchContent.html) module. It may also be possible to use [CMAKE_DISABLE_FIND_\<PackageName\>](https://cmake.org/cmake/help/v3.10/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.html) to skip checking for packages if that doesn't force packages to be considered not found when `<PackageName_FOUND>` is then also set by hand. The reality, though, is that CMake still kinda sucks for managing optionally bundled dependencies like ROOT wants to support. As for the undocumented nature of the feature, it's sad but, like the [CDash test measurements](https://cmake.org/cmake/help/latest/command/ctest_test.html?#additional-test-measurements) that were undocumented for a long time, if you offer it, people will try to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8633#issuecomment-898406007
https://github.com/root-project/root/pull/8634#issuecomment-1300054951:442,Deployability,update,update,442,"> Profiles of RNTuple benchmarks (`iotools/cms, lhcb`) showed ~10-20% of; > total runtime is due to allocations in `RPageSource::UnsealPage`. @mxxo @jblomer This work will be resumed soon as we suspect that not reusing addresses is affecting RDMA data transfers (which has an impact on the measured throughput in the DAOS backend). Specifically, we need to confirm that not reusing addresses that appear in the IOVs array in `daos_obj_{fetch,update}()` is related to a higher overhead due to RDMA MR registration. Therefore, this PR might actually have some other side benefits besides reducing memory allocations and heap fragmentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8634#issuecomment-1300054951
https://github.com/root-project/root/pull/8634#issuecomment-1300054951:299,Performance,throughput,throughput,299,"> Profiles of RNTuple benchmarks (`iotools/cms, lhcb`) showed ~10-20% of; > total runtime is due to allocations in `RPageSource::UnsealPage`. @mxxo @jblomer This work will be resumed soon as we suspect that not reusing addresses is affecting RDMA data transfers (which has an impact on the measured throughput in the DAOS backend). Specifically, we need to confirm that not reusing addresses that appear in the IOVs array in `daos_obj_{fetch,update}()` is related to a higher overhead due to RDMA MR registration. Therefore, this PR might actually have some other side benefits besides reducing memory allocations and heap fragmentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8634#issuecomment-1300054951
https://github.com/root-project/root/pull/8634#issuecomment-1300054951:22,Testability,benchmark,benchmarks,22,"> Profiles of RNTuple benchmarks (`iotools/cms, lhcb`) showed ~10-20% of; > total runtime is due to allocations in `RPageSource::UnsealPage`. @mxxo @jblomer This work will be resumed soon as we suspect that not reusing addresses is affecting RDMA data transfers (which has an impact on the measured throughput in the DAOS backend). Specifically, we need to confirm that not reusing addresses that appear in the IOVs array in `daos_obj_{fetch,update}()` is related to a higher overhead due to RDMA MR registration. Therefore, this PR might actually have some other side benefits besides reducing memory allocations and heap fragmentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8634#issuecomment-1300054951
https://github.com/root-project/root/pull/8634#issuecomment-1300054951:175,Usability,resume,resumed,175,"> Profiles of RNTuple benchmarks (`iotools/cms, lhcb`) showed ~10-20% of; > total runtime is due to allocations in `RPageSource::UnsealPage`. @mxxo @jblomer This work will be resumed soon as we suspect that not reusing addresses is affecting RDMA data transfers (which has an impact on the measured throughput in the DAOS backend). Specifically, we need to confirm that not reusing addresses that appear in the IOVs array in `daos_obj_{fetch,update}()` is related to a higher overhead due to RDMA MR registration. Therefore, this PR might actually have some other side benefits besides reducing memory allocations and heap fragmentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8634#issuecomment-1300054951
https://github.com/root-project/root/pull/8634#issuecomment-1424850942:302,Deployability,update,update,302,"> @mxxo @jblomer This work will be resumed soon as we suspect that not reusing addresses is affecting RDMA data transfers (which has an impact on the measured throughput in the DAOS backend). Specifically, we need to confirm that not reusing addresses that appear in the IOVs array in `daos_obj_{fetch,update}()` is related to a higher overhead due to RDMA MR registration. Also, as discussed with @jblomer, this is a separate problem that will be addressed in a separate PR if need be (CC: also FYI, @glmiotto :-)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8634#issuecomment-1424850942
https://github.com/root-project/root/pull/8634#issuecomment-1424850942:159,Performance,throughput,throughput,159,"> @mxxo @jblomer This work will be resumed soon as we suspect that not reusing addresses is affecting RDMA data transfers (which has an impact on the measured throughput in the DAOS backend). Specifically, we need to confirm that not reusing addresses that appear in the IOVs array in `daos_obj_{fetch,update}()` is related to a higher overhead due to RDMA MR registration. Also, as discussed with @jblomer, this is a separate problem that will be addressed in a separate PR if need be (CC: also FYI, @glmiotto :-)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8634#issuecomment-1424850942
https://github.com/root-project/root/pull/8634#issuecomment-1424850942:35,Usability,resume,resumed,35,"> @mxxo @jblomer This work will be resumed soon as we suspect that not reusing addresses is affecting RDMA data transfers (which has an impact on the measured throughput in the DAOS backend). Specifically, we need to confirm that not reusing addresses that appear in the IOVs array in `daos_obj_{fetch,update}()` is related to a higher overhead due to RDMA MR registration. Also, as discussed with @jblomer, this is a separate problem that will be addressed in a separate PR if need be (CC: also FYI, @glmiotto :-)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8634#issuecomment-1424850942
https://github.com/root-project/root/issues/8644#issuecomment-883552286:649,Availability,down,downsides,649,"Regarding the titular issue, I have been thinking about it for a bit and I don't think we can do much better than what @pieterdavid already implemented. Solutions considered:. 1. Implicitly converting `TClonesArrays` to `RVecs` would be a) backward-incompatible and b) a silent perf degradation, as it requires a copy. Moreover, if we did this I don't see a migration path that doesn't require that users revise all their TClonesArrays-related logic; 2. Adding a `TClonesArrays2RVec` helper function: it would require a copy (or it would have to return a clunky `RVec<T*>`). It is also trivial to implement for users that need it and don't mind the downsides.; 3. Adding a RDF toggle to tweak ""read TClonesArrays as RVecs"" or not: requires adding a bunch of extra logic to the column-reading mechanism for a feature that might end up being mostly unused (modern data models don't use TClonesArrays), and it would require the extra copy (i.e. silent performance degradation). The best seems to be 3, but feature toggles complicate internals and are typically not easy to discover (might end up mostly unused). It seems simpler to ask users to explicitly do the conversion in a `Redefine` if they need/want to. Sorry I could not come up with something nice :confused: . I will close this in a few days unless people have something against it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8644#issuecomment-883552286
https://github.com/root-project/root/issues/8644#issuecomment-883552286:677,Deployability,toggle,toggle,677,"Regarding the titular issue, I have been thinking about it for a bit and I don't think we can do much better than what @pieterdavid already implemented. Solutions considered:. 1. Implicitly converting `TClonesArrays` to `RVecs` would be a) backward-incompatible and b) a silent perf degradation, as it requires a copy. Moreover, if we did this I don't see a migration path that doesn't require that users revise all their TClonesArrays-related logic; 2. Adding a `TClonesArrays2RVec` helper function: it would require a copy (or it would have to return a clunky `RVec<T*>`). It is also trivial to implement for users that need it and don't mind the downsides.; 3. Adding a RDF toggle to tweak ""read TClonesArrays as RVecs"" or not: requires adding a bunch of extra logic to the column-reading mechanism for a feature that might end up being mostly unused (modern data models don't use TClonesArrays), and it would require the extra copy (i.e. silent performance degradation). The best seems to be 3, but feature toggles complicate internals and are typically not easy to discover (might end up mostly unused). It seems simpler to ask users to explicitly do the conversion in a `Redefine` if they need/want to. Sorry I could not come up with something nice :confused: . I will close this in a few days unless people have something against it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8644#issuecomment-883552286
https://github.com/root-project/root/issues/8644#issuecomment-883552286:1003,Deployability,feature toggle,feature toggles,1003,"Regarding the titular issue, I have been thinking about it for a bit and I don't think we can do much better than what @pieterdavid already implemented. Solutions considered:. 1. Implicitly converting `TClonesArrays` to `RVecs` would be a) backward-incompatible and b) a silent perf degradation, as it requires a copy. Moreover, if we did this I don't see a migration path that doesn't require that users revise all their TClonesArrays-related logic; 2. Adding a `TClonesArrays2RVec` helper function: it would require a copy (or it would have to return a clunky `RVec<T*>`). It is also trivial to implement for users that need it and don't mind the downsides.; 3. Adding a RDF toggle to tweak ""read TClonesArrays as RVecs"" or not: requires adding a bunch of extra logic to the column-reading mechanism for a feature that might end up being mostly unused (modern data models don't use TClonesArrays), and it would require the extra copy (i.e. silent performance degradation). The best seems to be 3, but feature toggles complicate internals and are typically not easy to discover (might end up mostly unused). It seems simpler to ask users to explicitly do the conversion in a `Redefine` if they need/want to. Sorry I could not come up with something nice :confused: . I will close this in a few days unless people have something against it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8644#issuecomment-883552286
https://github.com/root-project/root/issues/8644#issuecomment-883552286:949,Performance,perform,performance,949,"Regarding the titular issue, I have been thinking about it for a bit and I don't think we can do much better than what @pieterdavid already implemented. Solutions considered:. 1. Implicitly converting `TClonesArrays` to `RVecs` would be a) backward-incompatible and b) a silent perf degradation, as it requires a copy. Moreover, if we did this I don't see a migration path that doesn't require that users revise all their TClonesArrays-related logic; 2. Adding a `TClonesArrays2RVec` helper function: it would require a copy (or it would have to return a clunky `RVec<T*>`). It is also trivial to implement for users that need it and don't mind the downsides.; 3. Adding a RDF toggle to tweak ""read TClonesArrays as RVecs"" or not: requires adding a bunch of extra logic to the column-reading mechanism for a feature that might end up being mostly unused (modern data models don't use TClonesArrays), and it would require the extra copy (i.e. silent performance degradation). The best seems to be 3, but feature toggles complicate internals and are typically not easy to discover (might end up mostly unused). It seems simpler to ask users to explicitly do the conversion in a `Redefine` if they need/want to. Sorry I could not come up with something nice :confused: . I will close this in a few days unless people have something against it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8644#issuecomment-883552286
https://github.com/root-project/root/issues/8644#issuecomment-883552286:444,Testability,log,logic,444,"Regarding the titular issue, I have been thinking about it for a bit and I don't think we can do much better than what @pieterdavid already implemented. Solutions considered:. 1. Implicitly converting `TClonesArrays` to `RVecs` would be a) backward-incompatible and b) a silent perf degradation, as it requires a copy. Moreover, if we did this I don't see a migration path that doesn't require that users revise all their TClonesArrays-related logic; 2. Adding a `TClonesArrays2RVec` helper function: it would require a copy (or it would have to return a clunky `RVec<T*>`). It is also trivial to implement for users that need it and don't mind the downsides.; 3. Adding a RDF toggle to tweak ""read TClonesArrays as RVecs"" or not: requires adding a bunch of extra logic to the column-reading mechanism for a feature that might end up being mostly unused (modern data models don't use TClonesArrays), and it would require the extra copy (i.e. silent performance degradation). The best seems to be 3, but feature toggles complicate internals and are typically not easy to discover (might end up mostly unused). It seems simpler to ask users to explicitly do the conversion in a `Redefine` if they need/want to. Sorry I could not come up with something nice :confused: . I will close this in a few days unless people have something against it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8644#issuecomment-883552286
https://github.com/root-project/root/issues/8644#issuecomment-883552286:764,Testability,log,logic,764,"Regarding the titular issue, I have been thinking about it for a bit and I don't think we can do much better than what @pieterdavid already implemented. Solutions considered:. 1. Implicitly converting `TClonesArrays` to `RVecs` would be a) backward-incompatible and b) a silent perf degradation, as it requires a copy. Moreover, if we did this I don't see a migration path that doesn't require that users revise all their TClonesArrays-related logic; 2. Adding a `TClonesArrays2RVec` helper function: it would require a copy (or it would have to return a clunky `RVec<T*>`). It is also trivial to implement for users that need it and don't mind the downsides.; 3. Adding a RDF toggle to tweak ""read TClonesArrays as RVecs"" or not: requires adding a bunch of extra logic to the column-reading mechanism for a feature that might end up being mostly unused (modern data models don't use TClonesArrays), and it would require the extra copy (i.e. silent performance degradation). The best seems to be 3, but feature toggles complicate internals and are typically not easy to discover (might end up mostly unused). It seems simpler to ask users to explicitly do the conversion in a `Redefine` if they need/want to. Sorry I could not come up with something nice :confused: . I will close this in a few days unless people have something against it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8644#issuecomment-883552286
https://github.com/root-project/root/issues/8644#issuecomment-883552286:1118,Usability,simpl,simpler,1118,"Regarding the titular issue, I have been thinking about it for a bit and I don't think we can do much better than what @pieterdavid already implemented. Solutions considered:. 1. Implicitly converting `TClonesArrays` to `RVecs` would be a) backward-incompatible and b) a silent perf degradation, as it requires a copy. Moreover, if we did this I don't see a migration path that doesn't require that users revise all their TClonesArrays-related logic; 2. Adding a `TClonesArrays2RVec` helper function: it would require a copy (or it would have to return a clunky `RVec<T*>`). It is also trivial to implement for users that need it and don't mind the downsides.; 3. Adding a RDF toggle to tweak ""read TClonesArrays as RVecs"" or not: requires adding a bunch of extra logic to the column-reading mechanism for a feature that might end up being mostly unused (modern data models don't use TClonesArrays), and it would require the extra copy (i.e. silent performance degradation). The best seems to be 3, but feature toggles complicate internals and are typically not easy to discover (might end up mostly unused). It seems simpler to ask users to explicitly do the conversion in a `Redefine` if they need/want to. Sorry I could not come up with something nice :confused: . I will close this in a few days unless people have something against it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8644#issuecomment-883552286
https://github.com/root-project/root/pull/8646#issuecomment-895318380:267,Availability,redundant,redundant,267,"> I understand this will be simplified when we can pass a configuration object to RDataFrame where we specify the range. When reading trees/chains, I'm not sure the configuration object will allow anything more than what we can already do with TEntryLists?. IIUC the redundant info is that `globalend = globalstart + (localends - localstarts).sum()` (i.e. we could avoid passing `globalend`). However: do you still need `globalstart` and `globalend` at all when using TEntryLists?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8646#issuecomment-895318380
https://github.com/root-project/root/pull/8646#issuecomment-895318380:58,Deployability,configurat,configuration,58,"> I understand this will be simplified when we can pass a configuration object to RDataFrame where we specify the range. When reading trees/chains, I'm not sure the configuration object will allow anything more than what we can already do with TEntryLists?. IIUC the redundant info is that `globalend = globalstart + (localends - localstarts).sum()` (i.e. we could avoid passing `globalend`). However: do you still need `globalstart` and `globalend` at all when using TEntryLists?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8646#issuecomment-895318380
https://github.com/root-project/root/pull/8646#issuecomment-895318380:165,Deployability,configurat,configuration,165,"> I understand this will be simplified when we can pass a configuration object to RDataFrame where we specify the range. When reading trees/chains, I'm not sure the configuration object will allow anything more than what we can already do with TEntryLists?. IIUC the redundant info is that `globalend = globalstart + (localends - localstarts).sum()` (i.e. we could avoid passing `globalend`). However: do you still need `globalstart` and `globalend` at all when using TEntryLists?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8646#issuecomment-895318380
https://github.com/root-project/root/pull/8646#issuecomment-895318380:58,Modifiability,config,configuration,58,"> I understand this will be simplified when we can pass a configuration object to RDataFrame where we specify the range. When reading trees/chains, I'm not sure the configuration object will allow anything more than what we can already do with TEntryLists?. IIUC the redundant info is that `globalend = globalstart + (localends - localstarts).sum()` (i.e. we could avoid passing `globalend`). However: do you still need `globalstart` and `globalend` at all when using TEntryLists?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8646#issuecomment-895318380
https://github.com/root-project/root/pull/8646#issuecomment-895318380:165,Modifiability,config,configuration,165,"> I understand this will be simplified when we can pass a configuration object to RDataFrame where we specify the range. When reading trees/chains, I'm not sure the configuration object will allow anything more than what we can already do with TEntryLists?. IIUC the redundant info is that `globalend = globalstart + (localends - localstarts).sum()` (i.e. we could avoid passing `globalend`). However: do you still need `globalstart` and `globalend` at all when using TEntryLists?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8646#issuecomment-895318380
https://github.com/root-project/root/pull/8646#issuecomment-895318380:267,Safety,redund,redundant,267,"> I understand this will be simplified when we can pass a configuration object to RDataFrame where we specify the range. When reading trees/chains, I'm not sure the configuration object will allow anything more than what we can already do with TEntryLists?. IIUC the redundant info is that `globalend = globalstart + (localends - localstarts).sum()` (i.e. we could avoid passing `globalend`). However: do you still need `globalstart` and `globalend` at all when using TEntryLists?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8646#issuecomment-895318380
https://github.com/root-project/root/pull/8646#issuecomment-895318380:365,Safety,avoid,avoid,365,"> I understand this will be simplified when we can pass a configuration object to RDataFrame where we specify the range. When reading trees/chains, I'm not sure the configuration object will allow anything more than what we can already do with TEntryLists?. IIUC the redundant info is that `globalend = globalstart + (localends - localstarts).sum()` (i.e. we could avoid passing `globalend`). However: do you still need `globalstart` and `globalend` at all when using TEntryLists?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8646#issuecomment-895318380
https://github.com/root-project/root/pull/8646#issuecomment-895318380:28,Usability,simpl,simplified,28,"> I understand this will be simplified when we can pass a configuration object to RDataFrame where we specify the range. When reading trees/chains, I'm not sure the configuration object will allow anything more than what we can already do with TEntryLists?. IIUC the redundant info is that `globalend = globalstart + (localends - localstarts).sum()` (i.e. we could avoid passing `globalend`). However: do you still need `globalstart` and `globalend` at all when using TEntryLists?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8646#issuecomment-895318380
https://github.com/root-project/root/pull/8646#issuecomment-895350585:531,Usability,simpl,simplification,531,"> you can calculate them from globalstart, globalend, filelist, treesnentries. yes if you pass all files and all tree entries. currently iirc we are only passing the file names and the tree entries for the files and trees that will be actually touched by the task. otoh i'm still thinking that `globalstart` and `globalend` could go away, what do we need them for?. EDIT: ah we use them for the call to `SetCacheEntryRange`, and they are not really global but they are relative to the task-specific chain uhm....it feels like some simplification is possible, if they are relative to the task-specific chain can't they be calculated from the rest?. EDIT 2: Ideally the call to `SetCacheEntryRange` should not be needed at all, `TTreeProcessorMT` and `TTreeReader` should take care of it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8646#issuecomment-895350585
https://github.com/root-project/root/pull/8646#issuecomment-895362702:165,Usability,simpl,simplification,165,"> EDIT: ah we use them for the call to SetCacheEntryRange, and they are not really global but they are relative to the task-specific chain uhm....it feels like some simplification is possible, if they are relative to the task-specific chain can't they be calculated from the rest?. Yes exactly, they are not global global, but global to the local partial chain that the task needs to process. That's why I say you just strictly need `globalstart, globalend, filelist, treesnentries`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8646#issuecomment-895362702
https://github.com/root-project/root/pull/8675#issuecomment-880514090:154,Usability,progress bar,progress bar,154,"> ```c++; > auto progbar = ROOT::RDF::MakeProgressBar(df, everyNEvents, nEvents); // last 2 args are optional; > ```. Although the ProgressBar won't be a progress bar when we don't know the number of events ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8675#issuecomment-880514090
https://github.com/root-project/root/pull/8675#issuecomment-880524867:227,Security,access,access,227,"> Tell me though: An RDF (= RNode I think?) doesn't take callbacks. I need a `RResultPtr`, correct? Do I have to attach a dummy result or did I miss something?. OK, I had a look, and it would actually be amazing if I could get access to the LoopManager, because then I could just register the callback using `RLoopManager::RegisterCallback` (cannot link to docs because undocumented functions don't get an anchor in doxygen, any more 🤷‍♂️ ).; I don't see a way to get to the [LoopManager](https://root.cern.ch/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html), though. ... and it would be cool because I wouldn't need to throw away the payload of the resultptr, because I'm not using it anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8675#issuecomment-880524867
https://github.com/root-project/root/pull/8675#issuecomment-880524867:370,Usability,undo,undocumented,370,"> Tell me though: An RDF (= RNode I think?) doesn't take callbacks. I need a `RResultPtr`, correct? Do I have to attach a dummy result or did I miss something?. OK, I had a look, and it would actually be amazing if I could get access to the LoopManager, because then I could just register the callback using `RLoopManager::RegisterCallback` (cannot link to docs because undocumented functions don't get an anchor in doxygen, any more 🤷‍♂️ ).; I don't see a way to get to the [LoopManager](https://root.cern.ch/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html), though. ... and it would be cool because I wouldn't need to throw away the payload of the resultptr, because I'm not using it anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8675#issuecomment-880524867
https://github.com/root-project/root/pull/8675#issuecomment-880538021:1043,Integrability,interface,interface,1043,"> Although the ProgressBar won't be a progress bar when we don't know the number of events ... You're right, better name pending (`AddProgressIndicator`?). > It would actually be amazing if I could get access to the LoopManager, because then I could just register the callback using RLoopManager::RegisterCallback. Yes that's a great idea, there are actually several advantages:. - as you mention, in the callback you wouldn't have to discard a partially evaluated result anymore; - `AddProgressIndicator` wouldn't need to return anything, it can just do what it says without users having to deal with the returned object; - probably the biggest: we wouldn't have to do any magic to make sure that the method is called _on the head node_ (because if you call it on a `Filter`, now you are updating the progress bar every N _filtered_ entries) . Now -- of course we don't just expose the `RLoopManager` to _anyone_, but we trust you, so you can add a `ROOT::Internal::ExtractLoopManager` function as a friend of `RInterface` that just returns `interface.fLoopManager`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8675#issuecomment-880538021
https://github.com/root-project/root/pull/8675#issuecomment-880538021:202,Security,access,access,202,"> Although the ProgressBar won't be a progress bar when we don't know the number of events ... You're right, better name pending (`AddProgressIndicator`?). > It would actually be amazing if I could get access to the LoopManager, because then I could just register the callback using RLoopManager::RegisterCallback. Yes that's a great idea, there are actually several advantages:. - as you mention, in the callback you wouldn't have to discard a partially evaluated result anymore; - `AddProgressIndicator` wouldn't need to return anything, it can just do what it says without users having to deal with the returned object; - probably the biggest: we wouldn't have to do any magic to make sure that the method is called _on the head node_ (because if you call it on a `Filter`, now you are updating the progress bar every N _filtered_ entries) . Now -- of course we don't just expose the `RLoopManager` to _anyone_, but we trust you, so you can add a `ROOT::Internal::ExtractLoopManager` function as a friend of `RInterface` that just returns `interface.fLoopManager`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8675#issuecomment-880538021
https://github.com/root-project/root/pull/8675#issuecomment-880538021:876,Security,expose,expose,876,"> Although the ProgressBar won't be a progress bar when we don't know the number of events ... You're right, better name pending (`AddProgressIndicator`?). > It would actually be amazing if I could get access to the LoopManager, because then I could just register the callback using RLoopManager::RegisterCallback. Yes that's a great idea, there are actually several advantages:. - as you mention, in the callback you wouldn't have to discard a partially evaluated result anymore; - `AddProgressIndicator` wouldn't need to return anything, it can just do what it says without users having to deal with the returned object; - probably the biggest: we wouldn't have to do any magic to make sure that the method is called _on the head node_ (because if you call it on a `Filter`, now you are updating the progress bar every N _filtered_ entries) . Now -- of course we don't just expose the `RLoopManager` to _anyone_, but we trust you, so you can add a `ROOT::Internal::ExtractLoopManager` function as a friend of `RInterface` that just returns `interface.fLoopManager`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8675#issuecomment-880538021
https://github.com/root-project/root/pull/8675#issuecomment-880538021:38,Usability,progress bar,progress bar,38,"> Although the ProgressBar won't be a progress bar when we don't know the number of events ... You're right, better name pending (`AddProgressIndicator`?). > It would actually be amazing if I could get access to the LoopManager, because then I could just register the callback using RLoopManager::RegisterCallback. Yes that's a great idea, there are actually several advantages:. - as you mention, in the callback you wouldn't have to discard a partially evaluated result anymore; - `AddProgressIndicator` wouldn't need to return anything, it can just do what it says without users having to deal with the returned object; - probably the biggest: we wouldn't have to do any magic to make sure that the method is called _on the head node_ (because if you call it on a `Filter`, now you are updating the progress bar every N _filtered_ entries) . Now -- of course we don't just expose the `RLoopManager` to _anyone_, but we trust you, so you can add a `ROOT::Internal::ExtractLoopManager` function as a friend of `RInterface` that just returns `interface.fLoopManager`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8675#issuecomment-880538021
https://github.com/root-project/root/pull/8675#issuecomment-880538021:802,Usability,progress bar,progress bar,802,"> Although the ProgressBar won't be a progress bar when we don't know the number of events ... You're right, better name pending (`AddProgressIndicator`?). > It would actually be amazing if I could get access to the LoopManager, because then I could just register the callback using RLoopManager::RegisterCallback. Yes that's a great idea, there are actually several advantages:. - as you mention, in the callback you wouldn't have to discard a partially evaluated result anymore; - `AddProgressIndicator` wouldn't need to return anything, it can just do what it says without users having to deal with the returned object; - probably the biggest: we wouldn't have to do any magic to make sure that the method is called _on the head node_ (because if you call it on a `Filter`, now you are updating the progress bar every N _filtered_ entries) . Now -- of course we don't just expose the `RLoopManager` to _anyone_, but we trust you, so you can add a `ROOT::Internal::ExtractLoopManager` function as a friend of `RInterface` that just returns `interface.fLoopManager`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8675#issuecomment-880538021
https://github.com/root-project/root/pull/8675#issuecomment-880833581:239,Deployability,update,update,239,"(as per the discussion above, this will not get merged as is because we rather prefer an implementation that can estimate the remaining number of entries/time without having to check all input files beforehand, but the logic to create and update the progress bar, including colors, windows support etc. is still directly re-usable and super useful)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8675#issuecomment-880833581
https://github.com/root-project/root/pull/8675#issuecomment-880833581:219,Testability,log,logic,219,"(as per the discussion above, this will not get merged as is because we rather prefer an implementation that can estimate the remaining number of entries/time without having to check all input files beforehand, but the logic to create and update the progress bar, including colors, windows support etc. is still directly re-usable and super useful)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8675#issuecomment-880833581
https://github.com/root-project/root/pull/8675#issuecomment-880833581:250,Usability,progress bar,progress bar,250,"(as per the discussion above, this will not get merged as is because we rather prefer an implementation that can estimate the remaining number of entries/time without having to check all input files beforehand, but the logic to create and update the progress bar, including colors, windows support etc. is still directly re-usable and super useful)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8675#issuecomment-880833581
https://github.com/root-project/root/pull/8675#issuecomment-880833581:324,Usability,usab,usable,324,"(as per the discussion above, this will not get merged as is because we rather prefer an implementation that can estimate the remaining number of entries/time without having to check all input files beforehand, but the logic to create and update the progress bar, including colors, windows support etc. is still directly re-usable and super useful)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8675#issuecomment-880833581
https://github.com/root-project/root/pull/8681#issuecomment-946557019:11,Usability,feedback,feedback,11,@couet any feedback on this PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8681#issuecomment-946557019
https://github.com/root-project/root/pull/8688#issuecomment-883396155:1533,Performance,cache,cache,1533,"I had a look ant it seems very nice. About the discrepancy between `REntry::Get` and `RNTupleModel::MakeField`, one may argue that `MakeField` might return a raw pointer too as the memory of the field is owned by the model. OTOH, while it's kind of easy to keep track of the lifetime of an `REntry` (I get it, I use it, I drop it), it seems more difficult to keep track of `RNTupleModel` lifetime, which is bound to the lifetime of `RNTupleWriter`.; Using raw pointers from `MakeField` is fine if we assume that the writer of the code only accesses the fields within the scope of `RNTupleWriter` (but the fields are accessible before the writer is created... more confusing). My personal opinion is that the `CreateEntry` way is the best option for the single thread case too:; - I define a model; - create a writer based on the model; - get the *buffer* (`REntry`) to write to (one per thread, for example, even if I have only one thread); - commit the *buffer* to the writer. In this way I own the `REntry`, but it has a layout in memory that is directly understood by the serialization process without the need of extra copies. We can also think of a way of constructing the writer from an *inlined* model, without the need for repeated calls to `MakeField`. Something like:; ```cpp; auto ntuple = RNTupleWriter::Recreate({; Field<std::uint32_t>(""id""),; Field<std::vector<float>>(""vpx""),; Field<std::vector<float>>(""vpy""),; Field<std::vector<float>>(""vpz""); }, ""NTuple"", kNTupleFileName);. auto entry = ntuple->CreateEntry();; // cache the pointer for faster access in single thread,; // but I could use TLS (or a framework equivalent) for multithreading; auto& vpx = *entry->Get<std::vector<float>>(""vpx"");; for(auto& event: all_events) {; vpx.clear();; vpx.push_back(42.);; ntuple->Fill(entry); // I would prefer ntuple->Write(entry) but it's a matter of taste; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8688#issuecomment-883396155
https://github.com/root-project/root/pull/8688#issuecomment-883396155:540,Security,access,accesses,540,"I had a look ant it seems very nice. About the discrepancy between `REntry::Get` and `RNTupleModel::MakeField`, one may argue that `MakeField` might return a raw pointer too as the memory of the field is owned by the model. OTOH, while it's kind of easy to keep track of the lifetime of an `REntry` (I get it, I use it, I drop it), it seems more difficult to keep track of `RNTupleModel` lifetime, which is bound to the lifetime of `RNTupleWriter`.; Using raw pointers from `MakeField` is fine if we assume that the writer of the code only accesses the fields within the scope of `RNTupleWriter` (but the fields are accessible before the writer is created... more confusing). My personal opinion is that the `CreateEntry` way is the best option for the single thread case too:; - I define a model; - create a writer based on the model; - get the *buffer* (`REntry`) to write to (one per thread, for example, even if I have only one thread); - commit the *buffer* to the writer. In this way I own the `REntry`, but it has a layout in memory that is directly understood by the serialization process without the need of extra copies. We can also think of a way of constructing the writer from an *inlined* model, without the need for repeated calls to `MakeField`. Something like:; ```cpp; auto ntuple = RNTupleWriter::Recreate({; Field<std::uint32_t>(""id""),; Field<std::vector<float>>(""vpx""),; Field<std::vector<float>>(""vpy""),; Field<std::vector<float>>(""vpz""); }, ""NTuple"", kNTupleFileName);. auto entry = ntuple->CreateEntry();; // cache the pointer for faster access in single thread,; // but I could use TLS (or a framework equivalent) for multithreading; auto& vpx = *entry->Get<std::vector<float>>(""vpx"");; for(auto& event: all_events) {; vpx.clear();; vpx.push_back(42.);; ntuple->Fill(entry); // I would prefer ntuple->Write(entry) but it's a matter of taste; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8688#issuecomment-883396155
https://github.com/root-project/root/pull/8688#issuecomment-883396155:616,Security,access,accessible,616,"I had a look ant it seems very nice. About the discrepancy between `REntry::Get` and `RNTupleModel::MakeField`, one may argue that `MakeField` might return a raw pointer too as the memory of the field is owned by the model. OTOH, while it's kind of easy to keep track of the lifetime of an `REntry` (I get it, I use it, I drop it), it seems more difficult to keep track of `RNTupleModel` lifetime, which is bound to the lifetime of `RNTupleWriter`.; Using raw pointers from `MakeField` is fine if we assume that the writer of the code only accesses the fields within the scope of `RNTupleWriter` (but the fields are accessible before the writer is created... more confusing). My personal opinion is that the `CreateEntry` way is the best option for the single thread case too:; - I define a model; - create a writer based on the model; - get the *buffer* (`REntry`) to write to (one per thread, for example, even if I have only one thread); - commit the *buffer* to the writer. In this way I own the `REntry`, but it has a layout in memory that is directly understood by the serialization process without the need of extra copies. We can also think of a way of constructing the writer from an *inlined* model, without the need for repeated calls to `MakeField`. Something like:; ```cpp; auto ntuple = RNTupleWriter::Recreate({; Field<std::uint32_t>(""id""),; Field<std::vector<float>>(""vpx""),; Field<std::vector<float>>(""vpy""),; Field<std::vector<float>>(""vpz""); }, ""NTuple"", kNTupleFileName);. auto entry = ntuple->CreateEntry();; // cache the pointer for faster access in single thread,; // but I could use TLS (or a framework equivalent) for multithreading; auto& vpx = *entry->Get<std::vector<float>>(""vpx"");; for(auto& event: all_events) {; vpx.clear();; vpx.push_back(42.);; ntuple->Fill(entry); // I would prefer ntuple->Write(entry) but it's a matter of taste; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8688#issuecomment-883396155
https://github.com/root-project/root/pull/8688#issuecomment-883396155:1562,Security,access,access,1562,"I had a look ant it seems very nice. About the discrepancy between `REntry::Get` and `RNTupleModel::MakeField`, one may argue that `MakeField` might return a raw pointer too as the memory of the field is owned by the model. OTOH, while it's kind of easy to keep track of the lifetime of an `REntry` (I get it, I use it, I drop it), it seems more difficult to keep track of `RNTupleModel` lifetime, which is bound to the lifetime of `RNTupleWriter`.; Using raw pointers from `MakeField` is fine if we assume that the writer of the code only accesses the fields within the scope of `RNTupleWriter` (but the fields are accessible before the writer is created... more confusing). My personal opinion is that the `CreateEntry` way is the best option for the single thread case too:; - I define a model; - create a writer based on the model; - get the *buffer* (`REntry`) to write to (one per thread, for example, even if I have only one thread); - commit the *buffer* to the writer. In this way I own the `REntry`, but it has a layout in memory that is directly understood by the serialization process without the need of extra copies. We can also think of a way of constructing the writer from an *inlined* model, without the need for repeated calls to `MakeField`. Something like:; ```cpp; auto ntuple = RNTupleWriter::Recreate({; Field<std::uint32_t>(""id""),; Field<std::vector<float>>(""vpx""),; Field<std::vector<float>>(""vpy""),; Field<std::vector<float>>(""vpz""); }, ""NTuple"", kNTupleFileName);. auto entry = ntuple->CreateEntry();; // cache the pointer for faster access in single thread,; // but I could use TLS (or a framework equivalent) for multithreading; auto& vpx = *entry->Get<std::vector<float>>(""vpx"");; for(auto& event: all_events) {; vpx.clear();; vpx.push_back(42.);; ntuple->Fill(entry); // I would prefer ntuple->Write(entry) but it's a matter of taste; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8688#issuecomment-883396155
https://github.com/root-project/root/pull/8688#issuecomment-883396155:1748,Usability,clear,clear,1748,"I had a look ant it seems very nice. About the discrepancy between `REntry::Get` and `RNTupleModel::MakeField`, one may argue that `MakeField` might return a raw pointer too as the memory of the field is owned by the model. OTOH, while it's kind of easy to keep track of the lifetime of an `REntry` (I get it, I use it, I drop it), it seems more difficult to keep track of `RNTupleModel` lifetime, which is bound to the lifetime of `RNTupleWriter`.; Using raw pointers from `MakeField` is fine if we assume that the writer of the code only accesses the fields within the scope of `RNTupleWriter` (but the fields are accessible before the writer is created... more confusing). My personal opinion is that the `CreateEntry` way is the best option for the single thread case too:; - I define a model; - create a writer based on the model; - get the *buffer* (`REntry`) to write to (one per thread, for example, even if I have only one thread); - commit the *buffer* to the writer. In this way I own the `REntry`, but it has a layout in memory that is directly understood by the serialization process without the need of extra copies. We can also think of a way of constructing the writer from an *inlined* model, without the need for repeated calls to `MakeField`. Something like:; ```cpp; auto ntuple = RNTupleWriter::Recreate({; Field<std::uint32_t>(""id""),; Field<std::vector<float>>(""vpx""),; Field<std::vector<float>>(""vpy""),; Field<std::vector<float>>(""vpz""); }, ""NTuple"", kNTupleFileName);. auto entry = ntuple->CreateEntry();; // cache the pointer for faster access in single thread,; // but I could use TLS (or a framework equivalent) for multithreading; auto& vpx = *entry->Get<std::vector<float>>(""vpx"");; for(auto& event: all_events) {; vpx.clear();; vpx.push_back(42.);; ntuple->Fill(entry); // I would prefer ntuple->Write(entry) but it's a matter of taste; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8688#issuecomment-883396155
https://github.com/root-project/root/pull/8699#issuecomment-884186832:68,Usability,simpl,simpler,68,"@Axel-Naumann, @couet pointed out that my read file was basically a simpler version of h1draw.C and that it would be better to just clarify some things in that file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8699#issuecomment-884186832
https://github.com/root-project/root/pull/8700#issuecomment-884045031:532,Deployability,integrat,integrate,532,"@hageboeck thanks for another Herculean reviewing effort :) Your comments make total sense; indeed, all the copy-pasted stuff still has to be merged with all the modernization and optimization work that was done in the past two years. I will go through as much of your suggestions as I can before I will be on leave after tomorrow for three weeks. After that, if anyone else has time to work on some of the issues, I'd of course welcome the help. As you know, my time on the project is running out, so I probably won't have time to integrate everything. For instance, Manos' mini computation library I have only learned about in the last few months and don't know it in enough detail to make any kind of sensible estimate of how to do it, let alone how much time this would take. Let's discuss detailed plans in our meeting at 14:00 today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-884045031
https://github.com/root-project/root/pull/8700#issuecomment-884045031:532,Integrability,integrat,integrate,532,"@hageboeck thanks for another Herculean reviewing effort :) Your comments make total sense; indeed, all the copy-pasted stuff still has to be merged with all the modernization and optimization work that was done in the past two years. I will go through as much of your suggestions as I can before I will be on leave after tomorrow for three weeks. After that, if anyone else has time to work on some of the issues, I'd of course welcome the help. As you know, my time on the project is running out, so I probably won't have time to integrate everything. For instance, Manos' mini computation library I have only learned about in the last few months and don't know it in enough detail to make any kind of sensible estimate of how to do it, let alone how much time this would take. Let's discuss detailed plans in our meeting at 14:00 today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-884045031
https://github.com/root-project/root/pull/8700#issuecomment-884045031:180,Performance,optimiz,optimization,180,"@hageboeck thanks for another Herculean reviewing effort :) Your comments make total sense; indeed, all the copy-pasted stuff still has to be merged with all the modernization and optimization work that was done in the past two years. I will go through as much of your suggestions as I can before I will be on leave after tomorrow for three weeks. After that, if anyone else has time to work on some of the issues, I'd of course welcome the help. As you know, my time on the project is running out, so I probably won't have time to integrate everything. For instance, Manos' mini computation library I have only learned about in the last few months and don't know it in enough detail to make any kind of sensible estimate of how to do it, let alone how much time this would take. Let's discuss detailed plans in our meeting at 14:00 today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-884045031
https://github.com/root-project/root/pull/8700#issuecomment-884045031:612,Usability,learn,learned,612,"@hageboeck thanks for another Herculean reviewing effort :) Your comments make total sense; indeed, all the copy-pasted stuff still has to be merged with all the modernization and optimization work that was done in the past two years. I will go through as much of your suggestions as I can before I will be on leave after tomorrow for three weeks. After that, if anyone else has time to work on some of the issues, I'd of course welcome the help. As you know, my time on the project is running out, so I probably won't have time to integrate everything. For instance, Manos' mini computation library I have only learned about in the last few months and don't know it in enough detail to make any kind of sensible estimate of how to do it, let alone how much time this would take. Let's discuss detailed plans in our meeting at 14:00 today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-884045031
https://github.com/root-project/root/pull/8700#issuecomment-915217168:765,Deployability,configurat,configuration,765,"Remaining points and questions arising from @hageboeck's review:. 1. https://github.com/root-project/root/pull/8700#discussion_r672508683 Should RooRealL have I/O? It is currently disabled by setting ClassDef version to 0.; 2. https://github.com/root-project/root/pull/8700#discussion_r672509759 RooFit naming convention puts underscores in front of member names. This is discouraged, since underscore prefix is reserved for C++ implementations. I introduced some new members with underscore suffix instead, which is also common practice e.g. in the Google C++ guidelines. I think this is not something we should spend too much time on now, but maybe good to keep in mind for the future.; 3. https://github.com/root-project/root/pull/8700#discussion_r672519457 The configuration parameters (GlobalObservables etc.): should we unify them or keep like this?; 4. https://github.com/root-project/root/pull/8700#discussion_r672538377 This should be checked by Wouter. In addition, some other remaining questions:; 1. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test.; 2. In an ideal world I would have liked to add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, this will take time. The advantage would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the MultiProcess minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come in ""PR 7"" (see overview). So, up for discussion, two choices: A: add (probably mostly useless except for testing this PR) ""Likelih",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915217168
https://github.com/root-project/root/pull/8700#issuecomment-915217168:2074,Deployability,integrat,integration,2074,"the Google C++ guidelines. I think this is not something we should spend too much time on now, but maybe good to keep in mind for the future.; 3. https://github.com/root-project/root/pull/8700#discussion_r672519457 The configuration parameters (GlobalObservables etc.): should we unify them or keep like this?; 4. https://github.com/root-project/root/pull/8700#discussion_r672538377 This should be checked by Wouter. In addition, some other remaining questions:; 1. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test.; 2. In an ideal world I would have liked to add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, this will take time. The advantage would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the MultiProcess minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come in ""PR 7"" (see overview). So, up for discussion, two choices: A: add (probably mostly useless except for testing this PR) ""LikelihoodGradientSerial"" class (based on RooGradMinimizerFcn) so we can add an integration test in this PR; B: wait for the integration test in PR 7.; 3. Does everybody like the RooNLLVar statics?; 4. Offset in the new TestStatistics classes can easily include the RooSubsidiaryL term as well, unlike with RooAbsTestStatistic, where the RooConstraintSum was a separate class that would not be included in the offset. I have now implemented a legacy mode to get bit-wise equal results, but is the new ""full"" mode a good idea at all? Does it make sense?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915217168
https://github.com/root-project/root/pull/8700#issuecomment-915217168:2119,Deployability,integrat,integration,2119,"the Google C++ guidelines. I think this is not something we should spend too much time on now, but maybe good to keep in mind for the future.; 3. https://github.com/root-project/root/pull/8700#discussion_r672519457 The configuration parameters (GlobalObservables etc.): should we unify them or keep like this?; 4. https://github.com/root-project/root/pull/8700#discussion_r672538377 This should be checked by Wouter. In addition, some other remaining questions:; 1. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test.; 2. In an ideal world I would have liked to add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, this will take time. The advantage would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the MultiProcess minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come in ""PR 7"" (see overview). So, up for discussion, two choices: A: add (probably mostly useless except for testing this PR) ""LikelihoodGradientSerial"" class (based on RooGradMinimizerFcn) so we can add an integration test in this PR; B: wait for the integration test in PR 7.; 3. Does everybody like the RooNLLVar statics?; 4. Offset in the new TestStatistics classes can easily include the RooSubsidiaryL term as well, unlike with RooAbsTestStatistic, where the RooConstraintSum was a separate class that would not be included in the offset. I have now implemented a legacy mode to get bit-wise equal results, but is the new ""full"" mode a good idea at all? Does it make sense?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915217168
https://github.com/root-project/root/pull/8700#issuecomment-915217168:2074,Integrability,integrat,integration,2074,"the Google C++ guidelines. I think this is not something we should spend too much time on now, but maybe good to keep in mind for the future.; 3. https://github.com/root-project/root/pull/8700#discussion_r672519457 The configuration parameters (GlobalObservables etc.): should we unify them or keep like this?; 4. https://github.com/root-project/root/pull/8700#discussion_r672538377 This should be checked by Wouter. In addition, some other remaining questions:; 1. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test.; 2. In an ideal world I would have liked to add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, this will take time. The advantage would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the MultiProcess minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come in ""PR 7"" (see overview). So, up for discussion, two choices: A: add (probably mostly useless except for testing this PR) ""LikelihoodGradientSerial"" class (based on RooGradMinimizerFcn) so we can add an integration test in this PR; B: wait for the integration test in PR 7.; 3. Does everybody like the RooNLLVar statics?; 4. Offset in the new TestStatistics classes can easily include the RooSubsidiaryL term as well, unlike with RooAbsTestStatistic, where the RooConstraintSum was a separate class that would not be included in the offset. I have now implemented a legacy mode to get bit-wise equal results, but is the new ""full"" mode a good idea at all? Does it make sense?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915217168
https://github.com/root-project/root/pull/8700#issuecomment-915217168:2119,Integrability,integrat,integration,2119,"the Google C++ guidelines. I think this is not something we should spend too much time on now, but maybe good to keep in mind for the future.; 3. https://github.com/root-project/root/pull/8700#discussion_r672519457 The configuration parameters (GlobalObservables etc.): should we unify them or keep like this?; 4. https://github.com/root-project/root/pull/8700#discussion_r672538377 This should be checked by Wouter. In addition, some other remaining questions:; 1. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test.; 2. In an ideal world I would have liked to add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, this will take time. The advantage would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the MultiProcess minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come in ""PR 7"" (see overview). So, up for discussion, two choices: A: add (probably mostly useless except for testing this PR) ""LikelihoodGradientSerial"" class (based on RooGradMinimizerFcn) so we can add an integration test in this PR; B: wait for the integration test in PR 7.; 3. Does everybody like the RooNLLVar statics?; 4. Offset in the new TestStatistics classes can easily include the RooSubsidiaryL term as well, unlike with RooAbsTestStatistic, where the RooConstraintSum was a separate class that would not be included in the offset. I have now implemented a legacy mode to get bit-wise equal results, but is the new ""full"" mode a good idea at all? Does it make sense?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915217168
https://github.com/root-project/root/pull/8700#issuecomment-915217168:765,Modifiability,config,configuration,765,"Remaining points and questions arising from @hageboeck's review:. 1. https://github.com/root-project/root/pull/8700#discussion_r672508683 Should RooRealL have I/O? It is currently disabled by setting ClassDef version to 0.; 2. https://github.com/root-project/root/pull/8700#discussion_r672509759 RooFit naming convention puts underscores in front of member names. This is discouraged, since underscore prefix is reserved for C++ implementations. I introduced some new members with underscore suffix instead, which is also common practice e.g. in the Google C++ guidelines. I think this is not something we should spend too much time on now, but maybe good to keep in mind for the future.; 3. https://github.com/root-project/root/pull/8700#discussion_r672519457 The configuration parameters (GlobalObservables etc.): should we unify them or keep like this?; 4. https://github.com/root-project/root/pull/8700#discussion_r672538377 This should be checked by Wouter. In addition, some other remaining questions:; 1. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test.; 2. In an ideal world I would have liked to add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, this will take time. The advantage would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the MultiProcess minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come in ""PR 7"" (see overview). So, up for discussion, two choices: A: add (probably mostly useless except for testing this PR) ""Likelih",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915217168
https://github.com/root-project/root/pull/8700#issuecomment-915217168:1013,Testability,test,testRooRealL,1013,"nd questions arising from @hageboeck's review:. 1. https://github.com/root-project/root/pull/8700#discussion_r672508683 Should RooRealL have I/O? It is currently disabled by setting ClassDef version to 0.; 2. https://github.com/root-project/root/pull/8700#discussion_r672509759 RooFit naming convention puts underscores in front of member names. This is discouraged, since underscore prefix is reserved for C++ implementations. I introduced some new members with underscore suffix instead, which is also common practice e.g. in the Google C++ guidelines. I think this is not something we should spend too much time on now, but maybe good to keep in mind for the future.; 3. https://github.com/root-project/root/pull/8700#discussion_r672519457 The configuration parameters (GlobalObservables etc.): should we unify them or keep like this?; 4. https://github.com/root-project/root/pull/8700#discussion_r672538377 This should be checked by Wouter. In addition, some other remaining questions:; 1. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test.; 2. In an ideal world I would have liked to add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, this will take time. The advantage would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the MultiProcess minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come in ""PR 7"" (see overview). So, up for discussion, two choices: A: add (probably mostly useless except for testing this PR) ""LikelihoodGradientSerial""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915217168
https://github.com/root-project/root/pull/8700#issuecomment-915217168:1276,Testability,test,test,1276,"d by setting ClassDef version to 0.; 2. https://github.com/root-project/root/pull/8700#discussion_r672509759 RooFit naming convention puts underscores in front of member names. This is discouraged, since underscore prefix is reserved for C++ implementations. I introduced some new members with underscore suffix instead, which is also common practice e.g. in the Google C++ guidelines. I think this is not something we should spend too much time on now, but maybe good to keep in mind for the future.; 3. https://github.com/root-project/root/pull/8700#discussion_r672519457 The configuration parameters (GlobalObservables etc.): should we unify them or keep like this?; 4. https://github.com/root-project/root/pull/8700#discussion_r672538377 This should be checked by Wouter. In addition, some other remaining questions:; 1. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test.; 2. In an ideal world I would have liked to add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, this will take time. The advantage would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the MultiProcess minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come in ""PR 7"" (see overview). So, up for discussion, two choices: A: add (probably mostly useless except for testing this PR) ""LikelihoodGradientSerial"" class (based on RooGradMinimizerFcn) so we can add an integration test in this PR; B: wait for the integration test in PR 7.; 3. Does everybody like the RooNLLVar stat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915217168
https://github.com/root-project/root/pull/8700#issuecomment-915217168:1573,Testability,test,test,1573,"the Google C++ guidelines. I think this is not something we should spend too much time on now, but maybe good to keep in mind for the future.; 3. https://github.com/root-project/root/pull/8700#discussion_r672519457 The configuration parameters (GlobalObservables etc.): should we unify them or keep like this?; 4. https://github.com/root-project/root/pull/8700#discussion_r672538377 This should be checked by Wouter. In addition, some other remaining questions:; 1. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test.; 2. In an ideal world I would have liked to add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, this will take time. The advantage would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the MultiProcess minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come in ""PR 7"" (see overview). So, up for discussion, two choices: A: add (probably mostly useless except for testing this PR) ""LikelihoodGradientSerial"" class (based on RooGradMinimizerFcn) so we can add an integration test in this PR; B: wait for the integration test in PR 7.; 3. Does everybody like the RooNLLVar statics?; 4. Offset in the new TestStatistics classes can easily include the RooSubsidiaryL term as well, unlike with RooAbsTestStatistic, where the RooConstraintSum was a separate class that would not be included in the offset. I have now implemented a legacy mode to get bit-wise equal results, but is the new ""full"" mode a good idea at all? Does it make sense?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915217168
https://github.com/root-project/root/pull/8700#issuecomment-915217168:1703,Testability,test,test,1703,"the Google C++ guidelines. I think this is not something we should spend too much time on now, but maybe good to keep in mind for the future.; 3. https://github.com/root-project/root/pull/8700#discussion_r672519457 The configuration parameters (GlobalObservables etc.): should we unify them or keep like this?; 4. https://github.com/root-project/root/pull/8700#discussion_r672538377 This should be checked by Wouter. In addition, some other remaining questions:; 1. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test.; 2. In an ideal world I would have liked to add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, this will take time. The advantage would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the MultiProcess minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come in ""PR 7"" (see overview). So, up for discussion, two choices: A: add (probably mostly useless except for testing this PR) ""LikelihoodGradientSerial"" class (based on RooGradMinimizerFcn) so we can add an integration test in this PR; B: wait for the integration test in PR 7.; 3. Does everybody like the RooNLLVar statics?; 4. Offset in the new TestStatistics classes can easily include the RooSubsidiaryL term as well, unlike with RooAbsTestStatistic, where the RooConstraintSum was a separate class that would not be included in the offset. I have now implemented a legacy mode to get bit-wise equal results, but is the new ""full"" mode a good idea at all? Does it make sense?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915217168
https://github.com/root-project/root/pull/8700#issuecomment-915217168:1856,Testability,test,test,1856,"the Google C++ guidelines. I think this is not something we should spend too much time on now, but maybe good to keep in mind for the future.; 3. https://github.com/root-project/root/pull/8700#discussion_r672519457 The configuration parameters (GlobalObservables etc.): should we unify them or keep like this?; 4. https://github.com/root-project/root/pull/8700#discussion_r672538377 This should be checked by Wouter. In addition, some other remaining questions:; 1. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test.; 2. In an ideal world I would have liked to add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, this will take time. The advantage would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the MultiProcess minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come in ""PR 7"" (see overview). So, up for discussion, two choices: A: add (probably mostly useless except for testing this PR) ""LikelihoodGradientSerial"" class (based on RooGradMinimizerFcn) so we can add an integration test in this PR; B: wait for the integration test in PR 7.; 3. Does everybody like the RooNLLVar statics?; 4. Offset in the new TestStatistics classes can easily include the RooSubsidiaryL term as well, unlike with RooAbsTestStatistic, where the RooConstraintSum was a separate class that would not be included in the offset. I have now implemented a legacy mode to get bit-wise equal results, but is the new ""full"" mode a good idea at all? Does it make sense?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915217168
https://github.com/root-project/root/pull/8700#issuecomment-915217168:1976,Testability,test,testing,1976,"the Google C++ guidelines. I think this is not something we should spend too much time on now, but maybe good to keep in mind for the future.; 3. https://github.com/root-project/root/pull/8700#discussion_r672519457 The configuration parameters (GlobalObservables etc.): should we unify them or keep like this?; 4. https://github.com/root-project/root/pull/8700#discussion_r672538377 This should be checked by Wouter. In addition, some other remaining questions:; 1. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test.; 2. In an ideal world I would have liked to add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, this will take time. The advantage would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the MultiProcess minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come in ""PR 7"" (see overview). So, up for discussion, two choices: A: add (probably mostly useless except for testing this PR) ""LikelihoodGradientSerial"" class (based on RooGradMinimizerFcn) so we can add an integration test in this PR; B: wait for the integration test in PR 7.; 3. Does everybody like the RooNLLVar statics?; 4. Offset in the new TestStatistics classes can easily include the RooSubsidiaryL term as well, unlike with RooAbsTestStatistic, where the RooConstraintSum was a separate class that would not be included in the offset. I have now implemented a legacy mode to get bit-wise equal results, but is the new ""full"" mode a good idea at all? Does it make sense?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915217168
https://github.com/root-project/root/pull/8700#issuecomment-915217168:2086,Testability,test,test,2086,"the Google C++ guidelines. I think this is not something we should spend too much time on now, but maybe good to keep in mind for the future.; 3. https://github.com/root-project/root/pull/8700#discussion_r672519457 The configuration parameters (GlobalObservables etc.): should we unify them or keep like this?; 4. https://github.com/root-project/root/pull/8700#discussion_r672538377 This should be checked by Wouter. In addition, some other remaining questions:; 1. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test.; 2. In an ideal world I would have liked to add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, this will take time. The advantage would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the MultiProcess minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come in ""PR 7"" (see overview). So, up for discussion, two choices: A: add (probably mostly useless except for testing this PR) ""LikelihoodGradientSerial"" class (based on RooGradMinimizerFcn) so we can add an integration test in this PR; B: wait for the integration test in PR 7.; 3. Does everybody like the RooNLLVar statics?; 4. Offset in the new TestStatistics classes can easily include the RooSubsidiaryL term as well, unlike with RooAbsTestStatistic, where the RooConstraintSum was a separate class that would not be included in the offset. I have now implemented a legacy mode to get bit-wise equal results, but is the new ""full"" mode a good idea at all? Does it make sense?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915217168
https://github.com/root-project/root/pull/8700#issuecomment-915217168:2131,Testability,test,test,2131,"the Google C++ guidelines. I think this is not something we should spend too much time on now, but maybe good to keep in mind for the future.; 3. https://github.com/root-project/root/pull/8700#discussion_r672519457 The configuration parameters (GlobalObservables etc.): should we unify them or keep like this?; 4. https://github.com/root-project/root/pull/8700#discussion_r672538377 This should be checked by Wouter. In addition, some other remaining questions:; 1. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test.; 2. In an ideal world I would have liked to add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, this will take time. The advantage would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the MultiProcess minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come in ""PR 7"" (see overview). So, up for discussion, two choices: A: add (probably mostly useless except for testing this PR) ""LikelihoodGradientSerial"" class (based on RooGradMinimizerFcn) so we can add an integration test in this PR; B: wait for the integration test in PR 7.; 3. Does everybody like the RooNLLVar statics?; 4. Offset in the new TestStatistics classes can easily include the RooSubsidiaryL term as well, unlike with RooAbsTestStatistic, where the RooConstraintSum was a separate class that would not be included in the offset. I have now implemented a legacy mode to get bit-wise equal results, but is the new ""full"" mode a good idea at all? Does it make sense?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915217168
https://github.com/root-project/root/pull/8700#issuecomment-915217168:561,Usability,guid,guidelines,561,"Remaining points and questions arising from @hageboeck's review:. 1. https://github.com/root-project/root/pull/8700#discussion_r672508683 Should RooRealL have I/O? It is currently disabled by setting ClassDef version to 0.; 2. https://github.com/root-project/root/pull/8700#discussion_r672509759 RooFit naming convention puts underscores in front of member names. This is discouraged, since underscore prefix is reserved for C++ implementations. I introduced some new members with underscore suffix instead, which is also common practice e.g. in the Google C++ guidelines. I think this is not something we should spend too much time on now, but maybe good to keep in mind for the future.; 3. https://github.com/root-project/root/pull/8700#discussion_r672519457 The configuration parameters (GlobalObservables etc.): should we unify them or keep like this?; 4. https://github.com/root-project/root/pull/8700#discussion_r672538377 This should be checked by Wouter. In addition, some other remaining questions:; 1. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test.; 2. In an ideal world I would have liked to add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, this will take time. The advantage would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the MultiProcess minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come in ""PR 7"" (see overview). So, up for discussion, two choices: A: add (probably mostly useless except for testing this PR) ""Likelih",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915217168
https://github.com/root-project/root/pull/8703#issuecomment-920229853:1012,Safety,predict,prediction,1012,"In reply to: https://github.com/root-project/root/pull/8703#issuecomment-920044106. > You mean keeping the average of the last $x$ MB written per column? . Not quite, I meant simply an overall average, i.e. simply keeping `total_number_of_bytes` and `total_number_of_compressed_bytes` for each column and then average compression ration is a simple division. But ... actually ... closer to the original proposal is simply the ""total_number_of_bytes_in_all_flushed_clusters"" and ""corresponding_compressed_size"" (i.e. a per RNtuple running total). However this makes me thing of another (potential more noticeable) instability. If there is 2 columns; column A with an constant/average compression ration of 100 and column B with a constant/average compression ration of 1 (or 1.1 :) ) but both columns are collections. If for most of the entries (for more proposal) or only the last cluster (for the PR's proposal), column A has a lot of data and column B has very little data, then the compression ration use for prediction will be 100 (ish). If suddenly the cardinality flip/flop and column A has very little data but column B has a lot of data, then the compression ration of that cluster will be 1 but it would still contains `100 * target_cluster_size_in_compressed_bytes`, namely in this case 100 times larger (on disk) than any other cluster. Obviously this is an extreme example but it points to the benefit of using `per column` compression ratio rather than overall compression ratio (whether it is whole-ntuple or last (few) clusters). The cost for implementation seems to be that after each `Fill`, each column would have to increment a (global-per-RNtuple) counter with `data_written / estimated_compression_ratio` which:; * for collection column should be a small over-head; * for single value column should be a large over-head. however conversely, an accurate estimate is ""only important"" for collection column, so maybe an hybrid solution is a workable compromise?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8703#issuecomment-920229853
https://github.com/root-project/root/pull/8703#issuecomment-920229853:175,Usability,simpl,simply,175,"In reply to: https://github.com/root-project/root/pull/8703#issuecomment-920044106. > You mean keeping the average of the last $x$ MB written per column? . Not quite, I meant simply an overall average, i.e. simply keeping `total_number_of_bytes` and `total_number_of_compressed_bytes` for each column and then average compression ration is a simple division. But ... actually ... closer to the original proposal is simply the ""total_number_of_bytes_in_all_flushed_clusters"" and ""corresponding_compressed_size"" (i.e. a per RNtuple running total). However this makes me thing of another (potential more noticeable) instability. If there is 2 columns; column A with an constant/average compression ration of 100 and column B with a constant/average compression ration of 1 (or 1.1 :) ) but both columns are collections. If for most of the entries (for more proposal) or only the last cluster (for the PR's proposal), column A has a lot of data and column B has very little data, then the compression ration use for prediction will be 100 (ish). If suddenly the cardinality flip/flop and column A has very little data but column B has a lot of data, then the compression ration of that cluster will be 1 but it would still contains `100 * target_cluster_size_in_compressed_bytes`, namely in this case 100 times larger (on disk) than any other cluster. Obviously this is an extreme example but it points to the benefit of using `per column` compression ratio rather than overall compression ratio (whether it is whole-ntuple or last (few) clusters). The cost for implementation seems to be that after each `Fill`, each column would have to increment a (global-per-RNtuple) counter with `data_written / estimated_compression_ratio` which:; * for collection column should be a small over-head; * for single value column should be a large over-head. however conversely, an accurate estimate is ""only important"" for collection column, so maybe an hybrid solution is a workable compromise?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8703#issuecomment-920229853
https://github.com/root-project/root/pull/8703#issuecomment-920229853:207,Usability,simpl,simply,207,"In reply to: https://github.com/root-project/root/pull/8703#issuecomment-920044106. > You mean keeping the average of the last $x$ MB written per column? . Not quite, I meant simply an overall average, i.e. simply keeping `total_number_of_bytes` and `total_number_of_compressed_bytes` for each column and then average compression ration is a simple division. But ... actually ... closer to the original proposal is simply the ""total_number_of_bytes_in_all_flushed_clusters"" and ""corresponding_compressed_size"" (i.e. a per RNtuple running total). However this makes me thing of another (potential more noticeable) instability. If there is 2 columns; column A with an constant/average compression ration of 100 and column B with a constant/average compression ration of 1 (or 1.1 :) ) but both columns are collections. If for most of the entries (for more proposal) or only the last cluster (for the PR's proposal), column A has a lot of data and column B has very little data, then the compression ration use for prediction will be 100 (ish). If suddenly the cardinality flip/flop and column A has very little data but column B has a lot of data, then the compression ration of that cluster will be 1 but it would still contains `100 * target_cluster_size_in_compressed_bytes`, namely in this case 100 times larger (on disk) than any other cluster. Obviously this is an extreme example but it points to the benefit of using `per column` compression ratio rather than overall compression ratio (whether it is whole-ntuple or last (few) clusters). The cost for implementation seems to be that after each `Fill`, each column would have to increment a (global-per-RNtuple) counter with `data_written / estimated_compression_ratio` which:; * for collection column should be a small over-head; * for single value column should be a large over-head. however conversely, an accurate estimate is ""only important"" for collection column, so maybe an hybrid solution is a workable compromise?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8703#issuecomment-920229853
https://github.com/root-project/root/pull/8703#issuecomment-920229853:342,Usability,simpl,simple,342,"In reply to: https://github.com/root-project/root/pull/8703#issuecomment-920044106. > You mean keeping the average of the last $x$ MB written per column? . Not quite, I meant simply an overall average, i.e. simply keeping `total_number_of_bytes` and `total_number_of_compressed_bytes` for each column and then average compression ration is a simple division. But ... actually ... closer to the original proposal is simply the ""total_number_of_bytes_in_all_flushed_clusters"" and ""corresponding_compressed_size"" (i.e. a per RNtuple running total). However this makes me thing of another (potential more noticeable) instability. If there is 2 columns; column A with an constant/average compression ration of 100 and column B with a constant/average compression ration of 1 (or 1.1 :) ) but both columns are collections. If for most of the entries (for more proposal) or only the last cluster (for the PR's proposal), column A has a lot of data and column B has very little data, then the compression ration use for prediction will be 100 (ish). If suddenly the cardinality flip/flop and column A has very little data but column B has a lot of data, then the compression ration of that cluster will be 1 but it would still contains `100 * target_cluster_size_in_compressed_bytes`, namely in this case 100 times larger (on disk) than any other cluster. Obviously this is an extreme example but it points to the benefit of using `per column` compression ratio rather than overall compression ratio (whether it is whole-ntuple or last (few) clusters). The cost for implementation seems to be that after each `Fill`, each column would have to increment a (global-per-RNtuple) counter with `data_written / estimated_compression_ratio` which:; * for collection column should be a small over-head; * for single value column should be a large over-head. however conversely, an accurate estimate is ""only important"" for collection column, so maybe an hybrid solution is a workable compromise?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8703#issuecomment-920229853
https://github.com/root-project/root/pull/8703#issuecomment-920229853:415,Usability,simpl,simply,415,"In reply to: https://github.com/root-project/root/pull/8703#issuecomment-920044106. > You mean keeping the average of the last $x$ MB written per column? . Not quite, I meant simply an overall average, i.e. simply keeping `total_number_of_bytes` and `total_number_of_compressed_bytes` for each column and then average compression ration is a simple division. But ... actually ... closer to the original proposal is simply the ""total_number_of_bytes_in_all_flushed_clusters"" and ""corresponding_compressed_size"" (i.e. a per RNtuple running total). However this makes me thing of another (potential more noticeable) instability. If there is 2 columns; column A with an constant/average compression ration of 100 and column B with a constant/average compression ration of 1 (or 1.1 :) ) but both columns are collections. If for most of the entries (for more proposal) or only the last cluster (for the PR's proposal), column A has a lot of data and column B has very little data, then the compression ration use for prediction will be 100 (ish). If suddenly the cardinality flip/flop and column A has very little data but column B has a lot of data, then the compression ration of that cluster will be 1 but it would still contains `100 * target_cluster_size_in_compressed_bytes`, namely in this case 100 times larger (on disk) than any other cluster. Obviously this is an extreme example but it points to the benefit of using `per column` compression ratio rather than overall compression ratio (whether it is whole-ntuple or last (few) clusters). The cost for implementation seems to be that after each `Fill`, each column would have to increment a (global-per-RNtuple) counter with `data_written / estimated_compression_ratio` which:; * for collection column should be a small over-head; * for single value column should be a large over-head. however conversely, an accurate estimate is ""only important"" for collection column, so maybe an hybrid solution is a workable compromise?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8703#issuecomment-920229853
https://github.com/root-project/root/issues/8706#issuecomment-914136123:309,Deployability,release,release,309,"If it helps: I know at least that for instance the [JuliaPlots/Plots](https://github.com/JuliaPlots/Plots.jl) project simply uses a `.zenodo.json` file in their repo which should be automatically parsed, according to [REST API subsection](https://developers.zenodo.org/#add-metadata-to-your-github-repository-release), whenever a new release is created.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8706#issuecomment-914136123
https://github.com/root-project/root/issues/8706#issuecomment-914136123:334,Deployability,release,release,334,"If it helps: I know at least that for instance the [JuliaPlots/Plots](https://github.com/JuliaPlots/Plots.jl) project simply uses a `.zenodo.json` file in their repo which should be automatically parsed, according to [REST API subsection](https://developers.zenodo.org/#add-metadata-to-your-github-repository-release), whenever a new release is created.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8706#issuecomment-914136123
https://github.com/root-project/root/issues/8706#issuecomment-914136123:118,Usability,simpl,simply,118,"If it helps: I know at least that for instance the [JuliaPlots/Plots](https://github.com/JuliaPlots/Plots.jl) project simply uses a `.zenodo.json` file in their repo which should be automatically parsed, according to [REST API subsection](https://developers.zenodo.org/#add-metadata-to-your-github-repository-release), whenever a new release is created.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8706#issuecomment-914136123
https://github.com/root-project/root/pull/8717#issuecomment-885523144:93,Safety,timeout,timeouts,93,"> > @grasph please fork also [roottest](https://github.com/root-project/roottest) to prevent timeouts on the Windows build nodes. Thanks; > ; > Done. Do I need to create a branch with the same name ?. Thanks. And no, simply forking is good enough",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8717#issuecomment-885523144
https://github.com/root-project/root/pull/8717#issuecomment-885523144:217,Usability,simpl,simply,217,"> > @grasph please fork also [roottest](https://github.com/root-project/roottest) to prevent timeouts on the Windows build nodes. Thanks; > ; > Done. Do I need to create a branch with the same name ?. Thanks. And no, simply forking is good enough",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8717#issuecomment-885523144
https://github.com/root-project/root/pull/8719#issuecomment-886443983:15,Deployability,patch,patch,15,"Thanks for the patch, Advait!. My thoughts: If the function is added to ROOT as is, I'd implement it in the header and simply `return a==b`. The C/C++ cast from `bool` to `int` is effectively a Kronecker Delta. That said, I'm not sure if the function as such does in practice what users expect. Floating point values are hardly ever exactly equal, but usually one tests for them to be equal within +/ epsilon. I'll assign to @lmoneta.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8719#issuecomment-886443983
https://github.com/root-project/root/pull/8719#issuecomment-886443983:364,Testability,test,tests,364,"Thanks for the patch, Advait!. My thoughts: If the function is added to ROOT as is, I'd implement it in the header and simply `return a==b`. The C/C++ cast from `bool` to `int` is effectively a Kronecker Delta. That said, I'm not sure if the function as such does in practice what users expect. Floating point values are hardly ever exactly equal, but usually one tests for them to be equal within +/ epsilon. I'll assign to @lmoneta.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8719#issuecomment-886443983
https://github.com/root-project/root/pull/8719#issuecomment-886443983:119,Usability,simpl,simply,119,"Thanks for the patch, Advait!. My thoughts: If the function is added to ROOT as is, I'd implement it in the header and simply `return a==b`. The C/C++ cast from `bool` to `int` is effectively a Kronecker Delta. That said, I'm not sure if the function as such does in practice what users expect. Floating point values are hardly ever exactly equal, but usually one tests for them to be equal within +/ epsilon. I'll assign to @lmoneta.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8719#issuecomment-886443983
https://github.com/root-project/root/pull/8719#issuecomment-886482916:17,Deployability,patch,patch,17,"> Thanks for the patch, Advait!; > ; > My thoughts: If the function is added to ROOT as is, I'd implement it in the header and simply `return a==b`. The C/C++ cast from `bool` to `int` is effectively a Kronecker Delta.; > ; > That said, I'm not sure if the function as such does in practice what users expect. Floating point values are hardly ever exactly equal, but usually one tests for them to be equal within +/ epsilon.; > ; > I'll assign to @lmoneta. Ahh yes , I see what you mean.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8719#issuecomment-886482916
https://github.com/root-project/root/pull/8719#issuecomment-886482916:379,Testability,test,tests,379,"> Thanks for the patch, Advait!; > ; > My thoughts: If the function is added to ROOT as is, I'd implement it in the header and simply `return a==b`. The C/C++ cast from `bool` to `int` is effectively a Kronecker Delta.; > ; > That said, I'm not sure if the function as such does in practice what users expect. Floating point values are hardly ever exactly equal, but usually one tests for them to be equal within +/ epsilon.; > ; > I'll assign to @lmoneta. Ahh yes , I see what you mean.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8719#issuecomment-886482916
https://github.com/root-project/root/pull/8719#issuecomment-886482916:127,Usability,simpl,simply,127,"> Thanks for the patch, Advait!; > ; > My thoughts: If the function is added to ROOT as is, I'd implement it in the header and simply `return a==b`. The C/C++ cast from `bool` to `int` is effectively a Kronecker Delta.; > ; > That said, I'm not sure if the function as such does in practice what users expect. Floating point values are hardly ever exactly equal, but usually one tests for them to be equal within +/ epsilon.; > ; > I'll assign to @lmoneta. Ahh yes , I see what you mean.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8719#issuecomment-886482916
https://github.com/root-project/root/pull/8732#issuecomment-886601097:163,Usability,simpl,simple,163,"> I don't think it's good enough. Some header files have to be found by ROOT, and there are quite a few more packages than those two IIRC... Yeah, this wont be as simple as I thought it would be 😅 . I'll come up with a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8732#issuecomment-886601097
https://github.com/root-project/root/issues/8735#issuecomment-887360425:187,Modifiability,variab,variable,187,"One solution for a general derivative function could be to simply pass ""Function->Derivative(x)"" in the second TF1. But there still needs to be a way to differentiate with respect to any variable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8735#issuecomment-887360425
https://github.com/root-project/root/issues/8735#issuecomment-887360425:59,Usability,simpl,simply,59,"One solution for a general derivative function could be to simply pass ""Function->Derivative(x)"" in the second TF1. But there still needs to be a way to differentiate with respect to any variable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8735#issuecomment-887360425
https://github.com/root-project/root/pull/8740#issuecomment-895859603:9,Availability,failure,failures,9,"The test failures report the file created during the test does not exist, but this node ran the test fine https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/124359/testReport/projectroot.tree.tree/test/gtest_tree_tree_test_entrylist_enterrange/ . Probably using the same filename for multiple tests leads to a recreation/deletion of the file that is then not usable by the new test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8740#issuecomment-895859603
https://github.com/root-project/root/pull/8740#issuecomment-895859603:4,Testability,test,test,4,"The test failures report the file created during the test does not exist, but this node ran the test fine https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/124359/testReport/projectroot.tree.tree/test/gtest_tree_tree_test_entrylist_enterrange/ . Probably using the same filename for multiple tests leads to a recreation/deletion of the file that is then not usable by the new test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8740#issuecomment-895859603
https://github.com/root-project/root/pull/8740#issuecomment-895859603:53,Testability,test,test,53,"The test failures report the file created during the test does not exist, but this node ran the test fine https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/124359/testReport/projectroot.tree.tree/test/gtest_tree_tree_test_entrylist_enterrange/ . Probably using the same filename for multiple tests leads to a recreation/deletion of the file that is then not usable by the new test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8740#issuecomment-895859603
https://github.com/root-project/root/pull/8740#issuecomment-895859603:96,Testability,test,test,96,"The test failures report the file created during the test does not exist, but this node ran the test fine https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/124359/testReport/projectroot.tree.tree/test/gtest_tree_tree_test_entrylist_enterrange/ . Probably using the same filename for multiple tests leads to a recreation/deletion of the file that is then not usable by the new test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8740#issuecomment-895859603
https://github.com/root-project/root/pull/8740#issuecomment-895859603:186,Testability,test,testReport,186,"The test failures report the file created during the test does not exist, but this node ran the test fine https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/124359/testReport/projectroot.tree.tree/test/gtest_tree_tree_test_entrylist_enterrange/ . Probably using the same filename for multiple tests leads to a recreation/deletion of the file that is then not usable by the new test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8740#issuecomment-895859603
https://github.com/root-project/root/pull/8740#issuecomment-895859603:219,Testability,test,test,219,"The test failures report the file created during the test does not exist, but this node ran the test fine https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/124359/testReport/projectroot.tree.tree/test/gtest_tree_tree_test_entrylist_enterrange/ . Probably using the same filename for multiple tests leads to a recreation/deletion of the file that is then not usable by the new test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8740#issuecomment-895859603
https://github.com/root-project/root/pull/8740#issuecomment-895859603:315,Testability,test,tests,315,"The test failures report the file created during the test does not exist, but this node ran the test fine https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/124359/testReport/projectroot.tree.tree/test/gtest_tree_tree_test_entrylist_enterrange/ . Probably using the same filename for multiple tests leads to a recreation/deletion of the file that is then not usable by the new test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8740#issuecomment-895859603
https://github.com/root-project/root/pull/8740#issuecomment-895859603:399,Testability,test,test,399,"The test failures report the file created during the test does not exist, but this node ran the test fine https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/124359/testReport/projectroot.tree.tree/test/gtest_tree_tree_test_entrylist_enterrange/ . Probably using the same filename for multiple tests leads to a recreation/deletion of the file that is then not usable by the new test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8740#issuecomment-895859603
https://github.com/root-project/root/pull/8740#issuecomment-895859603:381,Usability,usab,usable,381,"The test failures report the file created during the test does not exist, but this node ran the test fine https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/124359/testReport/projectroot.tree.tree/test/gtest_tree_tree_test_entrylist_enterrange/ . Probably using the same filename for multiple tests leads to a recreation/deletion of the file that is then not usable by the new test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8740#issuecomment-895859603
https://github.com/root-project/root/issues/8742#issuecomment-887583333:224,Energy Efficiency,reduce,reduce,224,"> Is it possible to disable the Internet connection with an option during the cmake (and later build) phase?. Well, no, you can simply unplug (or disable) the internet connection. You can also use the `-Dminimal=ON` flag to reduce the number of packages",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-887583333
https://github.com/root-project/root/issues/8742#issuecomment-887583333:128,Usability,simpl,simply,128,"> Is it possible to disable the Internet connection with an option during the cmake (and later build) phase?. Well, no, you can simply unplug (or disable) the internet connection. You can also use the `-Dminimal=ON` flag to reduce the number of packages",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-887583333
https://github.com/root-project/root/issues/8742#issuecomment-887610171:143,Availability,error,errors,143,"> Well, no, you can simply unplug (or disable) the internet connection. Not really a good idea. I tried to run cmake for windows, but got some errors here as well, unfortunately stopping my attempts to build ROOT and especially to build the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-887610171
https://github.com/root-project/root/issues/8742#issuecomment-887610171:20,Usability,simpl,simply,20,"> Well, no, you can simply unplug (or disable) the internet connection. Not really a good idea. I tried to run cmake for windows, but got some errors here as well, unfortunately stopping my attempts to build ROOT and especially to build the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-887610171
https://github.com/root-project/root/issues/8742#issuecomment-888087500:8,Usability,simpl,simply,8,You can simply disable `imt` (`-Dimt=OFF`) and `builtin_tbb` (-D`builtin_tbb=OFF`).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-888087500
https://github.com/root-project/root/pull/8754#issuecomment-888908741:88,Testability,test,testing,88,"It's actually an _array_ ds, not the arrow ds :smile: it's a simple datasource used for testing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8754#issuecomment-888908741
https://github.com/root-project/root/pull/8754#issuecomment-888908741:61,Usability,simpl,simple,61,"It's actually an _array_ ds, not the arrow ds :smile: it's a simple datasource used for testing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8754#issuecomment-888908741
https://github.com/root-project/root/issues/8758#issuecomment-973032294:78,Usability,guid,guide,78,"Hello @guitargeek @couet , I'd like to contribute to this repository. Can you guide me in going about this issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8758#issuecomment-973032294
https://github.com/root-project/root/issues/8767#issuecomment-889666524:76,Deployability,release,release,76,"A workaround has been introduced in xrootd and will be part of xrootd-5.3.1 release. See above referenced issue in xrootd repo. Similar workaround has already been there for XrdCl::File destruction that is also happening after libXrdCl has been unloaded. @Axel-Naumann do you think it's worth introducing something like TROOT::CleanupLeftovers() and call it from TApplication::Terminate() just before calling gSystem->Exit()? The same function can still be called from ~TROOT for cases when TApplication is not instantiated ... and if it is called beforehand, the lists will simply be empty at ~TROOT time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8767#issuecomment-889666524
https://github.com/root-project/root/issues/8767#issuecomment-889666524:575,Usability,simpl,simply,575,"A workaround has been introduced in xrootd and will be part of xrootd-5.3.1 release. See above referenced issue in xrootd repo. Similar workaround has already been there for XrdCl::File destruction that is also happening after libXrdCl has been unloaded. @Axel-Naumann do you think it's worth introducing something like TROOT::CleanupLeftovers() and call it from TApplication::Terminate() just before calling gSystem->Exit()? The same function can still be called from ~TROOT for cases when TApplication is not instantiated ... and if it is called beforehand, the lists will simply be empty at ~TROOT time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8767#issuecomment-889666524
https://github.com/root-project/root/issues/8767#issuecomment-890403157:279,Safety,avoid,avoid,279,"Humm .. the files are ""Closed"" but not deleted .. the comment relevant comment from `TROOT.cxx:1086` is:; ```; // Now were done, clear the list but do not delete the objects as; // they have been moved to the list of closed objects and must be; // deleted from there in order to avoid a double delete from a; // use objects (on the interpreter stack).; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8767#issuecomment-890403157
https://github.com/root-project/root/issues/8767#issuecomment-890403157:129,Usability,clear,clear,129,"Humm .. the files are ""Closed"" but not deleted .. the comment relevant comment from `TROOT.cxx:1086` is:; ```; // Now were done, clear the list but do not delete the objects as; // they have been moved to the list of closed objects and must be; // deleted from there in order to avoid a double delete from a; // use objects (on the interpreter stack).; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8767#issuecomment-890403157
https://github.com/root-project/root/issues/8767#issuecomment-892009554:247,Performance,load,loaded,247,"""You"" was Axel and Philippe + whoever is doing TXNetNG these days :) ; Michal (main developer of XrdCl) and I assumed the crash happens because libXrdCl was already unloaded, see xrootd issue: xrootd/xrootd#1487. Now, you say the library is still loaded ... then it's probably more likely that destruction ob XrdCl global objects has already happened or was in progress (I just learned c++ is rather relaxed about how this is allowed to happen). @simonmichal ... what do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8767#issuecomment-892009554
https://github.com/root-project/root/issues/8767#issuecomment-892009554:378,Usability,learn,learned,378,"""You"" was Axel and Philippe + whoever is doing TXNetNG these days :) ; Michal (main developer of XrdCl) and I assumed the crash happens because libXrdCl was already unloaded, see xrootd issue: xrootd/xrootd#1487. Now, you say the library is still loaded ... then it's probably more likely that destruction ob XrdCl global objects has already happened or was in progress (I just learned c++ is rather relaxed about how this is allowed to happen). @simonmichal ... what do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8767#issuecomment-892009554
https://github.com/root-project/root/issues/8767#issuecomment-895029183:378,Performance,load,loaded,378,"Sorry guys I've been on holidays :-) good to see that this is solved :-). > ""You"" was Axel and Philippe + whoever is doing TXNetNG these days :); > Michal (main developer of XrdCl) and I assumed the crash happens because libXrdCl was already unloaded, see xrootd issue: [xrootd/xrootd#1487](https://github.com/xrootd/xrootd/issues/1487); > ; > Now, you say the library is still loaded ... then it's probably more likely that destruction ob XrdCl global objects has already happened or was in progress (I just learned c++ is rather relaxed about how this is allowed to happen).; > ; > @simonmichal ... what do you think?. we use a nifty counter to protect against static-destruction-order-fiasco so in principle if the `libXrdCl` has not been unloaded it should not crash",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8767#issuecomment-895029183
https://github.com/root-project/root/issues/8767#issuecomment-895029183:509,Usability,learn,learned,509,"Sorry guys I've been on holidays :-) good to see that this is solved :-). > ""You"" was Axel and Philippe + whoever is doing TXNetNG these days :); > Michal (main developer of XrdCl) and I assumed the crash happens because libXrdCl was already unloaded, see xrootd issue: [xrootd/xrootd#1487](https://github.com/xrootd/xrootd/issues/1487); > ; > Now, you say the library is still loaded ... then it's probably more likely that destruction ob XrdCl global objects has already happened or was in progress (I just learned c++ is rather relaxed about how this is allowed to happen).; > ; > @simonmichal ... what do you think?. we use a nifty counter to protect against static-destruction-order-fiasco so in principle if the `libXrdCl` has not been unloaded it should not crash",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8767#issuecomment-895029183
https://github.com/root-project/root/pull/8769#issuecomment-891218910:192,Testability,assert,assert,192,"Hi @hageboeck, thanks for the feedback!. Okay, I now took the time to hopefully get this range casting also work for the TCollections, so we don't have duplicate code. Actually, there was an `assert` also in the old [TRangeStaticCast implementation](https://github.com/root-project/root/blob/master/core/cont/inc/TCollection.h#L355)! So to stay consistent with TRangeStaticCast, I had to bring the `assert` in so that change request is also addressed now :) And we can also use the existing unit test in `testTypedIteration.cxx`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8769#issuecomment-891218910
https://github.com/root-project/root/pull/8769#issuecomment-891218910:399,Testability,assert,assert,399,"Hi @hageboeck, thanks for the feedback!. Okay, I now took the time to hopefully get this range casting also work for the TCollections, so we don't have duplicate code. Actually, there was an `assert` also in the old [TRangeStaticCast implementation](https://github.com/root-project/root/blob/master/core/cont/inc/TCollection.h#L355)! So to stay consistent with TRangeStaticCast, I had to bring the `assert` in so that change request is also addressed now :) And we can also use the existing unit test in `testTypedIteration.cxx`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8769#issuecomment-891218910
https://github.com/root-project/root/pull/8769#issuecomment-891218910:496,Testability,test,test,496,"Hi @hageboeck, thanks for the feedback!. Okay, I now took the time to hopefully get this range casting also work for the TCollections, so we don't have duplicate code. Actually, there was an `assert` also in the old [TRangeStaticCast implementation](https://github.com/root-project/root/blob/master/core/cont/inc/TCollection.h#L355)! So to stay consistent with TRangeStaticCast, I had to bring the `assert` in so that change request is also addressed now :) And we can also use the existing unit test in `testTypedIteration.cxx`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8769#issuecomment-891218910
https://github.com/root-project/root/pull/8769#issuecomment-891218910:505,Testability,test,testTypedIteration,505,"Hi @hageboeck, thanks for the feedback!. Okay, I now took the time to hopefully get this range casting also work for the TCollections, so we don't have duplicate code. Actually, there was an `assert` also in the old [TRangeStaticCast implementation](https://github.com/root-project/root/blob/master/core/cont/inc/TCollection.h#L355)! So to stay consistent with TRangeStaticCast, I had to bring the `assert` in so that change request is also addressed now :) And we can also use the existing unit test in `testTypedIteration.cxx`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8769#issuecomment-891218910
https://github.com/root-project/root/pull/8769#issuecomment-891218910:30,Usability,feedback,feedback,30,"Hi @hageboeck, thanks for the feedback!. Okay, I now took the time to hopefully get this range casting also work for the TCollections, so we don't have duplicate code. Actually, there was an `assert` also in the old [TRangeStaticCast implementation](https://github.com/root-project/root/blob/master/core/cont/inc/TCollection.h#L355)! So to stay consistent with TRangeStaticCast, I had to bring the `assert` in so that change request is also addressed now :) And we can also use the existing unit test in `testTypedIteration.cxx`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/8769#issuecomment-891218910
https://github.com/root-project/root/issues/8777#issuecomment-1029050145:45,Availability,error,errors,45,"Hii @guitargeek ! ; cmake output shows these errors while generating cache ; ```; `system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/msvcp140.dll'`; ```; ```; system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/vcruntime140.dll'; ```; ```; system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/concrt140.dll'; ```; and while building ; `error : 'LZMA/src/LZMA/lib/liblzma.lib', needed by 'bin/Core.dll'` . Sadly I don't have any other system apart from this one, but I will try to reach my university's Linux system once my exams get over (which ends in Feb 3rd week ) and hopefully by that time there will be relaxation in covid guidelines . Until then I guess I will try to build this in my windows. ; Thanks for replying to my queries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8777#issuecomment-1029050145
https://github.com/root-project/root/issues/8777#issuecomment-1029050145:499,Availability,error,error,499,"Hii @guitargeek ! ; cmake output shows these errors while generating cache ; ```; `system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/msvcp140.dll'`; ```; ```; system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/vcruntime140.dll'; ```; ```; system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/concrt140.dll'; ```; and while building ; `error : 'LZMA/src/LZMA/lib/liblzma.lib', needed by 'bin/Core.dll'` . Sadly I don't have any other system apart from this one, but I will try to reach my university's Linux system once my exams get over (which ends in Feb 3rd week ) and hopefully by that time there will be relaxation in covid guidelines . Until then I guess I will try to build this in my windows. ; Thanks for replying to my queries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8777#issuecomment-1029050145
https://github.com/root-project/root/issues/8777#issuecomment-1029050145:69,Performance,cache,cache,69,"Hii @guitargeek ! ; cmake output shows these errors while generating cache ; ```; `system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/msvcp140.dll'`; ```; ```; system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/vcruntime140.dll'; ```; ```; system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/concrt140.dll'; ```; and while building ; `error : 'LZMA/src/LZMA/lib/liblzma.lib', needed by 'bin/Core.dll'` . Sadly I don't have any other system apart from this one, but I will try to reach my university's Linux system once my exams get over (which ends in Feb 3rd week ) and hopefully by that time there will be relaxation in covid guidelines . Until then I guess I will try to build this in my windows. ; Thanks for replying to my queries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8777#issuecomment-1029050145
https://github.com/root-project/root/issues/8777#issuecomment-1029050145:792,Usability,guid,guidelines,792,"Hii @guitargeek ! ; cmake output shows these errors while generating cache ; ```; `system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/msvcp140.dll'`; ```; ```; system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/vcruntime140.dll'; ```; ```; system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/concrt140.dll'; ```; and while building ; `error : 'LZMA/src/LZMA/lib/liblzma.lib', needed by 'bin/Core.dll'` . Sadly I don't have any other system apart from this one, but I will try to reach my university's Linux system once my exams get over (which ends in Feb 3rd week ) and hopefully by that time there will be relaxation in covid guidelines . Until then I guess I will try to build this in my windows. ; Thanks for replying to my queries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8777#issuecomment-1029050145
https://github.com/root-project/root/issues/8778#issuecomment-948526134:33,Usability,simpl,simple,33,"Hi @Axel-Naumann ,. This is very simple, but seems to be unmerged and 6-24-04 still has this bug. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8778#issuecomment-948526134
https://github.com/root-project/root/issues/8781#issuecomment-901257232:86,Usability,guid,guide,86,"So what you need is `GENERATE_QHP` enabled in Doxyfile while generating the reference guide , right ? Have you tried it ? does the result doxygen produces is what you need ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-901257232
https://github.com/root-project/root/issues/8781#issuecomment-901747042:99,Usability,guid,guide,99,Sorry for my ignorance but this .qch file contains what ? I guess it cannot be the whole reference guide ? that would be a huge file ... Is it references to the guide on the web ? in that case I do not understand your statement in your first post when you said: _which is also great if you don't have internet connection_,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-901747042
https://github.com/root-project/root/issues/8781#issuecomment-901747042:161,Usability,guid,guide,161,Sorry for my ignorance but this .qch file contains what ? I guess it cannot be the whole reference guide ? that would be a huge file ... Is it references to the guide on the web ? in that case I do not understand your statement in your first post when you said: _which is also great if you don't have internet connection_,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-901747042
https://github.com/root-project/root/issues/8781#issuecomment-901748882:163,Usability,guid,guide,163,"It is a compressed qt help file, stored locally. Yes, it is potentially a very large file. (Could be enabled via cmake flag). It contains all the html info of the guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-901748882
https://github.com/root-project/root/issues/8781#issuecomment-901752118:43,Usability,guid,guide,43,We do not use cmake to build the reference guide. It is a separated Makefile.; Yes that file might be huge. How are managed the pictures ? they are somehow included in it ?; I will try what is suggested in your insa-lyon link,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-901752118
https://github.com/root-project/root/issues/8781#issuecomment-902760247:243,Usability,guid,guide,243,I have modified the following entries in Doxyfile:; ```; GENERATE_QHP = YES ; QCH_FILE = ROOT.qch ; QHP_NAMESPACE = ROOT.Project; QHG_LOCATION = /Users/couet/Qt/6.1.2/macos/bin/qhelpgenerator; ```; I regenerated the hist part of the reference guide on my local machine.; I was expecting the file `ROOT.qch` will appear somewhere . But it does not.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-902760247
https://github.com/root-project/root/issues/8781#issuecomment-910397486:1215,Availability,avail,available,1215,"Ok, I found the issue why qhelpgenerator is failing, it is due to:. ```; /opt/root_src/documentation/doxygen/mainpage.md:4: warning: found subsubsection command outside of subsection context!; /opt/root_src/documentation/doxygen/mainpage.md:10: warning: found subsubsection command outside of subsection context!; /opt/root_src/documentation/doxygen/mainpage.md:18: warning: found subsubsection command outside of subsection context!; ```. If I change in `mainpage.md` to:; ```; \mainpage %ROOT Reference Documentation. # Introduction; Welcome to %ROOT!. This is the reference manual of the ROOT software tooklit.; You can find in the [reference documentation page](https://root.cern/reference/) pointers to reference manuals for all %ROOT versions. ## Other types of documentation:. - [ROOT Primer](https://root.cern/primer/).; - [ROOT Introductory Course](https://github.com/root-project/training/tree/master/BasicCourse).; - A rich set of %ROOT [tutorials and code examples](https://root.cern/doc/master/group__Tutorials.html) are offered to developers to exercise specific functionality.; - A general [Manual](https://root.cern/manual/) is provided for a more in depth explanation of concepts and functionality available in the %ROOT system.; - A number of topical [User Guides and Manuals](https://root.cern/topical/) for various components of the system. ## Provide your feedback; If you have suggestions about how to improve this documentation, you can let us know:. - With a [PR](https://github.com/root-project/root); - On the [ROOT Forum](https://root-forum.cern.ch); - On [our tracker](https://github.com/root-project/root/issues); ```; then `ROOT.qch` is correctly generated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-910397486
https://github.com/root-project/root/issues/8781#issuecomment-910397486:1377,Usability,feedback,feedback,1377,"Ok, I found the issue why qhelpgenerator is failing, it is due to:. ```; /opt/root_src/documentation/doxygen/mainpage.md:4: warning: found subsubsection command outside of subsection context!; /opt/root_src/documentation/doxygen/mainpage.md:10: warning: found subsubsection command outside of subsection context!; /opt/root_src/documentation/doxygen/mainpage.md:18: warning: found subsubsection command outside of subsection context!; ```. If I change in `mainpage.md` to:; ```; \mainpage %ROOT Reference Documentation. # Introduction; Welcome to %ROOT!. This is the reference manual of the ROOT software tooklit.; You can find in the [reference documentation page](https://root.cern/reference/) pointers to reference manuals for all %ROOT versions. ## Other types of documentation:. - [ROOT Primer](https://root.cern/primer/).; - [ROOT Introductory Course](https://github.com/root-project/training/tree/master/BasicCourse).; - A rich set of %ROOT [tutorials and code examples](https://root.cern/doc/master/group__Tutorials.html) are offered to developers to exercise specific functionality.; - A general [Manual](https://root.cern/manual/) is provided for a more in depth explanation of concepts and functionality available in the %ROOT system.; - A number of topical [User Guides and Manuals](https://root.cern/topical/) for various components of the system. ## Provide your feedback; If you have suggestions about how to improve this documentation, you can let us know:. - With a [PR](https://github.com/root-project/root); - On the [ROOT Forum](https://root-forum.cern.ch); - On [our tracker](https://github.com/root-project/root/issues); ```; then `ROOT.qch` is correctly generated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-910397486
https://github.com/root-project/root/issues/8781#issuecomment-910444480:214,Usability,guid,guide,214,"> The `###` to `#` or `##`. It complains that there is a `subsubsection` with no parent 'section'. Ah ok ... but that looks ugly (I tried) the headers are far too big. I guess we never use ""#"" only in the root ref guide. So fixing the main page might be not enough . The same problem might show with other pages. For instance here: https://github.com/root-project/root/blob/8a63f78a3f910b3bb8b7758a5af06a80d09e567f/hist/hist/src/TH1.cxx#L139",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-910444480
https://github.com/root-project/root/issues/8781#issuecomment-1008843828:157,Usability,guid,guide,157,@ferdymercury thanks to let me know. See the bottom of https://root.cern/doc/master/ . 1.9.3 is already the doxygen version used to build the ROOT reference guide. So we can close this issue ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1008843828
https://github.com/root-project/root/issues/8781#issuecomment-1009987639:18,Deployability,install,install,18,"Ok, I did the apt install as you suggested (with the admin account) and I now get:; ```; $ qhelpgenerator; Missing input file name. Usage:. qhelpgenerator <file> [options]. -o <output-file> Generates a Qt compressed help; called <output-file> (*.qch) for the; Qt help project <file> (*.qhp).; Generates a Qt help collection; called <output-file> (*.qhc) for the; Qt help collection project <file> (*.qhcp).; If this option is not specified; a default name will be used; (*.qch for *.qhp and *.qhc for *.qhcp).; -c Checks whether all links in HTML files; point to files in this help project.; -s Suppresses status messages.; -v Displays the version of ; qhelpgenerator. ```; So I guess it is installed ... should I relaunch the ref guide build ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1009987639
https://github.com/root-project/root/issues/8781#issuecomment-1009987639:691,Deployability,install,installed,691,"Ok, I did the apt install as you suggested (with the admin account) and I now get:; ```; $ qhelpgenerator; Missing input file name. Usage:. qhelpgenerator <file> [options]. -o <output-file> Generates a Qt compressed help; called <output-file> (*.qch) for the; Qt help project <file> (*.qhp).; Generates a Qt help collection; called <output-file> (*.qhc) for the; Qt help collection project <file> (*.qhcp).; If this option is not specified; a default name will be used; (*.qch for *.qhp and *.qhc for *.qhcp).; -c Checks whether all links in HTML files; point to files in this help project.; -s Suppresses status messages.; -v Displays the version of ; qhelpgenerator. ```; So I guess it is installed ... should I relaunch the ref guide build ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1009987639
https://github.com/root-project/root/issues/8781#issuecomment-1009987639:613,Integrability,message,messages,613,"Ok, I did the apt install as you suggested (with the admin account) and I now get:; ```; $ qhelpgenerator; Missing input file name. Usage:. qhelpgenerator <file> [options]. -o <output-file> Generates a Qt compressed help; called <output-file> (*.qch) for the; Qt help project <file> (*.qhp).; Generates a Qt help collection; called <output-file> (*.qhc) for the; Qt help collection project <file> (*.qhcp).; If this option is not specified; a default name will be used; (*.qch for *.qhp and *.qhc for *.qhcp).; -c Checks whether all links in HTML files; point to files in this help project.; -s Suppresses status messages.; -v Displays the version of ; qhelpgenerator. ```; So I guess it is installed ... should I relaunch the ref guide build ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1009987639
https://github.com/root-project/root/issues/8781#issuecomment-1009987639:731,Usability,guid,guide,731,"Ok, I did the apt install as you suggested (with the admin account) and I now get:; ```; $ qhelpgenerator; Missing input file name. Usage:. qhelpgenerator <file> [options]. -o <output-file> Generates a Qt compressed help; called <output-file> (*.qch) for the; Qt help project <file> (*.qhp).; Generates a Qt help collection; called <output-file> (*.qhc) for the; Qt help collection project <file> (*.qhcp).; If this option is not specified; a default name will be used; (*.qch for *.qhp and *.qhc for *.qhcp).; -c Checks whether all links in HTML files; point to files in this help project.; -s Suppresses status messages.; -v Displays the version of ; qhelpgenerator. ```; So I guess it is installed ... should I relaunch the ref guide build ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1009987639
https://github.com/root-project/root/issues/8781#issuecomment-1009992846:15,Usability,guid,guide,15,Indeed the ref-guide build for 6.24 did not start yet (looking for an executor) ; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-v624/; so it should be fine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1009992846
