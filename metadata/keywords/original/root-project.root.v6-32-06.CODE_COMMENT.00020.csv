id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:35,Performance,load,load,35,"/// Represents any type of generic load or store.; /// G_LOAD, G_STORE, G_ZEXTLOAD, G_SEXTLOAD.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:23,Performance,load,loads,23,/// Represents indexed loads. These are different enough from regular loads; /// that they get their own class. Including them in GAnyLoad would probably; /// make a footgun for someone.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:70,Performance,load,loads,70,/// Represents indexed loads. These are different enough from regular loads; /// that they get their own class. Including them in GAnyLoad would probably; /// make a footgun for someone.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:39,Performance,load,loaded,39,/// Get the definition register of the loaded value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:53,Modifiability,extend,extending,53,"/// Represents any generic load, including sign/zero extending variants.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:27,Performance,load,load,27,"/// Represents any generic load, including sign/zero extending variants.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:39,Performance,load,loaded,39,/// Get the definition register of the loaded value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:122,Modifiability,variab,variable-sized,122,"/// The MatchTable is encoded as an array of bytes.; /// Thus, opcodes are expected to be <255.; ///; /// Operands can be variable-sized, their size is always after their name; /// in the docs, e.g. ""Foo(4)"" means that ""Foo"" takes 4 entries in the table,; /// so 4 bytes. ""Foo()""; ///; /// As a general rule of thumb:; /// - Instruction & Operand IDs are ULEB128; /// - LLT IDs are 1 byte; /// - Predicates and target opcodes, register and register class IDs are 2; /// bytes.; /// - Indexes into the table are 4 bytes.; /// - Inline constants are 8 bytes; ///; /// Design notes:; /// - Inst/Op IDs have to be LEB128 because some targets generate; /// extremely long patterns which need more than 255 temporaries.; /// We could just use 2 bytes everytime, but then some targets like; /// X86/AMDGPU that have no need for it will pay the price all the time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:267,Availability,failure,failure,267,/// Begin a try-block to attempt a match and jump to OnFail if it is; /// unsuccessful.; /// - OnFail(4) - The MatchTable entry at which to resume if the match fails.; ///; /// FIXME: This ought to take an argument indicating the number of try-blocks; /// to exit on failure. It's usually one but the last match attempt of; /// a block will need more. The (implemented) alternative is to tack a; /// GIM_Reject on the end of each try-block which is simpler but; /// requires an extra opcode and iteration in the interpreter on each; /// failed match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:140,Usability,resume,resume,140,/// Begin a try-block to attempt a match and jump to OnFail if it is; /// unsuccessful.; /// - OnFail(4) - The MatchTable entry at which to resume if the match fails.; ///; /// FIXME: This ought to take an argument indicating the number of try-blocks; /// to exit on failure. It's usually one but the last match attempt of; /// a block will need more. The (implemented) alternative is to tack a; /// GIM_Reject on the end of each try-block which is simpler but; /// requires an extra opcode and iteration in the interpreter on each; /// failed match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:449,Usability,simpl,simpler,449,/// Begin a try-block to attempt a match and jump to OnFail if it is; /// unsuccessful.; /// - OnFail(4) - The MatchTable entry at which to resume if the match fails.; ///; /// FIXME: This ought to take an argument indicating the number of try-blocks; /// to exit on failure. It's usually one but the last match attempt of; /// a block will need more. The (implemented) alternative is to tack a; /// GIM_Reject on the end of each try-block which is simpler but; /// requires an extra opcode and iteration in the interpreter on each; /// failed match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:240,Availability,failure,failure,240,/// Switch over the opcode on the specified instruction; /// - InsnID(ULEB128) - Instruction ID; /// - LowerBound(2) - numerically minimum opcode supported; /// - UpperBound(2) - numerically maximum + 1 opcode supported; /// - Default(4) - failure jump target; /// - JumpTable(4)... - (UpperBound - LowerBound) (at least 2) jump targets,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:285,Availability,failure,failure,285,/// Switch over the LLT on the specified instruction operand; /// - InsnID(ULEB128) - Instruction ID; /// - OpIdx(ULEB128) - Operand index; /// - LowerBound(2) - numerically minimum Type ID supported; /// - UpperBound(2) - numerically maximum + 1 Type ID supported; /// - Default(4) - failure jump target; /// - JumpTable(4)... - (UpperBound - LowerBound) (at least 2) jump targets,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:136,Testability,test,test,136,/// Check an immediate predicate on the specified instruction; /// - InsnID(ULEB128) - Instruction ID; /// - Pred(2) - The predicate to test,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:150,Testability,test,test,150,/// Check an immediate predicate on the specified instruction via an APInt.; /// - InsnID(ULEB128) - Instruction ID; /// - Pred(2) - The predicate to test,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:151,Testability,test,test,151,/// Check a floating point immediate predicate on the specified instruction.; /// - InsnID(ULEB128) - Instruction ID; /// - Pred(2) - The predicate to test,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:174,Testability,test,test,174,/// Check an immediate predicate on the specified instruction; /// - InsnID(ULEB128) - Instruction ID; /// - OpIdx(ULEB128) - Operand index; /// - Pred(2) - The predicate to test,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:33,Security,access,access,33,/// Check the size of the memory access for the given machine memory operand.; /// - InsnID(ULEB128) - Instruction ID; /// - MMOIdx(ULEB128) - MMO index; /// - Size(4) - The size in bytes of the memory access,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:202,Security,access,access,202,/// Check the size of the memory access for the given machine memory operand.; /// - InsnID(ULEB128) - Instruction ID; /// - MMOIdx(ULEB128) - MMO index; /// - Size(4) - The size in bytes of the memory access,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:42,Security,access,access,42,/// Check the address space of the memory access for the given machine memory; /// operand.; /// - InsnID(ULEB128) - Instruction ID; /// - MMOIdx(ULEB128) - MMO index; /// - NumAddrSpace(ULEB128) - Number of valid address spaces; /// - AddrSpaceN(ULEB128) - An allowed space of the memory access; /// - AddrSpaceN+1 ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:289,Security,access,access,289,/// Check the address space of the memory access for the given machine memory; /// operand.; /// - InsnID(ULEB128) - Instruction ID; /// - MMOIdx(ULEB128) - MMO index; /// - NumAddrSpace(ULEB128) - Number of valid address spaces; /// - AddrSpaceN(ULEB128) - An allowed space of the memory access; /// - AddrSpaceN+1 ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:46,Security,access,access,46,/// Check the minimum alignment of the memory access for the given machine; /// memory operand.; /// - InsnID(ULEB128) - Instruction ID; /// - MMOIdx(ULEB128) - MMO index; /// - MinAlign(ULEB128) - Minimum acceptable alignment,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:33,Security,access,access,33,/// Check the size of the memory access for the given machine memory operand; /// against the size of an operand.; /// - InsnID(ULEB128) - Instruction ID; /// - MMOIdx(ULEB128) - MMO index; /// - OpIdx(ULEB128) - The operand index to compare the MMO against,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:38,Safety,safe,safe,38,/// Check if the specified operand is safe to fold into the current; /// instruction.; /// - InsnID(ULEB128) - Instruction ID,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:222,Deployability,update,update,222,/// Calls a C++ function to perform an action when a match is complete.; /// The MatcherState is passed to the function to allow it to modify; /// instructions.; /// This is less constrained than a custom renderer and can update; /// instructions; /// in the state.; /// - FnID(2) - The function to call.; /// TODO: Remove this at some point when combiners aren't reliant on it. It's; /// a bit of a hack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:28,Performance,perform,perform,28,/// Calls a C++ function to perform an action when a match is complete.; /// The MatcherState is passed to the function to allow it to modify; /// instructions.; /// This is less constrained than a custom renderer and can update; /// instructions; /// in the state.; /// - FnID(2) - The function to call.; /// TODO: Remove this at some point when combiners aren't reliant on it. It's; /// a bit of a hack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:43,Modifiability,extend,extended,43,/// Render a G_CONSTANT operator as a sign-extended immediate.; /// - NewInsnID(ULEB128) - Instruction ID to modify; /// - OldInsnID(ULEB128) - Instruction ID to copy from; /// The operand index is implicitly 1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:44,Modifiability,extend,extended,44,/// Render a G_FCONSTANT operator as a sign-extended immediate.; /// - NewInsnID(ULEB128) - Instruction ID to modify; /// - OldInsnID(ULEB128) - Instruction ID to copy from; /// The operand index is implicitly 1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:17,Testability,log,logic,17,"/// Provides the logic to execute GlobalISel match tables, which are used by the; /// instruction selector and instruction combiners as their engine to match and; /// apply MIR patterns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h:55,Safety,avoid,avoids,55,// Convenience function to return a signed value. This avoids; // us forgetting to first cast to int8_t before casting to a; // wider signed int type.; // if we casted uint8 directly to a wider type we'd lose; // negative values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h:38,Availability,avail,available,38,// FIXME: Use std::invoke() when it's available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h:33,Modifiability,extend,extend,33,"// isOperandImmEqual() will sign-extend to 64-bits, so should we.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h:104,Testability,assert,assert,104,"// If the type is > 64 bits, it can't be a constant int, so we bail; // early because SignExtend64 will assert otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h:17,Testability,test,test,17,// TODO: Needs a test case once we have a pattern that uses this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:11,Integrability,wrap,wrapper,11,"/// Simple wrapper observer that takes several observers, and calls; /// each one for each event. If there are multiple observers (say CSE,; /// Legalizer, Combiner), it's sufficient to register this to the machine; /// function as the delegate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:4,Usability,Simpl,Simple,4,"/// Simple wrapper observer that takes several observers, and calls; /// each one for each event. If there are multiple observers (say CSE,; /// Legalizer, Combiner), it's sufficient to register this to the machine; /// function as the delegate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:33,Deployability,install,installer,33,/// A simple RAII based Delegate installer.; /// Use this in a scope to install a delegate to the MachineFunction and reset; /// it at the end of the scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:72,Deployability,install,install,72,/// A simple RAII based Delegate installer.; /// Use this in a scope to install a delegate to the MachineFunction and reset; /// it at the end of the scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:6,Usability,simpl,simple,6,/// A simple RAII based Delegate installer.; /// Use this in a scope to install a delegate to the MachineFunction and reset; /// it at the end of the scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:33,Deployability,install,installer,33,/// A simple RAII based Observer installer.; /// Use this in a scope to install the Observer to the MachineFunction and reset; /// it at the end of the scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:72,Deployability,install,install,72,/// A simple RAII based Observer installer.; /// Use this in a scope to install the Observer to the MachineFunction and reset; /// it at the end of the scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:6,Usability,simpl,simple,6,/// A simple RAII based Observer installer.; /// Use this in a scope to install the Observer to the MachineFunction and reset; /// it at the end of the scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:13,Deployability,install,install,13,/// Class to install both of the above.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:4,Performance,Cache,Cache,4,/// Cache maintained during a computeKnownBits request.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:25,Availability,Mask,Mask,25,/// \return true if 'V & Mask' is known to be zero in DemandedElts. We use; /// this predicate to simplify operations downstream.; /// Mask is known to be zero for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:118,Availability,down,downstream,118,/// \return true if 'V & Mask' is known to be zero in DemandedElts. We use; /// this predicate to simplify operations downstream.; /// Mask is known to be zero for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:135,Availability,Mask,Mask,135,/// \return true if 'V & Mask' is known to be zero in DemandedElts. We use; /// this predicate to simplify operations downstream.; /// Mask is known to be zero for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:98,Usability,simpl,simplify,98,/// \return true if 'V & Mask' is known to be zero in DemandedElts. We use; /// this predicate to simplify operations downstream.; /// Mask is known to be zero for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:110,Availability,down,downstream,110,/// \return true if the sign bit of Op is known to be zero. We use this; /// predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:90,Usability,simpl,simplify,90,/// \return true if the sign bit of Op is known to be zero. We use this; /// predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:173,Integrability,Wrap,WrapperObserver,173,"/// To use KnownBitsInfo analysis in a pass,; /// KnownBitsInfo &Info = getAnalysis<GISelKnownBitsInfoAnalysis>().get(MF);; /// Add to observer if the Info is caching.; /// WrapperObserver.addObserver(Info);; /// Eventually add other features such as caching/ser/deserializing; /// to MIR etc. Those implementations can derive from GISelKnownBits; /// and override computeKnownBitsImpl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h:339,Testability,assert,assert,339,"// Since we don't know ahead of time how many instructions we're going to add; // to the worklist, and migrating densemap's elements is quite expensive; // everytime we resize, only insert to the smallvector (typically during the; // initial phase of populating lists). Before the worklist can be used,; // finalize should be called. Also assert with NDEBUG if list is ever used; // without finalizing. Note that unlike insert, we won't check for duplicates; // - so the ideal place to use this is during the initial prepopulating phase; // of most passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h:67,Testability,assert,asserts,67,"// This should only be called when using deferred_insert.; // This asserts that the WorklistMap is empty, and then; // inserts all the elements in the Worklist into the map.; // It also asserts if there are any duplicate elements found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h:186,Testability,assert,asserts,186,"// This should only be called when using deferred_insert.; // This asserts that the WorklistMap is empty, and then; // inserts all the elements in the Worklist into the map.; // It also asserts if there are any duplicate elements found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h:55,Availability,down,down,55,"// Not in worklist.; // Don't bother moving everything down, just null out the slot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/InstructionSelect.h:410,Integrability,interface,interface,410,"//== llvm/CodeGen/GlobalISel/InstructionSelect.h -----------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file This file describes the interface of the MachineFunctionPass; /// responsible for selecting (possibly generic) machine instructions to; /// target-specific instructions.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/InstructionSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/InstructionSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:4,Integrability,Interface,Interface,4,/// Interface used to lower the everything related to calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:11,Testability,stub,stubbed,11,"// List of stubbed PHI instructions, for values and basic blocks to be filled; // in once all MachineBasicBlocks have been created.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:40,Energy Efficiency,allocate,allocated,40,/// Record of what frame index has been allocated to specified allocas for; /// this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:423,Deployability,Update,Update,423,"/// \name Methods for translating form LLVM IR to MachineInstr.; /// \see ::translate for general information on the translate methods.; /// @{; /// Translate \p Inst into its corresponding MachineInstr instruction(s).; /// Insert the newly translated instruction(s) right where the CurBuilder; /// is set.; ///; /// The general algorithm is:; /// 1. Look for a virtual register for each operand or; /// create one.; /// 2 Update the VMap accordingly.; /// 2.alt. For constant arguments, if they are compile time constants,; /// produce an immediate in the right operand and do not touch; /// ValToReg. Actually we will go with a virtual register for each; /// constants because it may be expensive to actually materialize the; /// constant. Moreover, if the constant spans on several instructions,; /// CSE may not catch them.; /// => Update ValToVReg and remember that we saw a constant in Constants.; /// We will materialize all the constants in finalize.; /// Note: we would need to do something so that we can recognize such operand; /// as constants.; /// 3. Create the generic instruction.; ///; /// \return true if the translation succeeded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:836,Deployability,Update,Update,836,"/// \name Methods for translating form LLVM IR to MachineInstr.; /// \see ::translate for general information on the translate methods.; /// @{; /// Translate \p Inst into its corresponding MachineInstr instruction(s).; /// Insert the newly translated instruction(s) right where the CurBuilder; /// is set.; ///; /// The general algorithm is:; /// 1. Look for a virtual register for each operand or; /// create one.; /// 2 Update the VMap accordingly.; /// 2.alt. For constant arguments, if they are compile time constants,; /// produce an immediate in the right operand and do not touch; /// ValToReg. Actually we will go with a virtual register for each; /// constants because it may be expensive to actually materialize the; /// constant. Moreover, if the constant spans on several instructions,; /// CSE may not catch them.; /// => Update ValToVReg and remember that we saw a constant in Constants.; /// We will materialize all the constants in finalize.; /// Note: we would need to do something so that we can recognize such operand; /// as constants.; /// 3. Create the generic instruction.; ///; /// \return true if the translation succeeded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:81,Performance,perform,performing,81,/// Materialize \p C into virtual-register \p Reg. The generic instructions; /// performing this materialization will be inserted into the entry block of; /// the function.; ///; /// \return true if the materialization succeeded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:22,Performance,load,load,22,/// Translate an LLVM load instruction into generic IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:129,Usability,simpl,simple,129,"/// Helper function for translateSimpleIntrinsic.; /// \return The generic opcode for \p IntrinsicID if \p IntrinsicID is a; /// simple intrinsic (ceil, fabs, etc.). Otherwise, returns; /// Intrinsic::not_intrinsic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:80,Performance,optimiz,optimized,80,/// Used during condbr translation to find trees of conditions that can be; /// optimized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:39,Testability,test,test,39,"/// Generate code to produces one ""bit test"" for a given BitTestCase \p B.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:3,Testability,Stub,Stubs,3,// Stubs to keep the compiler happy while we implement the rest of the; // translation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:64,Availability,error,errors,64,/// Current target configuration. Controls how the pass handles errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:19,Deployability,configurat,configuration,19,/// Current target configuration. Controls how the pass handles errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:19,Modifiability,config,configuration,19,/// Current target configuration. Controls how the pass handles errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:56,Availability,failure,failures,56,/// Current optimization remark emitter. Used to report failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:12,Performance,optimiz,optimization,12,/// Current optimization remark emitter. Used to report failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:52,Performance,optimiz,optimizations,52,// True when either the Target Machine specifies no optimizations or the; // function has the optnone attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:24,Performance,optimiz,optimization,24,/// Switch analysis and optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:144,Integrability,depend,depending,144,"// * Insert all the code needed to materialize the constants; // at the proper place. E.g., Entry block or dominator block; // of each constant depending on how fancy we want to be.; // * Clear the different maps.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:188,Usability,Clear,Clear,188,"// * Insert all the code needed to materialize the constants; // at the proper place. E.g., Entry block or dominator block; // of each constant depending on how fancy we want to be.; // * Clear the different maps.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:108,Availability,error,errors,108,"// Processing steps done per block. E.g. emitting jump tables, stack; // protectors etc. Returns true if no errors, false if there was a problem; // that caused an abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:164,Safety,abort,abort,164,"// Processing steps done per block. E.g. emitting jump tables, stack; // protectors etc. Returns true if no errors, false if there was a problem; // that caused an abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:16,Availability,failure,failure,16,/// Codegen the failure basic block for a stack protector check.; ///; /// A failure stack protector machine basic block consists simply of a call to; /// __stack_chk_fail().; ///; /// For a high level explanation of how this fits into the stack protector; /// generation see the comment on the declaration of class; /// StackProtectorDescriptor.; ///; /// \return true if there were no problems.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:77,Availability,failure,failure,77,/// Codegen the failure basic block for a stack protector check.; ///; /// A failure stack protector machine basic block consists simply of a call to; /// __stack_chk_fail().; ///; /// For a high level explanation of how this fits into the stack protector; /// generation see the comment on the declaration of class; /// StackProtectorDescriptor.; ///; /// \return true if there were no problems.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:130,Usability,simpl,simply,130,/// Codegen the failure basic block for a stack protector check.; ///; /// A failure stack protector machine basic block consists simply of a call to; /// __stack_chk_fail().; ///; /// For a high level explanation of how this fits into the stack protector; /// generation see the comment on the declaration of class; /// StackProtectorDescriptor.; ///; /// \return true if there were no problems.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate some vregs and offsets in the VMap. Then populate just the; /// offsets while leaving the vregs empty.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:175,Security,access,accessed,175,/// Get the alignment of the given memory operation instruction. This will; /// either be the explicitly specified value or the ABI-required alignment for; /// the type being accessed (according to the Module's DataLayout).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:253,Usability,simpl,simply,253,"/// Record \p NewPred as a Machine predecessor to `Edge.second`, corresponding; /// to `Edge.first` at the IR level. This is used when IRTranslation creates; /// multiple MachineBasicBlocks for a given IR block and the CFG is no longer; /// represented simply by the IR-level CFG.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h:518,Energy Efficiency,efficient,efficiently,518,"//===- llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Interface for Targets to specify which operations they can successfully; /// select and how the others should be expanded most efficiently.; /// This implementation has been deprecated for a long time but it still in use; /// in a few places.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h:391,Integrability,Interface,Interface,391,"//===- llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Interface for Targets to specify which operations they can successfully; /// select and how the others should be expanded most efficiently.; /// This implementation has been deprecated for a long time but it still in use; /// in a few places.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h:182,Performance,perform,perform,182,"/// The (vector) operation should be implemented by widening the input; /// vector and ignoring the lanes added by doing so. For example <2 x i8> is; /// rarely legal, but you might perform an <8 x i8> and then only look at; /// the first two results.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h:4,Performance,Perform,Perform,4,"/// Perform the operation on a different, but equivalently sized type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h:55,Usability,simpl,simpler,55,/// The operation itself must be expressed in terms of simpler actions on; /// this target. E.g. a SREM replaced by an SDIV and subtraction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h:79,Availability,error,error,79,/// This operation is completely unsupported on the target. A programming; /// error has occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h:252,Performance,perform,performed,252,"/// Determine what action should be taken to legalize the given generic; /// instruction opcode, type-index and type. Requires computeTables to have; /// been called.; ///; /// \returns a pair consisting of the kind of legalization that should be; /// performed and the destination type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:479,Modifiability,EXTEND,EXTENDS,479,"//===-- llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h -----*- C++ -*-//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This file contains some helper functions which try to cleanup artifacts; // such as G_TRUNCs/G_[ZSA]EXTENDS that were created during legalization to make; // the types match. This file also contains some combines of merges that happens; // at the end of the legalization.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:46,Availability,mask,mask,46,"// zext(trunc x) - > and (aext/copy/trunc x), mask; // zext(sext x) -> and (sext x), mask",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:85,Availability,mask,mask,85,"// zext(trunc x) - > and (aext/copy/trunc x), mask; // zext(sext x) -> and (sext x), mask",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:19,Availability,mask,mask,19,"// Elide G_AND and mask constant if possible.; // The G_AND would also be removed by the post-legalize redundant_and; // combine, but in this very common case, eliding early and regardless of; // OptLevel results in significant compile-time and O0 code-size; // improvements. Inserting unnecessary instructions between boolean defs; // and uses hinders a lot of folding during ISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:29,Usability,simpl,simply,29,// If the sizes match we can simply try to replace the register,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:71,Integrability,depend,depending,71,/// Try to replace DstReg with SrcReg or build a COPY instruction; /// depending on the register constraints.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:111,Integrability,rout,routines,111,/// This class provides utilities for finding source registers of specific; /// bit ranges in an artifact. The routines can look through the source; /// registers if they're other artifacts to try to find a non-artifact source; /// of a value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:45,Usability,simpl,simply,45,"// If the instruction has a single def, then simply delegate the search.; // For unmerge however with multiple defs, we need to compute the offset; // into the source of the unmerge.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:265,Performance,perform,performs,265,"// Recognize UnmergeSrc that can be unmerged to DstTy directly.; // Types have to be either both vector or both non-vector types.; // Merge-like opcodes are combined one at the time. First one creates new; // unmerge, following should use the same unmerge (builder performs CSE).; //; // %0:_(EltTy), %1, %2, %3 = G_UNMERGE_VALUES %UnmergeSrc:_(UnmergeSrcTy); // %Dst:_(DstTy) = G_merge_like_opcode %0:_(EltTy), %1; // %AnotherDst:_(DstTy) = G_merge_like_opcode %2:_(EltTy), %3; //; // %Dst:_(DstTy), %AnotherDst = G_UNMERGE_VALUES %UnmergeSrc",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:89,Safety,avoid,avoid,89,"// This might be a recursive call, and we might have DeadInsts already; // populated. To avoid bad things happening later with multiple vreg defs; // etc, process the dead instructions now if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:203,Availability,redundant,redundant,203,"/// Mark MI as dead. If a def of one of MI's operands, DefMI, would also be; /// dead due to MI being killed, then mark DefMI as dead too.; /// Some of the combines (extends(trunc)), try to walk through redundant; /// copies in between the extends and the truncs, and this attempts to collect; /// the in between copies if they're dead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:166,Modifiability,extend,extends,166,"/// Mark MI as dead. If a def of one of MI's operands, DefMI, would also be; /// dead due to MI being killed, then mark DefMI as dead too.; /// Some of the combines (extends(trunc)), try to walk through redundant; /// copies in between the extends and the truncs, and this attempts to collect; /// the in between copies if they're dead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:240,Modifiability,extend,extends,240,"/// Mark MI as dead. If a def of one of MI's operands, DefMI, would also be; /// dead due to MI being killed, then mark DefMI as dead too.; /// Some of the combines (extends(trunc)), try to walk through redundant; /// copies in between the extends and the truncs, and this attempts to collect; /// the in between copies if they're dead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:203,Safety,redund,redundant,203,"/// Mark MI as dead. If a def of one of MI's operands, DefMI, would also be; /// dead due to MI being killed, then mark DefMI as dead too.; /// Some of the combines (extends(trunc)), try to walk through redundant; /// copies in between the extends and the truncs, and this attempts to collect; /// the in between copies if they're dead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:4,Security,Expose,Expose,4,/// Expose MIRBuilder so clients can set their own RecordInsertInstruction; /// functions,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:17,Availability,error,error,17,/// Some kind of error has occurred and we could not legalize this; /// instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:4,Security,Expose,Expose,4,/// Expose LegalizerInfo so the clients can re-use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:178,Performance,perform,performed,178,"/// Replace \p MI by a sequence of legal instructions that can implement the; /// same operation. Note that this means \p MI may be deleted, so any iterator; /// steps should be performed before calling this function. \p Helper should; /// be initialized to the MachineFunction containing \p MI.; ///; /// Considered as an opaque blob, the legal code will use and define the same; /// registers as \p MI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:31,Performance,perform,performing,31,"/// Legalize an instruction by performing the operation on a wider scalar type; /// (for example a 16-bit addition can be safely performed at 32-bits; /// precision, ignoring the unused bits).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:129,Performance,perform,performed,129,"/// Legalize an instruction by performing the operation on a wider scalar type; /// (for example a 16-bit addition can be safely performed at 32-bits; /// precision, ignoring the unused bits).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:122,Safety,safe,safely,122,"/// Legalize an instruction by performing the operation on a wider scalar type; /// (for example a 16-bit addition can be safely performed at 32-bits; /// precision, ignoring the unused bits).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:49,Usability,simpl,simpler,49,"/// Legalize an instruction by splitting it into simpler parts, hopefully; /// understood by the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:89,Modifiability,extend,extending,89,"/// Legalize a single operand \p OpIdx of the machine instruction \p MI as a; /// Use by extending the operand's type to \p WideTy using the specified \p; /// ExtOpcode for the extension instruction, and replacing the vreg of the; /// operand in place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:89,Modifiability,extend,extending,89,"/// Legalize a single operand \p OpIdx of the machine instruction \p MI as a; /// Def by extending the operand's type to \p WideTy and truncating it back; /// with the \p TruncOpcode, and replacing the vreg of the operand in place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:160,Modifiability,extend,extending,160,"// Legalize a single operand \p OpIdx of the machine instruction \p MI as a; // Def by truncating the operand's type to \p NarrowTy, replacing in place and; // extending back with \p ExtOpcode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:89,Performance,perform,performing,89,"/// Legalize a single operand \p OpIdx of the machine instruction \p MI as a; /// Def by performing it with additional vector elements and extracting the; /// result elements, and replacing the vreg of the operand in place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:63,Performance,Perform,Perform,63,"/// Produce a merge of values in \p VRegs to define \p DstReg. Perform a merge; /// from the least common multiple type, and convert as appropriate to \p; /// DstReg.; ///; /// \p VRegs should each have type \p GCDTy. This type should be greatest; /// common divisor type of \p DstReg, \p NarrowTy, and an undetermined source; /// type.; ///; /// \p NarrowTy is the desired result merge source type. If the source value; /// needs to be widened to evenly cover \p DstReg, inserts high bits; /// corresponding to the extension opcode \p PadStrategy.; ///; /// \p VRegs will be cleared, and the result \p NarrowTy register pieces; /// will replace it. Returns The complete LCMTy that \p VRegs will cover when; /// merged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:576,Usability,clear,cleared,576,"/// Produce a merge of values in \p VRegs to define \p DstReg. Perform a merge; /// from the least common multiple type, and convert as appropriate to \p; /// DstReg.; ///; /// \p VRegs should each have type \p GCDTy. This type should be greatest; /// common divisor type of \p DstReg, \p NarrowTy, and an undetermined source; /// type.; ///; /// \p NarrowTy is the desired result merge source type. If the source value; /// needs to be widened to evenly cover \p DstReg, inserts high bits; /// corresponding to the extension opcode \p PadStrategy.; ///; /// \p VRegs will be cleared, and the result \p NarrowTy register pieces; /// will replace it. Returns The complete LCMTy that \p VRegs will cover when; /// merged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:4,Performance,Perform,Perform,4,/// Perform generic multiplication of values held in multiple registers.; /// Generated instructions use only types NarrowTy and i1.; /// Destination can be same or two times size of the source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:251,Safety,avoid,avoid,251,/// Handles most opcodes. Split \p MI into same instruction on sub-vectors or; /// scalars with \p NumElts elements (1 for scalar). Supports uneven splits:; /// there can be leftover sub-vector with fewer then \p NumElts or a leftover; /// scalar. To avoid this use moreElements first and set MI number of elements; /// to multiple of \p NumElts. Non-vector operands that should be used on all; /// sub-instructions without split are listed in \p NonVecOpIndices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:4,Performance,Perform,Perform,4,/// Perform Bitcast legalize action on G_EXTRACT_VECTOR_ELT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:4,Performance,Perform,Perform,4,/// Perform Bitcast legalize action on G_INSERT_VECTOR_ELT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:518,Energy Efficiency,efficient,efficiently,518,"//===- llvm/CodeGen/GlobalISel/LegalizerInfo.h ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Interface for Targets to specify which operations they can successfully; /// select and how the others should be expanded most efficiently.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:391,Integrability,Interface,Interface,391,"//===- llvm/CodeGen/GlobalISel/LegalizerInfo.h ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Interface for Targets to specify which operations they can successfully; /// select and how the others should be expanded most efficiently.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:400,Safety,avoid,avoided,400,/// The (vector) operation should be implemented by splitting it into; /// sub-vectors where the operation is legal. For example a <8 x s64> add; /// might be implemented as 4 separate <2 x s64> adds. There can be a leftover; /// if there are not enough elements for last sub-vector e.g. <7 x s64> add; /// will be implemented as 3 separate <2 x s64> adds and one s64 add. Leftover; /// types can be avoided by doing MoreElements first.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:182,Performance,perform,perform,182,"/// The (vector) operation should be implemented by widening the input; /// vector and ignoring the lanes added by doing so. For example <2 x i8> is; /// rarely legal, but you might perform an <8 x i8> and then only look at; /// the first two results.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:4,Performance,Perform,Perform,4,"/// Perform the operation on a different, but equivalently sized type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:55,Usability,simpl,simpler,55,/// The operation itself must be expressed in terms of simpler actions on; /// this target. E.g. a SREM replaced by an SDIV and subtraction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:79,Availability,error,error,79,/// This operation is completely unsupported on the target. A programming; /// error has occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:33,Security,access,access,33,/// \returns true if this memory access is legal with for the access described; /// by \p Other (The alignment is sufficient for the size and result type).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:62,Security,access,access,62,/// \returns true if this memory access is legal with for the access described; /// by \p Other (The alignment is sufficient for the size and result type).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:70,Energy Efficiency,power,power,70,/// True iff the specified type index is a scalar whose size is not a power of; /// 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:93,Energy Efficiency,power,power,93,/// True iff the specified type index is a scalar or vector whose element size; /// is not a power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:86,Energy Efficiency,power,power,86,/// True iff the specified MMO index has a size (rounded to bytes) that is not a; /// power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:116,Energy Efficiency,power,power,116,"/// True iff the specified MMO index has a size that is not an even byte size,; /// or that even byte size is not a power of 2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:84,Energy Efficiency,power,power,84,/// True iff the specified type index is a vector whose element count is not a; /// power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:91,Energy Efficiency,power,power,91,/// Widen the scalar type or vector element type for the given type index to the; /// next power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:71,Energy Efficiency,power,power,71,/// Add more elements to the type for the given type index to the next power of; /// 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:4,Testability,Test,Test,4,/// Test whether the LegalityQuery matches.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:86,Performance,perform,perform,86,"/// If bit I is set, this rule set contains a rule that may handle (predicate; /// or perform an action upon (or both)) the type index I. The uncertainty; /// comes from free-form rules executing user-provided lambda functions. We; /// conservatively assume such rules do the right thing and cover all type; /// indices. The bitset is intentionally 1 bit wider than it absolutely needs; /// to be to distinguish such cases from the cases where all type indices are; /// individually handled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:81,Energy Efficiency,power,power,81,"/// Lower a memory operation if the memory size, rounded to bytes, is not a; /// power of 2. For example, this will not trigger for s1 or s7, but will for; /// s24.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:70,Energy Efficiency,power,power,70,"/// Lower a memory operation if the memory access size is not a round power of; /// 2 byte size. This is stricter than lowerIfMemSizeNotPow2, and more likely; /// what you want (e.g. this will lower s1, s7 and s24).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:43,Security,access,access,43,"/// Lower a memory operation if the memory access size is not a round power of; /// 2 byte size. This is stricter than lowerIfMemSizeNotPow2, and more likely; /// what you want (e.g. this will lower s1, s7 and s24).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:33,Energy Efficiency,power,power,33,/// Widen the scalar to the next power of two that is at least MinSize.; /// No effect if the type is not a scalar or is a power of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:123,Energy Efficiency,power,power,123,/// Widen the scalar to the next power of two that is at least MinSize.; /// No effect if the type is not a scalar or is a power of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:56,Energy Efficiency,power,power,56,/// Widen the scalar or vector element type to the next power of two that is; /// at least MinSize. No effect if the scalar size is a power of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:134,Energy Efficiency,power,power,134,/// Widen the scalar or vector element type to the next power of two that is; /// at least MinSize. No effect if the scalar size is a power of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:108,Integrability,depend,depends,108,"/// Conditionally limit the maximum size of the scalar.; /// For example, when the maximum size of one type depends on the size of; /// another such as extracting N bits from an M bit container.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:54,Energy Efficiency,power,power,54,/// Add more elements to the vector to reach the next power of two.; /// No effect if the type is not a vector or the element count is a power of; /// two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:137,Energy Efficiency,power,power,137,/// Add more elements to the vector to reach the next power of two.; /// No effect if the type is not a vector or the element count is a power of; /// two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:208,Performance,perform,perform,208,/// Express \p EltTy vectors strictly using vectors with \p NumElts elements; /// (or scalars when \p NumElts equals 1).; /// First pad with undef elements to nearest larger multiple of \p NumElts.; /// Then perform split with all sub-instructions having the same type.; /// Using clampMaxNumElements (non-strict) can result in leftover instruction; /// with different type (fewer elements then \p NumElts or scalar).; /// No effect if the type is not a vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:4,Performance,Perform,Perform,4,/// Perform simple self-diagnostic and assert if there is anything obviously; /// wrong with the actions set up.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:39,Testability,assert,assert,39,/// Perform simple self-diagnostic and assert if there is anything obviously; /// wrong with the actions set up.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:12,Usability,simpl,simple,12,/// Perform simple self-diagnostic and assert if there is anything obviously; /// wrong with the actions set up.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:127,Availability,error,error,127,/// Get the action definition builder for the given opcode. Use this to define; /// the action definitions.; ///; /// It is an error to request an opcode that has already been requested by the; /// multiple-opcode variant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:666,Availability,error,error,666,"/// Get the action definition builder for the given set of opcodes. Use this; /// to define the action definitions for multiple opcodes at once. The first; /// opcode given will be considered the representative opcode and will hold; /// the definitions whereas the other opcodes will be configured to refer to; /// the representative opcode. This lowers memory requirements and very; /// slightly improves performance.; ///; /// It would be very easy to introduce unexpected side-effects as a result of; /// this aliasing if it were permitted to request different but intersecting; /// sets of opcodes but that is difficult to keep track of. It is therefore an; /// error to request the same opcode twice using this API, to request an; /// opcode that already has definitions, or to use the single-opcode API on an; /// opcode that has already been requested by this API.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:287,Modifiability,config,configured,287,"/// Get the action definition builder for the given set of opcodes. Use this; /// to define the action definitions for multiple opcodes at once. The first; /// opcode given will be considered the representative opcode and will hold; /// the definitions whereas the other opcodes will be configured to refer to; /// the representative opcode. This lowers memory requirements and very; /// slightly improves performance.; ///; /// It would be very easy to introduce unexpected side-effects as a result of; /// this aliasing if it were permitted to request different but intersecting; /// sets of opcodes but that is difficult to keep track of. It is therefore an; /// error to request the same opcode twice using this API, to request an; /// opcode that already has definitions, or to use the single-opcode API on an; /// opcode that has already been requested by this API.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:406,Performance,perform,performance,406,"/// Get the action definition builder for the given set of opcodes. Use this; /// to define the action definitions for multiple opcodes at once. The first; /// opcode given will be considered the representative opcode and will hold; /// the definitions whereas the other opcodes will be configured to refer to; /// the representative opcode. This lowers memory requirements and very; /// slightly improves performance.; ///; /// It would be very easy to introduce unexpected side-effects as a result of; /// this aliasing if it were permitted to request different but intersecting; /// sets of opcodes but that is difficult to keep track of. It is therefore an; /// error to request the same opcode twice using this API, to request an; /// opcode that already has definitions, or to use the single-opcode API on an; /// opcode that has already been requested by this API.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:196,Performance,perform,perform,196,/// Determine what action should be taken to legalize the described; /// instruction. Requires computeTables to have been called.; ///; /// \returns a description of the next legalization step to perform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:156,Performance,perform,perform,156,/// Determine what action should be taken to legalize the given generic; /// instruction.; ///; /// \returns a description of the next legalization step to perform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:56,Performance,perform,performed,56,"/// Return the opcode (SEXT/ZEXT/ANYEXT) that should be performed while; /// widening a constant of type SmallTy which targets can override.; /// For eg, the DAG does (SmallTy.isByteSized() ? G_SEXT : G_ZEXT) which; /// will be the default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:29,Performance,Load,LoadStoreOpt,29,"//== llvm/CodeGen/GlobalISel/LoadStoreOpt.h - LoadStoreOpt -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// This is an optimization pass for GlobalISel generic memory operations.; /// Specifically, it focuses on merging stores and loads to consecutive; /// addresses.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:46,Performance,Load,LoadStoreOpt,46,"//== llvm/CodeGen/GlobalISel/LoadStoreOpt.h - LoadStoreOpt -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// This is an optimization pass for GlobalISel generic memory operations.; /// Specifically, it focuses on merging stores and loads to consecutive; /// addresses.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:395,Performance,optimiz,optimization,395,"//== llvm/CodeGen/GlobalISel/LoadStoreOpt.h - LoadStoreOpt -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// This is an optimization pass for GlobalISel generic memory operations.; /// Specifically, it focuses on merging stores and loads to consecutive; /// addresses.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:507,Performance,load,loads,507,"//== llvm/CodeGen/GlobalISel/LoadStoreOpt.h - LoadStoreOpt -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// This is an optimization pass for GlobalISel generic memory operations.; /// Specifically, it focuses on merging stores and loads to consecutive; /// addresses.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:36,Security,access,access,36,/// Compute whether or not a memory access at \p MI1 aliases with an access at; /// \p MI2 \returns true if either alias/no-alias is known. Sets \p IsAlias; /// accordingly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:69,Security,access,access,69,/// Compute whether or not a memory access at \p MI1 aliases with an access at; /// \p MI2 \returns true if either alias/no-alias is known. Sets \p IsAlias; /// accordingly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:195,Performance,load,load,195,"/// Returns true if the instruction \p MI may alias \p Other.; /// This function uses multiple strategies to detect aliasing, whereas; /// aliasIsKnownForLoadStore just looks at the addresses of load/stores and is; /// tries to reason about base/index/offsets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:109,Safety,detect,detect,109,"/// Returns true if the instruction \p MI may alias \p Other.; /// This function uses multiple strategies to detect aliasing, whereas; /// aliasIsKnownForLoadStore just looks at the addresses of load/stores and is; /// tries to reason about base/index/offsets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:25,Usability,simpl,simple,25,"// Our algorithm is very simple at the moment. We assume that in instruction; // order stores are writing to incremeneting consecutive addresses. So when; // we walk the block in reverse order, the next eligible store must write to; // an offset one store width lower than CurrentLowestOffset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:134,Safety,safe,safe,134,"// A vector of MachineInstr/unsigned pairs to denote potential aliases that; // need to be checked before the candidate is considered safe to merge. The; // unsigned value is an index into the Stores vector. The indexed store is; // the highest-indexed store that has already been checked to not have an; // alias with the instruction. We record this so we don't have to repeat; // alias checks that have been already done, only those with stores added; // after the potential alias is recorded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:181,Safety,predict,predict,181,/// Merges the stores in the given vector into a wide store.; /// \p returns true if at least some of the stores were merged.; /// This may decide not to merge stores if heuristics predict it will not be; /// worth it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:4,Performance,Perform,Perform,4,/// Perform a merge of all the stores in \p Stores into a single store.; /// Erases the old stores from the block when finished.; /// \returns true if merging was done. It may fail to perform a merge if; /// there are issues with materializing legal wide values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:184,Performance,perform,perform,184,/// Perform a merge of all the stores in \p Stores into a single store.; /// Erases the old stores from the block when finished.; /// \returns true if merging was done. It may fail to perform a merge if; /// there are issues with materializing legal wide values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:79,Performance,optimiz,optimization,79,/// Initialize some target-specific data structures for the store merging; /// optimization. \p AddrSpace indicates which address space to use when; /// probing the legalizer info for legal stores.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Localizer.h:414,Integrability,interface,interface,414,"//== llvm/CodeGen/GlobalISel/Localizer.h - Localizer -------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file This file describes the interface of the Localizer pass.; /// This pass moves/duplicates constant-like instructions close to their uses.; /// Its primarily goal is to workaround the deficiencies of the fast register; /// allocator.; /// With GlobalISel constants are all materialized in the entry block of; /// a function. However, the fast allocator cannot rematerialize constants and; /// has a lot more live-ranges to deal with and will most likely end up; /// spilling a lot.; /// By pushing the constants close to their use, we only create small; /// live-ranges.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Localizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Localizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Localizer.h:86,Deployability,update,updates,86,/// MRI contains all the register class/bank information that this; /// pass uses and updates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Localizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Localizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h:416,Availability,checkpoint,checkpoints,416,"//===----- llvm/CodeGen/GlobalISel/LostDebugLocObserver.h -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Tracks DebugLocs between checkpoints and verifies that they are transferred.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h:359,Availability,checkpoint,checkpoint,359,"/// Call this to indicate that it's a good point to assess whether locations; /// have been lost. Typically this will be when a logical change has been; /// completed such as the caller has finished replacing some instructions with; /// alternatives. When CheckDebugLocs is true, the locations will be checked; /// to see if any have been lost since the last checkpoint. When; /// CheckDebugLocs is false, it will just reset ready for the next checkpoint; /// without checking anything. This can be helpful to limit the detection to; /// easy-to-fix portions of an algorithm before allowing more difficult ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h:444,Availability,checkpoint,checkpoint,444,"/// Call this to indicate that it's a good point to assess whether locations; /// have been lost. Typically this will be when a logical change has been; /// completed such as the caller has finished replacing some instructions with; /// alternatives. When CheckDebugLocs is true, the locations will be checked; /// to see if any have been lost since the last checkpoint. When; /// CheckDebugLocs is false, it will just reset ready for the next checkpoint; /// without checking anything. This can be helpful to limit the detection to; /// easy-to-fix portions of an algorithm before allowing more difficult ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h:520,Safety,detect,detection,520,"/// Call this to indicate that it's a good point to assess whether locations; /// have been lost. Typically this will be when a logical change has been; /// completed such as the caller has finished replacing some instructions with; /// alternatives. When CheckDebugLocs is true, the locations will be checked; /// to see if any have been lost since the last checkpoint. When; /// CheckDebugLocs is false, it will just reset ready for the next checkpoint; /// without checking anything. This can be helpful to limit the detection to; /// easy-to-fix portions of an algorithm before allowing more difficult ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h:128,Testability,log,logical,128,"/// Call this to indicate that it's a good point to assess whether locations; /// have been lost. Typically this will be when a logical change has been; /// completed such as the caller has finished replacing some instructions with; /// alternatives. When CheckDebugLocs is true, the locations will be checked; /// to see if any have been lost since the last checkpoint. When; /// CheckDebugLocs is false, it will just reset ready for the next checkpoint; /// without checking anything. This can be helpful to limit the detection to; /// easy-to-fix portions of an algorithm before allowing more difficult ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:24,Security,access,access,24,/// Information used to access the description of the opcodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:46,Modifiability,variab,variables,46,/// Use of registers held in unsigned integer variables (or more rarely signed; /// integers) is no longer permitted to avoid ambiguity with upcoming support; /// for immediates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:120,Safety,avoid,avoid,120,/// Use of registers held in unsigned integer variables (or more rarely signed; /// integers) is no longer permitted to avoid ambiguity with upcoming support; /// for immediates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:93,Modifiability,Variab,Variable,93,/// Build and insert a DBG_VALUE instruction expressing the fact that the; /// associated \p Variable lives in \p Reg (suitably modified by \p Expr).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:93,Modifiability,Variab,Variable,93,/// Build and insert a DBG_VALUE instruction expressing the fact that the; /// associated \p Variable lives in memory at \p Reg (suitably modified by \p; /// Expr).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:93,Modifiability,Variab,Variable,93,/// Build and insert a DBG_VALUE instruction expressing the fact that the; /// associated \p Variable lives in the stack slot specified by \p FI; /// (suitably modified by \p Expr).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:65,Modifiability,Variab,Variable,65,/// Build and insert a DBG_VALUE instructions specifying that \p Variable is; /// given by \p C (suitably modified by \p Expr).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:159,Energy Efficiency,allocate,allocated,159,"/// Build and insert \p Res = G_DYN_STACKALLOC \p Size, \p Align; ///; /// G_DYN_STACKALLOC does a dynamic stack allocation and writes the address of; /// the allocated memory into \p Res.; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with pointer type.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:532,Safety,detect,detect,532,"/// Materialize and insert \p Res = G_PTR_ADD \p Op0, (G_CONSTANT \p Value); ///; /// G_PTR_ADD adds \p Value bytes to the pointer specified by \p Op0,; /// storing the resulting pointer in \p Res. If \p Value is zero then no; /// G_PTR_ADD or G_CONSTANT will be created and \pre Op0 will be assigned to; /// \p Res.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Op0 must be a generic virtual register with pointer type.; /// \pre \p ValueTy must be a scalar type.; /// \pre \p Res must be 0. This is to detect confusion between; /// materializePtrAdd() and buildPtrAdd().; /// \post \p Res will either be a new generic virtual register of the same; /// type as \p Op0 or \p Op0 itself.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:230,Availability,down,down,230,"/// Build and insert \p Res = G_PTRMASK \p Op0, \p G_CONSTANT (1 << NumBits) - 1; ///; /// This clears the low bits of a pointer operand without destroying its; /// pointer properties. This has the effect of rounding the address *down* to; /// a specified alignment in bits.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res and \p Op0 must be generic virtual registers with pointer; /// type.; /// \pre \p NumBits must be an integer representing the number of low bits to; /// be cleared in \p Op0.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:96,Usability,clear,clears,96,"/// Build and insert \p Res = G_PTRMASK \p Op0, \p G_CONSTANT (1 << NumBits) - 1; ///; /// This clears the low bits of a pointer operand without destroying its; /// pointer properties. This has the effect of rounding the address *down* to; /// a specified alignment in bits.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res and \p Op0 must be generic virtual registers with pointer; /// type.; /// \pre \p NumBits must be an integer representing the number of low bits to; /// be cleared in \p Op0.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:509,Usability,clear,cleared,509,"/// Build and insert \p Res = G_PTRMASK \p Op0, \p G_CONSTANT (1 << NumBits) - 1; ///; /// This clears the low bits of a pointer operand without destroying its; /// pointer properties. This has the effect of rounding the address *down* to; /// a specified alignment in bits.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res and \p Op0 must be generic virtual registers with pointer; /// type.; /// \pre \p NumBits must be an integer representing the number of low bits to; /// be cleared in \p Op0.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:293,Modifiability,extend,extended,293,"/// Build and insert \p Res = G_ANYEXT \p Op0; ///; /// G_ANYEXT produces a register of the specified width, with bits 0 to; /// sizeof(\p Ty) * 8 set to \p Op. The remaining bits are unspecified; /// (i.e. this is neither zero nor sign-extension). For a vector register,; /// each element is extended individually.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be smaller than \p Res; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:247,Modifiability,extend,extended,247,"/// Build and insert \p Res = G_SEXT \p Op; ///; /// G_SEXT produces a register of the specified width, with bits 0 to; /// sizeof(\p Ty) * 8 set to \p Op. The remaining bits are duplicated from the; /// high bit of \p Op (i.e. 2s-complement sign extended).; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be smaller than \p Res; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:97,Integrability,depend,depending,97,"// Build and insert \p Res = G_ANYEXT \p Op, \p Res = G_SEXT \p Op, or \p Res; // = G_ZEXT \p Op depending on how the target wants to extend boolean values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:134,Modifiability,extend,extend,134,"// Build and insert \p Res = G_ANYEXT \p Op, \p Res = G_SEXT \p Op, or \p Res; // = G_ZEXT \p Op depending on how the target wants to extend boolean values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:91,Integrability,depend,depending,91,"// Build and insert \p Res = G_SEXT_INREG \p Op, 1 or \p Res = G_AND \p Op, 1,; // or COPY depending on how the target wants to extend boolean values, using; // the original register size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:128,Modifiability,extend,extend,128,"// Build and insert \p Res = G_SEXT_INREG \p Op, 1 or \p Res = G_AND \p Op, 1,; // or COPY depending on how the target wants to extend boolean values, using; // the original register size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:226,Modifiability,extend,extended,226,"/// Build and insert \p Res = G_ZEXT \p Op; ///; /// G_ZEXT produces a register of the specified width, with bits 0 to; /// sizeof(\p Ty) * 8 set to \p Op. The remaining bits are 0. For a vector; /// register, each element is extended individually.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be smaller than \p Res; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:96,Integrability,depend,depending,96,"/// Build and insert \p Res = G_SEXT \p Op, \p Res = G_TRUNC \p Op, or; /// \p Res = COPY \p Op depending on the differing sizes of \p Res and \p Op.; /// ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be a generic virtual register with scalar or vector type.; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:96,Integrability,depend,depending,96,"/// Build and insert \p Res = G_ZEXT \p Op, \p Res = G_TRUNC \p Op, or; /// \p Res = COPY \p Op depending on the differing sizes of \p Res and \p Op.; /// ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be a generic virtual register with scalar or vector type.; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:97,Integrability,depend,depending,97,"// Build and insert \p Res = G_ANYEXT \p Op, \p Res = G_TRUNC \p Op, or; /// \p Res = COPY \p Op depending on the differing sizes of \p Res and \p Op.; /// ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be a generic virtual register with scalar or vector type.; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:93,Integrability,depend,depending,93,"/// Build and insert \p Res = \p ExtOpc, \p Res = G_TRUNC \p; /// Op, or \p Res = COPY \p Op depending on the differing sizes of \p Res and; /// \p Op.; /// ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be a generic virtual register with scalar or vector type.; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:432,Integrability,depend,depend,432,"/// Build and insert G_BRCOND \p Tst, \p Dest; ///; /// G_BRCOND is a conditional branch to \p Dest.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Tst must be a generic virtual register with scalar; /// type. At the beginning of legalization, this will be a single; /// bit (s1). Targets with interesting flags registers may change; /// this. For a wider type, whether the branch is taken must only; /// depend on bit 0 (for now).; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:147,Modifiability,extend,extended,147,/// Build and insert \p Res = G_CONSTANT \p Val; ///; /// G_CONSTANT is an integer constant with the specified size and value. \p; /// Val will be extended or truncated to the size of \p Reg.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or pointer; /// type.; ///; /// \return The newly created instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:57,Performance,Load,Loads,57,"/// Build and insert `Res = G_LOAD Addr, MMO`.; ///; /// Loads the value stored at \p Addr. Puts the result in \p Res.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register.; /// \pre \p Addr must be a generic virtual register with pointer type.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:59,Performance,Load,Loads,59,"/// Build and insert `Res = <opcode> Addr, MMO`.; ///; /// Loads the value stored at \p Addr. Puts the result in \p Res.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register.; /// \pre \p Addr must be a generic virtual register with pointer type.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:23,Performance,load,load,23,/// Helper to create a load from a constant offset given a base address. Load; /// the type of \p Dst from \p Offset from the given base address and memory; /// operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:73,Performance,Load,Load,73,/// Helper to create a load from a constant offset given a base address. Load; /// the type of \p Dst from \p Offset from the given base address and memory; /// operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:774,Integrability,depend,depend,774,"/// Build and insert \p Res = G_MERGE_VALUES \p Op0, ...; /// or \p Res = G_BUILD_VECTOR \p Op0, ...; /// or \p Res = G_CONCAT_VECTORS \p Op0, ...; ///; /// G_MERGE_VALUES combines the input elements contiguously into a larger; /// register. It is used when the destination register is not a vector.; /// G_BUILD_VECTOR combines scalar inputs into a vector register.; /// G_CONCAT_VECTORS combines vector inputs into a vector register.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre The entire register \p Res (and no more) must be covered by the input; /// registers.; /// \pre The type of all \p Ops registers must be identical.; ///; /// \return a MachineInstrBuilder for the newly created instruction. The; /// opcode of the new instruction will depend on the types of both; /// the destination and the sources.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:68,Availability,Mask,Mask,68,"/// Build and insert \p Res = G_SHUFFLE_VECTOR \p Src1, \p Src2, \p Mask; ///; /// \pre setBasicBlock or setMI must have been called.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:56,Availability,Mask,Mask,56,"/// Build and insert a \p Res = G_IS_FPCLASS \p Src, \p Mask",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:595,Availability,failure,failure,595,"/// Build and insert `OldValRes<def>, SuccessRes<def> =; /// G_ATOMIC_CMPXCHG_WITH_SUCCESS Addr, CmpVal, NewVal, MMO`.; ///; /// Atomically replace the value at \p Addr with \p NewVal if it is currently; /// \p CmpVal otherwise leaves it unchanged. Puts the original value from \p; /// Addr in \p Res, along with an s1 indicating whether it was replaced.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p OldValRes must be a generic virtual register of scalar type.; /// \pre \p SuccessRes must be a generic virtual register of scalar type. It; /// will be assigned 0 on failure and 1 on success.; /// \pre \p Addr must be a generic virtual register with pointer type.; /// \pre \p OldValRes, \p CmpVal, and \p NewVal must be generic virtual; /// registers of the same type.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:110,Deployability,update,update,110,"/// Build and insert `OldValRes<def> = G_ATOMICRMW_<Opcode> Addr, Val, MMO`.; ///; /// Atomically read-modify-update the value at \p Addr with \p Val. Puts the; /// original value from \p Addr in \p OldValRes. The modification is; /// determined by the opcode.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p OldValRes must be a generic virtual register.; /// \pre \p Addr must be a generic virtual register with pointer type.; /// \pre \p OldValRes, and \p Val must be generic virtual registers of the; /// same type.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:64,Performance,Cache,CacheType,64,"/// Build and insert G_PREFETCH \p Addr, \p RW, \p Locality, \p CacheType",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MIPatternMatch.h:9,Modifiability,Extend,Extend,9,// TODO: Extend for N use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MIPatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MIPatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:419,Integrability,interface,interface,419,"//=- llvm/CodeGen/GlobalISel/RegBankSelect.h - Reg Bank Selector --*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file describes the interface of the MachineFunctionPass; /// responsible for assigning the generic virtual registers to register bank.; ///; /// By default, the reg bank selector relies on local decisions to; /// assign the register bank. In other words, it looks at one instruction; /// at a time to decide where the operand of that instruction should live.; ///; /// At higher optimization level, we could imagine that the reg bank selector; /// would use more global analysis and do crazier thing like duplicating; /// instructions and so on. This is future work.; ///; /// For now, the pass uses a greedy algorithm to decide where the operand; /// of an instruction should live. It asks the target which banks may be; /// used for each operand of the instruction and what is the cost. Then,; /// it chooses the solution which minimize the cost of the instruction plus; /// the cost of any move that may be needed to the values into the right; /// register bank.; /// In other words, the cost for an instruction on a register bank RegBank; /// is: Cost of I on RegBank plus the sum of the cost for bringing the; /// input operands from their current register bank to RegBank.; /// Thus, the following formula:; /// cost(I, RegBank) = cost(I.Opcode, RegBank) +; /// sum(for each arg in I.arguments: costCrossCopy(arg.RegBank, RegBank)); ///; /// E.g., Let say we are assigning the register bank for the instruction; /// defining v2.; /// v0(A_REGBANK) = ...; /// v1(A_REGBANK) = ...; /// v2 = G_ADD i32 v0, v1 <-- MI; ///; /// The target may say it can generate G_ADD i32 on register bank A and B; /",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:779,Performance,optimiz,optimization,779,"//=- llvm/CodeGen/GlobalISel/RegBankSelect.h - Reg Bank Selector --*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file describes the interface of the MachineFunctionPass; /// responsible for assigning the generic virtual registers to register bank.; ///; /// By default, the reg bank selector relies on local decisions to; /// assign the register bank. In other words, it looks at one instruction; /// at a time to decide where the operand of that instruction should live.; ///; /// At higher optimization level, we could imagine that the reg bank selector; /// would use more global analysis and do crazier thing like duplicating; /// instructions and so on. This is future work.; ///; /// For now, the pass uses a greedy algorithm to decide where the operand; /// of an instruction should live. It asks the target which banks may be; /// used for each operand of the instruction and what is the cost. Then,; /// it chooses the solution which minimize the cost of the instruction plus; /// the cost of any move that may be needed to the values into the right; /// register bank.; /// In other words, the cost for an instruction on a register bank RegBank; /// is: Cost of I on RegBank plus the sum of the cost for bringing the; /// input operands from their current register bank to RegBank.; /// Thus, the following formula:; /// cost(I, RegBank) = cost(I.Opcode, RegBank) +; /// sum(for each arg in I.arguments: costCrossCopy(arg.RegBank, RegBank)); ///; /// E.g., Let say we are assigning the register bank for the instruction; /// defining v2.; /// v0(A_REGBANK) = ...; /// v1(A_REGBANK) = ...; /// v2 = G_ADD i32 v0, v1 <-- MI; ///; /// The target may say it can generate G_ADD i32 on register bank A and B; /",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:80,Deployability,pipeline,pipeline,80,"/// This pass implements the reg bank selector pass used in the GlobalISel; /// pipeline. At the end of this pass, all register operands have been assigned",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:238,Testability,log,logically,238,"/// Abstract class used to represent an insertion point in a CFG.; /// This class records an insertion point and materializes it on; /// demand.; /// It allows to reason about the frequency of this insertion point,; /// without having to logically materialize it (e.g., on an edge),; /// before we actually need to insert something.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:59,Security,access,access,59,"/// Frequency of the insertion point.; /// \p P is used to access the various analysis that will help to; /// get that information, like MachineBlockFrequencyInfo. If \p P; /// does not contain enough to return the actual frequency,; /// this returns 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:17,Deployability,update,update,17,/// P is used to update the analysis passes as applicable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:48,Availability,repair,repairing,48,/// Struct used to represent the placement of a repairing point for; /// a given operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:35,Availability,repair,repairing,35,/// Define the kind of action this repairing needs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:15,Availability,repair,repair,15,"/// Nothing to repair, just drop this action.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:14,Availability,repair,repairing,14,/// Mark this repairing placement as impossible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:12,Availability,repair,repairing,12,/// Kind of repairing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:38,Availability,repair,repaired,38,/// Index of the operand that will be repaired.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:28,Availability,repair,repair,28,/// Insertion point for the repair code.; /// The repairing code needs to happen just before these points.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:50,Availability,repair,repairing,50,/// Insertion point for the repair code.; /// The repairing code needs to happen just before these points.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:38,Deployability,update,update,38,/// Some insertion points may need to update the liveness and such.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:13,Availability,repair,repairing,13,/// Create a repairing placement for the \p OpIdx-th operand of; /// \p MI. \p TRI is used to make some checks on the register aliases; /// if the machine operand is a physical register. \p P is used to; /// to update liveness information and such when materializing the; /// points.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:211,Deployability,update,update,211,/// Create a repairing placement for the \p OpIdx-th operand of; /// \p MI. \p TRI is used to make some checks on the register aliases; /// if the machine operand is a physical register. \p P is used to; /// to update liveness information and such when materializing the; /// points.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:18,Security,Access,Accessors,18,/// @}; /// \name Accessors related to the insertion points.; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:36,Availability,repair,repairing,36,"/// @}; /// Change the type of this repairing placement to \p NewKind.; /// It is not possible to switch a repairing placement to the; /// RepairingKind::Insert. There is no fundamental problem with; /// that, but no uses as well, so do not support it for now.; ///; /// \pre NewKind != RepairingKind::Insert; /// \post getKind() == NewKind",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:107,Availability,repair,repairing,107,"/// @}; /// Change the type of this repairing placement to \p NewKind.; /// It is not possible to switch a repairing placement to the; /// RepairingKind::Insert. There is no fundamental problem with; /// that, but no uses as well, so do not support it for now.; ///; /// \pre NewKind != RepairingKind::Insert; /// \post getKind() == NewKind",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:139,Availability,Repair,RepairingKind,139,"/// @}; /// Change the type of this repairing placement to \p NewKind.; /// It is not possible to switch a repairing placement to the; /// RepairingKind::Insert. There is no fundamental problem with; /// that, but no uses as well, so do not support it for now.; ///; /// \pre NewKind != RepairingKind::Insert; /// \post getKind() == NewKind",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:287,Availability,Repair,RepairingKind,287,"/// @}; /// Change the type of this repairing placement to \p NewKind.; /// It is not possible to switch a repairing placement to the; /// RepairingKind::Insert. There is no fundamental problem with; /// that, but no uses as well, so do not support it for now.; ///; /// \pre NewKind != RepairingKind::Insert; /// \post getKind() == NewKind",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:128,Availability,repair,repairing,128,"/// Helper class used to represent the cost for mapping an instruction.; /// When mapping an instruction, we may introduce some repairing code.; /// In most cases, the repairing code is local to the instruction,; /// thus, we can omit the basic block frequency from the cost.; /// However, some alternatives may produce non-local cost, e.g., when; /// repairing a phi, and thus we then need to scale the local cost; /// to the non-local cost. This class does this for us.; /// \note: We could simply always scale the cost. The problem is that; /// there are higher chances that we saturate the cost easier and end; /// up having the same cost for actually different alternatives.; /// Another option would be to use APInt everywhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:168,Availability,repair,repairing,168,"/// Helper class used to represent the cost for mapping an instruction.; /// When mapping an instruction, we may introduce some repairing code.; /// In most cases, the repairing code is local to the instruction,; /// thus, we can omit the basic block frequency from the cost.; /// However, some alternatives may produce non-local cost, e.g., when; /// repairing a phi, and thus we then need to scale the local cost; /// to the non-local cost. This class does this for us.; /// \note: We could simply always scale the cost. The problem is that; /// there are higher chances that we saturate the cost easier and end; /// up having the same cost for actually different alternatives.; /// Another option would be to use APInt everywhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:352,Availability,repair,repairing,352,"/// Helper class used to represent the cost for mapping an instruction.; /// When mapping an instruction, we may introduce some repairing code.; /// In most cases, the repairing code is local to the instruction,; /// thus, we can omit the basic block frequency from the cost.; /// However, some alternatives may produce non-local cost, e.g., when; /// repairing a phi, and thus we then need to scale the local cost; /// to the non-local cost. This class does this for us.; /// \note: We could simply always scale the cost. The problem is that; /// there are higher chances that we saturate the cost easier and end; /// up having the same cost for actually different alternatives.; /// Another option would be to use APInt everywhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:493,Usability,simpl,simply,493,"/// Helper class used to represent the cost for mapping an instruction.; /// When mapping an instruction, we may introduce some repairing code.; /// In most cases, the repairing code is local to the instruction,; /// thus, we can omit the basic block frequency from the cost.; /// However, some alternatives may produce non-local cost, e.g., when; /// repairing a phi, and thus we then need to scale the local cost; /// to the non-local cost. This class does this for us.; /// \note: We could simply always scale the cost. The problem is that; /// there are higher chances that we saturate the cost easier and end; /// up having the same cost for actually different alternatives.; /// Another option would be to use APInt everywhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:4,Integrability,Interface,Interface,4,/// Interface to the target lowering info related; /// to register banks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:86,Deployability,update,updates,86,/// MRI contains all the register class/bank information that this; /// pass uses and updates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:56,Availability,failure,failures,56,/// Current optimization remark emitter. Used to report failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:12,Performance,optimiz,optimization,12,/// Current optimization remark emitter. Used to report failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:4,Performance,Optimiz,Optimization,4,/// Optimization mode of the pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:64,Availability,error,errors,64,/// Current target configuration. Controls how the pass handles errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:19,Deployability,configurat,configuration,19,/// Current target configuration. Controls how the pass handles errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:19,Modifiability,config,configuration,19,/// Current target configuration. Controls how the pass handles errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:178,Availability,repair,repairing,178,"/// Check if \p Reg is already assigned what is described by \p ValMapping.; /// \p OnlyAssign == true means that \p Reg just needs to be assigned a; /// register bank. I.e., no repairing is necessary to have the; /// assignment match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:11,Availability,repair,repairing,11,"/// Insert repairing code for \p Reg as specified by \p ValMapping.; /// The repairing placement is specified by \p RepairPt.; /// \p NewVRegs contains all the registers required to remap \p Reg.; /// In other words, the number of registers in NewVRegs must be equal; /// to ValMapping.BreakDown.size().; ///; /// The transformation could be sketched as:; /// \code; /// ... = op Reg; /// \endcode; /// Becomes; /// \code; /// <NewRegs> = COPY or extract Reg; /// ... = op Reg; /// \endcode; ///; /// and; /// \code; /// Reg = op ...; /// \endcode; /// Becomes; /// \code; /// Reg = op ...; /// Reg = COPY or build_sequence <NewRegs>; /// \endcode; ///; /// \pre NewVRegs.size() == ValMapping.BreakDown.size(); ///; /// \note The caller is supposed to do the rewriting of op if need be.; /// I.e., Reg = op ... => <NewRegs> = NewOp ...; ///; /// \return True if the repairing worked, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:77,Availability,repair,repairing,77,"/// Insert repairing code for \p Reg as specified by \p ValMapping.; /// The repairing placement is specified by \p RepairPt.; /// \p NewVRegs contains all the registers required to remap \p Reg.; /// In other words, the number of registers in NewVRegs must be equal; /// to ValMapping.BreakDown.size().; ///; /// The transformation could be sketched as:; /// \code; /// ... = op Reg; /// \endcode; /// Becomes; /// \code; /// <NewRegs> = COPY or extract Reg; /// ... = op Reg; /// \endcode; ///; /// and; /// \code; /// Reg = op ...; /// \endcode; /// Becomes; /// \code; /// Reg = op ...; /// Reg = COPY or build_sequence <NewRegs>; /// \endcode; ///; /// \pre NewVRegs.size() == ValMapping.BreakDown.size(); ///; /// \note The caller is supposed to do the rewriting of op if need be.; /// I.e., Reg = op ... => <NewRegs> = NewOp ...; ///; /// \return True if the repairing worked, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:116,Availability,Repair,RepairPt,116,"/// Insert repairing code for \p Reg as specified by \p ValMapping.; /// The repairing placement is specified by \p RepairPt.; /// \p NewVRegs contains all the registers required to remap \p Reg.; /// In other words, the number of registers in NewVRegs must be equal; /// to ValMapping.BreakDown.size().; ///; /// The transformation could be sketched as:; /// \code; /// ... = op Reg; /// \endcode; /// Becomes; /// \code; /// <NewRegs> = COPY or extract Reg; /// ... = op Reg; /// \endcode; ///; /// and; /// \code; /// Reg = op ...; /// \endcode; /// Becomes; /// \code; /// Reg = op ...; /// Reg = COPY or build_sequence <NewRegs>; /// \endcode; ///; /// \pre NewVRegs.size() == ValMapping.BreakDown.size(); ///; /// \note The caller is supposed to do the rewriting of op if need be.; /// I.e., Reg = op ... => <NewRegs> = NewOp ...; ///; /// \return True if the repairing worked, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:866,Availability,repair,repairing,866,"/// Insert repairing code for \p Reg as specified by \p ValMapping.; /// The repairing placement is specified by \p RepairPt.; /// \p NewVRegs contains all the registers required to remap \p Reg.; /// In other words, the number of registers in NewVRegs must be equal; /// to ValMapping.BreakDown.size().; ///; /// The transformation could be sketched as:; /// \code; /// ... = op Reg; /// \endcode; /// Becomes; /// \code; /// <NewRegs> = COPY or extract Reg; /// ... = op Reg; /// \endcode; ///; /// and; /// \code; /// Reg = op ...; /// \endcode; /// Becomes; /// \code; /// Reg = op ...; /// Reg = COPY or build_sequence <NewRegs>; /// \endcode; ///; /// \pre NewVRegs.size() == ValMapping.BreakDown.size(); ///; /// \note The caller is supposed to do the rewriting of op if need be.; /// I.e., Reg = op ... => <NewRegs> = NewOp ...; ///; /// \return True if the repairing worked, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:80,Availability,repair,repairing,80,"/// Compute the cost of mapping \p MI with \p InstrMapping and; /// compute the repairing placement for such mapping in \p; /// RepairPts.; /// \p BestCost is used to specify when the cost becomes too high; /// and thus it is not worth computing the RepairPts. Moreover if; /// \p BestCost == nullptr, the mapping cost is actually not; /// computed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:128,Availability,Repair,RepairPts,128,"/// Compute the cost of mapping \p MI with \p InstrMapping and; /// compute the repairing placement for such mapping in \p; /// RepairPts.; /// \p BestCost is used to specify when the cost becomes too high; /// and thus it is not worth computing the RepairPts. Moreover if; /// \p BestCost == nullptr, the mapping cost is actually not; /// computed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:250,Availability,Repair,RepairPts,250,"/// Compute the cost of mapping \p MI with \p InstrMapping and; /// compute the repairing placement for such mapping in \p; /// RepairPts.; /// \p BestCost is used to specify when the cost becomes too high; /// and thus it is not worth computing the RepairPts. Moreover if; /// \p BestCost == nullptr, the mapping cost is actually not; /// computed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:12,Availability,Repair,RepairPt,12,"/// When \p RepairPt involves splitting to repair \p MO for the; /// given \p ValMapping, try to change the way we repair such that; /// the splitting is not required anymore.; ///; /// \pre \p RepairPt.hasSplit(); /// \pre \p MO == MO.getParent()->getOperand(\p RepairPt.getOpIdx()); /// \pre \p ValMapping is the mapping of \p MO for MO.getParent(); /// that implied \p RepairPt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:43,Availability,repair,repair,43,"/// When \p RepairPt involves splitting to repair \p MO for the; /// given \p ValMapping, try to change the way we repair such that; /// the splitting is not required anymore.; ///; /// \pre \p RepairPt.hasSplit(); /// \pre \p MO == MO.getParent()->getOperand(\p RepairPt.getOpIdx()); /// \pre \p ValMapping is the mapping of \p MO for MO.getParent(); /// that implied \p RepairPt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:115,Availability,repair,repair,115,"/// When \p RepairPt involves splitting to repair \p MO for the; /// given \p ValMapping, try to change the way we repair such that; /// the splitting is not required anymore.; ///; /// \pre \p RepairPt.hasSplit(); /// \pre \p MO == MO.getParent()->getOperand(\p RepairPt.getOpIdx()); /// \pre \p ValMapping is the mapping of \p MO for MO.getParent(); /// that implied \p RepairPt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:194,Availability,Repair,RepairPt,194,"/// When \p RepairPt involves splitting to repair \p MO for the; /// given \p ValMapping, try to change the way we repair such that; /// the splitting is not required anymore.; ///; /// \pre \p RepairPt.hasSplit(); /// \pre \p MO == MO.getParent()->getOperand(\p RepairPt.getOpIdx()); /// \pre \p ValMapping is the mapping of \p MO for MO.getParent(); /// that implied \p RepairPt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:263,Availability,Repair,RepairPt,263,"/// When \p RepairPt involves splitting to repair \p MO for the; /// given \p ValMapping, try to change the way we repair such that; /// the splitting is not required anymore.; ///; /// \pre \p RepairPt.hasSplit(); /// \pre \p MO == MO.getParent()->getOperand(\p RepairPt.getOpIdx()); /// \pre \p ValMapping is the mapping of \p MO for MO.getParent(); /// that implied \p RepairPt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:372,Availability,Repair,RepairPt,372,"/// When \p RepairPt involves splitting to repair \p MO for the; /// given \p ValMapping, try to change the way we repair such that; /// the splitting is not required anymore.; ///; /// \pre \p RepairPt.hasSplit(); /// \pre \p MO == MO.getParent()->getOperand(\p RepairPt.getOpIdx()); /// \pre \p ValMapping is the mapping of \p MO for MO.getParent(); /// that implied \p RepairPt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:34,Availability,Repair,RepairPts,34,"/// Apply \p Mapping to \p MI. \p RepairPts represents the different; /// mapping action that need to happen for the mapping to be; /// applied.; /// \return True if the mapping was applied sucessfully, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:244,Usability,Simpl,Simplified,244,"/// Walk through \p MF and assign a register bank to every virtual register; /// that are still mapped to nothing.; /// The target needs to provide a RegisterBankInfo and in particular; /// override RegisterBankInfo::getInstrMapping.; ///; /// Simplified algo:; /// \code; /// RBI = MF.subtarget.getRegBankInfo(); /// MIRBuilder.setMF(MF); /// for each bb in MF; /// for each inst in bb; /// MIRBuilder.setInstr(inst); /// MappingCosts = RBI.getMapping(inst);; /// Idx = findIdxOfMinCost(MappingCosts); /// CurRegBank = MappingCosts[Idx].RegBank; /// MRI.setRegBank(inst.getOperand(0).getReg(), CurRegBank); /// for each argument in inst; /// if (CurRegBank != argument.RegBank); /// ArgReg = argument.getReg(); /// Tmp = MRI.createNewVirtual(MRI.getSize(ArgReg), CurRegBank); /// MIRBuilder.buildInstr(COPY, Tmp, ArgReg); /// inst.getOperand(argument.getOperandNo()).setReg(Tmp); /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:473,Deployability,pipeline,pipeline,473,"//==-- llvm/CodeGen/GlobalISel/Utils.h ---------------------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file This file declares the API of helper functions used throughout the; /// GlobalISel pipeline.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:336,Deployability,update,updates,336,"/// Constrain the Register operand OpIdx, so that it is now constrained to the; /// TargetRegisterClass passed as an argument (RegClass).; /// If this fails, create a new virtual register in the correct class and insert; /// a COPY before \p InsertPt if it is a use or after if it is a definition.; /// In both cases, the function also updates the register of RegMo. The debug; /// location of \p InsertPt is used for the new copy.; ///; /// \return The virtual register constrained to the right register class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:297,Deployability,update,updates,297,"/// Try to constrain Reg so that it is usable by argument OpIdx of the provided; /// MCInstrDesc \p II. If this fails, create a new virtual register in the; /// correct class and insert a COPY before \p InsertPt if it is a use or after; /// if it is a definition. In both cases, the function also updates the register; /// of RegMo.; /// This is equivalent to constrainOperandRegClass(..., RegClass, ...); /// with RegClass obtained from the MCInstrDesc. The debug location of \p; /// InsertPt is used for the new copy.; ///; /// \return The virtual register constrained to the right register class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:39,Usability,usab,usable,39,"/// Try to constrain Reg so that it is usable by argument OpIdx of the provided; /// MCInstrDesc \p II. If this fails, create a new virtual register in the; /// correct class and insert a COPY before \p InsertPt if it is a use or after; /// if it is a definition. In both cases, the function also updates the register; /// of RegMo.; /// This is equivalent to constrainOperandRegClass(..., RegClass, ...); /// with RegClass obtained from the MCInstrDesc. The debug location of \p; /// InsertPt is used for the new copy.; ///; /// \return The virtual register constrained to the right register class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:467,Security,expose,expose,467,"/// Mutate the newly-selected instruction \p I to constrain its (possibly; /// generic) virtual register operands to the instruction's register class.; /// This could involve inserting COPYs before (for uses) or after (for defs).; /// This requires the number of operands to match the instruction description.; /// \returns whether operand regclass constraining succeeded.; ///; // FIXME: Not all instructions have the same number of operands. We should; // probably expose a constrain helper per operand and let the target selector; // constrain individual registers, like fast-isel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:48,Integrability,depend,depending,48,/// Check if DstReg can be replaced with SrcReg depending on the register; /// constraints.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:19,Availability,error,error,19,/// Report an ISel error as a missed optimization remark to the LLVMContext's; /// diagnostic stream. Set the FailedISel MachineFunction property.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:37,Performance,optimiz,optimization,37,/// Report an ISel error as a missed optimization remark to the LLVMContext's; /// diagnostic stream. Set the FailedISel MachineFunction property.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:39,Performance,optimiz,optimization,39,/// Report an ISel warning as a missed optimization remark to the LLVMContext's; /// diagnostic stream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:4,Usability,Simpl,Simple,4,/// Simple struct used to hold a constant integer value and a virtual; /// register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:4,Usability,Simpl,Simple,4,/// Simple struct used to hold a Register value and the instruction which; /// defines it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:106,Availability,failure,failure,106,/// Tries to constant fold a vector binop with sources \p Op1 and \p Op2.; /// Returns an empty vector on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:4,Testability,Test,Test,4,/// Test if the given value is known to have exactly one bit set. This differs; /// from computeKnownBits in that it doesn't necessarily determine which bit is; /// set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:29,Modifiability,extend,extended,29,/// \returns the scalar sign extended integral splat value of \p Reg if; /// possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:29,Modifiability,extend,extended,29,/// \returns the scalar sign extended integral splat value defined by \p MI if; /// possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:46,Performance,optimiz,optimized,46,/// Returns true if the given block should be optimized for size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h:23,Availability,mask,mask,23,/// Maps from register mask names to register masks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h:46,Availability,mask,masks,46,/// Maps from register mask names to register masks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h:58,Availability,mask,mask,58,/// Check if the given identifier is a name of a register mask.; ///; /// Return null if the identifier isn't a register mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h:121,Availability,mask,mask,121,/// Check if the given identifier is a name of a register mask.; ///; /// Return null if the identifier isn't a register mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h:539,Availability,error,error,539,"/// Parse the machine basic block definitions, and skip the machine; /// instructions.; ///; /// This function runs the first parsing pass on the machine function's body.; /// It parses only the machine basic block definitions and creates the machine; /// basic blocks in the given machine function.; ///; /// The machine instructions aren't parsed during the first pass because all; /// the machine basic blocks aren't defined yet - this makes it impossible to; /// resolve the machine basic block references.; ///; /// Return true if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h:416,Availability,error,error,416,/// Parse the machine instructions.; ///; /// This function runs the second parsing pass on the machine function's body.; /// It skips the machine basic block definitions and parses only the machine; /// instructions and basic block attributes like liveins and successors.; ///; /// The second parsing pass assumes that the first parsing pass already ran; /// on the given source string.; ///; /// Return true if an error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:67,Performance,load,loaded,67,/// This class initializes machine functions by applying the state loaded from; /// a MIR file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:162,Availability,error,error,162,"/// Parses the optional LLVM IR module in the MIR file.; ///; /// A new, empty module is created if the LLVM IR isn't present.; /// \returns nullptr if a parsing error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:131,Availability,error,error,131,/// Parses MachineFunctions in the MIR file and add them to the given; /// MachineModuleInfo \p MMI.; ///; /// \returns true if an error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:340,Availability,Error,Error,340,/// This function is the main interface to the MIR serialization format parser.; ///; /// It reads in a MIR file and returns a MIR parser that can parse the embedded; /// LLVM IR module and initialize the machine functions by parsing the machine; /// function's state.; ///; /// \param Filename - The name of the file to parse.; /// \param Error - Error result info.; /// \param Context - Context which will be used for the parsed LLVM IR module.; /// \param ProcessIRFunction - function to run on every IR function or stub; /// loaded from the MIR file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:348,Availability,Error,Error,348,/// This function is the main interface to the MIR serialization format parser.; ///; /// It reads in a MIR file and returns a MIR parser that can parse the embedded; /// LLVM IR module and initialize the machine functions by parsing the machine; /// function's state.; ///; /// \param Filename - The name of the file to parse.; /// \param Error - Error result info.; /// \param Context - Context which will be used for the parsed LLVM IR module.; /// \param ProcessIRFunction - function to run on every IR function or stub; /// loaded from the MIR file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:30,Integrability,interface,interface,30,/// This function is the main interface to the MIR serialization format parser.; ///; /// It reads in a MIR file and returns a MIR parser that can parse the embedded; /// LLVM IR module and initialize the machine functions by parsing the machine; /// function's state.; ///; /// \param Filename - The name of the file to parse.; /// \param Error - Error result info.; /// \param Context - Context which will be used for the parsed LLVM IR module.; /// \param ProcessIRFunction - function to run on every IR function or stub; /// loaded from the MIR file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:529,Performance,load,loaded,529,/// This function is the main interface to the MIR serialization format parser.; ///; /// It reads in a MIR file and returns a MIR parser that can parse the embedded; /// LLVM IR module and initialize the machine functions by parsing the machine; /// function's state.; ///; /// \param Filename - The name of the file to parse.; /// \param Error - Error result info.; /// \param Context - Context which will be used for the parsed LLVM IR module.; /// \param ProcessIRFunction - function to run on every IR function or stub; /// loaded from the MIR file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:519,Testability,stub,stub,519,/// This function is the main interface to the MIR serialization format parser.; ///; /// It reads in a MIR file and returns a MIR parser that can parse the embedded; /// LLVM IR module and initialize the machine functions by parsing the machine; /// function's state.; ///; /// \param Filename - The name of the file to parse.; /// \param Error - Error result info.; /// \param Context - Context which will be used for the parsed LLVM IR module.; /// \param ProcessIRFunction - function to run on every IR function or stub; /// loaded from the MIR file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:29,Integrability,interface,interface,29,/// This function is another interface to the MIR serialization format parser.; ///; /// It returns a MIR parser that works with the given memory buffer and that can; /// parse the embedded LLVM IR module and initialize the machine functions by; /// parsing the machine function's state.; ///; /// \param Contents - The MemoryBuffer containing the machine level IR.; /// \param Context - Context which will be used for the parsed LLVM IR module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:117,Availability,down,down,117,"// Swap-and-pop for fast removal.; // 1) Update the adj index of the edge currently at back().; // 2) Move last Edge down to Idx.; // 3) pop_back(); // If Idx == size() - 1 then the setAdjEdgeIdx and swap are; // redundant, but both operations are cheap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:213,Availability,redundant,redundant,213,"// Swap-and-pop for fast removal.; // 1) Update the adj index of the edge currently at back().; // 2) Move last Edge down to Idx.; // 3) pop_back(); // If Idx == size() - 1 then the setAdjEdgeIdx and swap are; // redundant, but both operations are cheap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:41,Deployability,Update,Update,41,"// Swap-and-pop for fast removal.; // 1) Update the adj index of the edge currently at back().; // 2) Move last Edge down to Idx.; // 3) pop_back(); // If Idx == size() - 1 then the setAdjEdgeIdx and swap are; // redundant, but both operations are cheap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:213,Safety,redund,redundant,213,"// Swap-and-pop for fast removal.; // 1) Update the adj index of the edge currently at back().; // 2) Move last Edge down to Idx.; // 3) pop_back(); // If Idx == size() - 1 then the setAdjEdgeIdx and swap are; // redundant, but both operations are cheap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:4,Deployability,Release,Release,4,/// Release from solver instance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:479,Safety,avoid,avoid,479,"/// Add a node bypassing the cost allocator.; /// @param Costs Cost vector ptr for the new node (must be convertible to; /// VectorPtr).; /// @return Node iterator for the added node.; ///; /// This method allows for fast addition of a node whose costs don't need; /// to be passed through the cost allocator. The most common use case for; /// this is when duplicating costs from an existing node (when using a; /// pooling allocator). These have already been uniqued, so we can avoid; /// re-constructing and re-uniquing them by attaching them directly to the; /// new node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:492,Safety,avoid,avoid,492,"/// Add an edge bypassing the cost allocator.; /// @param N1Id First node.; /// @param N2Id Second node.; /// @param Costs Cost matrix for new edge.; /// @return Edge iterator for the added edge.; ///; /// This method allows for fast addition of an edge whose costs don't need; /// to be passed through the cost allocator. The most common use case for; /// this is when duplicating costs from an existing edge (when using a; /// pooling allocator). These have already been uniqued, so we can avoid; /// re-constructing and re-uniquing them by attaching them directly to the; /// new edge.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:54,Deployability,update,update,54,/// Set a node's cost vector.; /// @param NId Node to update.; /// @param Costs New costs to set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:4,Deployability,Update,Update,4,/// Update an edge's cost matrix.; /// @param EId Edge id.; /// @param Costs New cost matrix.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:435,Energy Efficiency,efficient,efficient,435,"/// Disconnect an edge from the given node.; ///; /// Removes the given edge from the adjacency list of the given node.; /// This operation leaves the edge in an 'asymmetric' state: It will no; /// longer appear in an iteration over the given node's (NId's) edges, but; /// will appear in an iteration over the 'other', unnamed node's edges.; ///; /// This does not correspond to any normal graph operation, but exists to; /// support efficient PBQP graph-reduction based solvers. It is used to; /// 'effectively' remove the unnamed node from the graph while the solver; /// is performing the reduction. The solver will later call reconnectNode; /// to restore the edge in the named node's adjacency list.; ///; /// Since the degree of a node is the number of connected edges,; /// disconnecting an edge from a node 'u' will cause the degree of 'u' to; /// drop by 1.; ///; /// A disconnected edge WILL still appear in an iteration over the graph; /// edges.; ///; /// A disconnected edge should not be removed from the graph, it should be; /// reconnected first.; ///; /// A disconnected edge can be reconnected by calling the reconnectEdge; /// method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:578,Performance,perform,performing,578,"/// Disconnect an edge from the given node.; ///; /// Removes the given edge from the adjacency list of the given node.; /// This operation leaves the edge in an 'asymmetric' state: It will no; /// longer appear in an iteration over the given node's (NId's) edges, but; /// will appear in an iteration over the 'other', unnamed node's edges.; ///; /// This does not correspond to any normal graph operation, but exists to; /// support efficient PBQP graph-reduction based solvers. It is used to; /// 'effectively' remove the unnamed node from the graph while the solver; /// is performing the reduction. The solver will later call reconnectNode; /// to restore the edge in the named node's adjacency list.; ///; /// Since the degree of a node is the number of connected edges,; /// disconnecting an edge from a node 'u' will cause the degree of 'u' to; /// drop by 1.; ///; /// A disconnected edge WILL still appear in an iteration over the graph; /// edges.; ///; /// A disconnected edge should not be removed from the graph, it should be; /// reconnected first.; ///; /// A disconnected edge can be reconnected by calling the reconnectEdge; /// method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h:12,Security,access,access,12,/// Element access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h:18,Security,access,access,18,/// Const element access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h:19,Security,access,access,19,/// Matrix element access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h:19,Security,access,access,19,/// Matrix element access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:4,Energy Efficiency,Reduce,Reduce,4,"/// Reduce a node of degree one.; ///; /// Propagate costs from the given node, which must be of degree one, to its; /// neighbor. Notify the problem domain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:25,Safety,avoid,avoid,25,// Duplicate a little to avoid transposing matrices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:108,Availability,avail,available,108,"// If there are registers in the cost vector, but all of them have infinite; // costs, then ... there is no available register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:30,Energy Efficiency,reduce,reduced,30,"// Find a solution to a fully reduced graph by backpropagation.; //; // Given a graph and a reduction order, pop each node from the reduction; // order and greedily compute a minimum solution based on the node costs, and; // the dependent costs due to previously solved nodes.; //; // Note - This does not return the graph to its original (pre-reduction); // state: the existing solvers destructively alter the node and edge; // costs. Given that, the backpropagate function doesn't attempt to; // replace the edges either, but leaves the graph in its reduced; // state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:552,Energy Efficiency,reduce,reduced,552,"// Find a solution to a fully reduced graph by backpropagation.; //; // Given a graph and a reduction order, pop each node from the reduction; // order and greedily compute a minimum solution based on the node costs, and; // the dependent costs due to previously solved nodes.; //; // Note - This does not return the graph to its original (pre-reduction); // state: the existing solvers destructively alter the node and edge; // costs. Given that, the backpropagate function doesn't attempt to; // replace the edges either, but leaves the graph in its reduced; // state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:229,Integrability,depend,dependent,229,"// Find a solution to a fully reduced graph by backpropagation.; //; // Given a graph and a reduction order, pop each node from the reduction; // order and greedily compute a minimum solution based on the node costs, and; // the dependent costs due to previously solved nodes.; //; // Note - This does not return the graph to its original (pre-reduction); // state: the existing solvers destructively alter the node and edge; // costs. Given that, the backpropagate function doesn't attempt to; // replace the edges either, but leaves the graph in its reduced; // state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:213,Availability,avail,available,213,"// Although a conservatively allocatable node can be allocated to a register,; // spilling it may provide a lower cost solution. Assert here that spilling; // is done by choice, not because there were no register available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:53,Energy Efficiency,allocate,allocated,53,"// Although a conservatively allocatable node can be allocated to a register,; // spilling it may provide a lower cost solution. Assert here that spilling; // is done by choice, not because there were no register available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:129,Testability,Assert,Assert,129,"// Although a conservatively allocatable node can be allocated to a register,; // spilling it may provide a lower cost solution. Assert here that spilling; // is done by choice, not because there were no register available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:72,Availability,avail,available,72,// Source code for this particular line; // (in case if `Source` is not available),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:42,Modifiability,variab,variable,42,/// Container for description of a global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:35,Performance,load,load,35,/// An inferface for inquiring the load address of a loaded object file; /// to be used by the DIContext implementations when applying relocations; /// on the fly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:53,Performance,load,loaded,53,/// An inferface for inquiring the load address of a loaded object file; /// to be used by the DIContext implementations when applying relocations; /// on the fly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:15,Performance,Load,Load,15,"/// Obtain the Load Address of a section by SectionRef.; ///; /// Calculate the address of the given section.; /// The section need not be present in the local address space. The addresses; /// need to be consistent with the addresses used to query the DIContext and; /// the output of this function should be deterministic, i.e. repeated calls; /// with the same Sec should give the same address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:20,Availability,avail,available,20,"/// If conveniently available, return the content of the given Section.; ///; /// When the section is available in the local address space, in relocated; /// (loaded) form, e.g. because it was relocated by a JIT for execution, this; /// function should provide the contents of said section in `Data`. If the; /// loaded section is not available, or the cost of retrieving it would be; /// prohibitive, this function should return false. In that case, relocations; /// will be read from the local (unrelocated) object file and applied on the; /// fly. Note that this method is used purely for optimzation purposes in the; /// common case of JITting in the local address space, so returning false; /// should always be correct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:102,Availability,avail,available,102,"/// If conveniently available, return the content of the given Section.; ///; /// When the section is available in the local address space, in relocated; /// (loaded) form, e.g. because it was relocated by a JIT for execution, this; /// function should provide the contents of said section in `Data`. If the; /// loaded section is not available, or the cost of retrieving it would be; /// prohibitive, this function should return false. In that case, relocations; /// will be read from the local (unrelocated) object file and applied on the; /// fly. Note that this method is used purely for optimzation purposes in the; /// common case of JITting in the local address space, so returning false; /// should always be correct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:335,Availability,avail,available,335,"/// If conveniently available, return the content of the given Section.; ///; /// When the section is available in the local address space, in relocated; /// (loaded) form, e.g. because it was relocated by a JIT for execution, this; /// function should provide the contents of said section in `Data`. If the; /// loaded section is not available, or the cost of retrieving it would be; /// prohibitive, this function should return false. In that case, relocations; /// will be read from the local (unrelocated) object file and applied on the; /// fly. Note that this method is used purely for optimzation purposes in the; /// common case of JITting in the local address space, so returning false; /// should always be correct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:159,Performance,load,loaded,159,"/// If conveniently available, return the content of the given Section.; ///; /// When the section is available in the local address space, in relocated; /// (loaded) form, e.g. because it was relocated by a JIT for execution, this; /// function should provide the contents of said section in `Data`. If the; /// loaded section is not available, or the cost of retrieving it would be; /// prohibitive, this function should return false. In that case, relocations; /// will be read from the local (unrelocated) object file and applied on the; /// fly. Note that this method is used purely for optimzation purposes in the; /// common case of JITting in the local address space, so returning false; /// should always be correct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:313,Performance,load,loaded,313,"/// If conveniently available, return the content of the given Section.; ///; /// When the section is available in the local address space, in relocated; /// (loaded) form, e.g. because it was relocated by a JIT for execution, this; /// function should provide the contents of said section in `Data`. If the; /// loaded section is not available, or the cost of retrieving it would be; /// prohibitive, this function should return false. In that case, relocations; /// will be read from the local (unrelocated) object file and applied on the; /// fly. Note that this method is used purely for optimzation purposes in the; /// common case of JITting in the local address space, so returning false; /// should always be correct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:234,Performance,Load,LoadedObjectInfo,234,"// FIXME: This is untested and unused anywhere in the LLVM project, it's; // used/needed by Julia (an external project). It should have some coverage; // (at least tests, but ideally example functionality).; /// Obtain a copy of this LoadedObjectInfo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:164,Testability,test,tests,164,"// FIXME: This is untested and unused anywhere in the LLVM project, it's; // used/needed by Julia (an external project). It should have some coverage; // (at least tests, but ideally example functionality).; /// Obtain a copy of this LoadedObjectInfo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h:662,Usability,simpl,simply,662,"//===-- BTF.h --------------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file contains the layout of .BTF and .BTF.ext ELF sections.; ///; /// The binary layout for .BTF section:; /// struct Header; /// Type and Str subsections; /// The Type subsection is a collection of types with type id starting with 1.; /// The Str subsection is simply a collection of strings.; ///; /// The binary layout for .BTF.ext section:; /// struct ExtHeader; /// FuncInfo, LineInfo, FieldReloc and ExternReloc subsections; /// The FuncInfo subsection is defined as below:; /// BTFFuncInfo Size; /// struct SecFuncInfo for ELF section #1; /// A number of struct BPFFuncInfo for ELF section #1; /// struct SecFuncInfo for ELF section #2; /// A number of struct BPFFuncInfo for ELF section #2; /// ...; /// The LineInfo subsection is defined as below:; /// BPFLineInfo Size; /// struct SecLineInfo for ELF section #1; /// A number of struct BPFLineInfo for ELF section #1; /// struct SecLineInfo for ELF section #2; /// A number of struct BPFLineInfo for ELF section #2; /// ...; /// The FieldReloc subsection is defined as below:; /// BPFFieldReloc Size; /// struct SecFieldReloc for ELF section #1; /// A number of struct BPFFieldReloc for ELF section #1; /// struct SecFieldReloc for ELF section #2; /// A number of struct BPFFieldReloc for ELF section #2; /// ...; ///; /// The section formats are also defined at; /// https://github.com/torvalds/linux/blob/master/include/uapi/linux/btf.h; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h:4,Modifiability,Variab,Variable,4,/// Variable scoping information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h:13,Deployability,patch,patch,13,///< What to patch the instruction,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h:68,Security,access,accessor,68,"// Define a number of sub-types for CommonType, each with:; // - An accessor for a relevant ""tail"" information (data fields that; // follow the CommonType record in binary format).; // - A classof() definition based on CommonType::getKind() value to; // allow use with dyn_cast<>() function.; // For CommonType sub-types that are followed by a single entry of; // some type in the binary format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFContext.h:394,Integrability,interface,interface,394,"//===- BTFContext.h ---------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // BTFContext interface is used by llvm-objdump tool to print source; // code alongside disassembly.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h:562,Security,access,accessible,562,"//===- BTFParser.h ----------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // BTFParser reads .BTF and .BTF.ext ELF sections generated by LLVM; // BPF backend and provides introspection for the stored information.; // Currently the following information is accessible:; // - string table;; // - instruction offset to line information mapping;; // - types table;; // - CO-RE relocations table.; //; // See llvm/DebugInfo/BTF/BTF.h for some details about binary format; // and links to Linux Kernel documentation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h:34,Deployability,continuous,continuous,34,// In BTF strings are stored as a continuous memory region with; // individual strings separated by 0 bytes. Strings are identified; // by an offset in such region.; // The `StringsTable` points to this region in the parsed ObjectFile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h:202,Energy Efficiency,allocate,allocated,202,"// Vector of pointers to all known types, index in this vector; // equals to logical type BTF id.; // Pointers point to memory owned by `TypesBuffer`; // (except pointer at index 0, which is statically allocated).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h:77,Testability,log,logical,77,"// Vector of pointers to all known types, index in this vector; // equals to logical type BTF id.; // Pointers point to memory owned by `TypesBuffer`; // (except pointer at index 0, which is statically allocated).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h:24,Performance,load,load,24,// Allow to selectively load BTF information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h:224,Availability,error,error,224,"// Fills instance of BTFParser with information stored in .BTF and; // .BTF.ext sections of the `Obj`. If this instance was already; // filled, old data is discarded.; //; // If information cannot be parsed:; // - return an error describing the failure;; // - state of the BTFParser might be incomplete but is not invalid,; // queries might be run against it, but some (or all) information; // might be unavailable;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h:245,Availability,failure,failure,245,"// Fills instance of BTFParser with information stored in .BTF and; // .BTF.ext sections of the `Obj`. If this instance was already; // filled, old data is discarded.; //; // If information cannot be parsed:; // - return an error describing the failure;; // - state of the BTFParser might be incomplete but is not invalid,; // queries might be run against it, but some (or all) information; // might be unavailable;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/AppendingTypeTableBuilder.h:10,Integrability,interface,interface,10,// public interface,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/AppendingTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/AppendingTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:87,Integrability,Interface,Interface,87,/// These values correspond to the CV_CFL_LANG enumeration in the Microsoft; /// Debug Interface Access SDK,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:97,Security,Access,Access,97,/// These values correspond to the CV_CFL_LANG enumeration in the Microsoft; /// Debug Interface Access SDK,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:14,Integrability,rout,routines,14,// Marker for routines always inlined and thus lacking a convention,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:17,Security,access,access,17,/// Source-level access specifier. (CV_access_e),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:23,Modifiability,inherit,inheritance,23,"// member data, single inheritance",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:25,Modifiability,inherit,inheritance,25,"// member data, multiple inheritance",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:24,Modifiability,inherit,inheritance,24,"// member data, virtual inheritance",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:27,Modifiability,inherit,inheritance,27,"// member function, single inheritance",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:29,Modifiability,inherit,inheritance,29,"// member function, multiple inheritance",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:28,Modifiability,inherit,inheritance,28,"// member function, virtual inheritance",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h:25,Availability,Error,Error,25,"//===- CodeViewError.h - Error extensions for CodeView ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h:19,Availability,error,errors,19,/// Base class for errors originating when parsing raw PDB files,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h:3,Modifiability,inherit,inherit,3,// inherit constructors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewRecordIO.h:52,Integrability,interface,interface,52,// writes records to assembly file using MC library interface,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewRecordIO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewRecordIO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/ContinuationRecordBuilder.h:205,Integrability,interface,interface,205,"// This template is explicitly instantiated in the implementation file for all; // supported types. The method itself is ugly, so inlining it into the header; // file clutters an otherwise straightforward interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/ContinuationRecordBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/ContinuationRecordBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVRecord.h:193,Safety,safe,safety,193,/// CVRecord is a fat pointer (base + size pair) to a symbol or type record.; /// Carrying the size separately instead of trusting the size stored in the; /// record prefix provides some extra safety and flexibility.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVTypeVisitor.h:148,Deployability,pipeline,pipeline,148,// The record bytes are passed into the visitation; // function. The algorithm should first deserialize them; // before passing them on through the pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVTypeVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVTypeVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVTypeVisitor.h:94,Integrability,interface,interface,94,"// The record bytes are not present, and it is the; // responsibility of the visitor callback interface to; // supply the bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVTypeVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVTypeVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugChecksumsSubsection.h:15,Security,checksum,checksum,15,// The type of checksum.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugChecksumsSubsection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugChecksumsSubsection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugChecksumsSubsection.h:20,Security,checksum,checksum,20,// The bytes of the checksum.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugChecksumsSubsection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugChecksumsSubsection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h:44,Security,checksum,checksums,44,// Offset of FileChecksum entry in File; // checksums buffer. The checksum entry then; // contains another offset into the string; // table of the actual name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h:66,Security,checksum,checksum,66,// Offset of FileChecksum entry in File; // checksums buffer. The checksum entry then; // contains another offset into the string; // table of the actual name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h:55,Modifiability,variab,variable,55,"// Code size of block, in bytes.; // The following two variable length arrays appear immediately after the; // header. The structure definitions follow.; // LineNumberEntry Lines[NumLines];; // ColumnNumberEntry Columns[NumLines];",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugStringTableSubsection.h:80,Usability,simpl,simple,80,"/// Represents a read-only view of a CodeView string table. This is a very; /// simple flat buffer consisting of null-terminated strings, where strings; /// are retrieved by their offset in the buffer. DebugStringTableSubsectionRef; /// does not own the underlying storage for the buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugStringTableSubsection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugStringTableSubsection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugSubsectionRecord.h:83,Energy Efficiency,Reduce,Reduce,83,/// The bytes of the subsection. Only non-empty if Subsection is null.; /// FIXME: Reduce the size of this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugSubsectionRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugSubsectionRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h:128,Integrability,interface,interface,128,/// A serializer that can write non-continuation leaf types. Only used as; /// a convenience function so that we can provide an interface method to; /// write an unserialized record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h:4,Security,Hash,Hash,4,/// Hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h:27,Security,hash,hash,27,/// Contains a list of all hash values indexed by TypeIndex.toArrayIndex().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h:10,Integrability,interface,interface,10,// public interface,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h:23,Deployability,update,update,23,"// On the second pass, update with index to remapped record. The; // (initially misbehaved) record will now come *after* other records; // resolved in the first pass, with proper *back* references in the; // stream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h:7,Usability,GUID,GUID,7,"//===- GUID.h ---------------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h:25,Usability,GUID,GUID,25,/// This represents the 'GUID' type from windows.h.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:202,Modifiability,variab,variable-lengthed,202,"/// Provides amortized O(1) random access to a CodeView type stream.; /// Normally to access a type from a type stream, you must know its byte; /// offset into the type stream, because type records are variable-lengthed.; /// However, this is not the way we prefer to access them. For example, given; /// a symbol record one of the fields may be the TypeIndex of the symbol's; /// type record. Or given a type record such as an array type, there might; /// be a TypeIndex for the element type. Sequential access is perfect when; /// we're just dumping every entry, but it's very poor for real world usage.; ///; /// Type streams in PDBs contain an additional field which is a list of pairs; /// containing indices and their corresponding offsets, roughly every ~8KB of; /// record data. This general idea need not be confined to PDBs though. By; /// supplying such an array, the producer of a type stream can allow the; /// consumer much better access time, because the consumer can find the nearest; /// index in this array, and do a linear scan forward only from there.; ///; /// LazyRandomTypeCollection implements this algorithm, but additionally goes; /// one step further by caching offsets of every record that has been visited at; /// least once. This way, even repeated visits of the same record will never; /// require more than one linear scan. For a type stream of N elements divided; /// into M chunks of roughly equal size, this yields a worst case lookup time; /// of O(N/M) and an amortized time of O(1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:35,Security,access,access,35,"/// Provides amortized O(1) random access to a CodeView type stream.; /// Normally to access a type from a type stream, you must know its byte; /// offset into the type stream, because type records are variable-lengthed.; /// However, this is not the way we prefer to access them. For example, given; /// a symbol record one of the fields may be the TypeIndex of the symbol's; /// type record. Or given a type record such as an array type, there might; /// be a TypeIndex for the element type. Sequential access is perfect when; /// we're just dumping every entry, but it's very poor for real world usage.; ///; /// Type streams in PDBs contain an additional field which is a list of pairs; /// containing indices and their corresponding offsets, roughly every ~8KB of; /// record data. This general idea need not be confined to PDBs though. By; /// supplying such an array, the producer of a type stream can allow the; /// consumer much better access time, because the consumer can find the nearest; /// index in this array, and do a linear scan forward only from there.; ///; /// LazyRandomTypeCollection implements this algorithm, but additionally goes; /// one step further by caching offsets of every record that has been visited at; /// least once. This way, even repeated visits of the same record will never; /// require more than one linear scan. For a type stream of N elements divided; /// into M chunks of roughly equal size, this yields a worst case lookup time; /// of O(N/M) and an amortized time of O(1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:86,Security,access,access,86,"/// Provides amortized O(1) random access to a CodeView type stream.; /// Normally to access a type from a type stream, you must know its byte; /// offset into the type stream, because type records are variable-lengthed.; /// However, this is not the way we prefer to access them. For example, given; /// a symbol record one of the fields may be the TypeIndex of the symbol's; /// type record. Or given a type record such as an array type, there might; /// be a TypeIndex for the element type. Sequential access is perfect when; /// we're just dumping every entry, but it's very poor for real world usage.; ///; /// Type streams in PDBs contain an additional field which is a list of pairs; /// containing indices and their corresponding offsets, roughly every ~8KB of; /// record data. This general idea need not be confined to PDBs though. By; /// supplying such an array, the producer of a type stream can allow the; /// consumer much better access time, because the consumer can find the nearest; /// index in this array, and do a linear scan forward only from there.; ///; /// LazyRandomTypeCollection implements this algorithm, but additionally goes; /// one step further by caching offsets of every record that has been visited at; /// least once. This way, even repeated visits of the same record will never; /// require more than one linear scan. For a type stream of N elements divided; /// into M chunks of roughly equal size, this yields a worst case lookup time; /// of O(N/M) and an amortized time of O(1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:268,Security,access,access,268,"/// Provides amortized O(1) random access to a CodeView type stream.; /// Normally to access a type from a type stream, you must know its byte; /// offset into the type stream, because type records are variable-lengthed.; /// However, this is not the way we prefer to access them. For example, given; /// a symbol record one of the fields may be the TypeIndex of the symbol's; /// type record. Or given a type record such as an array type, there might; /// be a TypeIndex for the element type. Sequential access is perfect when; /// we're just dumping every entry, but it's very poor for real world usage.; ///; /// Type streams in PDBs contain an additional field which is a list of pairs; /// containing indices and their corresponding offsets, roughly every ~8KB of; /// record data. This general idea need not be confined to PDBs though. By; /// supplying such an array, the producer of a type stream can allow the; /// consumer much better access time, because the consumer can find the nearest; /// index in this array, and do a linear scan forward only from there.; ///; /// LazyRandomTypeCollection implements this algorithm, but additionally goes; /// one step further by caching offsets of every record that has been visited at; /// least once. This way, even repeated visits of the same record will never; /// require more than one linear scan. For a type stream of N elements divided; /// into M chunks of roughly equal size, this yields a worst case lookup time; /// of O(N/M) and an amortized time of O(1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:505,Security,access,access,505,"/// Provides amortized O(1) random access to a CodeView type stream.; /// Normally to access a type from a type stream, you must know its byte; /// offset into the type stream, because type records are variable-lengthed.; /// However, this is not the way we prefer to access them. For example, given; /// a symbol record one of the fields may be the TypeIndex of the symbol's; /// type record. Or given a type record such as an array type, there might; /// be a TypeIndex for the element type. Sequential access is perfect when; /// we're just dumping every entry, but it's very poor for real world usage.; ///; /// Type streams in PDBs contain an additional field which is a list of pairs; /// containing indices and their corresponding offsets, roughly every ~8KB of; /// record data. This general idea need not be confined to PDBs though. By; /// supplying such an array, the producer of a type stream can allow the; /// consumer much better access time, because the consumer can find the nearest; /// index in this array, and do a linear scan forward only from there.; ///; /// LazyRandomTypeCollection implements this algorithm, but additionally goes; /// one step further by caching offsets of every record that has been visited at; /// least once. This way, even repeated visits of the same record will never; /// require more than one linear scan. For a type stream of N elements divided; /// into M chunks of roughly equal size, this yields a worst case lookup time; /// of O(N/M) and an amortized time of O(1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:945,Security,access,access,945,"/// Provides amortized O(1) random access to a CodeView type stream.; /// Normally to access a type from a type stream, you must know its byte; /// offset into the type stream, because type records are variable-lengthed.; /// However, this is not the way we prefer to access them. For example, given; /// a symbol record one of the fields may be the TypeIndex of the symbol's; /// type record. Or given a type record such as an array type, there might; /// be a TypeIndex for the element type. Sequential access is perfect when; /// we're just dumping every entry, but it's very poor for real world usage.; ///; /// Type streams in PDBs contain an additional field which is a list of pairs; /// containing indices and their corresponding offsets, roughly every ~8KB of; /// record data. This general idea need not be confined to PDBs though. By; /// supplying such an array, the producer of a type stream can allow the; /// consumer much better access time, because the consumer can find the nearest; /// index in this array, and do a linear scan forward only from there.; ///; /// LazyRandomTypeCollection implements this algorithm, but additionally goes; /// one step further by caching offsets of every record that has been visited at; /// least once. This way, even repeated visits of the same record will never; /// require more than one linear scan. For a type stream of N elements divided; /// into M chunks of roughly equal size, this yields a worst case lookup time; /// of O(N/M) and an amortized time of O(1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:35,Security,access,access,35,/// The type array to allow random access visitation of.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:66,Testability,log,log,66,"/// An array of index offsets for the given type stream, allowing log(N); /// lookups of a type record by index. Similar to KnownOffsets but only; /// contains offsets for some type indices, some of which may not have; /// ever been visited.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h:128,Integrability,interface,interface,128,/// A serializer that can write non-continuation leaf types. Only used as; /// a convenience function so that we can provide an interface method to; /// write an unserialized record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h:4,Security,Hash,Hash,4,/// Hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h:10,Integrability,interface,interface,10,// public interface,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h:7,Usability,Simpl,SimpleTypeSerializer,7,"//===- SimpleTypeSerializer.h -----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h:205,Integrability,interface,interface,205,"// This template is explicitly instantiated in the implementation file for all; // supported types. The method itself is ugly, so inlining it into the header; // file clutters an otherwise straightforward interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h:62,Integrability,interface,interface,62,// Don't allow serialization of field list records using this interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h:57,Security,checksum,checksums,57,"// If only a string table subsection is given, we find a checksums subsection.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h:346,Testability,test,testing,346,"// While in practice we should never encounter a string table even; // though the string table is already initialized, in theory it's; // possible. PDBs are supposed to have one global string table and; // then this subsection should not appear. Whereas object files are; // supposed to have this subsection appear exactly once. However,; // for testing purposes it's nice to be able to test this subsection; // independently of one format or the other, so for some tests we; // manually construct a PDB that contains this subsection in addition; // to a global string table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h:387,Testability,test,test,387,"// While in practice we should never encounter a string table even; // though the string table is already initialized, in theory it's; // possible. PDBs are supposed to have one global string table and; // then this subsection should not appear. Whereas object files are; // supposed to have this subsection appear exactly once. However,; // for testing purposes it's nice to be able to test this subsection; // independently of one format or the other, so for some tests we; // manually construct a PDB that contains this subsection in addition; // to a global string table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h:466,Testability,test,tests,466,"// While in practice we should never encounter a string table even; // though the string table is already initialized, in theory it's; // possible. PDBs are supposed to have one global string table and; // then this subsection should not appear. Whereas object files are; // supposed to have this subsection appear exactly once. However,; // for testing purposes it's nice to be able to test this subsection; // independently of one format or the other, so for some tests we; // manually construct a PDB that contains this subsection in addition; // to a global string table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolDumper.h:69,Availability,error,error,69,"/// Dumps one type record. Returns false if there was a type parsing error,; /// and true otherwise. This should be called in order, since the dumper; /// maintains state about previous records which are necessary for cross; /// type references.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolDumper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolDumper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolDumper.h:88,Availability,error,error,88,"/// Dumps the type records in Data. Returns false if there was a type stream; /// parse error, and true otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolDumper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolDumper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolRecord.h:59,Modifiability,variab,variables,59,/// Extract the register this frame uses to refer to local variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolSerializer.h:50,Energy Efficiency,allocate,allocated,50,"// Since this is a fixed size buffer, use a stack allocated buffer. This; // yields measurable performance increase over the repeated heap allocations; // when serializing many independent records via writeOneSymbol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolSerializer.h:95,Performance,perform,performance,95,"// Since this is a fixed size buffer, use a stack allocated buffer. This; // yields measurable performance increase over the repeated heap allocations; // when serializing many independent records via writeOneSymbol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolVisitorCallbacks.h:187,Availability,error,error,187,"/// Paired begin/end actions for all symbols. Receives all record data,; /// including the fixed-length record prefix. visitSymbolBegin() should; /// return the type of the Symbol, or an error if it cannot be determined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolVisitorCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolVisitorCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:14,Security,hash,hashed,14,"/// A locally hashed type represents a straightforward hash code of a serialized; /// record. The record is simply serialized, and then the bytes are hashed by; /// a standard algorithm. This is sufficient for the case of de-duplicating; /// records within a single sequence of types, because if two records both have; /// a back-reference to the same type in the same stream, they will both have; /// the same numeric value for the TypeIndex of the back reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:55,Security,hash,hash,55,"/// A locally hashed type represents a straightforward hash code of a serialized; /// record. The record is simply serialized, and then the bytes are hashed by; /// a standard algorithm. This is sufficient for the case of de-duplicating; /// records within a single sequence of types, because if two records both have; /// a back-reference to the same type in the same stream, they will both have; /// the same numeric value for the TypeIndex of the back reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:150,Security,hash,hashed,150,"/// A locally hashed type represents a straightforward hash code of a serialized; /// record. The record is simply serialized, and then the bytes are hashed by; /// a standard algorithm. This is sufficient for the case of de-duplicating; /// records within a single sequence of types, because if two records both have; /// a back-reference to the same type in the same stream, they will both have; /// the same numeric value for the TypeIndex of the back reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:108,Usability,simpl,simply,108,"/// A locally hashed type represents a straightforward hash code of a serialized; /// record. The record is simply serialized, and then the bytes are hashed by; /// a standard algorithm. This is sufficient for the case of de-duplicating; /// records within a single sequence of types, because if two records both have; /// a back-reference to the same type in the same stream, they will both have; /// the same numeric value for the TypeIndex of the back reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:36,Security,hash,hash,36,"/// Given a type, compute its local hash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:56,Security,hash,hashes,56,"/// Given a sequence of types, compute all of the local hashes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:25,Security,hash,hash,25,// standard 20-byte SHA1 hash,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:33,Security,hash,hash,33,// last 8-bytes of standard SHA1 hash,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:378,Integrability,depend,depends,378,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:15,Security,hash,hashed,15,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:40,Security,hash,hash,40,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:296,Security,hash,hash,296,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:363,Security,hash,hash,363,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:405,Security,hash,hashes,405,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:453,Security,hash,hash,453,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:584,Security,hash,hash,584,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:662,Security,hash,hashed,662,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:687,Security,hash,hash,687,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:836,Security,hash,hash,836,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:70,Security,hash,hash,70,"/// Given a sequence of bytes representing a record, compute a global hash for; /// this record. Due to the nature of global hashes incorporating the hashes; /// of referenced records, this function requires a list of types and ids; /// that RecordData might reference, indexable by TypeIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:125,Security,hash,hashes,125,"/// Given a sequence of bytes representing a record, compute a global hash for; /// this record. Due to the nature of global hashes incorporating the hashes; /// of referenced records, this function requires a list of types and ids; /// that RecordData might reference, indexable by TypeIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:150,Security,hash,hashes,150,"/// Given a sequence of bytes representing a record, compute a global hash for; /// this record. Due to the nature of global hashes incorporating the hashes; /// of referenced records, this function requires a list of types and ids; /// that RecordData might reference, indexable by TypeIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:70,Security,hash,hash,70,"/// Given a sequence of bytes representing a record, compute a global hash for; /// this record. Due to the nature of global hashes incorporating the hashes; /// of referenced records, this function requires a list of types and ids; /// that RecordData might reference, indexable by TypeIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:125,Security,hash,hashes,125,"/// Given a sequence of bytes representing a record, compute a global hash for; /// this record. Due to the nature of global hashes incorporating the hashes; /// of referenced records, this function requires a list of types and ids; /// that RecordData might reference, indexable by TypeIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:150,Security,hash,hashes,150,"/// Given a sequence of bytes representing a record, compute a global hash for; /// this record. Due to the nature of global hashes incorporating the hashes; /// of referenced records, this function requires a list of types and ids; /// that RecordData might reference, indexable by TypeIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:69,Security,hash,hashes,69,"/// Given a sequence of combined type and ID records, compute global hashes; /// for each of them, returning the results in a vector of hashed types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:136,Security,hash,hashed,136,"/// Given a sequence of combined type and ID records, compute global hashes; /// for each of them, returning the results in a vector of hashed types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:129,Security,hash,hash,129,"// In some rare cases, there might be records with forward references in the; // stream. Several passes might be needed to fully hash each record in the; // Type stream. However this occurs on very small OBJs generated by MASM,; // with a dozen records at most. Therefore this codepath isn't; // time-critical, as it isn't taken in 99% of cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:69,Security,hash,hashes,69,"/// Given a sequence of combined type and ID records, compute global hashes; /// for each of them, returning the results in a vector of hashed types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:136,Security,hash,hashed,136,"/// Given a sequence of combined type and ID records, compute global hashes; /// for each of them, returning the results in a vector of hashed types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h:141,Usability,simpl,simple,141,"/// A 32-bit type reference. Types are indexed by their order of appearance in; /// .debug$T plus 0x1000. Type indices less than 0x1000 are ""simple"" types,; /// composed of a SimpleTypeMode byte followed by a SimpleTypeKind byte.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h:175,Usability,Simpl,SimpleTypeMode,175,"/// A 32-bit type reference. Types are indexed by their order of appearance in; /// .debug$T plus 0x1000. Type indices less than 0x1000 are ""simple"" types,; /// composed of a SimpleTypeMode byte followed by a SimpleTypeKind byte.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h:209,Usability,Simpl,SimpleTypeKind,209,"/// A 32-bit type reference. Types are indexed by their order of appearance in; /// .debug$T plus 0x1000. Type indices less than 0x1000 are ""simple"" types,; /// composed of a SimpleTypeMode byte followed by a SimpleTypeKind byte.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h:194,Security,access,access,194,// Used for pseudo-indexing an array of type records. An array of such records; // sorted by TypeIndex can allow log(N) lookups even though such a type record; // stream does not provide random access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h:113,Testability,log,log,113,// Used for pseudo-indexing an array of type records. An array of such records; // sorted by TypeIndex can allow log(N) lookups even though such a type record; // stream does not provide random access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h:12,Security,access,access,12,/// Get the access specifier. Valid for any kind of member.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h:43,Security,access,access,43,/// Get the flags that are not included in access control or method; /// properties.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h:485,Availability,Error,Error,485,"/// Merge one set of type records into another. This method assumes; /// that all records are type records, and there are no Id records present.; ///; /// \param Dest The table to store the re-written type records into.; ///; /// \param SourceToDest A vector, indexed by the TypeIndex in the source; /// type stream, that contains the index of the corresponding type record; /// in the destination stream.; ///; /// \param Types The collection of types to merge in.; ///; /// \returns Error::success() if the operation succeeded, otherwise an; /// appropriate error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h:560,Availability,error,error,560,"/// Merge one set of type records into another. This method assumes; /// that all records are type records, and there are no Id records present.; ///; /// \param Dest The table to store the re-written type records into.; ///; /// \param SourceToDest A vector, indexed by the TypeIndex in the source; /// type stream, that contains the index of the corresponding type record; /// in the destination stream.; ///; /// \param Types The collection of types to merge in.; ///; /// \returns Error::success() if the operation succeeded, otherwise an; /// appropriate error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h:923,Availability,Error,Error,923,"/// Merge one set of id records into another. This method assumes; /// that all records are id records, and there are no Type records present.; /// However, since Id records can refer back to Type records, this method; /// assumes that the referenced type records have also been merged into; /// another type stream (for example using the above method), and accepts; /// the mapping from source to dest for that stream so that it can re-write; /// the type record mappings accordingly.; ///; /// \param Dest The table to store the re-written id records into.; ///; /// \param Types The mapping to use for the type records that these id; /// records refer to.; ///; /// \param SourceToDest A vector, indexed by the TypeIndex in the source; /// id stream, that contains the index of the corresponding id record; /// in the destination stream.; ///; /// \param Ids The collection of id records to merge in.; ///; /// \returns Error::success() if the operation succeeded, otherwise an; /// appropriate error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h:998,Availability,error,error,998,"/// Merge one set of id records into another. This method assumes; /// that all records are id records, and there are no Type records present.; /// However, since Id records can refer back to Type records, this method; /// assumes that the referenced type records have also been merged into; /// another type stream (for example using the above method), and accepts; /// the mapping from source to dest for that stream so that it can re-write; /// the type record mappings accordingly.; ///; /// \param Dest The table to store the re-written id records into.; ///; /// \param Types The mapping to use for the type records that these id; /// records refer to.; ///; /// \param SourceToDest A vector, indexed by the TypeIndex in the source; /// id stream, that contains the index of the corresponding id record; /// in the destination stream.; ///; /// \param Ids The collection of id records to merge in.; ///; /// \returns Error::success() if the operation succeeded, otherwise an; /// appropriate error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h:526,Availability,Error,Error,526,"/// Merge a unified set of type and id records, splitting them into; /// separate output streams.; ///; /// \param DestIds The table to store the re-written id records into.; ///; /// \param DestTypes the table to store the re-written type records into.; ///; /// \param SourceToDest A vector, indexed by the TypeIndex in the source; /// id stream, that contains the index of the corresponding id record; /// in the destination stream.; ///; /// \param IdsAndTypes The collection of id records to merge in.; ///; /// \returns Error::success() if the operation succeeded, otherwise an; /// appropriate error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h:601,Availability,error,error,601,"/// Merge a unified set of type and id records, splitting them into; /// separate output streams.; ///; /// \param DestIds The table to store the re-written id records into.; ///; /// \param DestTypes the table to store the re-written type records into.; ///; /// \param SourceToDest A vector, indexed by the TypeIndex in the source; /// id stream, that contains the index of the corresponding id record; /// in the destination stream.; ///; /// \param IdsAndTypes The collection of id records to merge in.; ///; /// \returns Error::success() if the operation succeeded, otherwise an; /// appropriate error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h:183,Availability,error,error,183,"/// Paired begin/end actions for all types. Receives all record data,; /// including the fixed-length record prefix. visitTypeBegin() should return; /// the type of the Record, or an error if it cannot be determined. Exactly; /// one of the two visitTypeBegin methods will be called, depending on whether; /// records are being visited sequentially or randomly. An implementation; /// should be prepared to handle both (or assert if it can't handle random; /// access visitation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h:284,Integrability,depend,depending,284,"/// Paired begin/end actions for all types. Receives all record data,; /// including the fixed-length record prefix. visitTypeBegin() should return; /// the type of the Record, or an error if it cannot be determined. Exactly; /// one of the two visitTypeBegin methods will be called, depending on whether; /// records are being visited sequentially or randomly. An implementation; /// should be prepared to handle both (or assert if it can't handle random; /// access visitation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h:461,Security,access,access,461,"/// Paired begin/end actions for all types. Receives all record data,; /// including the fixed-length record prefix. visitTypeBegin() should return; /// the type of the Record, or an error if it cannot be determined. Exactly; /// one of the two visitTypeBegin methods will be called, depending on whether; /// records are being visited sequentially or randomly. An implementation; /// should be prepared to handle both (or assert if it can't handle random; /// access visitation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h:423,Testability,assert,assert,423,"/// Paired begin/end actions for all types. Receives all record data,; /// including the fixed-length record prefix. visitTypeBegin() should return; /// the type of the Record, or an error if it cannot be determined. Exactly; /// one of the two visitTypeBegin methods will be called, depending on whether; /// records are being visited sequentially or randomly. An implementation; /// should be prepared to handle both (or assert if it can't handle random; /// access visitation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h:202,Security,access,accessor,202,"/// Get the fixed byte size of this Form if possible. This function might; /// use the DWARFUnit to calculate the size of the Form, like for; /// DW_AT_address and DW_AT_ref_addr, so this isn't just an accessor for; /// the ByteSize member.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h:83,Modifiability,variab,variable,83,/// If this abbreviation has a fixed byte size then FixedAttributeSize member; /// variable below will have a value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:49,Energy Efficiency,efficient,efficient,49,/// The accelerator tables are designed to allow efficient random access; /// (using a symbol name as a key) into debug info by providing an index of the; /// debug info DIEs. This class implements the common functionality of Apple and; /// DWARF 5 accelerator tables.; /// TODO: Generalize the rest of the AppleAcceleratorTable interface and move it; /// to this class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:329,Integrability,interface,interface,329,/// The accelerator tables are designed to allow efficient random access; /// (using a symbol name as a key) into debug info by providing an index of the; /// debug info DIEs. This class implements the common functionality of Apple and; /// DWARF 5 accelerator tables.; /// TODO: Generalize the rest of the AppleAcceleratorTable interface and move it; /// to this class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:66,Security,access,access,66,/// The accelerator tables are designed to allow efficient random access; /// (using a symbol name as a key) into debug info by providing an index of the; /// debug info DIEs. This class implements the common functionality of Apple and; /// DWARF 5 accelerator tables.; /// TODO: Generalize the rest of the AppleAcceleratorTable interface and move it; /// to this class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:142,Availability,error,error,142,/// Returns true if we should continue scanning for entries or false if we've; /// reached the last (sentinel) entry of encountered a parsing error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:49,Security,hash,hash,49,/// Return the offset into the section where the hash list begins.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:54,Security,hash,hash,54,/// Return the offset into the section where the I-th hash is.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:57,Security,Hash,Hash,57,/// Returns the index of the bucket where a hypothetical Hash would be.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:36,Security,Hash,Hash,36,/// Returns true iff a hypothetical Hash would be assigned to the BucketIdx-th; /// bucket.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:69,Security,hash,hash,69,"/// Reads the contents of the I-th bucket, that is, the index in the hash list; /// where the hashes corresponding to this bucket begin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:94,Security,hash,hashes,94,"/// Reads the contents of the I-th bucket, that is, the index in the hash list; /// where the hashes corresponding to this bucket begin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:19,Security,hash,hash,19,/// Reads the I-th hash in the hash list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:31,Security,hash,hash,31,/// Reads the I-th hash in the hash list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:22,Security,Hash,Hashes,22,"/// Scans through all Hashes in the BucketIdx-th bucket, attempting to find; /// HashToFind. If it is found, its index in the list of hashes is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:81,Security,Hash,HashToFind,81,"/// Scans through all Hashes in the BucketIdx-th bucket, attempting to find; /// HashToFind. If it is found, its index in the list of hashes is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:134,Security,hash,hashes,134,"/// Scans through all Hashes in the BucketIdx-th bucket, attempting to find; /// HashToFind. If it is found, its index in the list of hashes is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:28,Security,Hash,HashData,28,/// Returns the size of one HashData entry.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:50,Availability,avail,available,50,/// Returns true iff `AtomTy` is one of the atoms available in Entries of this; /// table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:76,Performance,perform,performing,76,"/// Return information related to the DWARF DIE we're looking for when; /// performing a lookup by name.; ///; /// \param HashDataOffset an offset into the hash data table; /// \returns <DieOffset, DieTag>; /// DieOffset is the offset into the .debug_info section for the DIE; /// related to the input hash data offset.; /// DieTag is the tag of the DIE",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:122,Security,Hash,HashDataOffset,122,"/// Return information related to the DWARF DIE we're looking for when; /// performing a lookup by name.; ///; /// \param HashDataOffset an offset into the hash data table; /// \returns <DieOffset, DieTag>; /// DieOffset is the offset into the .debug_info section for the DIE; /// related to the input hash data offset.; /// DieTag is the tag of the DIE",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:156,Security,hash,hash,156,"/// Return information related to the DWARF DIE we're looking for when; /// performing a lookup by name.; ///; /// \param HashDataOffset an offset into the hash data table; /// \returns <DieOffset, DieTag>; /// DieOffset is the offset into the .debug_info section for the DIE; /// related to the input hash data offset.; /// DieTag is the tag of the DIE",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:302,Security,hash,hash,302,"/// Return information related to the DWARF DIE we're looking for when; /// performing a lookup by name.; ///; /// \param HashDataOffset an offset into the hash data table; /// \returns <DieOffset, DieTag>; /// DieOffset is the offset into the .debug_info section for the DIE; /// related to the input hash data offset.; /// DieTag is the tag of the DIE",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:227,Security,hash,hash,227,"/// .debug_names section consists of one or more units. Each unit starts with a; /// header, which is followed by a list of compilation units, local and foreign; /// type units.; ///; /// These may be followed by an (optional) hash lookup table, which consists of; /// an array of buckets and hashes similar to the apple tables above. The only; /// difference is that the hashes array is 1-based, and consequently an empty; /// bucket is denoted by 0 and not UINT32_MAX.; ///; /// Next is the name table, which consists of an array of names and array of; /// entry offsets. This is different from the apple tables, which store names; /// next to the actual entries.; ///; /// The structure of the entries is described by an abbreviations table, which; /// comes after the name table. Unlike the apple tables, which have a uniform; /// entry structure described in the header, each .debug_names entry may have; /// different index attributes (DW_IDX_???) attached to it.; ///; /// The last segment consists of a list of entries, which is a 0-terminated list; /// referenced by the name table and interpreted with the help of the; /// abbreviation table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:293,Security,hash,hashes,293,"/// .debug_names section consists of one or more units. Each unit starts with a; /// header, which is followed by a list of compilation units, local and foreign; /// type units.; ///; /// These may be followed by an (optional) hash lookup table, which consists of; /// an array of buckets and hashes similar to the apple tables above. The only; /// difference is that the hashes array is 1-based, and consequently an empty; /// bucket is denoted by 0 and not UINT32_MAX.; ///; /// Next is the name table, which consists of an array of names and array of; /// entry offsets. This is different from the apple tables, which store names; /// next to the actual entries.; ///; /// The structure of the entries is described by an abbreviations table, which; /// comes after the name table. Unlike the apple tables, which have a uniform; /// entry structure described in the header, each .debug_names entry may have; /// different index attributes (DW_IDX_???) attached to it.; ///; /// The last segment consists of a list of entries, which is a 0-terminated list; /// referenced by the name table and interpreted with the help of the; /// abbreviation table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:372,Security,hash,hashes,372,"/// .debug_names section consists of one or more units. Each unit starts with a; /// header, which is followed by a list of compilation units, local and foreign; /// type units.; ///; /// These may be followed by an (optional) hash lookup table, which consists of; /// an array of buckets and hashes similar to the apple tables above. The only; /// difference is that the hashes array is 1-based, and consequently an empty; /// bucket is denoted by 0 and not UINT32_MAX.; ///; /// Next is the name table, which consists of an array of names and array of; /// entry offsets. This is different from the apple tables, which store names; /// next to the actual entries.; ///; /// The structure of the entries is described by an abbreviations table, which; /// comes after the name table. Unlike the apple tables, which have a uniform; /// entry structure described in the header, each .debug_names entry may have; /// different index attributes (DW_IDX_???) attached to it.; ///; /// The last segment consists of a list of entries, which is a 0-terminated list; /// referenced by the name table and interpreted with the help of the; /// abbreviation table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:4,Availability,Error,Error,4,/// Error returned by NameIndex::getEntry to report it has reached the end of; /// the entry list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:26,Security,Hash,Hash,26,/// Reads an entry in the Hash Array for the given Index. The input Index; /// is 1-based.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:5,Security,Hash,Hash,5,"///< Hash of Key, if it has been computed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAddressRange.h:18,Testability,test,testing,18,/// Used for unit testing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAddressRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAddressRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:62,Modifiability,variab,variables,62,"/// DWARFContextState; /// This structure contains all member variables for DWARFContext that need; /// to be protected in multi-threaded environments. Threading support can be; /// enabled by setting the ThreadSafe to true when constructing a; /// DWARFContext to allow DWARRContext to be able to be used in a; /// multi-threaded environment, or not enabled to allow for maximum; /// performance in single threaded environments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:123,Performance,multi-thread,multi-threaded,123,"/// DWARFContextState; /// This structure contains all member variables for DWARFContext that need; /// to be protected in multi-threaded environments. Threading support can be; /// enabled by setting the ThreadSafe to true when constructing a; /// DWARFContext to allow DWARRContext to be able to be used in a; /// multi-threaded environment, or not enabled to allow for maximum; /// performance in single threaded environments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:316,Performance,multi-thread,multi-threaded,316,"/// DWARFContextState; /// This structure contains all member variables for DWARFContext that need; /// to be protected in multi-threaded environments. Threading support can be; /// enabled by setting the ThreadSafe to true when constructing a; /// DWARFContext to allow DWARRContext to be able to be used in a; /// multi-threaded environment, or not enabled to allow for maximum; /// performance in single threaded environments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:385,Performance,perform,performance,385,"/// DWARFContextState; /// This structure contains all member variables for DWARFContext that need; /// to be protected in multi-threaded environments. Threading support can be; /// enabled by setting the ThreadSafe to true when constructing a; /// DWARFContext to allow DWARRContext to be able to be used in a; /// multi-threaded environment, or not enabled to allow for maximum; /// performance in single threaded environments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:90,Availability,recover,recoverable,90,/// Get a pointer to a parsed line table corresponding to a compile unit.; /// Report any recoverable parsing problems using the handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:90,Safety,recover,recoverable,90,/// Get a pointer to a parsed line table corresponding to a compile unit.; /// Report any recoverable parsing problems using the handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:3,Usability,Clear,Clear,3,"// Clear the line table object corresponding to a compile unit for memory; // management purpose. When it's referred to again, it'll be re-populated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:4,Integrability,Wrap,Wraps,4,/// Wraps the returned DIEs for a given address.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:42,Modifiability,refactor,refactor,42,/// Get address size from CUs.; /// TODO: refactor compile_units() to make this const.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDataExtractor.h:265,Availability,error,errors,265,"/// Extracts the DWARF ""initial length"" field, which can either be a 32-bit; /// value smaller than 0xfffffff0, or the value 0xffffffff followed by a; /// 64-bit length. Returns the actual length, and the DWARF format which is; /// encoded in the field. In case of errors, it returns {0, DWARF32} and; /// leaves the offset unchanged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDataExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDataExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugAddr.h:130,Availability,reliab,reliably,130,"/// Return the full length of this table, including the length field.; /// Return std::nullopt if the length cannot be identified reliably.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugAddr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugAddr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:20,Availability,avail,available,20,/// Register is not available and can't be recovered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:43,Availability,recover,recovered,43,/// Register is not available and can't be recovered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:43,Safety,recover,recovered,43,/// Register is not available and can't be recovered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:59,Availability,avail,available,59,/// Create a location where the value is undefined and not available. This can; /// happen when a register is volatile and can't be recovered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:132,Availability,recover,recovered,132,/// Create a location where the value is undefined and not available. This can; /// happen when a register is volatile and can't be recovered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:132,Safety,recover,recovered,132,/// Create a location where the value is undefined and not available. This can; /// happen when a register is volatile and can't be recovered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:392,Modifiability,variab,variables,392,"/// Create a location where the saved value is in (Deref == false) or at; /// (Deref == true) a regiser plus an offset and, optionally, in the specified; /// address space (used mostly for the CFA).; ///; /// The CFA is usually defined using this rule by using the stack pointer or; /// frame pointer as the register, with an offset that accounts for all; /// spilled registers and all local variables in a function, and Deref ==; /// false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:67,Deployability,update,update,67,/// Some opcodes modify a constant value and we need to be able to update; /// the constant value (DW_CFA_GNU_window_save which is also known as; // DW_CFA_AARCH64_negate_ra_state).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:186,Availability,avail,available,186,"/// Return the location for the register in \a RegNum if there is a location.; ///; /// \param RegNum the register number to find a location for.; ///; /// \returns A location if one is available for \a RegNum, or std::nullopt; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:793,Security,Access,Accessors,793,"/// A class that represents a single row in the unwind table that is decoded by; /// parsing the DWARF Call Frame Information opcodes.; ///; /// The row consists of an optional address, the rule to unwind the CFA and all; /// rules to unwind any registers. If the address doesn't have a value, this; /// row represents the initial instructions for a CIE. If the address has a; /// value the UnwindRow represents a row in the UnwindTable for a FDE. The; /// address is the first address for which the CFA location and register rules; /// are valid within a function.; ///; /// UnwindRow objects are created by parsing opcodes in the DWARF Call Frame; /// Information and UnwindRow objects are lazily populated and pushed onto a; /// stack in the UnwindTable when evaluating this state machine. Accessors are; /// needed for the address, CFA value, and register locations as the opcodes; /// encode a state machine that produces a sorted array of UnwindRow objects; /// \see UnwindTable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:261,Availability,error,error,261,"/// Create an UnwindTable from a Common Information Entry (CIE).; ///; /// \param Cie The Common Information Entry to extract the table from. The; /// CFIProgram is retrieved from the \a Cie object and used to create the; /// UnwindTable.; ///; /// \returns An error if the DWARF Call Frame Information opcodes have state; /// machine errors, or a valid UnwindTable otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:335,Availability,error,errors,335,"/// Create an UnwindTable from a Common Information Entry (CIE).; ///; /// \param Cie The Common Information Entry to extract the table from. The; /// CFIProgram is retrieved from the \a Cie object and used to create the; /// UnwindTable.; ///; /// \returns An error if the DWARF Call Frame Information opcodes have state; /// machine errors, or a valid UnwindTable otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:257,Availability,error,error,257,"/// Create an UnwindTable from a Frame Descriptor Entry (FDE).; ///; /// \param Fde The Frame Descriptor Entry to extract the table from. The; /// CFIProgram is retrieved from the \a Fde object and used to create the; /// UnwindTable.; ///; /// \returns An error if the DWARF Call Frame Information opcodes have state; /// machine errors, or a valid UnwindTable otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:331,Availability,error,errors,331,"/// Create an UnwindTable from a Frame Descriptor Entry (FDE).; ///; /// \param Fde The Frame Descriptor Entry to extract the table from. The; /// CFIProgram is retrieved from the \a Fde object and used to create the; /// UnwindTable.; ///; /// \returns An error if the DWARF Call Frame Information opcodes have state; /// machine errors, or a valid UnwindTable otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:48,Deployability,update,update,48,"/// Parse the information in the CFIProgram and update the CurrRow object; /// that the state machine describes.; ///; /// This is an internal implementation that emulates the state machine; /// described in the DWARF Call Frame Information opcodes and will push; /// CurrRow onto the Rows container when needed.; ///; /// \param CFIP the CFI program that contains the opcodes from a CIE or FDE.; ///; /// \param CurrRow the current row to modify while parsing the state machine.; ///; /// \param InitialLocs If non-NULL, we are parsing a FDE and this contains; /// the initial register locations from the CIE. If NULL, then a CIE's; /// opcodes are being parsed and this is not needed. This is used for the; /// DW_CFA_restore and DW_CFA_restore_extended opcodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:212,Safety,avoid,avoid,212,"/// Represent a sequence of Call Frame Information instructions that, when read; /// in order, construct a table mapping PC to frame state. This can also be; /// referred to as ""CFI rules"" in DWARF literature to avoid confusion with; /// computer programs in the broader sense, and in this context each instruction; /// would be a rule to establish the mapping. Refer to pg. 172 in the DWARF5; /// manual, ""6.4.1 Structure of Call Frame Information"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:239,Availability,error,error,239,"/// Parse and store a sequence of CFI instructions from Data,; /// starting at *Offset and ending at EndOffset. *Offset is updated; /// to EndOffset upon successful parsing, or indicates the offset; /// where a problem occurred in case an error is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:123,Deployability,update,updated,123,"/// Parse and store a sequence of CFI instructions from Data,; /// starting at *Offset and ending at EndOffset. *Offset is updated; /// to EndOffset upon successful parsing, or indicates the offset; /// where a problem occurred in case an error is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:332,Usability,simpl,simplify,332,"/// Types of operands to CFI instructions; /// In DWARF, this type is implicitly tied to a CFI instruction opcode and; /// thus this type doesn't need to be explictly written to the file (this is; /// not a DWARF encoding). The relationship of instrs to operand types can; /// be obtained from getOperandTypes() and is only used to simplify; /// instruction printing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:23,Usability,simpl,simply,23,"// CIEs (and FDEs) are simply container classes, so the only sensible way to; // create them is by providing the full parsed contents in the constructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:24,Security,access,accessors,24,/// DWARF Frame entries accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugInfoEntry.h:186,Performance,perform,performance,186,"/// Extracts a debug info entry, which is a child of a given unit,; /// starting at a given offset. If DIE can't be extracted, returns false and; /// doesn't change OffsetPtr.; /// High performance extraction should use this call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugInfoEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugInfoEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:52,Security,checksum,checksum,52,"/// For v5, whether filename entries provide an MD5 checksum.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:4,Deployability,Update,Update,4,/// Update tracked content types with \p ContentType.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:28,Security,access,access,28,/// Get DWARF-version aware access to the file name entry at the provided; /// index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:104,Availability,Recover,RecoverableErrorHandler,104,"/// Get the next line table from the section. Report any issues via the; /// handlers.; ///; /// \param RecoverableErrorHandler - any issues that don't prevent further; /// parsing of the table will be reported through this handler.; /// \param UnrecoverableErrorHandler - any issues that prevent further; /// parsing of the table will be reported through this handler.; /// \param OS - if not null, the parser will print information about the; /// table as it parses it.; /// \param Verbose - if true, the parser will print verbose information when; /// printing to the output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:104,Safety,Recover,RecoverableErrorHandler,104,"/// Get the next line table from the section. Report any issues via the; /// handlers.; ///; /// \param RecoverableErrorHandler - any issues that don't prevent further; /// parsing of the table will be reported through this handler.; /// \param UnrecoverableErrorHandler - any issues that prevent further; /// parsing of the table will be reported through this handler.; /// \param OS - if not null, the parser will print information about the; /// table as it parses it.; /// \param Verbose - if true, the parser will print verbose information when; /// printing to the output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:115,Availability,Recover,RecoverableErrorHandler,115,/// Skip the current line table and go to the following line table (if; /// present) immediately.; ///; /// \param RecoverableErrorHandler - report any recoverable prologue; /// parsing issues via this handler.; /// \param UnrecoverableErrorHandler - report any unrecoverable prologue; /// parsing issues via this handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:152,Availability,recover,recoverable,152,/// Skip the current line table and go to the following line table (if; /// present) immediately.; ///; /// \param RecoverableErrorHandler - report any recoverable prologue; /// parsing issues via this handler.; /// \param UnrecoverableErrorHandler - report any unrecoverable prologue; /// parsing issues via this handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:115,Safety,Recover,RecoverableErrorHandler,115,/// Skip the current line table and go to the following line table (if; /// present) immediately.; ///; /// \param RecoverableErrorHandler - report any recoverable prologue; /// parsing issues via this handler.; /// \param UnrecoverableErrorHandler - report any unrecoverable prologue; /// parsing issues via this handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:152,Safety,recover,recoverable,152,/// Skip the current line table and go to the following line table (if; /// present) immediately.; ///; /// \param RecoverableErrorHandler - report any recoverable prologue; /// parsing issues via this handler.; /// \param UnrecoverableErrorHandler - report any unrecoverable prologue; /// parsing issues via this handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:214,Availability,error,error,214,/// Call the user-provided callback for each entry (including the end-of-list; /// entry) in the location list starting at \p Offset. The callback can return; /// false to terminate the iteration early. Returns an error if it was unable; /// to parse the entire location list correctly. Upon successful termination; /// \p Offset will be updated point past the end of the list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:338,Deployability,update,updated,338,/// Call the user-provided callback for each entry (including the end-of-list; /// entry) in the location list starting at \p Offset. The callback can return; /// false to terminate the iteration early. Returns an error if it was unable; /// to parse the entire location list correctly. Upon successful termination; /// \p Offset will be updated point past the end of the list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:239,Deployability,update,updated,239,/// Dump the location list at the given \p Offset. The function returns true; /// iff it has successfully reched the end of the list. This means that one; /// can attempt to parse another list after the current one (\p Offset will be; /// updated to point past the end of the current list).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:41,Modifiability,variab,variable,41,/// A list of locations that contain one variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:35,Modifiability,variab,variable,35,/// All the locations in which the variable is stored.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:22,Modifiability,variab,variables,22,"/// A list of all the variables in the debug_loc section, each one describing; /// the locations in which the variable is stored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:110,Modifiability,variab,variable,110,"/// A list of all the variables in the debug_loc section, each one describing; /// the locations in which the variable is stored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugMacro.h:48,Security,access,accessible,48,/// Parse the debug_macinfo/debug_macro section accessible via the 'MacroData'; /// parameter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugMacro.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugMacro.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugPubTable.h:35,Modifiability,variab,variable,35,"/// Each table consists of sets of variable length entries. Each set describes; /// the names of global objects and functions, or global types, respectively,; /// whose definitions are represented by debugging information entries owned; /// by a single compilation unit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugPubTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugPubTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:530,Availability,error,error,530,//===----------------------------------------------------------------------===//; /// Utility class that carries the DWARF compile/type unit and the debug info; /// entry in an object.; ///; /// When accessing information from a debug info entry we always need to DWARF; /// compile/type unit in order to extract the info correctly as some information; /// is relative to the compile/type unit. Prior to this class the DWARFUnit and; /// the DWARFDebugInfoEntry was passed around separately and there was the; /// possibility for error if the wrong DWARFUnit was used to extract a unit; /// relative offset. This class helps to ensure that this doesn't happen and; /// also simplifies the attribute extraction calls by not having to specify the; /// DWARFUnit for each call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:200,Security,access,accessing,200,//===----------------------------------------------------------------------===//; /// Utility class that carries the DWARF compile/type unit and the debug info; /// entry in an object.; ///; /// When accessing information from a debug info entry we always need to DWARF; /// compile/type unit in order to extract the info correctly as some information; /// is relative to the compile/type unit. Prior to this class the DWARFUnit and; /// the DWARFDebugInfoEntry was passed around separately and there was the; /// possibility for error if the wrong DWARFUnit was used to extract a unit; /// relative offset. This class helps to ensure that this doesn't happen and; /// also simplifies the attribute extraction calls by not having to specify the; /// DWARFUnit for each call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:674,Usability,simpl,simplifies,674,//===----------------------------------------------------------------------===//; /// Utility class that carries the DWARF compile/type unit and the debug info; /// entry in an object.; ///; /// When accessing information from a debug info entry we always need to DWARF; /// compile/type unit in order to extract the info correctly as some information; /// is relative to the compile/type unit. Prior to this class the DWARFUnit and; /// the DWARFDebugInfoEntry was passed around separately and there was the; /// possibility for error if the wrong DWARFUnit was used to extract a unit; /// relative offset. This class helps to ensure that this doesn't happen and; /// also simplifies the attribute extraction calls by not having to specify the; /// DWARFUnit for each call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:98,Availability,avail,available,98,/// Get the address ranges for this DIE.; ///; /// Get the hi/low PC range if both attributes are available or exrtracts the; /// non-contiguous address ranges from the DW_AT_ranges attribute.; ///; /// Extracts the range information from this DIE only. This call doesn't look; /// for the range in any DW_AT_specification or DW_AT_abstract_origin DIEs.; ///; /// \returns a address range vector that might be empty if no address range; /// information is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:456,Availability,avail,available,456,/// Get the address ranges for this DIE.; ///; /// Get the hi/low PC range if both attributes are available or exrtracts the; /// non-contiguous address ranges from the DW_AT_ranges attribute.; ///; /// Extracts the range information from this DIE only. This call doesn't look; /// for the range in any DW_AT_specification or DW_AT_abstract_origin DIEs.; ///; /// \returns a address range vector that might be empty if no address range; /// information is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:234,Availability,error,error,234,"/// Update the attribute index and attempt to read the attribute value. If the; /// attribute is able to be read, update AttrValue and the Index member; /// variable. If the attribute value is not able to be read, an appropriate; /// error will be set if the Err member variable is non-NULL and the iterator; /// will be set to the end value so iteration stops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:4,Deployability,Update,Update,4,"/// Update the attribute index and attempt to read the attribute value. If the; /// attribute is able to be read, update AttrValue and the Index member; /// variable. If the attribute value is not able to be read, an appropriate; /// error will be set if the Err member variable is non-NULL and the iterator; /// will be set to the end value so iteration stops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:114,Deployability,update,update,114,"/// Update the attribute index and attempt to read the attribute value. If the; /// attribute is able to be read, update AttrValue and the Index member; /// variable. If the attribute value is not able to be read, an appropriate; /// error will be set if the Err member variable is non-NULL and the iterator; /// will be set to the end value so iteration stops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:157,Modifiability,variab,variable,157,"/// Update the attribute index and attempt to read the attribute value. If the; /// attribute is able to be read, update AttrValue and the Index member; /// variable. If the attribute value is not able to be read, an appropriate; /// error will be set if the Err member variable is non-NULL and the iterator; /// will be set to the end value so iteration stops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:270,Modifiability,variab,variable,270,"/// Update the attribute index and attempt to read the attribute value. If the; /// attribute is able to be read, update AttrValue and the Index member; /// variable. If the attribute value is not able to be read, an appropriate; /// error will be set if the Err member variable is non-NULL and the iterator; /// will be set to the end value so iteration stops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFExpression.h:91,Availability,Error,Error,91,"/// This class represents an Operation in the Expression.; ///; /// An Operation can be in Error state (check with isError()). This; /// means that it couldn't be decoded successfully and if it is the; /// case, all others fields contain undefined values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFExpression.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFExpression.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:141,Deployability,update,updates,141,"/// Skip a form's value in \p DebugInfoData at the offset specified by; /// \p OffsetPtr.; ///; /// Skips the bytes for the current form and updates the offset.; ///; /// \param DebugInfoData The data where we want to skip the value.; /// \param OffsetPtr A reference to the offset that will be updated.; /// \param Params DWARF parameters to help interpret forms.; /// \returns true on success, false if the form was not skipped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:295,Deployability,update,updated,295,"/// Skip a form's value in \p DebugInfoData at the offset specified by; /// \p OffsetPtr.; ///; /// Skips the bytes for the current form and updates the offset.; ///; /// \param DebugInfoData The data where we want to skip the value.; /// \param OffsetPtr A reference to the offset that will be updated.; /// \param Params DWARF parameters to help interpret forms.; /// \returns true on success, false if the form was not skipped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:143,Deployability,update,updates,143,"/// Skip a form's value in \p DebugInfoData at the offset specified by; /// \p OffsetPtr.; ///; /// Skips the bytes for the specified form and updates the offset.; ///; /// \param Form The DW_FORM enumeration that indicates the form to skip.; /// \param DebugInfoData The data where we want to skip the value.; /// \param OffsetPtr A reference to the offset that will be updated.; /// \param FormParams DWARF parameters to help interpret forms.; /// \returns true on success, false if the form was not skipped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:371,Deployability,update,updated,371,"/// Skip a form's value in \p DebugInfoData at the offset specified by; /// \p OffsetPtr.; ///; /// Skips the bytes for the specified form and updates the offset.; ///; /// \param Form The DW_FORM enumeration that indicates the form to skip.; /// \param DebugInfoData The data where we want to skip the value.; /// \param OffsetPtr A reference to the offset that will be updated.; /// \param FormParams DWARF parameters to help interpret forms.; /// \returns true on success, false if the form was not skipped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:216,Availability,failure,failure,216,/// Take an optional DWARFFormValue and extract a string value from it.; ///; /// \param V and optional DWARFFormValue to attempt to extract the value from.; /// \param Default the default value to return in case of failure.; /// \returns the string value or Default if the V doesn't have a value or the; /// form value's encoding wasn't a string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:213,Availability,failure,failure,213,/// Take an optional DWARFFormValue and extract a unsigned constant.; ///; /// \param V and optional DWARFFormValue to attempt to extract the value from.; /// \param Default the default value to return in case of failure.; /// \returns the extracted unsigned value or Default if the V doesn't have a; /// value or the form value's encoding wasn't an unsigned constant form.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:205,Availability,failure,failure,205,/// Take an optional DWARFFormValue and extract a reference.; ///; /// \param V and optional DWARFFormValue to attempt to extract the value from.; /// \param Default the default value to return in case of failure.; /// \returns the extracted reference value or Default if the V doesn't have a; /// value or the form value's encoding wasn't a reference form.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:210,Availability,failure,failure,210,/// Take an optional DWARFFormValue and extract a signed integer.; ///; /// \param V and optional DWARFFormValue to attempt to extract the value from.; /// \param Default the default value to return in case of failure.; /// \returns the extracted signed integer value or Default if the V doesn't; /// have a value or the form value's encoding wasn't a signed integer form.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:203,Availability,failure,failure,203,/// Take an optional DWARFFormValue and extract a address.; ///; /// \param V and optional DWARFFormValue to attempt to extract the value from.; /// \param Default the default value to return in case of failure.; /// \returns the extracted address value or Default if the V doesn't have a; /// value or the form value's encoding wasn't an address form.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:210,Availability,failure,failure,210,/// Take an optional DWARFFormValue and extract a section offset.; ///; /// \param V and optional DWARFFormValue to attempt to extract the value from.; /// \param Default the default value to return in case of failure.; /// \returns the extracted section offset value or Default if the V doesn't; /// have a value or the form value's encoding wasn't a section offset form.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFListTable.h:105,Integrability,depend,dependent,105,"/// Return the size of the table header including the length but not including; /// the offsets. This is dependent on the table format, which is unambiguously; /// derived from parsing the table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFListTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFListTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFLocationExpression.h:66,Integrability,depend,dependent,66,"/// Represents a single DWARF expression, whose value is location-dependent.; /// Typically used in DW_AT_location attributes to describe the location of; /// objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFLocationExpression.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFLocationExpression.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFObject.h:37,Security,access,access,37,// This is responsible for low level access to the object file. It; // knows how to find the required sections and compute relocated; // values.; // The default implementations of the get<Section> methods return dummy values.; // This is to allow clients that only need some of those to implement just the; // ones they need. We can't use unreachable for as many cases because the parser; // implementation is eager and will call some of these methods even if the; // result is not used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:65,Deployability,update,update,65,"// For units in DWARF Package File, remember the index entry and update; // the abbreviation offset read by extract().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:239,Security,access,accessible,239,"/// Return the index of a \p Die entry inside the unit's DIE vector.; ///; /// It is illegal to call this method with a DIE that hasn't be; /// created by this unit. In other word, it's illegal to call this; /// method on a DIE that isn't accessible by following; /// children/sibling links starting from this unit's getUnitDIE().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:155,Availability,avail,available,155,"// Returns itself if not using Split DWARF, or if the unit is a skeleton unit; // - otherwise returns the split full unit's corresponding skeleton, if; // available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:16,Deployability,update,update,16,/// Recursively update address to Die map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:16,Deployability,update,update,16,/// Recursively update address to variable Die map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:34,Modifiability,variab,variable,34,/// Recursively update address to variable Die map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:134,Availability,error,error,134,"/// Extract the range list referenced by this compile unit from the; /// .debug_ranges section. If the extraction is unsuccessful, an error; /// is returned. Successful extraction requires that the compile unit; /// has already been extracted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:101,Availability,alive,alive,101,/// Returns subprogram DIE with address range encompassing the provided; /// address. The pointer is alive as long as parsed compile unit DIEs are not; /// cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:156,Usability,clear,cleared,156,/// Returns subprogram DIE with address range encompassing the provided; /// address. The pointer is alive as long as parsed compile unit DIEs are not; /// cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:66,Availability,alive,alive,66,/// Returns variable DIE for the address provided. The pointer is alive as; /// long as parsed compile unit DIEs are not cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:12,Modifiability,variab,variable,12,/// Returns variable DIE for the address provided. The pointer is alive as; /// long as parsed compile unit DIEs are not cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:121,Usability,clear,cleared,121,/// Returns variable DIE for the address provided. The pointer is alive as; /// long as parsed compile unit DIEs are not cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:214,Usability,clear,cleared,214,/// getInlinedChainForAddress - fetches inlined chain for a given address.; /// Returns empty chain if there is no subprogram containing address. The; /// chain is valid as long as parsed compile unit DIEs are not cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:230,Security,access,accessible,230,"/// Return the index of a DIE inside the unit's DIE vector.; ///; /// It is illegal to call this method with a DIE that hasn't be; /// created by this unit. In other word, it's illegal to call this; /// method on a DIE that isn't accessible by following; /// children/sibling links starting from this unit's getUnitDIE().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:4,Usability,clear,clearDIEs,4,/// clearDIEs - Clear parsed DIEs to keep memory usage low.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:16,Usability,Clear,Clear,16,/// clearDIEs - Clear parsed DIEs to keep memory usage low.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h:59,Integrability,interface,interfaces,59,"/// The enum of section identifiers to be used in internal interfaces.; ///; /// Pre-standard implementation of package files defined a number of section; /// identifiers with values that clash definitions in the DWARFv5 standard.; /// See https://gcc.gnu.org/wiki/DebugFissionDWP and Section 7.3.5.3 in DWARFv5.; ///; /// The following identifiers are the same in the proposal and in DWARFv5:; /// - DW_SECT_INFO = 1 (.debug_info.dwo); /// - DW_SECT_ABBREV = 3 (.debug_abbrev.dwo); /// - DW_SECT_LINE = 4 (.debug_line.dwo); /// - DW_SECT_STR_OFFSETS = 6 (.debug_str_offsets.dwo); ///; /// The following identifiers are defined only in DWARFv5:; /// - DW_SECT_LOCLISTS = 5 (.debug_loclists.dwo); /// - DW_SECT_RNGLISTS = 8 (.debug_rnglists.dwo); ///; /// The following identifiers are defined only in the GNU proposal:; /// - DW_SECT_TYPES = 2 (.debug_types.dwo); /// - DW_SECT_LOC = 5 (.debug_loc.dwo); /// - DW_SECT_MACINFO = 7 (.debug_macinfo.dwo); ///; /// DW_SECT_MACRO for the .debug_macro.dwo section is defined in both standards,; /// but with different values, 8 in GNU and 7 in DWARFv5.; ///; /// This enum defines constants to represent the identifiers of both sets.; /// For DWARFv5 ones, the values are the same as defined in the standard.; /// For pre-standard ones that correspond to sections being deprecated in; /// DWARFv5, the values are chosen arbitrary and a tag ""_EXT_"" is added to; /// the names.; ///; /// The enum is for internal use only. The user should not expect the values; /// to correspond to any input/output constants. Special conversion functions,; /// serializeSectionKind() and deserializeSectionKind(), should be used for; /// the translation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h:96,Integrability,depend,depends,96,/// Convert the internal value for a section kind to an on-disk value.; ///; /// The conversion depends on the version of the index section.; /// IndexVersion is expected to be either 2 for pre-standard GNU proposal; /// or 5 for DWARFv5 package file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h:104,Integrability,depend,depends,104,"/// Convert a value read from an index section to the internal representation.; ///; /// The conversion depends on the index section version, which is expected; /// to be either 2 for pre-standard GNU proposal or 5 for DWARFv5 package file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:18,Testability,test,testing,18,/// Used for unit testing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:56,Modifiability,portab,portably,56,// Used to relax some checks that do not currently work portably,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:361,Availability,error,errors,361,/// Verifies the abbreviations section.; ///; /// This function currently checks that:; /// --No abbreviation declaration has more than one attributes with the same; /// name.; ///; /// \param Abbrev Pointer to the abbreviations section we are verifying; /// Abbrev can be a pointer to either .debug_abbrev or debug_abbrev.dwo.; ///; /// \returns The number of errors that occurred during verification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:599,Deployability,update,updated,599,"/// Verifies the header of a unit in a .debug_info or .debug_types section.; ///; /// This function currently checks for:; /// - Unit is in 32-bit DWARF format. The function can be modified to; /// support 64-bit format.; /// - The DWARF version is valid; /// - The unit type is valid (if unit is in version >=5); /// - The unit doesn't extend beyond the containing section; /// - The address size is valid; /// - The offset in the .debug_abbrev section is valid; ///; /// \param DebugInfoData The section data; /// \param Offset A reference to the offset start of the unit. The offset will; /// be updated to point to the next unit in the section; /// \param UnitIndex The index of the unit to be verified; /// \param UnitType A reference to the type of the unit; /// \param isUnitDWARF64 A reference to a flag that shows whether the unit is; /// in 64-bit format.; ///; /// \returns true if the header is verified successfully, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:337,Modifiability,extend,extend,337,"/// Verifies the header of a unit in a .debug_info or .debug_types section.; ///; /// This function currently checks for:; /// - Unit is in 32-bit DWARF format. The function can be modified to; /// support 64-bit format.; /// - The DWARF version is valid; /// - The unit type is valid (if unit is in version >=5); /// - The unit doesn't extend beyond the containing section; /// - The address size is valid; /// - The offset in the .debug_abbrev section is valid; ///; /// \param DebugInfoData The section data; /// \param Offset A reference to the offset start of the unit. The offset will; /// be updated to point to the next unit in the section; /// \param UnitIndex The index of the unit to be verified; /// \param UnitType A reference to the type of the unit; /// \param isUnitDWARF64 A reference to a flag that shows whether the unit is; /// in 64-bit format.; ///; /// \returns true if the header is verified successfully, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:538,Availability,error,errors,538,"/// Verifies the header of a unit in a .debug_info or .debug_types section.; ///; /// This function currently verifies:; /// - The debug info attributes.; /// - The debug info form=s.; /// - The presence of a root DIE.; /// - That the root DIE is a unit DIE.; /// - If a unit type is provided, that the unit DIE matches the unit type.; /// - The DIE ranges.; /// - That call site entries are only nested within subprograms with a; /// DW_AT_call attribute.; ///; /// \param Unit The DWARF Unit to verify.; ///; /// \returns The number of errors that occurred during verification.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:171,Availability,error,errors,171,/// Verifies the unit headers and contents in a .debug_info or .debug_types; /// section.; ///; /// \param S The DWARF Section to verify.; ///; /// \returns The number of errors that occurred during verification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:129,Availability,error,errors,129,/// Verifies that a call site entry is nested within a subprogram with a; /// DW_AT_call attribute.; ///; /// \returns Number of errors that occurred during verification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:155,Availability,error,errors,155,/// Verify that all Die ranges are valid.; ///; /// This function currently checks for:; /// - cases in which lowPC >= highPC; ///; /// \returns Number of errors that occurred during verification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:383,Availability,error,errors,383,/// Verifies the attribute's DWARF attribute and its value.; ///; /// This function currently checks for:; /// - DW_AT_ranges values is a valid .debug_ranges offset; /// - DW_AT_stmt_list is a valid .debug_line offset; ///; /// \param Die The DWARF DIE that owns the attribute value; /// \param AttrValue The DWARF attribute value to check; ///; /// \returns NumErrors The number of errors occurred during verification of; /// attributes' values in a unit,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:448,Availability,error,errors,448,/// Verifies the attribute's DWARF form.; ///; /// This function currently checks for:; /// - All DW_FORM_ref values that are CU relative have valid CU offsets; /// - All DW_FORM_ref_addr values have valid section offsets; /// - All DW_FORM_strp values have valid .debug_str offsets; ///; /// \param Die The DWARF DIE that owns the attribute value; /// \param AttrValue The DWARF attribute value to check; ///; /// \returns NumErrors The number of errors occurred during verification of; /// attributes' forms in a unit,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:429,Availability,error,errors,429,"/// Verifies the all valid references that were found when iterating through; /// all of the DIE attributes.; ///; /// This function will verify that all references point to DIEs whose DIE; /// offset matches. This helps to ensure if a DWARF link phase moved things; /// around, that it doesn't create invalid references by failing to relocate; /// CU relative and absolute references.; ///; /// \returns NumErrors The number of errors occurred during verification of; /// references for the .debug_info and .debug_types sections",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:708,Availability,error,errors,708,"/// Verify that an Apple-style accelerator table is valid.; ///; /// This function currently checks that:; /// - The fixed part of the header fits in the section; /// - The size of the section is as large as what the header describes; /// - There is at least one atom; /// - The form for each atom is valid; /// - The tag for each DIE in the table is valid; /// - The buckets have a valid index, or they are empty; /// - Each hashdata offset is valid; /// - Each DIE is valid; ///; /// \param AccelSection pointer to the section containing the acceleration table; /// \param StrData pointer to the string section; /// \param SectionName the name of the table we're verifying; ///; /// \returns The number of errors occurred during verification",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:426,Security,hash,hashdata,426,"/// Verify that an Apple-style accelerator table is valid.; ///; /// This function currently checks that:; /// - The fixed part of the header fits in the section; /// - The size of the section is as large as what the header describes; /// - There is at least one atom; /// - The form for each atom is valid; /// - The tag for each DIE in the table is valid; /// - The buckets have a valid index, or they are empty; /// - Each hashdata offset is valid; /// - Each DIE is valid; ///; /// \param AccelSection pointer to the section containing the acceleration table; /// \param StrData pointer to the string section; /// \param SectionName the name of the table we're verifying; ///; /// \returns The number of errors occurred during verification",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:810,Availability,error,errors,810,"/// Verify that the DWARF v5 accelerator table is valid.; ///; /// This function currently checks that:; /// - Headers individual Name Indices fit into the section and can be parsed.; /// - Abbreviation tables can be parsed and contain valid index attributes; /// with correct form encodings.; /// - The CU lists reference existing compile units.; /// - The buckets have a valid index, or they are empty.; /// - All names are reachable via the hash table (they have the correct hash,; /// and the hash is in the correct bucket).; /// - Information in the index entries is complete (all required entries are; /// present) and consistent with the debug_info section DIEs.; ///; /// \param AccelSection section containing the acceleration table; /// \param StrData string section; ///; /// \returns The number of errors occurred during verification",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:444,Security,hash,hash,444,"/// Verify that the DWARF v5 accelerator table is valid.; ///; /// This function currently checks that:; /// - Headers individual Name Indices fit into the section and can be parsed.; /// - Abbreviation tables can be parsed and contain valid index attributes; /// with correct form encodings.; /// - The CU lists reference existing compile units.; /// - The buckets have a valid index, or they are empty.; /// - All names are reachable via the hash table (they have the correct hash,; /// and the hash is in the correct bucket).; /// - Information in the index entries is complete (all required entries are; /// present) and consistent with the debug_info section DIEs.; ///; /// \param AccelSection section containing the acceleration table; /// \param StrData string section; ///; /// \returns The number of errors occurred during verification",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:478,Security,hash,hash,478,"/// Verify that the DWARF v5 accelerator table is valid.; ///; /// This function currently checks that:; /// - Headers individual Name Indices fit into the section and can be parsed.; /// - Abbreviation tables can be parsed and contain valid index attributes; /// with correct form encodings.; /// - The CU lists reference existing compile units.; /// - The buckets have a valid index, or they are empty.; /// - All names are reachable via the hash table (they have the correct hash,; /// and the hash is in the correct bucket).; /// - Information in the index entries is complete (all required entries are; /// present) and consistent with the debug_info section DIEs.; ///; /// \param AccelSection section containing the acceleration table; /// \param StrData string section; ///; /// \returns The number of errors occurred during verification",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:497,Security,hash,hash,497,"/// Verify that the DWARF v5 accelerator table is valid.; ///; /// This function currently checks that:; /// - Headers individual Name Indices fit into the section and can be parsed.; /// - Abbreviation tables can be parsed and contain valid index attributes; /// with correct form encodings.; /// - The CU lists reference existing compile units.; /// - The buckets have a valid index, or they are empty.; /// - All names are reachable via the hash table (they have the correct hash,; /// and the hash is in the correct bucket).; /// - Information in the index entries is complete (all required entries are; /// present) and consistent with the debug_info section DIEs.; ///; /// \param AccelSection section containing the acceleration table; /// \param StrData string section; ///; /// \returns The number of errors occurred during verification",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:64,Availability,avail,available,64,"/// Verify the information in any of the following sections, if available:; /// .debug_abbrev, debug_abbrev.dwo; ///; /// Any errors are reported to the stream that was this object was; /// constructed with.; ///; /// \returns true if .debug_abbrev and .debug_abbrev.dwo verify successfully,; /// false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:126,Availability,error,errors,126,"/// Verify the information in any of the following sections, if available:; /// .debug_abbrev, debug_abbrev.dwo; ///; /// Any errors are reported to the stream that was this object was; /// constructed with.; ///; /// \returns true if .debug_abbrev and .debug_abbrev.dwo verify successfully,; /// false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:87,Availability,error,errors,87,"/// Verify the information in the .debug_info and .debug_types sections.; ///; /// Any errors are reported to the stream that this object was; /// constructed with.; ///; /// \returns true if all sections verify successfully, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:73,Availability,error,errors,73,"/// Verify the information in the .debug_cu_index section.; ///; /// Any errors are reported to the stream that was this object was; /// constructed with.; ///; /// \returns true if the .debug_cu_index verifies successfully, false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:73,Availability,error,errors,73,"/// Verify the information in the .debug_tu_index section.; ///; /// Any errors are reported to the stream that was this object was; /// constructed with.; ///; /// \returns true if the .debug_tu_index verifies successfully, false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:69,Availability,error,errors,69,"/// Verify the information in the .debug_line section.; ///; /// Any errors are reported to the stream that was this object was; /// constructed with.; ///; /// \returns true if the .debug_line verifies successfully, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:79,Availability,error,errors,79,"/// Verify the information in accelerator tables, if they exist.; ///; /// Any errors are reported to the stream that was this object was; /// constructed with.; ///; /// \returns true if the existing Apple-style accelerator tables verify; /// successfully, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:74,Availability,error,errors,74,"/// Verify the information in the .debug_str_offsets[.dwo].; ///; /// Any errors are reported to the stream that was this object was; /// constructed with.; ///; /// \returns true if the .debug_line verifies successfully, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:407,Testability,test,tested,407,/// A class that transforms the DWARF in a DWARFContext into GSYM information; /// by populating the GsymCreator object that it is constructed with. This; /// class supports converting all DW_TAG_subprogram DIEs into; /// gsym::FunctionInfo objects that includes line table information and inline; /// function information. Creating a separate class to transform this data; /// allows this class to be unit tested.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:154,Availability,error,error,154,"/// Extract the DWARF from the supplied object file and convert it into the; /// Gsym format in the GsymCreator object that is passed in. Returns an; /// error if something fatal is encountered.; ///; /// \param NumThreads The number of threads that the conversion process can; /// use.; ///; /// \param OS The stream to log warnings and non fatal issues to. If NULL; /// then don't log.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:410,Availability,error,error,410,"/// Extract the DWARF from the supplied object file and convert it into the; /// Gsym format in the GsymCreator object that is passed in. Returns an; /// error if something fatal is encountered.; ///; /// \param NumThreads The number of threads that the conversion process can; /// use.; ///; /// \param OS The stream to log warnings and non fatal issues to. If NULL; /// then don't log.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:488,Availability,Error,Error,488,"/// Extract the DWARF from the supplied object file and convert it into the; /// Gsym format in the GsymCreator object that is passed in. Returns an; /// error if something fatal is encountered.; ///; /// \param NumThreads The number of threads that the conversion process can; /// use.; ///; /// \param OS The stream to log warnings and non fatal issues to. If NULL; /// then don't log.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:321,Testability,log,log,321,"/// Extract the DWARF from the supplied object file and convert it into the; /// Gsym format in the GsymCreator object that is passed in. Returns an; /// error if something fatal is encountered.; ///; /// \param NumThreads The number of threads that the conversion process can; /// use.; ///; /// \param OS The stream to log warnings and non fatal issues to. If NULL; /// then don't log.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:383,Testability,log,log,383,"/// Extract the DWARF from the supplied object file and convert it into the; /// Gsym format in the GsymCreator object that is passed in. Returns an; /// error if something fatal is encountered.; ///; /// \param NumThreads The number of threads that the conversion process can; /// use.; ///; /// \param OS The stream to log warnings and non fatal issues to. If NULL; /// then don't log.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:396,Availability,error,errors,396,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:564,Modifiability,variab,variable,564,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:753,Performance,cache,cached,753,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:604,Safety,safe,safe,604,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:367,Testability,log,log,367,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:573,Testability,log,log,573,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:589,Testability,log,logging,589,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:648,Testability,log,log,648,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ExtractRanges.h:317,Energy Efficiency,efficient,efficiently,317,"/// AddressRange objects are encoded and decoded to be relative to a base; /// address. This will be the FunctionInfo's start address if the AddressRange; /// is directly contained in a FunctionInfo, or a base address of the; /// containing parent AddressRange or AddressRanges. This allows address; /// ranges to be efficiently encoded using ULEB128 encodings as we encode the; /// offset and size of each range instead of full addresses. This also makes; /// encoded addresses easy to relocate as we just need to relocate one base; /// address.; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ExtractRanges.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ExtractRanges.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FileWriter.h:6,Usability,simpl,simplified,6,"/// A simplified binary data writer class that doesn't require targets, target; /// definitions, architectures, or require any other optional compile time; /// libraries to be enabled via the build process. This class needs the ability; /// to seek to different spots in the binary stream that is produces to fixup; /// offsets and sizes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FileWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FileWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FileWriter.h:218,Energy Efficiency,power,power,218,/// Pad with zeroes at the current file position until the current file; /// position matches the specified alignment.; ///; /// \param Align An integer speciying the desired alignment. This does not; /// need to be a power of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FileWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FileWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h:83,Performance,cache,cache,83,"/// If we encode a FunctionInfo during segmenting so we know its size, we can; /// cache that encoding here so we don't need to re-encode it when saving the; /// GSYM file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h:464,Availability,error,error,464,/// Decode an object from a binary data stream.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The FunctionInfo's start address and will be used as the; /// base address when decoding any contained information like the line table; /// and the inline info.; ///; /// \returns An FunctionInfo or an error describing the issue that was; /// encountered during decoding.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h:162,Availability,error,error,162,/// Encode this object into FileWriter stream.; ///; /// \param O The binary stream to write the data to at the current file; /// position.; ///; /// \returns An error object that indicates failure or the offset of the; /// function info that was successfully written into the stream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h:190,Availability,failure,failure,190,/// Encode this object into FileWriter stream.; ///; /// \param O The binary stream to write the data to at the current file; /// position.; ///; /// \returns An error object that indicates failure or the offset of the; /// function info that was successfully written into the stream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h:53,Performance,cache,cache,53,"/// Encode this function info into the internal byte cache and return the size; /// in bytes.; ///; /// When segmenting GSYM files we need to know how big each FunctionInfo will; /// encode into so we can generate segments of the right size. We don't want; /// to have to encode a FunctionInfo twice, so we can cache the encoded bytes; /// and re-use then when calling FunctionInfo::encode(...).; ///; /// \returns The size in bytes of the FunctionInfo if it were to be encoded; /// into a byte stream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h:311,Performance,cache,cache,311,"/// Encode this function info into the internal byte cache and return the size; /// in bytes.; ///; /// When segmenting GSYM files we need to know how big each FunctionInfo will; /// encode into so we can generate segments of the right size. We don't want; /// to have to encode a FunctionInfo twice, so we can cache the encoded bytes; /// and re-use then when calling FunctionInfo::encode(...).; ///; /// \returns The size in bytes of the FunctionInfo if it were to be encoded; /// into a byte stream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h:822,Availability,error,error,822,"/// Lookup an address within a FunctionInfo object's data stream.; ///; /// Instead of decoding an entire FunctionInfo object when doing lookups,; /// we can decode only the information we need from the FunctionInfo's data; /// for the specific address. The lookup result information is returned as; /// a LookupResult.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param GR The GSYM reader that contains the string and file table that; /// will be used to fill in information in the returned result.; ///; /// \param FuncAddr The function start address decoded from the GsymReader.; ///; /// \param Addr The address to lookup.; ///; /// \returns An LookupResult or an error describing the issue that was; /// encountered during decoding. An error should only be returned if the; /// address is not contained in the FunctionInfo or if the data is corrupted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h:895,Availability,error,error,895,"/// Lookup an address within a FunctionInfo object's data stream.; ///; /// Instead of decoding an entire FunctionInfo object when doing lookups,; /// we can decode only the information we need from the FunctionInfo's data; /// for the specific address. The lookup result information is returned as; /// a LookupResult.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param GR The GSYM reader that contains the string and file table that; /// will be used to fill in information in the returned result.; ///; /// \param FuncAddr The function start address decoded from the GsymReader.; ///; /// \param Addr The address to lookup.; ///; /// \returns An LookupResult or an error describing the issue that was; /// encountered during decoding. An error should only be returned if the; /// address is not contained in the FunctionInfo or if the data is corrupted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:1936,Energy Efficiency,efficient,efficient,1936,"l of the FunctionInfo objects have been added, the; /// GsymCreator::finalize(...) must be called prior to saving. This function; /// will sort the FunctionInfo objects, finalize the string table, and do any; /// other passes on the information needed to prepare the information to be; /// saved.; ///; /// Once the object has been finalized, it can be saved to a file or section.; ///; /// ENCODING; ///; /// GSYM files are designed to be memory mapped into a process as shared, read; /// only data, and used as is.; ///; /// The GSYM file format when in a stand alone file consists of:; /// - Header; /// - Address Table; /// - Function Info Offsets; /// - File Table; /// - String Table; /// - Function Info Data; ///; /// HEADER; ///; /// The header is fully described in ""llvm/DebugInfo/GSYM/Header.h"".; ///; /// ADDRESS TABLE; ///; /// The address table immediately follows the header in the file and consists; /// of Header.NumAddresses address offsets. These offsets are sorted and can be; /// binary searched for efficient lookups. Addresses in the address table are; /// stored as offsets from a 64 bit base address found in Header.BaseAddress.; /// This allows the address table to contain 8, 16, or 32 offsets. This allows; /// the address table to not require full 64 bit addresses for each address.; /// The resulting GSYM size is smaller and causes fewer pages to be touched; /// during address lookups when the address table is smaller. The size of the; /// address offsets in the address table is specified in the header in; /// Header.AddrOffSize. The first offset in the address table is aligned to; /// Header.AddrOffSize alignment to ensure efficient access when loaded into; /// memory.; ///; /// FUNCTION INFO OFFSETS TABLE; ///; /// The function info offsets table immediately follows the address table and; /// consists of Header.NumAddresses 32 bit file offsets: one for each address; /// in the address table. This data is aligned to a 4 byte boundary. The; /// offsets in ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:2576,Energy Efficiency,efficient,efficient,2576,"; /// - String Table; /// - Function Info Data; ///; /// HEADER; ///; /// The header is fully described in ""llvm/DebugInfo/GSYM/Header.h"".; ///; /// ADDRESS TABLE; ///; /// The address table immediately follows the header in the file and consists; /// of Header.NumAddresses address offsets. These offsets are sorted and can be; /// binary searched for efficient lookups. Addresses in the address table are; /// stored as offsets from a 64 bit base address found in Header.BaseAddress.; /// This allows the address table to contain 8, 16, or 32 offsets. This allows; /// the address table to not require full 64 bit addresses for each address.; /// The resulting GSYM size is smaller and causes fewer pages to be touched; /// during address lookups when the address table is smaller. The size of the; /// address offsets in the address table is specified in the header in; /// Header.AddrOffSize. The first offset in the address table is aligned to; /// Header.AddrOffSize alignment to ensure efficient access when loaded into; /// memory.; ///; /// FUNCTION INFO OFFSETS TABLE; ///; /// The function info offsets table immediately follows the address table and; /// consists of Header.NumAddresses 32 bit file offsets: one for each address; /// in the address table. This data is aligned to a 4 byte boundary. The; /// offsets in this table are the relative offsets from the start offset of the; /// GSYM header and point to the function info data for each address in the; /// address table. Keeping this data separate from the address table helps to; /// reduce the number of pages that are touched when address lookups occur on a; /// GSYM file.; ///; /// FILE TABLE; ///; /// The file table immediately follows the function info offsets table. The; /// encoding of the FileTable is:; ///; /// struct FileTable {; /// uint32_t Count;; /// FileEntry Files[];; /// };; ///; /// The file table starts with a 32 bit count of the number of files that are; /// used in all of the function info, followed",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:3140,Energy Efficiency,reduce,reduce,3140," the address table to not require full 64 bit addresses for each address.; /// The resulting GSYM size is smaller and causes fewer pages to be touched; /// during address lookups when the address table is smaller. The size of the; /// address offsets in the address table is specified in the header in; /// Header.AddrOffSize. The first offset in the address table is aligned to; /// Header.AddrOffSize alignment to ensure efficient access when loaded into; /// memory.; ///; /// FUNCTION INFO OFFSETS TABLE; ///; /// The function info offsets table immediately follows the address table and; /// consists of Header.NumAddresses 32 bit file offsets: one for each address; /// in the address table. This data is aligned to a 4 byte boundary. The; /// offsets in this table are the relative offsets from the start offset of the; /// GSYM header and point to the function info data for each address in the; /// address table. Keeping this data separate from the address table helps to; /// reduce the number of pages that are touched when address lookups occur on a; /// GSYM file.; ///; /// FILE TABLE; ///; /// The file table immediately follows the function info offsets table. The; /// encoding of the FileTable is:; ///; /// struct FileTable {; /// uint32_t Count;; /// FileEntry Files[];; /// };; ///; /// The file table starts with a 32 bit count of the number of files that are; /// used in all of the function info, followed by that number of FileEntry; /// structures. The file table is aligned to a 4 byte boundary, Each file in; /// the file table is represented with a FileEntry structure.; /// See ""llvm/DebugInfo/GSYM/FileEntry.h"" for details.; ///; /// STRING TABLE; ///; /// The string table follows the file table in stand alone GSYM files and; /// contains all strings for everything contained in the GSYM file. Any string; /// data should be added to the string table and any references to strings; /// inside GSYM information must be stored as 32 bit string table offsets into; /// ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:2598,Performance,load,loaded,2598,"; /// - String Table; /// - Function Info Data; ///; /// HEADER; ///; /// The header is fully described in ""llvm/DebugInfo/GSYM/Header.h"".; ///; /// ADDRESS TABLE; ///; /// The address table immediately follows the header in the file and consists; /// of Header.NumAddresses address offsets. These offsets are sorted and can be; /// binary searched for efficient lookups. Addresses in the address table are; /// stored as offsets from a 64 bit base address found in Header.BaseAddress.; /// This allows the address table to contain 8, 16, or 32 offsets. This allows; /// the address table to not require full 64 bit addresses for each address.; /// The resulting GSYM size is smaller and causes fewer pages to be touched; /// during address lookups when the address table is smaller. The size of the; /// address offsets in the address table is specified in the header in; /// Header.AddrOffSize. The first offset in the address table is aligned to; /// Header.AddrOffSize alignment to ensure efficient access when loaded into; /// memory.; ///; /// FUNCTION INFO OFFSETS TABLE; ///; /// The function info offsets table immediately follows the address table and; /// consists of Header.NumAddresses 32 bit file offsets: one for each address; /// in the address table. This data is aligned to a 4 byte boundary. The; /// offsets in this table are the relative offsets from the start offset of the; /// GSYM header and point to the function info data for each address in the; /// address table. Keeping this data separate from the address table helps to; /// reduce the number of pages that are touched when address lookups occur on a; /// GSYM file.; ///; /// FILE TABLE; ///; /// The file table immediately follows the function info offsets table. The; /// encoding of the FileTable is:; ///; /// struct FileTable {; /// uint32_t Count;; /// FileEntry Files[];; /// };; ///; /// The file table starts with a 32 bit count of the number of files that are; /// used in all of the function info, followed",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:785,Safety,safe,safe,785,"/// GsymCreator is used to emit GSYM data to a stand alone file or section; /// within a file.; ///; /// The GsymCreator is designed to be used in 3 stages:; /// - Create FunctionInfo objects and add them; /// - Finalize the GsymCreator object; /// - Save to file or section; ///; /// The first stage involves creating FunctionInfo objects from another source; /// of information like compiler debug info metadata, DWARF or Breakpad files.; /// Any strings in the FunctionInfo or contained information, like InlineInfo; /// or LineTable objects, should get the string table offsets by calling; /// GsymCreator::insertString(...). Any file indexes that are needed should be; /// obtained by calling GsymCreator::insertFile(...). All of the function calls; /// in GsymCreator are thread safe. This allows multiple threads to create and; /// add FunctionInfo objects while parsing debug information.; ///; /// Once all of the FunctionInfo objects have been added, the; /// GsymCreator::finalize(...) must be called prior to saving. This function; /// will sort the FunctionInfo objects, finalize the string table, and do any; /// other passes on the information needed to prepare the information to be; /// saved.; ///; /// Once the object has been finalized, it can be saved to a file or section.; ///; /// ENCODING; ///; /// GSYM files are designed to be memory mapped into a process as shared, read; /// only data, and used as is.; ///; /// The GSYM file format when in a stand alone file consists of:; /// - Header; /// - Address Table; /// - Function Info Offsets; /// - File Table; /// - String Table; /// - Function Info Data; ///; /// HEADER; ///; /// The header is fully described in ""llvm/DebugInfo/GSYM/Header.h"".; ///; /// ADDRESS TABLE; ///; /// The address table immediately follows the header in the file and consists; /// of Header.NumAddresses address offsets. These offsets are sorted and can be; /// binary searched for efficient lookups. Addresses in the address table are; /// stored",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:2586,Security,access,access,2586,"; /// - String Table; /// - Function Info Data; ///; /// HEADER; ///; /// The header is fully described in ""llvm/DebugInfo/GSYM/Header.h"".; ///; /// ADDRESS TABLE; ///; /// The address table immediately follows the header in the file and consists; /// of Header.NumAddresses address offsets. These offsets are sorted and can be; /// binary searched for efficient lookups. Addresses in the address table are; /// stored as offsets from a 64 bit base address found in Header.BaseAddress.; /// This allows the address table to contain 8, 16, or 32 offsets. This allows; /// the address table to not require full 64 bit addresses for each address.; /// The resulting GSYM size is smaller and causes fewer pages to be touched; /// during address lookups when the address table is smaller. The size of the; /// address offsets in the address table is specified in the header in; /// Header.AddrOffSize. The first offset in the address table is aligned to; /// Header.AddrOffSize alignment to ensure efficient access when loaded into; /// memory.; ///; /// FUNCTION INFO OFFSETS TABLE; ///; /// The function info offsets table immediately follows the address table and; /// consists of Header.NumAddresses 32 bit file offsets: one for each address; /// in the address table. This data is aligned to a 4 byte boundary. The; /// offsets in this table are the relative offsets from the start offset of the; /// GSYM header and point to the function info data for each address in the; /// address table. Keeping this data separate from the address table helps to; /// reduce the number of pages that are touched when address lookups occur on a; /// GSYM file.; ///; /// FILE TABLE; ///; /// The file table immediately follows the function info offsets table. The; /// encoding of the FileTable is:; ///; /// struct FileTable {; /// uint32_t Count;; /// FileEntry Files[];; /// };; ///; /// The file table starts with a 32 bit count of the number of files that are; /// used in all of the function info, followed",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:18,Modifiability,variab,variables,18,// Private member variables require Mutex protections,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:270,Modifiability,evolve,evolves,270,/// Get the maximum address offset for the current address offset size.; ///; /// This is used when creating the address offset table to ensure we have; /// values that are in range so we don't end up truncating address offsets; /// when creating GSYM files as the code evolves.; ///; /// \returns The maximum address offset value that will be encoded into a GSYM; /// file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:103,Safety,safe,safe,103,/// Inserts a FileEntry into the file table.; ///; /// This is used to insert a file entry in a thread safe way into this object.; ///; /// \param FE A file entry object that contains valid string table offsets; /// from this object already.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:453,Deployability,update,updated,453,"/// Fixup any string and file references by updating any file indexes and; /// strings offsets in the InlineInfo parameter.; ///; /// When copying InlineInfo entries, we can simply make a copy of the object; /// and then fixup the files and strings for efficiency.; ///; /// \param SrcGC The source gsym creator to copy from.; /// \param II The inline info that contains file indexes and string offsets; /// that come from \a SrcGC. The entries will be updated by coping any files; /// and strings over into this object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:174,Usability,simpl,simply,174,"/// Fixup any string and file references by updating any file indexes and; /// strings offsets in the InlineInfo parameter.; ///; /// When copying InlineInfo entries, we can simply make a copy of the object; /// and then fixup the files and strings for efficiency.; ///; /// \param SrcGC The source gsym creator to copy from.; /// \param II The inline info that contains file indexes and string offsets; /// that come from \a SrcGC. The entries will be updated by coping any files; /// and strings over into this object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:456,Availability,down,download,456,"/// Save this GSYM file into segments that are roughly \a SegmentSize in size.; ///; /// When segemented GSYM files are saved to disk, they will use \a Path as a; /// prefix and then have the first function info address appended to the path; /// when each segment is saved. Each segmented GSYM file has a only the; /// strings and files that are needed to save the function infos that are in; /// each segment. These smaller files are easy to compress and download; /// separately and allow for efficient lookups with very large GSYM files and; /// segmenting them allows servers to download only the segments that are; /// needed.; ///; /// \param Path The path prefix to use when saving the GSYM files.; /// \param ByteOrder The endianness to use when saving the file.; /// \param SegmentSize The size in bytes to segment the GSYM file into.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:583,Availability,down,download,583,"/// Save this GSYM file into segments that are roughly \a SegmentSize in size.; ///; /// When segemented GSYM files are saved to disk, they will use \a Path as a; /// prefix and then have the first function info address appended to the path; /// when each segment is saved. Each segmented GSYM file has a only the; /// strings and files that are needed to save the function infos that are in; /// each segment. These smaller files are easy to compress and download; /// separately and allow for efficient lookups with very large GSYM files and; /// segmenting them allows servers to download only the segments that are; /// needed.; ///; /// \param Path The path prefix to use when saving the GSYM files.; /// \param ByteOrder The endianness to use when saving the file.; /// \param SegmentSize The size in bytes to segment the GSYM file into.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:495,Energy Efficiency,efficient,efficient,495,"/// Save this GSYM file into segments that are roughly \a SegmentSize in size.; ///; /// When segemented GSYM files are saved to disk, they will use \a Path as a; /// prefix and then have the first function info address appended to the path; /// when each segment is saved. Each segmented GSYM file has a only the; /// strings and files that are needed to save the function infos that are in; /// each segment. These smaller files are easy to compress and download; /// separately and allow for efficient lookups with very large GSYM files and; /// segmenting them allows servers to download only the segments that are; /// needed.; ///; /// \param Path The path prefix to use when saving the GSYM files.; /// \param ByteOrder The endianness to use when saving the file.; /// \param SegmentSize The size in bytes to segment the GSYM file into.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:703,Availability,error,error,703,"/// Save a GSYM file to a stand alone file.; ///; /// \param Path The file path to save the GSYM file to.; /// \param ByteOrder The endianness to use when saving the file.; /// \param SegmentSize The size in bytes to segment the GSYM file into. If; /// this option is set this function will create N segments; /// that are all around \a SegmentSize bytes in size. This; /// allows a very large GSYM file to be broken up into; /// shards. Each GSYM file will have its own file table,; /// and string table that only have the files and strings; /// needed for the shared. If this argument has no value,; /// a single GSYM file that contains all function; /// information will be created.; /// \returns An error object that indicates success or failure of the save.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:742,Availability,failure,failure,742,"/// Save a GSYM file to a stand alone file.; ///; /// \param Path The file path to save the GSYM file to.; /// \param ByteOrder The endianness to use when saving the file.; /// \param SegmentSize The size in bytes to segment the GSYM file into. If; /// this option is set this function will create N segments; /// that are all around \a SegmentSize bytes in size. This; /// allows a very large GSYM file to be broken up into; /// shards. Each GSYM file will have its own file table,; /// and string table that only have the files and strings; /// needed for the shared. If this argument has no value,; /// a single GSYM file that contains all function; /// information will be created.; /// \returns An error object that indicates success or failure of the save.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:145,Availability,error,error,145,/// Encode a GSYM into the file writer stream at the current position.; ///; /// \param O The stream to save the binary data to; /// \returns An error object that indicates success or failure of the save.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:184,Availability,failure,failure,184,/// Encode a GSYM into the file writer stream at the current position.; ///; /// \param O The stream to save the binary data to; /// \returns An error object that indicates success or failure of the save.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:301,Energy Efficiency,efficient,efficiently,301,"/// Insert a file into this GSYM creator.; ///; /// Inserts a file by adding a FileEntry into the ""Files"" member variable if; /// the file has not already been added. The file path is split into; /// directory and filename which are both added to the string table. This; /// allows paths to be stored efficiently by reusing the directories that are; /// common between multiple files.; ///; /// \param Path The path to the file to insert.; /// \param Style The path style for the ""Path"" parameter.; /// \returns The unique file index for the inserted file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:113,Modifiability,variab,variable,113,"/// Insert a file into this GSYM creator.; ///; /// Inserts a file by adding a FileEntry into the ""Files"" member variable if; /// the file has not already been added. The file path is split into; /// directory and filename which are both added to the string table. This; /// allows paths to be stored efficiently by reusing the directories that are; /// common between multiple files.; ///; /// \param Path The path to the file to insert.; /// \param Style The path style for the ""Path"" parameter.; /// \returns The unique file index for the inserted file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:368,Availability,error,error,368,"/// Finalize the data in the GSYM creator prior to saving the data out.; ///; /// Finalize must be called after all FunctionInfo objects have been added; /// and before GsymCreator::save() is called.; ///; /// \param OS Output stream to report duplicate function infos, overlapping; /// function infos, and function infos that were merged or removed.; /// \returns An error object that indicates success or failure of the; /// finalize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:407,Availability,failure,failure,407,"/// Finalize the data in the GSYM creator prior to saving the data out.; ///; /// Finalize must be called after all FunctionInfo objects have been added; /// and before GsymCreator::save() is called.; ///; /// \param OS Output stream to report duplicate function infos, overlapping; /// function infos, and function infos that were merged or removed.; /// \returns An error object that indicates success or failure of the; /// finalize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:11,Safety,safe,safe,11,"/// Thread safe iteration over all function infos.; ///; /// \param Callback A callback function that will get called with each; /// FunctionInfo. If the callback returns false, stop iterating.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:11,Safety,safe,safe,11,"/// Thread safe const iteration over all function infos.; ///; /// \param Callback A callback function that will get called with each; /// FunctionInfo. If the callback returns false, stop iterating.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:144,Performance,load,loaded,144,/// Set the base address to use for the GSYM file.; ///; /// Setting the base address to use for the GSYM file. Object files typically; /// get loaded from a base address when the OS loads them into memory. Using; /// GSYM files for symbolication becomes easier if the base address in the; /// GSYM header is the same address as it allows addresses to be easily slid; /// and allows symbolication without needing to find the original base; /// address in the original object file.; ///; /// \param Addr The address to use as the base address of the GSYM file; /// when it is saved to disk.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:183,Performance,load,loads,183,/// Set the base address to use for the GSYM file.; ///; /// Setting the base address to use for the GSYM file. Object files typically; /// get loaded from a base address when the OS loads them into memory. Using; /// GSYM files for symbolication becomes easier if the base address in the; /// GSYM header is the same address as it allows addresses to be easily slid; /// and allows symbolication without needing to find the original base; /// address in the original object file.; ///; /// \param Addr The address to use as the base address of the GSYM file; /// when it is saved to disk.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:814,Availability,error,error,814,"/// Create a segmented GSYM creator starting with function info index; /// \a FuncIdx.; ///; /// This function will create a GsymCreator object that will encode into; /// roughly \a SegmentSize bytes and return it. It is used by the private; /// saveSegments(...) function and also is used by the GSYM unit tests to test; /// segmenting of GSYM files. The returned GsymCreator can be finalized and; /// encoded.; ///; /// \param [in] SegmentSize The size in bytes to roughly segment the GSYM file; /// into.; /// \param [in,out] FuncIdx The index of the first function info to encode; /// into the returned GsymCreator. This index will be updated so it can be; /// used in subsequent calls to this function to allow more segments to be; /// created.; /// \returns An expected unique pointer to a GsymCreator or an error. The; /// returned unique pointer can be NULL if there are no more functions to; /// encode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:639,Deployability,update,updated,639,"/// Create a segmented GSYM creator starting with function info index; /// \a FuncIdx.; ///; /// This function will create a GsymCreator object that will encode into; /// roughly \a SegmentSize bytes and return it. It is used by the private; /// saveSegments(...) function and also is used by the GSYM unit tests to test; /// segmenting of GSYM files. The returned GsymCreator can be finalized and; /// encoded.; ///; /// \param [in] SegmentSize The size in bytes to roughly segment the GSYM file; /// into.; /// \param [in,out] FuncIdx The index of the first function info to encode; /// into the returned GsymCreator. This index will be updated so it can be; /// used in subsequent calls to this function to allow more segments to be; /// created.; /// \returns An expected unique pointer to a GsymCreator or an error. The; /// returned unique pointer can be NULL if there are no more functions to; /// encode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:307,Testability,test,tests,307,"/// Create a segmented GSYM creator starting with function info index; /// \a FuncIdx.; ///; /// This function will create a GsymCreator object that will encode into; /// roughly \a SegmentSize bytes and return it. It is used by the private; /// saveSegments(...) function and also is used by the GSYM unit tests to test; /// segmenting of GSYM files. The returned GsymCreator can be finalized and; /// encoded.; ///; /// \param [in] SegmentSize The size in bytes to roughly segment the GSYM file; /// into.; /// \param [in,out] FuncIdx The index of the first function info to encode; /// into the returned GsymCreator. This index will be updated so it can be; /// used in subsequent calls to this function to allow more segments to be; /// created.; /// \returns An expected unique pointer to a GsymCreator or an error. The; /// returned unique pointer can be NULL if there are no more functions to; /// encode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:316,Testability,test,test,316,"/// Create a segmented GSYM creator starting with function info index; /// \a FuncIdx.; ///; /// This function will create a GsymCreator object that will encode into; /// roughly \a SegmentSize bytes and return it. It is used by the private; /// saveSegments(...) function and also is used by the GSYM unit tests to test; /// segmenting of GSYM files. The returned GsymCreator can be finalized and; /// encoded.; ///; /// \param [in] SegmentSize The size in bytes to roughly segment the GSYM file; /// into.; /// \param [in,out] FuncIdx The index of the first function info to encode; /// into the returned GsymCreator. This index will be updated so it can be; /// used in subsequent calls to this function to allow more segments to be; /// created.; /// \returns An expected unique pointer to a GsymCreator or an error. The; /// returned unique pointer can be NULL if there are no more functions to; /// encode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:88,Performance,optimiz,optimized,88,"/// GsymReader is used to read GSYM data from a file or buffer.; ///; /// This class is optimized for very quick lookups when the endianness matches; /// the host system. The Header, address table, address info offsets, and file; /// table is designed to be mmap'ed as read only into memory and used without; /// any parsing needed. If the endianness doesn't match, we swap these objects; /// and tables into GsymReader::SwappedData and then point our header and; /// ArrayRefs to this swapped internal data.; ///; /// GsymReader objects must use one of the static functions to create an; /// instance: GsymReader::openFile(...) and GsymReader::copyBuffer(...).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:175,Availability,error,error,175,/// Construct a GsymReader from a file on disk.; ///; /// \param Path The file path the GSYM file to read.; /// \returns An expected GsymReader that contains the object or an error; /// object that indicates reason for failing to read the GSYM.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:218,Availability,error,error,218,/// Construct a GsymReader from a buffer.; ///; /// \param Bytes A set of bytes that will be copied and owned by the; /// returned object on success.; /// \returns An expected GsymReader that contains the object or an error; /// object that indicates reason for failing to read the GSYM.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:4,Security,Access,Access,4,/// Access the GSYM header.; /// \returns A native endian version of the GSYM header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:642,Availability,error,error,642,"/// Get the full function info for an address.; ///; /// This should be called when a client will store a copy of the complete; /// FunctionInfo for a given address. For one off lookups, use the lookup(); /// function below.; ///; /// Symbolication server processes might want to parse the entire function; /// info for a given address and cache it if the process stays around to; /// service many symbolication addresses, like for parsing profiling; /// information.; ///; /// \param Addr A virtual address from the orignal object file to lookup.; ///; /// \returns An expected FunctionInfo that contains the function info object; /// or an error object that indicates reason for failing to lookup the; /// address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:340,Performance,cache,cache,340,"/// Get the full function info for an address.; ///; /// This should be called when a client will store a copy of the complete; /// FunctionInfo for a given address. For one off lookups, use the lookup(); /// function below.; ///; /// Symbolication server processes might want to parse the entire function; /// info for a given address and cache it if the process stays around to; /// service many symbolication addresses, like for parsing profiling; /// information.; ///; /// \param Addr A virtual address from the orignal object file to lookup.; ///; /// \returns An expected FunctionInfo that contains the function info object; /// or an error object that indicates reason for failing to lookup the; /// address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:227,Availability,error,error,227,/// Get the full function info given an address index.; ///; /// \param AddrIdx A address index for an address in the address table.; ///; /// \returns An expected FunctionInfo that contains the function info object; /// or an error object that indicates reason for failing get the function; /// info object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:809,Availability,error,error,809,"/// Lookup an address in the a GSYM.; ///; /// Lookup just the information needed for a specific address \a Addr. This; /// function is faster that calling getFunctionInfo() as it will only return; /// information that pertains to \a Addr and allows the parsing to skip any; /// extra information encoded for other addresses. For example the line table; /// parsing can stop when a matching LineEntry has been fouhnd, and the; /// InlineInfo can stop parsing early once a match has been found and also; /// skip information that doesn't match. This avoids memory allocations and; /// is much faster for lookups.; ///; /// \param Addr A virtual address from the orignal object file to lookup.; /// \returns An expected LookupResult that contains only the information; /// needed for the current address, or an error object that indicates reason; /// for failing to lookup the address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:549,Safety,avoid,avoids,549,"/// Lookup an address in the a GSYM.; ///; /// Lookup just the information needed for a specific address \a Addr. This; /// function is faster that calling getFunctionInfo() as it will only return; /// information that pertains to \a Addr and allows the parsing to skip any; /// extra information encoded for other addresses. For example the line table; /// parsing can stop when a matching LineEntry has been fouhnd, and the; /// InlineInfo can stop parsing early once a match has been found and also; /// skip information that doesn't match. This avoids memory allocations and; /// is much faster for lookups.; ///; /// \param Addr A virtual address from the orignal object file to lookup.; /// \returns An expected LookupResult that contains only the information; /// needed for the current address, or an error object that indicates reason; /// for failing to lookup the address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:228,Security,access,access,228,"/// Get the a file entry for the suppplied file index.; ///; /// Used to convert any file indexes in the FunctionInfo data back into; /// files. This function can be used for iteration, but is more commonly used; /// for random access when doing lookups.; ///; /// \param Index An index into the file table.; /// \returns An optional FileInfo that will be valid if the file index is; /// valid, or std::nullopt if the file index is out of bounds,",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:467,Modifiability,variab,variable,467,"/// Get an appropriate address info offsets array.; ///; /// The address table in the GSYM file is stored as array of 1, 2, 4 or 8; /// byte offsets from the The gsym::Header::BaseAddress. The table is stored; /// internally as a array of bytes that are in the correct endianness. When; /// we access this table we must get an array that matches those sizes. This; /// templatized helper function is used when accessing address offsets in the; /// AddrOffsets member variable.; ///; /// \returns An ArrayRef of an appropriate address offset size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:294,Security,access,access,294,"/// Get an appropriate address info offsets array.; ///; /// The address table in the GSYM file is stored as array of 1, 2, 4 or 8; /// byte offsets from the The gsym::Header::BaseAddress. The table is stored; /// internally as a array of bytes that are in the correct endianness. When; /// we access this table we must get an array that matches those sizes. This; /// templatized helper function is used when accessing address offsets in the; /// AddrOffsets member variable.; ///; /// \returns An ArrayRef of an appropriate address offset size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:410,Security,access,accessing,410,"/// Get an appropriate address info offsets array.; ///; /// The address table in the GSYM file is stored as array of 1, 2, 4 or 8; /// byte offsets from the The gsym::Header::BaseAddress. The table is stored; /// internally as a array of bytes that are in the correct endianness. When; /// we access this table we must get an array that matches those sizes. This; /// templatized helper function is used when accessing address offsets in the; /// AddrOffsets member variable.; ///; /// \returns An ArrayRef of an appropriate address offset size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:360,Security,access,access,360,"/// Get an appropriate address from the address table.; ///; /// The address table in the GSYM file is stored as array of 1, 2, 4 or 8; /// byte address offsets from the The gsym::Header::BaseAddress. The table is; /// stored internally as a array of bytes that are in the correct endianness.; /// In order to extract an address from the address table we must access the; /// address offset using the correct size and then add it to the BaseAddress; /// in the header.; ///; /// \param Index An index into the AddrOffsets array.; /// \returns An virtual address that matches the original object file for the; /// address as the specified index, or std::nullopt if Index is out of bounds.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:176,Availability,error,error,176,"/// Create a GSYM from a memory buffer.; ///; /// Called by both openFile() and copyBuffer(), this function does all of the; /// work of parsing the GSYM file and returning an error.; ///; /// \param MemBuffer A memory buffer that will transfer ownership into the; /// GsymReader.; /// \returns An expected GsymReader that contains the object or an error; /// object that indicates reason for failing to read the GSYM.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:349,Availability,error,error,349,"/// Create a GSYM from a memory buffer.; ///; /// Called by both openFile() and copyBuffer(), this function does all of the; /// work of parsing the GSYM file and returning an error.; ///; /// \param MemBuffer A memory buffer that will transfer ownership into the; /// GsymReader.; /// \returns An expected GsymReader that contains the object or an error; /// object that indicates reason for failing to read the GSYM.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:384,Availability,error,error,384,"/// Given an address, find the address index.; ///; /// Binary search the address table and find the matching address index.; ///; /// \param Addr A virtual address that matches the original object file; /// to lookup.; /// \returns An index into the address table. This index can be used to; /// extract the FunctionInfo data's offset from the AddrInfoOffsets array.; /// Returns an error if the address isn't in the GSYM with details of why.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:913,Availability,error,error,913,"/// Given an address, find the correct function info data and function; /// address.; ///; /// Binary search the address table and find the matching address info; /// and make sure that the function info contains the address. GSYM allows; /// functions to overlap, and the most debug info is contained in the first; /// entries due to the sorting when GSYM files are created. We can have; /// multiple function info that start at the same address only if their; /// address range doesn't match. So find the first entry that matches \a Addr; /// and iterate forward until we find one that contains the address.; ///; /// \param[in] Addr A virtual address that matches the original object file; /// to lookup.; ///; /// \param[out] FuncStartAddr A virtual address that is the base address of; /// the function that is used for decoding the FunctionInfo.; ///; /// \returns An valid data extractor on success, or an error if we fail to; /// find the address in a function info or corrrectly decode the data",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:221,Availability,error,error,221,/// Get the function data and address given an address index.; ///; /// \param AddrIdx A address index from the address table.; ///; /// \returns An expected FunctionInfo that contains the function info object; /// or an error object that indicates reason for failing to lookup the; /// address.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:539,Performance,load,loading,539,"/// The GSYM header.; ///; /// The GSYM header is found at the start of a stand alone GSYM file, or as; /// the first bytes in a section when GSYM is contained in a section of an; /// executable file (ELF, mach-o, COFF).; ///; /// The structure is encoded exactly as it appears in the structure definition; /// with no gaps between members. Alignment should not change from system to; /// system as the members were laid out so that they shouldn't align; /// differently on different architectures.; ///; /// When endianness of the system loading a GSYM file matches, the file can; /// be mmap'ed in and a pointer to the header can be cast to the first bytes; /// of the file (stand alone GSYM file) or section data (GSYM in a section).; /// When endianness is swapped, the Header::decode() function should be used to; /// decode the header.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:60,Safety,detect,detect,60,/// The magic bytes should be set to GSYM_MAGIC. This helps detect if a file; /// is a GSYM file by scanning the first 4 bytes of a file or section.; /// This value might appear byte swapped,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:45,Availability,error,error,45,"/// Check if a header is valid and return an error if anything is wrong.; ///; /// This function can be used prior to encoding a header to ensure it is; /// valid, or after decoding a header to ensure it is valid and supported.; ///; /// Check a correctly byte swapped header for errors:; /// - check magic value; /// - check that version number is supported; /// - check that the address offset size is supported; /// - check that the UUID size is valid; ///; /// \returns An error if anything is wrong in the header, or Error::success(); /// if there are no errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:280,Availability,error,errors,280,"/// Check if a header is valid and return an error if anything is wrong.; ///; /// This function can be used prior to encoding a header to ensure it is; /// valid, or after decoding a header to ensure it is valid and supported.; ///; /// Check a correctly byte swapped header for errors:; /// - check magic value; /// - check that version number is supported; /// - check that the address offset size is supported; /// - check that the UUID size is valid; ///; /// \returns An error if anything is wrong in the header, or Error::success(); /// if there are no errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:477,Availability,error,error,477,"/// Check if a header is valid and return an error if anything is wrong.; ///; /// This function can be used prior to encoding a header to ensure it is; /// valid, or after decoding a header to ensure it is valid and supported.; ///; /// Check a correctly byte swapped header for errors:; /// - check magic value; /// - check that version number is supported; /// - check that the address offset size is supported; /// - check that the UUID size is valid; ///; /// \returns An error if anything is wrong in the header, or Error::success(); /// if there are no errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:522,Availability,Error,Error,522,"/// Check if a header is valid and return an error if anything is wrong.; ///; /// This function can be used prior to encoding a header to ensure it is; /// valid, or after decoding a header to ensure it is valid and supported.; ///; /// Check a correctly byte swapped header for errors:; /// - check magic value; /// - check that version number is supported; /// - check that the address offset size is supported; /// - check that the UUID size is valid; ///; /// \returns An error if anything is wrong in the header, or Error::success(); /// if there are no errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:560,Availability,error,errors,560,"/// Check if a header is valid and return an error if anything is wrong.; ///; /// This function can be used prior to encoding a header to ensure it is; /// valid, or after decoding a header to ensure it is valid and supported.; ///; /// Check a correctly byte swapped header for errors:; /// - check magic value; /// - check that version number is supported; /// - check that the address offset size is supported; /// - check that the UUID size is valid; ///; /// \returns An error if anything is wrong in the header, or Error::success(); /// if there are no errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:270,Availability,error,error,270,/// Decode an object from a binary data stream.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \returns A Header or an error describing the issue that was; /// encountered during decoding.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:162,Availability,error,error,162,/// Encode this object into FileWriter stream.; ///; /// \param O The binary stream to write the data to at the current file; /// position.; ///; /// \returns An error object that indicates success or failure of the; /// encoding process.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:201,Availability,failure,failure,201,/// Encode this object into FileWriter stream.; ///; /// \param O The binary stream to write the data to at the current file; /// position.; ///; /// \returns An error object that indicates success or failure of the; /// encoding process.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:1126,Energy Efficiency,efficient,efficiently,1126,"nline information stores the name of the inline function along with; /// an array of address ranges. It also stores the call file and call line; /// that called this inline function. This allows us to unwind inline call; /// stacks back to the inline or concrete function that called this; /// function. Inlined functions contained in this function are stored in the; /// ""Children"" variable. All address ranges must be sorted and all address; /// ranges of all children must be contained in the ranges of this function.; /// Any clients that encode information will need to ensure the ranges are; /// all contined correctly or lookups could fail. Add ranges in these objects; /// must be contained in the top level FunctionInfo address ranges as well.; ///; /// ENCODING; ///; /// When saved to disk, the inline info encodes all ranges to be relative to; /// a parent address range. This will be the FunctionInfo's start address if; /// the InlineInfo is directly contained in a FunctionInfo, or a the start; /// address of the containing parent InlineInfo's first ""Ranges"" member. This; /// allows address ranges to be efficiently encoded using ULEB128 encodings as; /// we encode the offset and size of each range instead of full addresses. This; /// also makes any encoded addresses easy to relocate as we just need to; /// relocate the FunctionInfo's start address.; ///; /// - The AddressRanges member ""Ranges"" is encoded using an appropriate base; /// address as described above.; /// - UINT8 boolean value that specifies if the InlineInfo object has children.; /// - UINT32 string table offset that points to the name of the inline; /// function.; /// - ULEB128 integer that specifies the file of the call site that called; /// this function.; /// - ULEB128 integer that specifies the source line of the call site that; /// called this function.; /// - if this object has children, enocode each child InlineInfo using the; /// the first address range's start address as the base address.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:388,Modifiability,variab,variable,388,"/// Inline information stores the name of the inline function along with; /// an array of address ranges. It also stores the call file and call line; /// that called this inline function. This allows us to unwind inline call; /// stacks back to the inline or concrete function that called this; /// function. Inlined functions contained in this function are stored in the; /// ""Children"" variable. All address ranges must be sorted and all address; /// ranges of all children must be contained in the ranges of this function.; /// Any clients that encode information will need to ensure the ranges are; /// all contined correctly or lookups could fail. Add ranges in these objects; /// must be contained in the top level FunctionInfo address ranges as well.; ///; /// ENCODING; ///; /// When saved to disk, the inline info encodes all ranges to be relative to; /// a parent address range. This will be the FunctionInfo's start address if; /// the InlineInfo is directly contained in a FunctionInfo, or a the start; /// address of the containing parent InlineInfo's first ""Ranges"" member. This; /// allows address ranges to be efficiently encoded using ULEB128 encodings as; /// we encode the offset and size of each range instead of full addresses. This; /// also makes any encoded addresses easy to relocate as we just need to; /// relocate the FunctionInfo's start address.; ///; /// - The AddressRanges member ""Ranges"" is encoded using an appropriate base; /// address as described above.; /// - UINT8 boolean value that specifies if the InlineInfo object has children.; /// - UINT32 string table offset that points to the name of the inline; /// function.; /// - ULEB128 integer that specifies the file of the call site that called; /// this function.; /// - ULEB128 integer that specifies the source line of the call site that; /// called this function.; /// - if this object has children, enocode each child InlineInfo using the; /// the first address range's start address as the base address.;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:2045,Availability,error,error,2045,"g inline info using this; /// function. The benefit of using this function is that only the information; /// needed for the lookup will be extracted, other info can be skipped and; /// parsing can stop as soon as the deepest match is found. This allows; /// symbolication tools to be fast and efficient and avoid allocation costs; /// when doing lookups.; ///; /// This function will augment the SourceLocations array \a SrcLocs with any; /// inline information that pertains to \a Addr. If no inline information; /// exists for \a Addr, then \a SrcLocs will be left untouched. If there is; /// inline information for \a Addr, then \a SrcLocs will be modifiied to; /// contain the deepest most inline function's SourceLocation at index zero; /// in the array and proceed up the concrete function source file and; /// line at the end of the array.; ///; /// \param GR The GSYM reader that contains the string and file table that; /// will be used to fill in the source locations.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the LineTable object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address and will be used to; /// decode the correct addresses for the inline information.; ///; /// \param Addr The address to lookup.; ///; /// \param SrcLocs The inline source locations that matches \a Addr. This; /// array must be initialized with the matching line entry; /// from the line table upon entry. The name of the concrete; /// function must be supplied since it will get pushed to; /// the last SourceLocation entry and the inline information; /// will fill in the source file and line from the inline; /// information.; ///; /// \returns An error if the inline information is corrupt, or; /// Error::success() for all other cases, even when no information; /// is added to \a SrcLocs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:2097,Availability,Error,Error,2097,"g inline info using this; /// function. The benefit of using this function is that only the information; /// needed for the lookup will be extracted, other info can be skipped and; /// parsing can stop as soon as the deepest match is found. This allows; /// symbolication tools to be fast and efficient and avoid allocation costs; /// when doing lookups.; ///; /// This function will augment the SourceLocations array \a SrcLocs with any; /// inline information that pertains to \a Addr. If no inline information; /// exists for \a Addr, then \a SrcLocs will be left untouched. If there is; /// inline information for \a Addr, then \a SrcLocs will be modifiied to; /// contain the deepest most inline function's SourceLocation at index zero; /// in the array and proceed up the concrete function source file and; /// line at the end of the array.; ///; /// \param GR The GSYM reader that contains the string and file table that; /// will be used to fill in the source locations.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the LineTable object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address and will be used to; /// decode the correct addresses for the inline information.; ///; /// \param Addr The address to lookup.; ///; /// \param SrcLocs The inline source locations that matches \a Addr. This; /// array must be initialized with the matching line entry; /// from the line table upon entry. The name of the concrete; /// function must be supplied since it will get pushed to; /// the last SourceLocation entry and the inline information; /// will fill in the source file and line from the inline; /// information.; ///; /// \returns An error if the inline information is corrupt, or; /// Error::success() for all other cases, even when no information; /// is added to \a SrcLocs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:481,Energy Efficiency,efficient,efficient,481,"/// Lookup a single address within the inline info data.; ///; /// Clients have the option to decode an entire InlineInfo object (using; /// InlineInfo::decode() ) or just find the matching inline info using this; /// function. The benefit of using this function is that only the information; /// needed for the lookup will be extracted, other info can be skipped and; /// parsing can stop as soon as the deepest match is found. This allows; /// symbolication tools to be fast and efficient and avoid allocation costs; /// when doing lookups.; ///; /// This function will augment the SourceLocations array \a SrcLocs with any; /// inline information that pertains to \a Addr. If no inline information; /// exists for \a Addr, then \a SrcLocs will be left untouched. If there is; /// inline information for \a Addr, then \a SrcLocs will be modifiied to; /// contain the deepest most inline function's SourceLocation at index zero; /// in the array and proceed up the concrete function source file and; /// line at the end of the array.; ///; /// \param GR The GSYM reader that contains the string and file table that; /// will be used to fill in the source locations.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the LineTable object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address and will be used to; /// decode the correct addresses for the inline information.; ///; /// \param Addr The address to lookup.; ///; /// \param SrcLocs The inline source locations that matches \a Addr. This; /// array must be initialized with the matching line entry; /// from the line table upon entry. The name of the concrete; /// function must be supplied since it will get pushed to; /// the last SourceLocation entry and the inline information; /// will fill in the source file and line from the inl",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:495,Safety,avoid,avoid,495,"/// Lookup a single address within the inline info data.; ///; /// Clients have the option to decode an entire InlineInfo object (using; /// InlineInfo::decode() ) or just find the matching inline info using this; /// function. The benefit of using this function is that only the information; /// needed for the lookup will be extracted, other info can be skipped and; /// parsing can stop as soon as the deepest match is found. This allows; /// symbolication tools to be fast and efficient and avoid allocation costs; /// when doing lookups.; ///; /// This function will augment the SourceLocations array \a SrcLocs with any; /// inline information that pertains to \a Addr. If no inline information; /// exists for \a Addr, then \a SrcLocs will be left untouched. If there is; /// inline information for \a Addr, then \a SrcLocs will be modifiied to; /// contain the deepest most inline function's SourceLocation at index zero; /// in the array and proceed up the concrete function source file and; /// line at the end of the array.; ///; /// \param GR The GSYM reader that contains the string and file table that; /// will be used to fill in the source locations.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the LineTable object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address and will be used to; /// decode the correct addresses for the inline information.; ///; /// \param Addr The address to lookup.; ///; /// \param SrcLocs The inline source locations that matches \a Addr. This; /// array must be initialized with the matching line entry; /// from the line table upon entry. The name of the concrete; /// function must be supplied since it will get pushed to; /// the last SourceLocation entry and the inline information; /// will fill in the source file and line from the inl",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:633,Availability,error,error,633,"/// Decode an InlineInfo object from a binary data stream.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the InlineInfo object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The base address to use when decoding all address ranges.; /// This will be the FunctionInfo's start address if this object is directly; /// contained in a FunctionInfo object, or the start address of the first; /// address range in an InlineInfo object of this object is a child of; /// another InlineInfo object.; /// \returns An InlineInfo or an error describing the issue that was; /// encountered during decoding.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:514,Availability,error,error,514,"/// Encode this InlineInfo object into FileWriter stream.; ///; /// \param O The binary stream to write the data to at the current file; /// position.; ///; /// \param BaseAddr The base address to use when encoding all address ranges.; /// This will be the FunctionInfo's start address if this object is directly; /// contained in a FunctionInfo object, or the start address of the first; /// address range in an InlineInfo object of this object is a child of; /// another InlineInfo object.; ///; /// \returns An error object that indicates success or failure or the; /// encoding process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:553,Availability,failure,failure,553,"/// Encode this InlineInfo object into FileWriter stream.; ///; /// \param O The binary stream to write the data to at the current file; /// position.; ///; /// \param BaseAddr The base address to use when encoding all address ranges.; /// This will be the FunctionInfo's start address if this object is directly; /// contained in a FunctionInfo object, or the start address of the first; /// address range in an InlineInfo object of this object is a child of; /// another InlineInfo object.; ///; /// \returns An error object that indicates success or failure or the; /// encoding process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h:2429,Availability,down,down,2429,"rted in ascending address; /// order.; ///; /// NORMAL OPCODES; ///; /// The opcodes 0 through 3 are normal in opcodes. Their encoding and; /// descriptions are listed below:; ///; /// ENCODING ENUMERATION VALUE DESCRIPTION; /// ======== ================ ===== ========================================; /// LTOC_EndSequence 0x00 Parsing is done.; /// ULEB LTOC_SetFile 0x01 Row.File = ULEB; /// ULEB LTOC_AdvancePC 0x02 Row.Addr += ULEB, push ""Row"".; /// SLEB LTOC_AdvanceLine 0x03 Row.Line += SLEB; /// LTOC_FirstSpecial 0x04 First special opcode (see SPECIAL; /// OPCODES below).; ///; /// SPECIAL OPCODES; ///; /// Opcodes LTOC_FirstSpecial through 255 are special opcodes that always; /// increment both the Row.Addr and Row.Line and push ""Row"" onto the; /// LineEntry.Lines array. They do this by using some of the bits to; /// increment/decrement the source line number, and some of the bits to; /// increment the address. Line numbers can go up or down when making line; /// tables, where addresses always only increase since line tables are sorted; /// by address.; ///; /// In order to calculate the amount to increment the line and address for; /// these special opcodes, we calculate the number of values reserved for the; /// line increment/decrement using the ""MinDelta"" and ""MaxDelta"" from the; /// prolog:; ///; /// const int64_t LineRange = MaxDelta - MinDelta + 1;; ///; /// Then we can adjust the opcode to not include any of the normal opcodes:; ///; /// const uint8_t AdjustedOp = Opcode - LTOC_FirstSpecial;; ///; /// And we can calculate the line offset, and address offset:; ///; /// const int64_t LineDelta = MinDelta + (AdjustedOp % LineRange);; /// const uint64_t AddrDelta = (AdjustedOp / LineRange);; ///; /// And use these to modify our ""Row"":; ///; /// Row.Line += LineDelta;; /// Row.Addr += AddrDelta;; ///; /// And push a row onto the line table:; ///; /// Lines.push_back(Row);; ///; /// This is verify similar to the way that DWARF encodes its line tables. The; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h:907,Availability,error,error,907,"/// Lookup a single address within a line table's data.; ///; /// Clients have the option to decode an entire line table using; /// LineTable::decode() or just find a single matching entry using this; /// function. The benefit of using this function is that parsed LineEntry; /// objects that do not match will not be stored in an array. This will avoid; /// memory allocation costs and parsing can stop once a match has been found.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the LineTable object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address and will be used to; /// initialize the line table row prior to parsing any opcodes.; ///; /// \returns An LineEntry object if a match is found, error otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h:348,Safety,avoid,avoid,348,"/// Lookup a single address within a line table's data.; ///; /// Clients have the option to decode an entire line table using; /// LineTable::decode() or just find a single matching entry using this; /// function. The benefit of using this function is that parsed LineEntry; /// objects that do not match will not be stored in an array. This will avoid; /// memory allocation costs and parsing can stop once a match has been found.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the LineTable object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address and will be used to; /// initialize the line table row prior to parsing any opcodes.; ///; /// \returns An LineEntry object if a match is found, error otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h:510,Availability,error,error,510,/// Decode an LineTable object from a binary data stream.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the LineTable object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address and will be used to; /// initialize the line table row prior to parsing any opcodes.; ///; /// \returns An LineTable or an error describing the issue that was; /// encountered during decoding.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h:304,Availability,error,error,304,/// Encode this LineTable object into FileWriter stream.; ///; /// \param O The binary stream to write the data to at the current file; /// position.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address.; ///; /// \returns An error object that indicates success or failure or the; /// encoding process.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h:343,Availability,failure,failure,343,/// Encode this LineTable object into FileWriter stream.; ///; /// \param O The binary stream to write the data to at the current file; /// position.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address.; ///; /// \returns An error object that indicates success or failure or the; /// encoding process.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h:527,Availability,error,error,527,"/// Extract any object file data that is needed by the GsymCreator.; ///; /// The extracted information includes the UUID of the binary and converting; /// all function symbols from any symbol tables into FunctionInfo objects.; ///; /// \param Obj The object file that contains the DWARF debug info.; ///; /// \param Log The stream to log warnings and non fatal issues to. If NULL,; /// don't log.; ///; /// \param Gsym The GSYM creator to populate with the function information; /// from the debug info.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h:605,Availability,Error,Error,605,"/// Extract any object file data that is needed by the GsymCreator.; ///; /// The extracted information includes the UUID of the binary and converting; /// all function symbols from any symbol tables into FunctionInfo objects.; ///; /// \param Obj The object file that contains the DWARF debug info.; ///; /// \param Log The stream to log warnings and non fatal issues to. If NULL,; /// don't log.; ///; /// \param Gsym The GSYM creator to populate with the function information; /// from the debug info.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h:317,Testability,Log,Log,317,"/// Extract any object file data that is needed by the GsymCreator.; ///; /// The extracted information includes the UUID of the binary and converting; /// all function symbols from any symbol tables into FunctionInfo objects.; ///; /// \param Obj The object file that contains the DWARF debug info.; ///; /// \param Log The stream to log warnings and non fatal issues to. If NULL,; /// don't log.; ///; /// \param Gsym The GSYM creator to populate with the function information; /// from the debug info.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h:335,Testability,log,log,335,"/// Extract any object file data that is needed by the GsymCreator.; ///; /// The extracted information includes the UUID of the binary and converting; /// all function symbols from any symbol tables into FunctionInfo objects.; ///; /// \param Obj The object file that contains the DWARF debug info.; ///; /// \param Log The stream to log warnings and non fatal issues to. If NULL,; /// don't log.; ///; /// \param Gsym The GSYM creator to populate with the function information; /// from the debug info.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h:393,Testability,log,log,393,"/// Extract any object file data that is needed by the GsymCreator.; ///; /// The extracted information includes the UUID of the binary and converting; /// all function symbols from any symbol tables into FunctionInfo objects.; ///; /// \param Obj The object file that contains the DWARF debug info.; ///; /// \param Log The stream to log warnings and non fatal issues to. If NULL,; /// don't log.; ///; /// \param Gsym The GSYM creator to populate with the function information; /// from the debug info.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h:14,Performance,perform,performs,14,"// This class performs the following tasks:; // - Creates a logical reader for every binary file in the command line,; // that parses the debug information and creates a high level logical; // view representation containing scopes, symbols, types and lines.; // - Prints and compares the logical views.; //; // The supported binary formats are: ELF, Mach-O and CodeView.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h:60,Testability,log,logical,60,"// This class performs the following tasks:; // - Creates a logical reader for every binary file in the command line,; // that parses the debug information and creates a high level logical; // view representation containing scopes, symbols, types and lines.; // - Prints and compares the logical views.; //; // The supported binary formats are: ELF, Mach-O and CodeView.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h:181,Testability,log,logical,181,"// This class performs the following tasks:; // - Creates a logical reader for every binary file in the command line,; // that parses the debug information and creates a high level logical; // view representation containing scopes, symbols, types and lines.; // - Prints and compares the logical views.; //; // The supported binary formats are: ELF, Mach-O and CodeView.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h:288,Testability,log,logical,288,"// This class performs the following tasks:; // - Creates a logical reader for every binary file in the command line,; // that parses the debug information and creates a high level logical; // view representation containing scopes, symbols, types and lines.; // - Prints and compares the logical views.; //; // The supported binary formats are: ELF, Mach-O and CodeView.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h:450,Testability,log,logical,450,"//===-- LVCompare.h ---------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the LVCompare class, which is used to describe a logical; // view comparison.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h:24,Performance,perform,performed,24,"// As the comparison is performed twice (by exchanging the reference; // and target readers) the element missing/added status does specify; // the comparison pass.; // By recording each missing/added elements along with its pass, it; // allows checking which elements were missing/added during each pass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h:3,Performance,Perform,Perform,3,// Perform comparison between the 'Reference' and 'Target' scopes tree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:5,Testability,log,logical,5,// A logical line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:5,Testability,log,logical,5,// A logical scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:5,Testability,log,logical,5,// A logical symbol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:5,Testability,log,logical,5,// A logical type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:3,Security,Access,Access,3,// Access DW_AT_GNU_discriminator attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:9,Security,Access,Accessibility,9,// DWARF Accessibility Codes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:12,Security,Access,Accessibility,12,// CodeView Accessibility Codes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:52,Testability,log,logical,52,"// During the parsing of the debug information, the logical elements are; // created with information extracted from its description entries (DIE).; // But they are not complete for the logical view concept. A second pass; // is executed in order to collect their additional information.; // The following functions 'resolve' some of their properties, such as; // name, references, parents, extra information based on the element kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:186,Testability,log,logical,186,"// During the parsing of the debug information, the logical elements are; // created with information extracted from its description entries (DIE).; // But they are not complete for the logical view concept. A second pass; // is executed in order to collect their additional information.; // The following functions 'resolve' some of their properties, such as; // name, references, parents, extra information based on the element kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:38,Testability,log,logically,38,// Returns true if current element is logically equal to the given 'Element'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:24,Testability,log,logical,24,// Class to represent a logical line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:35,Testability,log,logically,35,// Returns true if current line is logically equal to the given 'Line'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:46,Testability,log,logically,46,// Returns true if the given 'References' are logically equal to the; // given 'Targets'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:3,Security,Access,Access,3,// Access DW_LNE_set_discriminator attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:35,Testability,log,logically,35,// Returns true if current line is logically equal to the given 'Line'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:35,Testability,log,logically,35,// Returns true if current line is logically equal to the given 'Line'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h:472,Modifiability,variab,variable,472,"//===-- LVLocation.h --------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the LVOperation and LVLocation classes, which are used; // to describe variable locations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h:49,Usability,simpl,simple,49,// The DW_AT_data_member_location attribute is a simple member offset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h:3,Security,Validat,Validate,3,// Validate functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h:19,Performance,optimiz,optimized,19,// Object has been optimized by the compiler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h:151,Availability,avail,available,151,// This is an internal ID used for debugging logical elements. It is used; // for cases where an unique offset within the binary input file is not; // available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h:45,Testability,log,logical,45,// This is an internal ID used for debugging logical elements. It is used; // for cases where an unique offset within the binary input file is not; // available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h:28,Testability,log,logical,28,"// This function prints the logical view to an output stream.; // Split: Prints the compilation unit view to a file.; // Match: Prints the object only if it satisfies the patterns collected; // from the command line. See the '--select' option.; // Print: Print the object only if satisfies the conditions specified by; // the different '--print' options.; // Full: Prints full information for objects representing debug locations,; // aggregated scopes, compile unit, functions and namespaces.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h:48,Integrability,depend,depending,48,"// Prints additional information for an object, depending on its kind; // (class attributes, debug ranges, files, directories, etc).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:15,Modifiability,extend,extended,15,// --attribute=extended,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:14,Security,integrity,integrity,14,// --internal=integrity,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:114,Testability,log,logical,114,// Filters the output of the filename associated with the element being; // printed in order to see clearly which logical elements belongs to; // a particular filename. It is value is reset after the element; // that represents the Compile Unit is printed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:100,Usability,clear,clearly,100,// Filters the output of the filename associated with the element being; // printed in order to see clearly which logical elements belongs to; // a particular filename. It is value is reset after the element; // that represents the Compile Unit is printed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:3,Security,Access,Access,3,"// Access to command line options, pattern and printing information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:327,Integrability,depend,dependencies,327,"// Some command line options support shortcuts. For example:; // The command line option '--print=elements' is a shortcut for:; // '--print=instructions,lines,scopes,symbols,types'.; // In the case of logical view comparison, some options related to; // attributes must be set or reset for a proper comparison.; // Resolve any dependencies between command line options.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:201,Testability,log,logical,201,"// Some command line options support shortcuts. For example:; // The command line option '--print=elements' is a shortcut for:; // '--print=instructions,lines,scopes,symbols,types'.; // In the case of logical view comparison, some options related to; // attributes must be set or reset for a proper comparison.; // Resolve any dependencies between command line options.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:3,Usability,Clear,Clear,3,// Clear any existing patterns.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:13,Testability,log,logicalview,13,// namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVRange.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:8,Testability,log,logical,8,/// The logical reader owns of all the logical elements created during; /// the debug information parsing. For its creation it uses a specific; /// bump allocator for each type of logical element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:39,Testability,log,logical,39,/// The logical reader owns of all the logical elements created during; /// the debug information parsing. For its creation it uses a specific; /// bump allocator for each type of logical element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:180,Testability,log,logical,180,/// The logical reader owns of all the logical elements created during; /// the debug information parsing. For its creation it uses a specific; /// bump allocator for each type of logical element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:309,Testability,test,tests,309,"// Return a pathname composed by: parent_path(InputFilename)/filename(From).; // This is useful when a type server (PDB file associated with an object; // file or a precompiled header file) or a DWARF split object have been; // moved from their original location. That is the case when running; // regression tests, where object files are created in one location and; // executed in a different location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:13,Testability,log,logical,13,// Creates a logical object of the given KIND. The signature for the created; // functions looks like:; // ...; // LVScope *createScope(); // LVScopeRoot *creatScopeRoot(); // LVType *createType();; // ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:3,Security,Access,Access,3,// Access to the scopes root.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:3,Security,Access,Access,3,// Access to split context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:176,Testability,log,logical,176,"// Vector of elements (types, scopes and symbols).; // It is the union of (*Types, *Symbols and *Scopes) to be used for; // the following reasons:; // - Preserve the order the logical elements are read in.; // - To have a single container with all the logical elements, when; // the traversal does not require any specific element kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:252,Testability,log,logical,252,"// Vector of elements (types, scopes and symbols).; // It is the union of (*Types, *Symbols and *Scopes) to be used for; // the following reasons:; // - Preserve the order the logical elements are read in.; // - To have a single container with all the logical elements, when; // the traversal does not require any specific element kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:12,Testability,log,logical,12,// Sort the logical elements using the criteria specified by the; // command line option '--output-sort'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:98,Deployability,update,update,98,// Follow a chain of references given by DW_AT_abstract_origin and/or; // DW_AT_specification and update the scope name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:73,Integrability,Depend,Depending,73,"// Checks if the current scope is contained within the target scope.; // Depending on the result, the callback may be performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:118,Performance,perform,performed,118,"// Checks if the current scope is contained within the target scope.; // Depending on the result, the callback may be performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:46,Testability,log,logically,46,// Returns true if the given 'References' are logically equal to the; // given 'Targets'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:50,Testability,log,logically,50,// For the given 'Scopes' returns a scope that is logically equal; // to the current scope; otherwise 'nullptr'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:50,Testability,log,logically,50,// For the given 'Scopes' returns a scope that is logically equal; // to the current scope; otherwise 'nullptr'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:34,Testability,log,logical,34,"// It records the mapping between logical lines representing a debug line; // entry and its address in the text section. It is used to find a line; // giving its exact or closest address. To support comdat functions, all; // addresses for the same section are recorded in the same map.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:42,Energy Efficiency,allocate,allocated,42,// Values are used by '--summary' option (allocated).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:50,Testability,log,logically,50,// For the given 'Scopes' returns a scope that is logically equal; // to the current scope; otherwise 'nullptr'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:50,Testability,log,logically,50,// For the given 'Scopes' returns a scope that is logically equal; // to the current scope; otherwise 'nullptr'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:3,Security,Access,Access,3,// Access DW_AT_extension reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:50,Testability,log,logically,50,// For the given 'Scopes' returns a scope that is logically equal; // to the current scope; otherwise 'nullptr'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSort.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSort.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSort.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVStringPool.h:61,Energy Efficiency,allocate,allocated,61,// Return number of strings in the pool. The empty string is allocated; // at the slot zero. We substract 1 to indicate the number of non empty; // strings.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVStringPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVStringPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVStringPool.h:13,Testability,log,logicalview,13,// namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVStringPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVStringPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSupport.h:503,Testability,log,logical,503,"// These are the values assigned to the debug location record IDs.; // See DebugInfo/CodeView/CodeViewSymbols.def.; // S_DEFRANGE 0x113f; // S_DEFRANGE_SUBFIELD 0x1140; // S_DEFRANGE_REGISTER 0x1141; // S_DEFRANGE_FRAMEPOINTER_REL 0x1142; // S_DEFRANGE_SUBFIELD_REGISTER 0x1143; // S_DEFRANGE_FRAMEPOINTER_REL_FULL_SCOPE 0x1144; // S_DEFRANGE_REGISTER_REL 0x1145; // When recording CodeView debug location, the above values are truncated; // to a uint8_t value in order to fit the 'OpCode' used for the logical; // debug location operations.; // Return the original CodeView enum value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSupport.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h:3,Security,Access,Access,3,"// Access DW_AT_specification, DW_AT_abstract_origin reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h:98,Deployability,update,update,98,// Follow a chain of references given by DW_AT_abstract_origin and/or; // DW_AT_specification and update the symbol name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h:35,Testability,log,logically,35,// Returns true if current type is logically equal to the given 'Symbol'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h:46,Testability,log,logically,46,// Returns true if the given 'References' are logically equal to the; // given 'Targets'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:98,Deployability,update,update,98,// Follow a chain of references given by DW_AT_abstract_origin and/or; // DW_AT_specification and update the type name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:35,Testability,log,logically,35,// Returns true if current type is logically equal to the given 'Type'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:46,Testability,log,logically,46,// Returns true if the given 'References' are logically equal to the; // given 'Targets'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:35,Testability,log,logically,35,// Returns true if current type is logically equal to the given 'Type'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:35,Testability,log,logically,35,// Returns true if current type is logically equal to the given 'Type'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:35,Testability,log,logically,35,// Returns true if current type is logically equal to the given 'Type'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:35,Testability,log,logically,35,// Returns true if current type is logically equal to the given 'Type'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:35,Testability,log,logically,35,// Returns true if current type is logically equal to the given 'Type'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:3,Testability,Log,Logical,3,"// Logical scope, Section address, Section index, IsComdat.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:65,Testability,log,logical,65,"// It contains the LVLineDebug elements representing the inlined logical; // lines for the current compile unit, created by parsing the CodeView; // S_INLINESITE symbol annotation data.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:27,Testability,log,logical,27,// Instruction lines for a logical scope. These instructions are fetched; // during its merge with the debug lines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:111,Performance,load,loaded,111,// Mapping from virtual address to section.; // The virtual address refers to the address where the section is loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:57,Testability,log,logical,57,"// It contains the LVLineDebug elements representing the logical lines for; // the current compile unit, created by parsing the debug line section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:3,Performance,Load,Loads,3,// Loads all info for the architecture of the provided object file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:57,Testability,log,logical,57,"// The ELF reader uses the DWARF constants to create the logical elements.; // The DW_TAG_* and DW_AT_* are used to select the logical object and to; // set specific attributes, such as name, type, etc.; // As the CodeView constants are different to the DWARF constants, the; // CodeView reader will map them to the DWARF ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:127,Testability,log,logical,127,"// The ELF reader uses the DWARF constants to create the logical elements.; // The DW_TAG_* and DW_AT_* are used to select the logical object and to; // set specific attributes, such as name, type, etc.; // As the CodeView constants are different to the DWARF constants, the; // CodeView reader will map them to the DWARF ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:49,Integrability,depend,dependent,49,"// Encapsulates access to the input file and any dependent type server,; // including any precompiled header object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:16,Security,access,access,16,"// Encapsulates access to the input file and any dependent type server,; // including any precompiled header object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:25,Performance,load,loading,25,// Persistance data when loading a type server.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:25,Performance,load,loading,25,// Persistance data when loading a precompiled header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:25,Performance,load,loading,25,// Persistance data when loading an executable file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:61,Security,checksum,checksum,61,"/// Given a .debug$S section, find the string table and file checksum table.; /// This function taken from (COFFDumper.cpp).; /// TODO: It can be moved to the COFF library.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h:190,Security,access,access,190,"// In a PDB, a type index may refer to a type (TPI) or an item ID (IPI).; // In a COFF or PDB (/Z7), the type index always refer to a type (TPI).; // When creating logical elements, we must access the correct element; // table, while searching for a type index.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h:164,Testability,log,logical,164,"// In a PDB, a type index may refer to a type (TPI) or an item ID (IPI).; // In a COFF or PDB (/Z7), the type index always refer to a type (TPI).; // When creating logical elements, we must access the correct element; // table, while searching for a type index.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h:15,Modifiability,variab,variable,15,// Assume is a variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h:49,Integrability,depend,dependent,49,"// Encapsulates access to the input file and any dependent type server,; // including any precompiled header object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h:16,Security,access,access,16,"// Encapsulates access to the input file and any dependent type server,; // including any precompiled header object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h:9,Availability,down,down,9,// Break down the annotation byte code and calculate code and line offsets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h:13,Testability,log,logicalview,13,// namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h:32,Availability,avail,available,32,// Indicates if ranges data are available; in the case of split DWARF any; // reference to ranges is valid only if the skeleton DIE has been loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h:141,Performance,load,loaded,141,// Indicates if ranges data are available; in the case of split DWARF any; // reference to ranges is valid only if the skeleton DIE has been loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MappedBlockStream.h:60,Energy Efficiency,allocate,allocate,60,"// We just store the allocator by reference. We use this to allocate; // contiguous memory for things like arrays or strings that cross a block; // boundary, and this memory is expected to outlive the stream. For example,; // someone could create a stream, read some stuff, then close the stream, and; // we would like outstanding references to fields to remain valid since the; // entire file is mapped anyway. Because of that, the user must supply the; // allocator to allocate broken records from.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MappedBlockStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MappedBlockStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MappedBlockStream.h:471,Energy Efficiency,allocate,allocate,471,"// We just store the allocator by reference. We use this to allocate; // contiguous memory for things like arrays or strings that cross a block; // boundary, and this memory is expected to outlive the stream. For example,; // someone could create a stream, read some stuff, then close the stream, and; // we would like outstanding references to fields to remain valid since the; // entire file is mapped anyway. Because of that, the user must supply the; // allocator to allocate broken records from.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MappedBlockStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MappedBlockStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:999,Availability,avail,available,999,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:1168,Availability,error,error,1168,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:1330,Availability,Error,Error,1330,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:1397,Availability,error,error,1397,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:1431,Availability,Error,Error,1431,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:819,Energy Efficiency,allocate,allocated,819,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:1046,Energy Efficiency,allocate,allocate,1046,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:1209,Testability,test,testing,1209,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:1246,Testability,test,test,1246,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:369,Availability,Error,Error,369,"/// Add a stream to the MSF file with the given size, occupying the given; /// list of blocks. This is useful when reading a MSF file and you want a; /// particular stream to occupy the original set of blocks. If the given; /// blocks are already allocated, or if the number of blocks specified is; /// incorrect for the given stream size, this function will return an Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:247,Energy Efficiency,allocate,allocated,247,"/// Add a stream to the MSF file with the given size, occupying the given; /// list of blocks. This is useful when reading a MSF file and you want a; /// particular stream to occupy the original set of blocks. If the given; /// blocks are already allocated, or if the number of blocks specified is; /// incorrect for the given stream size, this function will return an Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:68,Availability,avail,available,68,"/// Add a stream to the MSF file with the given size, occupying any available; /// blocks that the builder decides to use. This is useful when building a; /// new PDB file from scratch and you don't care what blocks a stream occupies; /// but you just want it to work.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:4,Deployability,Update,Update,4,/// Update the size of an existing stream. This will allocate or deallocate; /// blocks as needed to match the requested size. This can fail if `CanGrow`; /// was set to false when initializing the `MSFBuilder`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:53,Energy Efficiency,allocate,allocate,53,/// Update the size of an existing stream. This will allocate or deallocate; /// blocks as needed to match the requested size. This can fail if `CanGrow`; /// was set to false when initializing the `MSFBuilder`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:27,Energy Efficiency,allocate,allocated,27,/// Get the list of blocks allocated to a particular stream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:48,Energy Efficiency,allocate,allocated,48,/// Get the total number of blocks that will be allocated to actual data in; /// this MSF file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:79,Energy Efficiency,allocate,allocated,79,/// Get the total number of blocks that exist in the MSF file but are not; /// allocated to any valid data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:40,Energy Efficiency,allocate,allocated,40,/// Check whether a particular block is allocated or free.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFCommon.h:35,Modifiability,variab,variable,35,// The file system is split into a variable number of fixed size elements.; // These elements are referred to as blocks. The size of a block may vary; // from system to system.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFCommon.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFCommon.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFCommon.h:94,Testability,log,logical,94,"/// Describes the layout of a stream in an MSF layout. A ""stream"" here; /// is defined as any logical unit of data which may be arranged inside the MSF; /// file as a sequence of (possibly discontiguous) blocks. When we want to read; /// from a particular MSF Stream, we fill out a stream layout structure and the; /// reader uses it to determine which blocks in the underlying MSF file contain; /// the data, so that it can be pieced together in the right order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFCommon.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFCommon.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFError.h:20,Availability,Error,Error,20,"//===- MSFError.h - Error extensions for MSF Files --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFError.h:19,Availability,error,errors,19,/// Base class for errors originating when parsing raw PDB files,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFError.h:3,Modifiability,inherit,inherit,3,// inherit constructors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/GenericError.h:19,Availability,error,errors,19,/// Base class for errors originating when parsing raw PDB files,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/GenericError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/GenericError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/GenericError.h:3,Modifiability,inherit,inherit,3,// inherit constructors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/GenericError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/GenericError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBDataStream.h:31,Integrability,interface,interface,31,"//===- IPDBDataStream.h - base interface for child enumerator ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBDataStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBDataStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBDataStream.h:30,Integrability,interface,interface,30,/// IPDBDataStream defines an interface used to represent a stream consisting; /// of a name and a series of records whose formats depend on the particular; /// stream type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBDataStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBDataStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBDataStream.h:131,Integrability,depend,depend,131,/// IPDBDataStream defines an interface used to represent a stream consisting; /// of a name and a series of records whose formats depend on the particular; /// stream type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBDataStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBDataStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBEnumChildren.h:33,Integrability,interface,interface,33,"//===- IPDBEnumChildren.h - base interface for child enumerator -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBEnumChildren.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBEnumChildren.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBFrameData.h:30,Integrability,interface,interface,30,"//===- IPDBFrameData.h - base interface for frame data ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBFrameData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBFrameData.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBFrameData.h:29,Integrability,interface,interface,29,/// IPDBFrameData defines an interface used to represent a frame data of some; /// code block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBFrameData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBFrameData.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h:49,Integrability,inject,injected,49,"//===- IPDBInjectedSource.h - base class for PDB injected file --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h:49,Security,inject,injected,49,"//===- IPDBInjectedSource.h - base class for PDB injected file --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h:34,Integrability,interface,interface,34,"/// IPDBInjectedSource defines an interface used to represent source files; /// which were injected directly into the PDB file during the compilation; /// process. This is used, for example, to add natvis files to a PDB, but; /// in theory could be used to add arbitrary source code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h:91,Integrability,inject,injected,91,"/// IPDBInjectedSource defines an interface used to represent source files; /// which were injected directly into the PDB file during the compilation; /// process. This is used, for example, to add natvis files to a PDB, but; /// in theory could be used to add arbitrary source code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h:91,Security,inject,injected,91,"/// IPDBInjectedSource defines an interface used to represent source files; /// which were injected directly into the PDB file during the compilation; /// process. This is used, for example, to add natvis files to a PDB, but; /// in theory could be used to add arbitrary source code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h:22,Integrability,depend,depends,22,"// The returned value depends on the PDB producer,; // but 0 is guaranteed to mean ""no compression"".; // The enum PDB_SourceCompression lists known return values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBLineNumber.h:31,Integrability,interface,interface,31,"//===- IPDBLineNumber.h - base interface for PDB line no. info ---*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBLineNumber.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBLineNumber.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h:30,Integrability,interface,interface,30,"//===- IPDBRawSymbol.h - base interface for PDB symbol types ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h:29,Integrability,interface,interface,29,/// IPDBRawSymbol defines an interface used to represent an arbitrary symbol.; /// It exposes a monolithic interface consisting of accessors for the union of; /// all properties that are valid for any symbol type. This interface is then; /// wrapped by a concrete class which exposes only those set of methods valid; /// for this particular symbol type. See PDBSymbol.h for more details.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h:107,Integrability,interface,interface,107,/// IPDBRawSymbol defines an interface used to represent an arbitrary symbol.; /// It exposes a monolithic interface consisting of accessors for the union of; /// all properties that are valid for any symbol type. This interface is then; /// wrapped by a concrete class which exposes only those set of methods valid; /// for this particular symbol type. See PDBSymbol.h for more details.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h:219,Integrability,interface,interface,219,/// IPDBRawSymbol defines an interface used to represent an arbitrary symbol.; /// It exposes a monolithic interface consisting of accessors for the union of; /// all properties that are valid for any symbol type. This interface is then; /// wrapped by a concrete class which exposes only those set of methods valid; /// for this particular symbol type. See PDBSymbol.h for more details.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h:242,Integrability,wrap,wrapped,242,/// IPDBRawSymbol defines an interface used to represent an arbitrary symbol.; /// It exposes a monolithic interface consisting of accessors for the union of; /// all properties that are valid for any symbol type. This interface is then; /// wrapped by a concrete class which exposes only those set of methods valid; /// for this particular symbol type. See PDBSymbol.h for more details.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h:86,Security,expose,exposes,86,/// IPDBRawSymbol defines an interface used to represent an arbitrary symbol.; /// It exposes a monolithic interface consisting of accessors for the union of; /// all properties that are valid for any symbol type. This interface is then; /// wrapped by a concrete class which exposes only those set of methods valid; /// for this particular symbol type. See PDBSymbol.h for more details.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h:131,Security,access,accessors,131,/// IPDBRawSymbol defines an interface used to represent an arbitrary symbol.; /// It exposes a monolithic interface consisting of accessors for the union of; /// all properties that are valid for any symbol type. This interface is then; /// wrapped by a concrete class which exposes only those set of methods valid; /// for this particular symbol type. See PDBSymbol.h for more details.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h:276,Security,expose,exposes,276,/// IPDBRawSymbol defines an interface used to represent an arbitrary symbol.; /// It exposes a monolithic interface consisting of accessors for the union of; /// all properties that are valid for any symbol type. This interface is then; /// wrapped by a concrete class which exposes only those set of methods valid; /// for this particular symbol type. See PDBSymbol.h for more details.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSectionContrib.h:29,Integrability,Interface,Interfaces,29,"//==- IPDBSectionContrib.h - Interfaces for PDB SectionContribs --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSectionContrib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSectionContrib.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSectionContrib.h:34,Integrability,interface,interface,34,/// IPDBSectionContrib defines an interface used to represent section; /// contributions whose information are stored in the PDB.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSectionContrib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSectionContrib.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSession.h:28,Integrability,interface,interface,28,"//===- IPDBSession.h - base interface for a PDB symbol context --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSession.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSession.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSession.h:27,Integrability,interface,interface,27,"/// IPDBSession defines an interface used to provide a context for querying; /// debug information from a debug data source (for example, a PDB).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSession.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSession.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSourceFile.h:31,Integrability,interface,interface,31,"//===- IPDBSourceFile.h - base interface for a PDB source file --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSourceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSourceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSourceFile.h:30,Integrability,interface,interface,30,/// IPDBSourceFile defines an interface used to represent source files whose; /// information are stored in the PDB.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSourceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSourceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBTable.h:26,Integrability,Interface,Interface,26,"//===- IPDBTable.h - Base Interface for a PDB Symbol Context ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h:285,Energy Efficiency,power,power,285,/// PDBContext; /// This data structure is the top level entity that deals with PDB debug; /// information parsing. This data structure exists only when there is a; /// need for a transparent interface to different debug information formats; /// (e.g. PDB and DWARF). More control and power over the debug information; /// access can be had by using the PDB interfaces directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h:192,Integrability,interface,interface,192,/// PDBContext; /// This data structure is the top level entity that deals with PDB debug; /// information parsing. This data structure exists only when there is a; /// need for a transparent interface to different debug information formats; /// (e.g. PDB and DWARF). More control and power over the debug information; /// access can be had by using the PDB interfaces directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h:358,Integrability,interface,interfaces,358,/// PDBContext; /// This data structure is the top level entity that deals with PDB debug; /// information parsing. This data structure exists only when there is a; /// need for a transparent interface to different debug information formats; /// (e.g. PDB and DWARF). More control and power over the debug information; /// access can be had by using the PDB interfaces directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h:323,Security,access,access,323,/// PDBContext; /// This data structure is the top level entity that deals with PDB debug; /// information parsing. This data structure exists only when there is a; /// need for a transparent interface to different debug information formats; /// (e.g. PDB and DWARF). More control and power over the debug information; /// access can be had by using the PDB interfaces directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbol.h:38,Modifiability,inherit,inheritance,38,"/// PDBSymbol defines the base of the inheritance hierarchy for concrete symbol; /// types (e.g. functions, executables, vtables, etc). All concrete symbol; /// types inherit from PDBSymbol and expose the exact set of methods that are; /// valid for that particular symbol type, as described in the Microsoft; /// reference ""Lexical and Class Hierarchy of Symbol Types"":; /// https://msdn.microsoft.com/en-us/library/370hs6k4.aspx",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbol.h:167,Modifiability,inherit,inherit,167,"/// PDBSymbol defines the base of the inheritance hierarchy for concrete symbol; /// types (e.g. functions, executables, vtables, etc). All concrete symbol; /// types inherit from PDBSymbol and expose the exact set of methods that are; /// valid for that particular symbol type, as described in the Microsoft; /// reference ""Lexical and Class Hierarchy of Symbol Types"":; /// https://msdn.microsoft.com/en-us/library/370hs6k4.aspx",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbol.h:194,Security,expose,expose,194,"/// PDBSymbol defines the base of the inheritance hierarchy for concrete symbol; /// types (e.g. functions, executables, vtables, etc). All concrete symbol; /// types inherit from PDBSymbol and expose the exact set of methods that are; /// valid for that particular symbol type, as described in the Microsoft; /// reference ""Lexical and Class Hierarchy of Symbol Types"":; /// https://msdn.microsoft.com/en-us/library/370hs6k4.aspx",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolAnnotation.h:31,Security,Access,Accessors,31,"//===- PDBSymbolAnnotation.h - Accessors for querying PDB annotations ---*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolAnnotation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolAnnotation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolBlock.h:26,Security,Access,Accessors,26,"//===- PDBSymbolBlock.h - Accessors for querying PDB blocks -------------*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolCompiland.h:30,Security,Access,Accessors,30,"//===- PDBSymbolCompiland.h - Accessors for querying PDB compilands -----*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolCompiland.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolCompiland.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolCompilandEnv.h:55,Modifiability,variab,variables,55,"//===- PDBSymbolCompilandEnv.h - compiland environment variables *- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolCompilandEnv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolCompilandEnv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolData.h:40,Modifiability,variab,variable,40,"//===- PDBSymbolData.h - PDB data (e.g. variable) accessors -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolData.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolData.h:50,Security,access,accessors,50,"//===- PDBSymbolData.h - PDB data (e.g. variable) accessors -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolData.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolExe.h:24,Security,Access,Accessors,24,"//===- PDBSymbolExe.h - Accessors for querying executables in a PDB ----*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolExe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolExe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymDumper.h:29,Integrability,interface,interface,29,"//===- PDBSymDumper.h - base interface for PDB symbol dumper *- C++ -----*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymDumper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymDumper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:18,Security,hash,hash,18,/// Specifies the hash algorithm that a source file from a PDB was hashed with.; /// This corresponds to the CV_SourceChksum_t enumeration and are documented; /// here: https://msdn.microsoft.com/en-us/library/e96az21x.aspx,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:67,Security,hash,hashed,67,/// Specifies the hash algorithm that a source file from a PDB was hashed with.; /// This corresponds to the CV_SourceChksum_t enumeration and are documented; /// here: https://msdn.microsoft.com/en-us/library/e96az21x.aspx,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:216,Security,Hash,HashFunctionGuid,216,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:247,Security,Hash,HashDataSize,247,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:310,Security,Hash,HashDataSize,310,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:342,Security,hash,hash,342,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:347,Security,checksum,checksum,347,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:485,Security,hash,hash,485,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:1695,Security,Hash,HashFunctionGuid,1695,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:1763,Security,Hash,HashDataSize,1763,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:1830,Security,Hash,HashDataSize,1830,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:1899,Security,Hash,HashDataSize,1899,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:128,Usability,GUID,GUID,128,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:155,Usability,GUID,GUID,155,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:184,Usability,GUID,GUID,184,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:211,Usability,GUID,GUID,211,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:889,Usability,GUID,GUID,889,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:1013,Usability,GUID,GUIDs,1013,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:1484,Usability,GUID,GUIDs,1484,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:1588,Usability,GUID,GUIDs,1588,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:1685,Usability,GUID,GUIDs,1685,"// Produced e.g. by `csc /debug`. The encoded data is its own mini-stream; // with the following layout (in little endian):; // GUID LanguageTypeGuid;; // GUID LanguageVendorGuid;; // GUID DocumentTypeGuid;; // GUID HashFunctionGuid;; // uint32_t HashDataSize;; // uint32_t CompressedDataSize;; // Followed by HashDataSize bytes containing a hash checksum,; // followed by CompressedDataSize bytes containing source contents.; //; // CompressedDataSize can be 0, in this case only the hash data is present.; // (CompressedDataSize is != 0 e.g. if `/embed` is passed to csc.exe.); // The compressed data format is:; // uint32_t UncompressedDataSize;; // If UncompressedDataSize is 0, the data is stored uncompressed and; // CompressedDataSize stores the uncompressed size.; // If UncompressedDataSize is != 0, then the data is in raw deflate; // encoding as described in rfc1951.; //; // A GUID is 16 bytes, stored in the usual; // uint32_t; // uint16_t; // uint16_t; // uint8_t[24]; // layout.; //; // Well-known GUIDs for LanguageTypeGuid are:; // 63a08714-fc37-11d2-904c-00c04fa302a1 C; // 3a12d0b7-c26c-11d0-b442-00a0244a1dd2 C++; // 3f5162f8-07c6-11d3-9053-00c04fa302a1 C#; // af046cd1-d0e1-11d2-977c-00a0c9b4d50c Cobol; // ab4f38c9-b6e6-43ba-be3b-58080b2ccce3 F#; // 3a12d0b4-c26c-11d0-b442-00a0244a1dd2 Java; // 3a12d0b6-c26c-11d0-b442-00a0244a1dd2 JScript; // af046cd2-d0e1-11d2-977c-00a0c9b4d50c Pascal; // 3a12d0b8-c26c-11d0-b442-00a0244a1dd2 Visual Basic; //; // Well-known GUIDs for LanguageVendorGuid are:; // 994b45c4-e6e9-11d2-903f-00c04fa302a1 Microsoft; //; // Well-known GUIDs for DocumentTypeGuid are:; // 5a869d0b-6611-11d3-bd2a-0000f80849bd Text; //; // Well-known GUIDs for HashFunctionGuid are:; // 406ea660-64cf-4c82-b6f0-42d48172a799 MD5 (HashDataSize is 16); // ff1816ec-aa5e-4d10-87f7-6f4963833460 SHA1 (HashDataSize is 20); // 8829d00f-11b8-4213-878b-770e8597ac16 SHA256 (HashDataSize is 32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAEnumInjectedSources.h:37,Integrability,Inject,Injected,37,"//==- DIAEnumInjectedSources.h - DIA Injected Sources Enumerator -*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAEnumInjectedSources.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAEnumInjectedSources.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAEnumInjectedSources.h:37,Security,Inject,Injected,37,"//==- DIAEnumInjectedSources.h - DIA Injected Sources Enumerator -*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAEnumInjectedSources.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAEnumInjectedSources.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAError.h:20,Availability,Error,Error,20,"//===- DIAError.h - Error extensions for PDB DIA implementation -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAError.h:19,Availability,error,errors,19,"/// Base class for errors originating in DIA SDK, e.g. COM calls",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIASupport.h:468,Modifiability,config,configure,468,"//===- DIASupport.h - Common header includes for DIA ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // Common defines and header includes for all LLVMDebugInfoPDBDIA. The; // definitions here configure the necessary #defines and include system headers; // in the proper order for using DIA.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIASupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIASupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/DbiModuleDescriptorBuilder.h:170,Energy Efficiency,allocate,allocated,170,/// Commit the accumulated symbols to the module symbol stream. Safe to call; /// in parallel on different DbiModuleDescriptorBuilder objects. Only modifies; /// the pre-allocated stream in question.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/DbiModuleDescriptorBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/DbiModuleDescriptorBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/DbiModuleDescriptorBuilder.h:64,Safety,Safe,Safe,64,/// Commit the accumulated symbols to the module symbol stream. Safe to call; /// in parallel on different DbiModuleDescriptorBuilder objects. Only modifies; /// the pre-allocated stream in question.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/DbiModuleDescriptorBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/DbiModuleDescriptorBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/DbiModuleList.h:30,Security,access,access,30,"// In order to provide random access into the Descriptors array, we iterate it; // once up front to find the offsets of the individual items and store them in; // this array.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/DbiModuleList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/DbiModuleList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/DbiStream.h:47,Security,Access,Access,47,"//===- DbiStream.h - PDB Dbi Stream (Stream 3) Access -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/DbiStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/DbiStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GlobalsStream.h:18,Security,hash,hash,18,/// Iterator over hash records producing symbol record offsets. Abstracts away; /// the fact that symbol record offsets on disk are off-by-one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GlobalsStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GlobalsStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GlobalsStream.h:25,Security,hash,hash,25,/// A readonly view of a hash table used in the globals and publics streams.; /// Most clients will only want to iterate this to get symbol record offsets; /// into the PDB symbol stream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GlobalsStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GlobalsStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h:102,Availability,alive,alive,102,// Add a pre-serialized global symbol record. The caller must ensure that the; // symbol data remains alive until the global stream is committed to disk.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h:3,Security,Hash,Hash,3,// Hash table for deduplicating global typedef and constant records. Only used; // for globals.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h:77,Performance,optimiz,optimized,77,"/// This struct is equivalent to codeview::PublicSym32, but it has been; /// optimized for size to speed up bulk serialization and sorting operations; /// during PDB writing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h:7,Security,hash,hash,7,// GSI hash table bucket index. The maximum value is IPHR_HASH.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/Hash.h:7,Security,Hash,Hash,7,"//===- Hash.h - PDB hash functions ------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/Hash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/Hash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/Hash.h:20,Security,hash,hash,20,"//===- Hash.h - PDB hash functions ------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/Hash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/Hash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h:7,Security,Hash,HashTable,7,"//===- HashTable.h - PDB Hash Table -----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h:25,Security,Hash,Hash,25,"//===- HashTable.h - PDB Hash Table -----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h:47,Security,hash,hash,47,"/// Find the entry whose key has the specified hash value, using the specified; /// traits defining hash function and equality.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h:100,Security,hash,hash,100,"/// Find the entry whose key has the specified hash value, using the specified; /// traits defining hash function and equality.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h:128,Performance,load,load,128,"// The only way FirstUnused would not be set is if every single entry in the; // table were Present. But this would violate the load factor constraints; // that we impose, so it should never happen.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h:48,Security,hash,hashing,48,"// Growing requires rebuilding the table and re-hashing every item. Make a; // copy with a larger capacity, insert everything into the copy, then swap; // it in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStream.h:49,Security,Access,Access,49,"//===- InfoStream.h - PDB Info Stream (Stream 1) Access ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStreamBuilder.h:41,Security,hash,hashed,41,"// If this is true, the PDB contents are hashed and this hash is used as; // PDB GUID and as Signature. The age is always 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStreamBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStreamBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStreamBuilder.h:57,Security,hash,hash,57,"// If this is true, the PDB contents are hashed and this hash is used as; // PDB GUID and as Signature. The age is always 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStreamBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStreamBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStreamBuilder.h:81,Usability,GUID,GUID,81,"// If this is true, the PDB contents are hashed and this hash is used as; // PDB GUID and as Signature. The age is always 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStreamBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStreamBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStreamBuilder.h:32,Security,hash,hashPDBContentsToGUID,32,// These only have an effect if hashPDBContentsToGUID() is false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStreamBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStreamBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InjectedSourceStream.h:7,Integrability,Inject,InjectedSourceStream,7,"//===- InjectedSourceStream.h - PDB Headerblock Stream Access ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InjectedSourceStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InjectedSourceStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InjectedSourceStream.h:7,Security,Inject,InjectedSourceStream,7,"//===- InjectedSourceStream.h - PDB Headerblock Stream Access ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InjectedSourceStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InjectedSourceStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InjectedSourceStream.h:55,Security,Access,Access,55,"//===- InjectedSourceStream.h - PDB Headerblock Stream Access ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InjectedSourceStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InjectedSourceStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/ModuleDebugStream.h:52,Security,Access,Access,52,"//===- ModuleDebugStream.h - PDB Module Info Stream Access ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/ModuleDebugStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/ModuleDebugStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NamedStreamMap.h:11,Security,hash,hash,11,"/// Closed hash table from Offset -> StreamNumber, where Offset is the offset; /// of the stream name in NamesBuffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NamedStreamMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NamedStreamMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeEnumInjectedSources.h:45,Integrability,Inject,Injected,45,"//==- NativeEnumInjectedSources.cpp - Native Injected Source Enumerator --*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeEnumInjectedSources.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeEnumInjectedSources.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeEnumInjectedSources.h:45,Security,Inject,Injected,45,"//==- NativeEnumInjectedSources.cpp - Native Injected Source Enumerator --*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeEnumInjectedSources.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeEnumInjectedSources.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeTypePointer.h:33,Usability,simpl,simple,33,// Create a pointer record for a simple type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeTypePointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeTypePointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeTypePointer.h:37,Usability,simpl,simple,37,// Create a pointer record for a non-simple type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeTypePointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeTypePointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeTypeTypedef.h:37,Usability,simpl,simple,37,// Create a pointer record for a non-simple type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeTypeTypedef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeTypeTypedef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeTypeVTShape.h:37,Usability,simpl,simple,37,// Create a pointer record for a non-simple type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeTypeVTShape.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeTypeVTShape.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFile.h:29,Integrability,interface,interface,29,"//===- PDBFile.h - Low level interface to a PDB file ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h:6,Security,Hash,HashPDBContentsToGUID,6,"// If HashPDBContentsToGUID is true on the InfoStreamBuilder, Guid is filled; // with the computed PDB GUID on return.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h:62,Usability,Guid,Guid,62,"// If HashPDBContentsToGUID is true on the InfoStreamBuilder, Guid is filled; // with the computed PDB GUID on return.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h:103,Usability,GUID,GUID,103,"// If HashPDBContentsToGUID is true on the InfoStreamBuilder, Guid is filled; // with the computed PDB GUID on return.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h:66,Integrability,inject,injected,66,"// The full name of the stream that contains the contents of this injected; // source. This is built as a concatenation of the literal ""/src/files""; // plus the ""vname"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h:66,Security,inject,injected,66,"// The full name of the stream that contains the contents of this injected; // source. This is built as a concatenation of the literal ""/src/files""; // plus the ""vname"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawError.h:20,Availability,Error,Error,20,"//===- RawError.h - Error extensions for raw PDB implementation -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawError.h:19,Availability,error,errors,19,/// Base class for errors originating when parsing raw PDB files,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawError.h:3,Modifiability,inherit,inherit,3,// inherit constructors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:18,Security,hash,hash,18,/// Header of the hash tables found in the globals and publics sections.; /// Based on GSIHashHdr in; /// https://github.com/Microsoft/microsoft-pdb/blob/master/PDB/dbi/gsi.h,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:66,Modifiability,inherit,inheritance,66,"// To guarantee SectionContrib2 is standard layout, we cannot use inheritance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:13,Testability,log,logical,13,// Number of logical segment descriptors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:166,Security,access,accesses,166,"// This corresponds to the `OMFSegMapDesc` structure. The definition is not; // present in the reference implementation, but the layout is derived from; // code that accesses the fields.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:3,Testability,Log,Logical,3,// Logical overlay number.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:22,Testability,log,logical,22,"// Byte offset of the logical segment; // within the specified physical segment.; // If group is set in flags, offset is the; // offset of the group.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:245,Availability,mask,masking,245,"/// Some of the values are stored in bitfields. Since this needs to be portable; /// across compilers and architectures (big / little endian in particular) we; /// can't use the actual structures below, but must instead do the shifting; /// and masking ourselves. The struct definitions are provided for reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:71,Modifiability,portab,portable,71,"/// Some of the values are stored in bitfields. Since this needs to be portable; /// across compilers and architectures (big / little endian in particular) we; /// can't use the actual structures below, but must instead do the shifting; /// and masking ourselves. The struct definitions are provided for reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:134,Modifiability,portab,portably,134,"/// Array of [0..NumFiles) DBI name buffer offsets. In the reference; /// implementation this field is a pointer. But since you can't portably; /// serialize a pointer, on 64-bit platforms they copy all the values except; /// this one into the 32-bit version of the struct and use that for; /// serialization. Regardless, this field is unused, it is only there to; /// store a pointer that can be accessed at runtime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:397,Security,access,accessed,397,"/// Array of [0..NumFiles) DBI name buffer offsets. In the reference; /// implementation this field is a pointer. But since you can't portably; /// serialize a pointer, on 64-bit platforms they copy all the values except; /// this one into the 32-bit version of the struct and use that for; /// serialization. Regardless, this field is unused, it is only there to; /// store a pointer that can be accessed at runtime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:27,Integrability,inject,injected,27,// Is this a virtual file (injected)?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:27,Security,inject,injected,27,// Is this a virtual file (injected)?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h:22,Performance,Cache,Cache,22,"//==- SymbolCache.h - Cache of native symbols and ids ------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h:248,Energy Efficiency,allocate,allocated,248,"/// Cache of all stable symbols, indexed by SymIndexId. Just because a; /// symbol has been parsed does not imply that it will be stable and have; /// an Id. Id allocation is an implementation, with the only guarantee; /// being that once an Id is allocated, the symbol can be assumed to be; /// cached.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h:4,Performance,Cache,Cache,4,"/// Cache of all stable symbols, indexed by SymIndexId. Just because a; /// symbol has been parsed does not imply that it will be stable and have; /// an Id. Id allocation is an implementation, with the only guarantee; /// being that once an Id is allocated, the symbol can be assumed to be; /// cached.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h:296,Performance,cache,cached,296,"/// Cache of all stable symbols, indexed by SymIndexId. Just because a; /// symbol has been parsed does not imply that it will be stable and have; /// an Id. Id allocation is an implementation, with the only guarantee; /// being that once an Id is allocated, the symbol can be assumed to be; /// cached.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h:68,Performance,cache,cached,68,"/// For type records from the TPI stream which have been paresd and cached,; /// stores a mapping to SymIndexId of the cached symbol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h:119,Performance,cache,cached,119,"/// For type records from the TPI stream which have been paresd and cached,; /// stores a mapping to SymIndexId of the cached symbol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h:54,Performance,cache,cached,54,"/// For field list members which have been parsed and cached, stores a mapping; /// from (IndexOfClass, MemberIndex) to the corresponding SymIndexId of the; /// cached symbol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h:161,Performance,cache,cached,161,"/// For field list members which have been parsed and cached, stores a mapping; /// from (IndexOfClass, MemberIndex) to the corresponding SymIndexId of the; /// cached symbol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h:44,Performance,cache,cache,44,"// Initial construction must not access the cache, since it must be done; // atomically.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h:33,Security,access,access,33,"// Initial construction must not access the cache, since it must be done; // atomically.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h:28,Performance,cache,cache,28,"// After the item is in the cache, we can do further initialization which; // is then allowed to access the cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h:108,Performance,cache,cache,108,"// After the item is in the cache, we can do further initialization which; // is then allowed to access the cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h:97,Security,access,access,97,"// After the item is in the cache, we can do further initialization which; // is then allowed to access the cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolStream.h:44,Security,Access,Access,44,"//===- SymbolStream.cpp - PDB Symbol Stream Access --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/TpiHashing.h:85,Security,hash,hash,85,"/// Given a CVType referring to a class, structure, union, or enum, compute; /// the hash of its forward decl and full decl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/TpiHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/TpiHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/TpiStream.h:52,Security,Access,Access,52,"//===- TpiStream.cpp - PDB Type Info (TPI) Stream 2 Access ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/TpiStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/TpiStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Markup.h:419,Testability,log,log,419,"//===- Markup.h -------------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file declares the log symbolizer markup data model and parser.; ///; /// See https://llvm.org/docs/SymbolizerMarkupFormat.html; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Markup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Markup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Markup.h:197,Safety,detect,detected,197,"/// A node of symbolizer markup.; ///; /// If only the Text field is set, this represents a region of text outside a; /// markup element. ANSI SGR control codes are also reported this way; if; /// detected, then the control code will be the entirety of the Text field, and; /// any surrounding text will be reported as preceding and following nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Markup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Markup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Markup.h:13,Testability,log,log,13,/// Parses a log containing symbolizer markup into a sequence of nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Markup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Markup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/MarkupFilter.h:29,Testability,log,log,29,/// Filter to convert parsed log symbolizer markup elements into human-readable; /// text.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/MarkupFilter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/MarkupFilter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/SymbolizableModule.h:425,Integrability,interface,interface,425,"//===- SymbolizableModule.h -------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the SymbolizableModule interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/SymbolizableModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/SymbolizableModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/SymbolizableModule.h:60,Performance,load,loader,60,"// Returns the preferred base of the module, i.e. where the loader would place; // it in memory assuming there were no conflicts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/SymbolizableModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/SymbolizableModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/SymbolizableObjectFile.h:60,Performance,load,loader,60,"// Returns the preferred base of the module, i.e. where the loader would place; // it in memory assuming there were no conflicts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/SymbolizableObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/SymbolizableObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:33,Performance,cache,cache,33,// Evict entries from the binary cache until it is under the maximum size; // given in the options. Calling this invalidates references in the DI...; // objects returned by the methods above.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:39,Availability,error,error,39,"/// Returns a SymbolizableModule or an error if loading debug info failed.; /// Only one attempt is made to load a module, and errors during loading are; /// only reported once. Subsequent calls to get module info for a module that; /// failed to load will return nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:127,Availability,error,errors,127,"/// Returns a SymbolizableModule or an error if loading debug info failed.; /// Only one attempt is made to load a module, and errors during loading are; /// only reported once. Subsequent calls to get module info for a module that; /// failed to load will return nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:48,Performance,load,loading,48,"/// Returns a SymbolizableModule or an error if loading debug info failed.; /// Only one attempt is made to load a module, and errors during loading are; /// only reported once. Subsequent calls to get module info for a module that; /// failed to load will return nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:108,Performance,load,load,108,"/// Returns a SymbolizableModule or an error if loading debug info failed.; /// Only one attempt is made to load a module, and errors during loading are; /// only reported once. Subsequent calls to get module info for a module that; /// failed to load will return nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:141,Performance,load,loading,141,"/// Returns a SymbolizableModule or an error if loading debug info failed.; /// Only one attempt is made to load a module, and errors during loading are; /// only reported once. Subsequent calls to get module info for a module that; /// failed to load will return nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:247,Performance,load,load,247,"/// Returns a SymbolizableModule or an error if loading debug info failed.; /// Only one attempt is made to load a module, and errors during loading are; /// only reported once. Subsequent calls to get module info for a module that; /// failed to load will return nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:39,Availability,error,error,39,"/// Returns a SymbolizableModule or an error if loading debug info failed.; /// Unlike the above, errors are reported each time, since they are more; /// likely to be transient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:98,Availability,error,errors,98,"/// Returns a SymbolizableModule or an error if loading debug info failed.; /// Unlike the above, errors are reported each time, since they are more; /// likely to be transient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:48,Performance,load,loading,48,"/// Returns a SymbolizableModule or an error if loading debug info failed.; /// Unlike the above, errors are reported each time, since they are more; /// likely to be transient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:4,Deployability,Update,Update,4,/// Update the LRU cache order when a binary is accessed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:19,Performance,cache,cache,19,/// Update the LRU cache order when a binary is accessed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:48,Security,access,accessed,48,/// Update the LRU cache order when a binary is accessed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:13,Performance,cache,cached,13,/// Contains cached results of getOrCreateObjectPair().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:53,Availability,error,error,53,"/// Contains parsed binary for each path, or parsing error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:14,Performance,cache,cached,14,/// A list of cached binaries in LRU order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:28,Performance,cache,cached,28,/// Sum of the sizes of the cached binaries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:111,Availability,error,error,111,"// A binary intrusively linked into a LRU cache list. If the binary is empty,; // then the entry marks that an error occurred, and it is not part of the LRU; // list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:42,Performance,cache,cache,42,"// A binary intrusively linked into a LRU cache list. If the binary is empty,; // then the entry marks that an error occurred, and it is not part of the LRU; // list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:23,Performance,perform,performed,23,"// Add an action to be performed when the binary is evicted, before all; // previously registered evictors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:95,Modifiability,variab,variable,95,/// Finds default array of Debuginfod server URLs by checking DEBUGINFOD_URLS; /// environment variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:16,Performance,cache,cache,16,/// Returns the cache key for a given debuginfod URL path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:90,Modifiability,variab,variable,90,/// Sets the list of debuginfod server URLs to query. This overrides the; /// environment variable DEBUGINFOD_URLS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:101,Modifiability,variab,variable,101,"/// Finds a default timeout for debuginfod HTTP requests. Checks; /// DEBUGINFOD_TIMEOUT environment variable, default is 90 seconds (90000 ms).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:20,Safety,timeout,timeout,20,"/// Finds a default timeout for debuginfod HTTP requests. Checks; /// DEBUGINFOD_TIMEOUT environment variable, default is 90 seconds (90000 ms).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:67,Performance,cache,cache,67,/// Fetches a specified source file by searching the default local cache; /// directory and server URLs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:57,Performance,cache,cache,57,/// Fetches an executable by searching the default local cache directory and; /// server URLs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:58,Performance,cache,cache,58,/// Fetches a debug binary by searching the default local cache directory and; /// server URLs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:60,Performance,cache,cache,60,/// Fetches any debuginfod artifact using the default local cache directory and; /// server URLs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:62,Performance,cache,cache,62,"/// Fetches any debuginfod artifact using the specified local cache directory,; /// server URLs, and request timeout (in milliseconds). If the artifact is; /// found, uses the UniqueKey for the local cache file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:200,Performance,cache,cache,200,"/// Fetches any debuginfod artifact using the specified local cache directory,; /// server URLs, and request timeout (in milliseconds). If the artifact is; /// found, uses the UniqueKey for the local cache file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:109,Safety,timeout,timeout,109,"/// Fetches any debuginfod artifact using the specified local cache directory,; /// server URLs, and request timeout (in milliseconds). If the artifact is; /// found, uses the UniqueKey for the local cache file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:34,Performance,queue,queue,34,// Adds a log entry to end of the queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:10,Testability,log,log,10,// Adds a log entry to end of the queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:34,Performance,queue,queue,34,// Adds a log entry to end of the queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:10,Testability,log,log,10,// Adds a log entry to end of the queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:45,Performance,queue,queue,45,"// Blocks until there are log entries in the queue, then pops and returns the; // first one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:26,Testability,log,log,26,"// Blocks until there are log entries in the queue, then pops and returns the; // first one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:141,Availability,error,error,141,"// If the collection has not been updated since MinInterval, call update() and; // return true. Otherwise return false. If update returns an error, return the; // error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:163,Availability,error,error,163,"// If the collection has not been updated since MinInterval, call update() and; // return true. Otherwise return false. If update returns an error, return the; // error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:34,Deployability,update,updated,34,"// If the collection has not been updated since MinInterval, call update() and; // return true. Otherwise return false. If update returns an error, return the; // error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:66,Deployability,update,update,66,"// If the collection has not been updated since MinInterval, call update() and; // return true. Otherwise return false. If update returns an error, return the; // error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:123,Deployability,update,update,123,"// If the collection has not been updated since MinInterval, call update() and; // return true. Otherwise return false. If update returns an error, return the; // error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:11,Deployability,update,update,11,"// Minimum update interval, in seconds, for on-demand updates triggered when a; // build-id is not found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:54,Deployability,update,updates,54,"// Minimum update interval, in seconds, for on-demand updates triggered when a; // build-id is not found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h:142,Availability,Error,Error,142,/// A handler for state updates occurring while an HTTPRequest is performed.; /// Can trigger the client to abort the request by returning an Error from any; /// of its methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h:24,Deployability,update,updates,24,/// A handler for state updates occurring while an HTTPRequest is performed.; /// Can trigger the client to abort the request by returning an Error from any; /// of its methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h:66,Performance,perform,performed,66,/// A handler for state updates occurring while an HTTPRequest is performed.; /// Can trigger the client to abort the request by returning an Error from any; /// of its methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h:108,Safety,abort,abort,108,/// A handler for state updates occurring while an HTTPRequest is performed.; /// Can trigger the client to abort the request by returning an Error from any; /// of its methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h:31,Performance,perform,perform,31,/// A reusable client that can perform HTTPRequests through a network socket.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h:13,Safety,timeout,timeout,13,"/// Sets the timeout for the entire request, in milliseconds. A zero or; /// negative value means the request never times out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h:81,Availability,error,errors,81,"/// Performs the Request, passing response data to the Handler. Returns all; /// errors which occur during the request. Aborts if an error is returned by a; /// Handler method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h:133,Availability,error,error,133,"/// Performs the Request, passing response data to the Handler. Returns all; /// errors which occur during the request. Aborts if an error is returned by a; /// Handler method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h:4,Performance,Perform,Performs,4,"/// Performs the Request, passing response data to the Handler. Returns all; /// errors which occur during the request. Aborts if an error is returned by a; /// Handler method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h:120,Safety,Abort,Aborts,120,"/// Performs the Request, passing response data to the Handler. Returns all; /// errors which occur during the request. Aborts if an error is returned by a; /// Handler method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPClient.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h:4,Integrability,Wrap,Wraps,4,/// Wraps the content provider with HTTP Status code and headers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h:57,Availability,avail,available,57,"/// Sets the response to stream the file at FilePath, if available, and; /// otherwise an HTTP 404 error response.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h:99,Availability,error,error,99,"/// Sets the response to stream the file at FilePath, if available, and; /// otherwise an HTTP 404 error response.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h:28,Integrability,rout,routing,28,"/// Registers a URL pattern routing rule. When the server is listening, each; /// request is dispatched to the first registered handler whose UrlPathPattern; /// matches the UrlPath.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h:70,Availability,Error,Error,70,"/// Attempts to assign the requested port and interface, returning an Error; /// upon failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h:86,Availability,failure,failure,86,"/// Attempts to assign the requested port and interface, returning an Error; /// upon failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h:46,Integrability,interface,interface,46,"/// Attempts to assign the requested port and interface, returning an Error; /// upon failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h:27,Availability,avail,available,27,"/// Attempts to assign any available port and interface, returning either the; /// port number or an Error upon failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h:101,Availability,Error,Error,101,"/// Attempts to assign any available port and interface, returning either the; /// port number or an Error upon failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h:112,Availability,failure,failure,112,"/// Attempts to assign any available port and interface, returning either the; /// port number or an Error upon failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h:46,Integrability,interface,interface,46,"/// Attempts to assign any available port and interface, returning either the; /// port number or an Error upon failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h:66,Availability,Error,Error,66,/// Attempts to listen for requests on the bound port. Returns an Error if; /// called before binding a port.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Demangle.h:183,Availability,error,error,183,"/// Demangles the Microsoft symbol pointed at by mangled_name and returns it.; /// Returns a pointer to the start of a null-terminated demangled string on; /// success, or nullptr on error.; /// If n_read is non-null and demangling was successful, it receives how many; /// bytes of the input string were consumed.; /// status receives one of the demangle_ enum entries above if it's not nullptr.; /// Flags controls various details of the demangled representation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/Demangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Demangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Demangle.h:150,Availability,error,error,150,"/// Demangle into an AST. Subsequent calls to the rest of the member functions; /// implicitly operate on the AST this produces.; /// \return true on error, false otherwise",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/Demangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Demangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Demangle.h:31,Modifiability,variab,variable,31,/// If this symbol describes a variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/Demangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Demangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/DemangleConfig.h:532,Integrability,depend,dependency,532,"//===--- DemangleConfig.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a variety of feature test macros copied from; // include/llvm/Support/Compiler.h so that LLVMDemangle does not need to take; // a dependency on LLVMSupport.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/DemangleConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/DemangleConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/DemangleConfig.h:423,Testability,test,test,423,"//===--- DemangleConfig.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a variety of feature test macros copied from; // include/llvm/Support/Compiler.h so that LLVMDemangle does not need to take; // a dependency on LLVMSupport.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/DemangleConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/DemangleConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/DemangleConfig.h:82,Availability,error,error,82,"// Workaround for llvm.org/PR23435, since clang 3.6 and below emit a spurious; // error when __has_cpp_attribute is given a scoped attribute in C mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/DemangleConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/DemangleConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:610,Deployability,update,update,610,"//===--- ItaniumDemangle.h -----------*- mode:c++;eval:(read-only-mode) -*-===//; // Do not edit! See README.txt.; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Generic itanium demangler library.; // There are two copies of this file in the source tree. The one under; // libcxxabi is the original and the one under llvm is the copy. Use; // cp-to-llvm.sh to update the copy. See README.txt for more details.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:30,Performance,cache,cached,30,/// Three-way bool to track a cached value. Unknown is possible if this node; /// has an unexpanded parameter pack below it that may affect this cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:145,Performance,cache,cache,145,/// Three-way bool to track a cached value. Unknown is possible if this node; /// has an unexpanded parameter pack below it that may affect this cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:6,Modifiability,rewrite,rewrite,6,// We rewrite objc_object<SomeProtocol>* into id<SomeProtocol>.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:349,Safety,detect,detection,349,"// Dig through any refs to refs, collapsing the ReferenceTypes as we go. The; // rule here is rvalue ref to rvalue ref collapses to a rvalue ref, and any; // other combination collapses to a lvalue ref.; //; // A combination of a TemplateForwardReference and a back-ref Substitution; // from an ill-formed string may have created a cycle; use cycle detection to; // avoid looping forever.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:366,Safety,avoid,avoid,366,"// Dig through any refs to refs, collapsing the ReferenceTypes as we go. The; // rule here is rvalue ref to rvalue ref collapses to a rvalue ref, and any; // other combination collapses to a lvalue ref.; //; // A combination of a TemplateForwardReference and a back-ref Substitution; // from an ill-formed string may have created a cycle; use cycle detection to; // avoid looping forever.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:74,Safety,detect,detection,74,"// Track the chain of nodes for the Floyd's 'tortoise and hare'; // cycle-detection algorithm, since getSyntaxNode(S) is impure",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:9,Safety,detect,detected,9,// Cycle detected,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:54,Usability,simpl,simple,54,// Don't print the requires clause to keep the output simple.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:65,Modifiability,Refactor,Refactored,65,// Either '[init op ]... op pack' or 'pack op ...[ op init]'; // Refactored to '[(init|pack) op ]...[ op (pack|init)]'; // Fold expr operands are cast-expressions,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:10,Security,access,access,10,// Member access: lhs @ rhs,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:61,Usability,Clear,Clear,61,// <template-params> refer to the innermost <template-args>. Clear out any; // outer args that we may have inserted into TemplateParams.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:131,Modifiability,extend,extended,131,"// <operator-name> ::= See parseOperatorEncoding(); // ::= li <source-name> # operator """"; // ::= v <digit> <source-name> # vendor extended operator",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:40,Modifiability,extend,extended,40,// ::= v <digit> <source-name> # vendor extended operator,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:4,Usability,simpl,simple-id,4,// <simple-id> ::= <source-name> [ <template-args> ],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:81,Usability,simpl,simple-id,81,"// <destructor-name> ::= <unresolved-type> # e.g., ~T or ~decltype(f()); // ::= <simple-id> # e.g., ~A<2*N>",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:31,Usability,simpl,simple-id,31,// <base-unresolved-name> ::= <simple-id> # unresolved name; // extension ::= <operator-name> # unresolved operator-function-id; // extension ::= <operator-name> <template-args> # unresolved operator template-id; // ::= on <operator-name> # unresolved operator-function-id; // ::= on <operator-name> <template-args> # unresolved operator template-id; // ::= dn <destructor-name> # destructor or pseudo-destructor;; // # e.g. ~X or ~X<N-1>,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:675,Usability,simpl,simple-id,675,"// <unresolved-name>; // extension ::= srN <unresolved-type> [<template-args>] <unresolved-qualifier-level>* E <base-unresolved-name>; // ::= [gs] <base-unresolved-name> # x or (with ""gs"") ::x; // ::= [gs] sr <unresolved-qualifier-level>+ E <base-unresolved-name>; // # A::x, N::y, A<T>::z; ""gs"" means leading ""::""; // [gs] has been parsed by caller.; // ::= sr <unresolved-type> <base-unresolved-name> # T::x / decltype(p)::x; // extension ::= sr <unresolved-type> <template-args> <base-unresolved-name>; // # T::N::x /decltype(p)::N::x; // (ignored) ::= srN <unresolved-type> <unresolved-qualifier-level>+ E <base-unresolved-name>; //; // <unresolved-qualifier-level> ::= <simple-id>",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:261,Integrability,depend,dependent,261,"// <function-type> ::= [<CV-qualifiers>] [<exception-spec>] [Dx] F [Y] <bare-function-type> [<ref-qualifier>] E; //; // <exception-spec> ::= Do # non-throwing exception-specification (e.g., noexcept, throw()); // ::= DO <expression> E # computed (instantiation-dependent) noexcept; // ::= Dw <type>+ E # dynamic exception specification with instantiation-dependent types; //; // <ref-qualifier> ::= R # & ref-qualifier; // <ref-qualifier> ::= O # && ref-qualifier",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:355,Integrability,depend,dependent,355,"// <function-type> ::= [<CV-qualifiers>] [<exception-spec>] [Dx] F [Y] <bare-function-type> [<ref-qualifier>] E; //; // <exception-spec> ::= Do # non-throwing exception-specification (e.g., noexcept, throw()); // ::= DO <expression> E # computed (instantiation-dependent) noexcept; // ::= Dw <type>+ E # dynamic exception specification with instantiation-dependent types; //; // <ref-qualifier> ::= R # & ref-qualifier; // <ref-qualifier> ::= O # && ref-qualifier",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:15,Safety,safe,safe,15,// transaction safe,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:70,Modifiability,extend,extended,70,// extension:; // <vector-type> ::= Dv <positive dimension number> _ <extended element type>; // ::= Dv [<dimension expression>] _ <element type>; // <extended element type> ::= <element type>; // ::= p # AltiVec vector pixel,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:151,Modifiability,extend,extended,151,// extension:; // <vector-type> ::= Dv <positive dimension number> _ <extended element type>; // ::= Dv [<dimension expression>] _ <element type>; // <extended element type> ::= <element type>; // ::= p # AltiVec vector pixel,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:83,Security,access,access,83,// <decltype> ::= Dt <expression> E # decltype of an id-expression or class member access (C++0x); // ::= DT <expression> E # decltype of an expression (C++0x),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:38,Integrability,depend,dependent,38,"// <class-enum-type> ::= <name> # non-dependent type name, dependent type name, or dependent typename-specifier; // ::= Ts <name> # dependent elaborated type specifier using 'struct' or 'class'; // ::= Tu <name> # dependent elaborated type specifier using 'union'; // ::= Te <name> # dependent elaborated type specifier using 'enum'",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:59,Integrability,depend,dependent,59,"// <class-enum-type> ::= <name> # non-dependent type name, dependent type name, or dependent typename-specifier; // ::= Ts <name> # dependent elaborated type specifier using 'struct' or 'class'; // ::= Tu <name> # dependent elaborated type specifier using 'union'; // ::= Te <name> # dependent elaborated type specifier using 'enum'",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:83,Integrability,depend,dependent,83,"// <class-enum-type> ::= <name> # non-dependent type name, dependent type name, or dependent typename-specifier; // ::= Ts <name> # dependent elaborated type specifier using 'struct' or 'class'; // ::= Tu <name> # dependent elaborated type specifier using 'union'; // ::= Te <name> # dependent elaborated type specifier using 'enum'",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:132,Integrability,depend,dependent,132,"// <class-enum-type> ::= <name> # non-dependent type name, dependent type name, or dependent typename-specifier; // ::= Ts <name> # dependent elaborated type specifier using 'struct' or 'class'; // ::= Tu <name> # dependent elaborated type specifier using 'union'; // ::= Te <name> # dependent elaborated type specifier using 'enum'",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:214,Integrability,depend,dependent,214,"// <class-enum-type> ::= <name> # non-dependent type name, dependent type name, or dependent typename-specifier; // ::= Ts <name> # dependent elaborated type specifier using 'struct' or 'class'; // ::= Tu <name> # dependent elaborated type specifier using 'union'; // ::= Te <name> # dependent elaborated type specifier using 'enum'",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:284,Integrability,depend,dependent,284,"// <class-enum-type> ::= <name> # non-dependent type name, dependent type name, or dependent typename-specifier; // ::= Ts <name> # dependent elaborated type specifier using 'struct' or 'class'; // ::= Tu <name> # dependent elaborated type specifier using 'union'; // ::= Te <name> # dependent elaborated type specifier using 'enum'",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:66,Modifiability,extend,extended-qualifier,66,// <qualified-type> ::= <qualifiers> <type>; // <qualifiers> ::= <extended-qualifier>* <CV-qualifiers>; // <extended-qualifier> ::= U <source-name> [<template-args>] # vendor extended type qualifier,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:108,Modifiability,extend,extended-qualifier,108,// <qualified-type> ::= <qualifiers> <type>; // <qualifiers> ::= <extended-qualifier>* <CV-qualifiers>; // <extended-qualifier> ::= U <source-name> [<template-args>] # vendor extended type qualifier,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:175,Modifiability,extend,extended,175,// <qualified-type> ::= <qualifiers> <type>; // <qualifiers> ::= <extended-qualifier>* <CV-qualifiers>; // <extended-qualifier> ::= U <source-name> [<template-args>] # vendor extended type qualifier,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:47,Modifiability,extend,extended,47,// <builtin-type> ::= u <source-name> # vendor extended type,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:124,Modifiability,extend,extended,124,"// Typically, <builtin-type>s are not considered substitution candidates,; // but the exception to that exception is vendor extended types (Itanium C++; // ABI 5.9.1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:71,Integrability,depend,dependent,71,// ::= DB <number> _ # C23 signed _BitInt(N); // ::= DB <instantiation-dependent expression> _ # C23 signed _BitInt(N); // ::= DU <number> _ # C23 unsigned _BitInt(N); // ::= DU <instantiation-dependent expression> _ # C23 unsigned _BitInt(N),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:193,Integrability,depend,dependent,193,// ::= DB <number> _ # C23 signed _BitInt(N); // ::= DB <instantiation-dependent expression> _ # C23 signed _BitInt(N); // ::= DU <number> _ # C23 unsigned _BitInt(N); // ::= DU <instantiation-dependent expression> _ # C23 unsigned _BitInt(N),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:21,Integrability,depend,dependent,21,// ::= Da # auto (in dependent new-expressions),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:15,Safety,safe,safe,15,// Transaction safe function type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:2036,Integrability,depend,dependent,2036,"number of arguments; // ::= [gs] nw <expression>* _ <type> E # new (expr-list) type; // ::= [gs] nw <expression>* _ <type> <initializer> # new (expr-list) type (init); // ::= [gs] na <expression>* _ <type> E # new[] (expr-list) type; // ::= [gs] na <expression>* _ <type> <initializer> # new[] (expr-list) type (init); // ::= [gs] dl <expression> # delete expression; // ::= [gs] da <expression> # delete[] expression; // ::= pp_ <expression> # prefix ++; // ::= mm_ <expression> # prefix --; // ::= ti <type> # typeid (type); // ::= te <expression> # typeid (expression); // ::= dc <type> <expression> # dynamic_cast<type> (expression); // ::= sc <type> <expression> # static_cast<type> (expression); // ::= cc <type> <expression> # const_cast<type> (expression); // ::= rc <type> <expression> # reinterpret_cast<type> (expression); // ::= st <type> # sizeof (a type); // ::= sz <expression> # sizeof (an expression); // ::= at <type> # alignof (a type); // ::= az <expression> # alignof (an expression); // ::= nx <expression> # noexcept (expression); // ::= <template-param>; // ::= <function-param>; // ::= dt <expression> <unresolved-name> # expr.name; // ::= pt <expression> <unresolved-name> # expr->name; // ::= ds <expression> <expression> # expr.*expr; // ::= sZ <template-param> # size of a parameter pack; // ::= sZ <function-param> # size of a function parameter pack; // ::= sP <template-arg>* E # sizeof...(T), size of a captured template parameter pack from an alias template; // ::= sp <expression> # pack expansion; // ::= tw <expression> # throw expression; // ::= tr # throw with no operand (rethrow); // ::= <unresolved-name> # f(p), N::f(p), ::f(p),; // # freestanding dependent name (e.g., T::x),; // # objectless nonstatic member reference; // ::= fL <binary-operator-name> <expression> <expression>; // ::= fR <binary-operator-name> <expression> <expression>; // ::= fl <binary-operator-name> <expression>; // ::= fr <binary-operator-name> <expression>; // ::= <expr-primary>",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:10,Security,access,access,10,// Member access lhs @ rhs,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:631,Integrability,wrap,wrapper,631,// <special-name> ::= TV <type> # virtual table; // ::= TT <type> # VTT structure (construction vtable index); // ::= TI <type> # typeinfo structure; // ::= TS <type> # typeinfo name (null-terminated byte string); // ::= Tc <call-offset> <call-offset> <base encoding>; // # base is the nominal target function of thunk; // # first call-offset is 'this' adjustment; // # second call-offset is result adjustment; // ::= T <call-offset> <base encoding>; // # base is the nominal target function of thunk; // # Guard variable for one-time initialization; // ::= GV <object name>; // # No <type>; // ::= TW <object name> # Thread-local wrapper; // ::= TH <object name> # Thread-local initialization; // ::= GR <object name> _ # First temporary; // ::= GR <object name> <seq-id> _ # Subsequent temporaries; // # construction vtable for second-in-first; // extension ::= TC <first type> <number> _ <second type>; // extension ::= GR <object name> # reference temporary for object; // extension ::= GI <module name> # module global initializer,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:513,Modifiability,variab,variable,513,// <special-name> ::= TV <type> # virtual table; // ::= TT <type> # VTT structure (construction vtable index); // ::= TI <type> # typeinfo structure; // ::= TS <type> # typeinfo name (null-terminated byte string); // ::= Tc <call-offset> <call-offset> <base encoding>; // # base is the nominal target function of thunk; // # first call-offset is 'this' adjustment; // # second call-offset is result adjustment; // ::= T <call-offset> <base encoding>; // # base is the nominal target function of thunk; // # Guard variable for one-time initialization; // ::= GV <object name>; // # No <type>; // ::= TW <object name> # Thread-local wrapper; // ::= TH <object name> # Thread-local initialization; // ::= GR <object name> _ # First temporary; // ::= GR <object name> <seq-id> _ # Subsequent temporaries; // # construction vtable for second-in-first; // extension ::= TC <first type> <number> _ <second type>; // extension ::= GR <object name> # reference temporary for object; // extension ::= GI <module name> # module global initializer,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:35,Integrability,wrap,wrapper,35,// TW <object name> # Thread-local wrapper,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:28,Modifiability,variab,variable,28,// GV <object name> # Guard variable for one-time initialization,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:133,Safety,avoid,avoid,133,// The set of chars that can potentially follow an <encoding> (none of which; // can start a <type>). Enumerating these allows us to avoid speculative; // parsing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:69,Availability,reliab,reliably,69,"// We don't track enclosing template parameter levels well enough to reliably; // substitute them all within a <constraint-expression>, so print the; // parameter numbering instead for now.; // TODO: Track all enclosing template parameters and substitute them here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:111,Usability,simpl,simple,111,// <template-arg> ::= <type> # type or template; // ::= X <expression> E # expression; // ::= <expr-primary> # simple expressions; // ::= J <template-arg>* E # argument pack; // ::= LZ <encoding> E # extension; // ::= <template-param-decl> <template-arg>,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:24,Usability,simpl,simple,24,// ::= <expr-primary> # simple expressions,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:61,Usability,Clear,Clear,61,// <template-params> refer to the innermost <template-args>. Clear out any; // outer args that we may have inserted into TemplateParams.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h:78,Energy Efficiency,allocate,allocated,78,"// This memory allocator is extremely fast, but it doesn't call dtors; // for allocated objects. That means you can't use STL containers; // (such as std::vector) with this allocator. But it pays off --; // the demangler is 3x faster with this allocator compared to one with; // STL containers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h:8,Usability,simpl,simple,8,// save simple names.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h:60,Availability,error,error,60,"// You are supposed to call parse() first and then check if error is true. If; // it is false, call output() to write the formatted name to the given stream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h:14,Availability,error,error,14,// True if an error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate a copy of \p Borrowed into memory that we own.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/StringViewExtras.h:571,Deployability,update,update,571,"//===--- StringViewExtras.h ----------*- mode:c++;eval:(read-only-mode) -*-===//; // Do not edit! See README.txt.; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // There are two copies of this file in the source tree. The one under; // libcxxabi is the original and the one under llvm is the copy. Use; // cp-to-llvm.sh to update the copy. See README.txt for more details.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/StringViewExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/StringViewExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Utility.h:620,Deployability,update,update,620,"//===--- Utility.h -------------------*- mode:c++;eval:(read-only-mode) -*-===//; // Do not edit! See README.txt.; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Provide some utility classes for use in the demangler.; // There are two copies of this file in the source tree. The one in libcxxabi; // is the original and the one in llvm is the copy. Use cp-to-llvm.sh to update; // the copy. See README.txt for more details.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Utility.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Utility.h:3,Energy Efficiency,Reduce,Reduce,3,"// Reduce the number of reallocations, with a bit of hysteresis. The; // number here is chosen so the first allocation will more-than-likely not; // allocate more than 1K.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Utility.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Utility.h:149,Energy Efficiency,allocate,allocate,149,"// Reduce the number of reallocations, with a bit of hysteresis. The; // number here is chosen so the first allocation will more-than-likely not; // allocate more than 1K.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Utility.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Utility.h:108,Usability,simpl,simply,108,"/// When zero, we're printing template args and '>' needs to be parenthesized.; /// Use a counter so we can simply increment inside parentheses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Demangle/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Utility.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h:23,Deployability,install,install,23,// Returns the library install name associated to the AddessesMap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h:4,Deployability,Update,Update,4,/// Update and save relocation values to be serialized,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h:4,Deployability,Update,Update,4,"/// Update the valid relocations that used OriginalUnitOffset as the compile; /// unit offset, and update their values to reflect OutputUnitOffset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h:99,Deployability,update,update,99,"/// Update the valid relocations that used OriginalUnitOffset as the compile; /// unit offset, and update their values to reflect OutputUnitOffset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h:33,Modifiability,variab,variable,33,"/// This function checks whether variable has DWARF expression containing; /// operation referencing live address(f.e. DW_OP_addr, DW_OP_addrx...).; /// \returns first is true if the expression has an operation referencing an; /// address.; /// second is the relocation adjustment value if the live address is; /// referenced.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h:13,Integrability,interface,interface,13,/// The base interface for DWARFLinker implementations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h:170,Deployability,Update,UpdateIndexTablesOnly,170,/// Add an object file to be linked. Pre-load compile unit die. Call; /// \p OnCUDieLoaded for each compile unit die. If \p File has reference to; /// a Clang module and UpdateIndexTablesOnly == false then the module is be; /// pre-loaded by \p Loader.; ///; /// \pre a call to setNoODR(true) and/or setUpdateIndexTablesOnly(bool Update); /// must be made when required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h:330,Deployability,Update,Update,330,/// Add an object file to be linked. Pre-load compile unit die. Call; /// \p OnCUDieLoaded for each compile unit die. If \p File has reference to; /// a Clang module and UpdateIndexTablesOnly == false then the module is be; /// pre-loaded by \p Loader.; ///; /// \pre a call to setNoODR(true) and/or setUpdateIndexTablesOnly(bool Update); /// must be made when required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h:41,Performance,load,load,41,/// Add an object file to be linked. Pre-load compile unit die. Call; /// \p OnCUDieLoaded for each compile unit die. If \p File has reference to; /// a Clang module and UpdateIndexTablesOnly == false then the module is be; /// pre-loaded by \p Loader.; ///; /// \pre a call to setNoODR(true) and/or setUpdateIndexTablesOnly(bool Update); /// must be made when required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h:232,Performance,load,loaded,232,/// Add an object file to be linked. Pre-load compile unit die. Call; /// \p OnCUDieLoaded for each compile unit die. If \p File has reference to; /// a Clang module and UpdateIndexTablesOnly == false then the module is be; /// pre-loaded by \p Loader.; ///; /// \pre a call to setNoODR(true) and/or setUpdateIndexTablesOnly(bool Update); /// must be made when required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h:245,Performance,Load,Loader,245,/// Add an object file to be linked. Pre-load compile unit die. Call; /// \p OnCUDieLoaded for each compile unit die. If \p File has reference to; /// a Clang module and UpdateIndexTablesOnly == false then the module is be; /// pre-loaded by \p Loader.; ///; /// \pre a call to setNoODR(true) and/or setUpdateIndexTablesOnly(bool Update); /// must be made when required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h:69,Testability,log,logging,69,/// A number of methods setting various linking options:; /// Enable logging to standard output.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h:4,Deployability,Update,Update,4,/// Update index tables only (do not modify rest of DWARF).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h:60,Modifiability,variab,variable,60,/// Set whether to keep the enclosing function for a static variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h:57,Availability,error,errors,57,/// Set verification handler used to report verification errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h:22,Integrability,interface,interfaces,22,/// Set map for Swift interfaces.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/StringPool.h:13,Security,Hash,Hash,13,/// \returns Hash value for the specified \p Key.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/StringPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/StringPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Utils.h:122,Availability,Error,Error,122,/// This function calls \p Iteration() until it returns false.; /// If number of iterations exceeds \p MaxCounter then an Error is returned.; /// This function should be used for loops which assumed to have number of; /// iterations significantly smaller than \p MaxCounter to avoid infinite; /// looping in error cases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Utils.h:308,Availability,error,error,308,/// This function calls \p Iteration() until it returns false.; /// If number of iterations exceeds \p MaxCounter then an Error is returned.; /// This function should be used for loops which assumed to have number of; /// iterations significantly smaller than \p MaxCounter to avoid infinite; /// looping in error cases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Utils.h:277,Safety,avoid,avoid,277,/// This function calls \p Iteration() until it returns false.; /// If number of iterations exceeds \p MaxCounter then an Error is returned.; /// This function should be used for loops which assumed to have number of; /// iterations significantly smaller than \p MaxCounter to avoid infinite; /// looping in error cases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:26,Integrability,interface,interface,26,/// DwarfEmitter presents interface to generate all debug info tables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:13,Availability,avail,available,13,"/// Emit all available macro tables(DWARFv4 and DWARFv5).; /// Use \p UnitMacroMap to get compilation unit by macro table offset.; /// Side effects: Fill \p StringPool with macro strings, update; /// DW_AT_macro_info, DW_AT_macros attributes for corresponding compile; /// units.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:188,Deployability,update,update,188,"/// Emit all available macro tables(DWARFv4 and DWARFv5).; /// Use \p UnitMacroMap to get compilation unit by macro table offset.; /// Side effects: Fill \p StringPool with macro strings, update; /// DW_AT_macro_info, DW_AT_macros attributes for corresponding compile; /// units.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:200,Modifiability,variab,variables,200,"/// The core of the Dwarf linking logic.; ///; /// The generation of the dwarf information from the object files will be; /// driven by the selection of 'root DIEs', which are DIEs that; /// describe variables or functions that resolves to the corresponding; /// code section(and thus have entries in the Addresses map). All the debug; /// information that will be generated(the DIEs, but also the line; /// tables, ranges, ...) is derived from that set of root DIEs.; ///; /// The root DIEs are identified because they contain relocations that; /// points to code section(the low_pc for a function, the location for; /// a variable). These relocations are called ValidRelocs in the; /// AddressesInfo and are gathered as a very first step when we start; /// processing a object file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:624,Modifiability,variab,variable,624,"/// The core of the Dwarf linking logic.; ///; /// The generation of the dwarf information from the object files will be; /// driven by the selection of 'root DIEs', which are DIEs that; /// describe variables or functions that resolves to the corresponding; /// code section(and thus have entries in the Addresses map). All the debug; /// information that will be generated(the DIEs, but also the line; /// tables, ranges, ...) is derived from that set of root DIEs.; ///; /// The root DIEs are identified because they contain relocations that; /// points to code section(the low_pc for a function, the location for; /// a variable). These relocations are called ValidRelocs in the; /// AddressesInfo and are gathered as a very first step when we start; /// processing a object file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:34,Testability,log,logic,34,"/// The core of the Dwarf linking logic.; ///; /// The generation of the dwarf information from the object files will be; /// driven by the selection of 'root DIEs', which are DIEs that; /// describe variables or functions that resolves to the corresponding; /// code section(and thus have entries in the Addresses map). All the debug; /// information that will be generated(the DIEs, but also the line; /// tables, ranges, ...) is derived from that set of root DIEs.; ///; /// The root DIEs are identified because they contain relocations that; /// points to code section(the low_pc for a function, the location for; /// a variable). These relocations are called ValidRelocs in the; /// AddressesInfo and are gathered as a very first step when we start; /// processing a object file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:235,Deployability,Update,Update,235,"/// Add object file to be linked. Pre-load compile unit die. Call; /// \p OnCUDieLoaded for each compile unit die. If specified \p File; /// has reference to the Clang module then such module would be; /// pre-loaded by \p Loader for !Update case.; ///; /// \pre NoODR, Update options should be set before call to addObjectFile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:270,Deployability,Update,Update,270,"/// Add object file to be linked. Pre-load compile unit die. Call; /// \p OnCUDieLoaded for each compile unit die. If specified \p File; /// has reference to the Clang module then such module would be; /// pre-loaded by \p Loader for !Update case.; ///; /// \pre NoODR, Update options should be set before call to addObjectFile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:38,Performance,load,load,38,"/// Add object file to be linked. Pre-load compile unit die. Call; /// \p OnCUDieLoaded for each compile unit die. If specified \p File; /// has reference to the Clang module then such module would be; /// pre-loaded by \p Loader for !Update case.; ///; /// \pre NoODR, Update options should be set before call to addObjectFile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:210,Performance,load,loaded,210,"/// Add object file to be linked. Pre-load compile unit die. Call; /// \p OnCUDieLoaded for each compile unit die. If specified \p File; /// has reference to the Clang module then such module would be; /// pre-loaded by \p Loader for !Update case.; ///; /// \pre NoODR, Update options should be set before call to addObjectFile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:223,Performance,Load,Loader,223,"/// Add object file to be linked. Pre-load compile unit die. Call; /// \p OnCUDieLoaded for each compile unit die. If specified \p File; /// has reference to the Clang module then such module would be; /// pre-loaded by \p Loader for !Update case.; ///; /// \pre NoODR, Update options should be set before call to addObjectFile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:81,Testability,log,log,81,/// A number of methods setting various linking options:; /// Allows to generate log of linking process to the standard output.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:4,Deployability,Update,Update,4,/// Update index tables only(do not modify rest of DWARF).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:60,Modifiability,variab,variable,60,/// Set whether to keep the enclosing function for a static variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:77,Availability,error,errors,77,/// Set verification handler which would be used to report verification; /// errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:22,Integrability,interface,interfaces,22,/// Set map for Swift interfaces.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:17,Integrability,depend,dependencies,17,///< Walking the dependencies of a kept DIE.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:31,Integrability,depend,dependents,31,///< Use the ODR while keeping dependents.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:31,Performance,perform,performed,31,/// The distinct types of work performed by the work loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:17,Deployability,update,update,17,"/// Given a DIE, update its incompleteness based on whether its children are; /// incomplete.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:17,Deployability,update,update,17,"/// Given a DIE, update its incompleteness based on whether the DIEs it; /// references are incomplete.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:104,Performance,perform,performed,104,/// This class represents an item in the work list. The type defines what kind; /// of work needs to be performed when processing the current item. The flags; /// and info fields are optional based on the type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:58,Performance,load,loaded,58,/// Keep information for referenced clang module: already loaded DWARF info; /// of the clang module and a CompileUnit of the module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:4,Usability,Clear,Clear,4,/// Clear part of the context that's no longer needed when we're done with; /// the debug object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:105,Availability,error,error,105,/// Check whether specified \p CUDie is a Clang module reference.; /// if \p Quiet is false then display error messages.; /// \return first == true if CUDie is a Clang module reference.; /// second == true if module is already loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:111,Integrability,message,messages,111,/// Check whether specified \p CUDie is a Clang module reference.; /// if \p Quiet is false then display error messages.; /// \return first == true if CUDie is a Clang module reference.; /// second == true if module is already loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:227,Performance,load,loaded,227,/// Check whether specified \p CUDie is a Clang module reference.; /// if \p Quiet is false then display error messages.; /// \return first == true if CUDie is a Clang module reference.; /// second == true if module is already loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:274,Security,hash,hash,274,"/// If this compile unit is really a skeleton CU that points to a; /// clang module, register it in ClangModules and return true.; ///; /// A skeleton CU is a CU without children, a DW_AT_gnu_dwo_name; /// pointing to the module, and a DW_AT_gnu_dwo_id with the module; /// hash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:33,Modifiability,variab,variable,33,"/// This function checks whether variable has DWARF expression containing; /// operation referencing live address(f.e. DW_OP_addr, DW_OP_addrx...).; /// \returns first is true if the expression has an operation referencing an; /// address.; /// second is the relocation adjustment value if the live address is; /// referenced.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:69,Deployability,update,updated,69,/// Check if a variable describing DIE should be kept.; /// \returns updated TraversalFlags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:15,Modifiability,variab,variable,15,/// Check if a variable describing DIE should be kept.; /// \returns updated TraversalFlags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:85,Deployability,patch,patch,85,"/// Compute and emit debug locations (.debug_loc, .debug_loclists); /// for \p Unit, patch the attributes referencing it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:100,Deployability,patch,patch,100,"/// Compute and emit debug ranges(.debug_aranges, .debug_ranges,; /// .debug_rnglists) for \p Unit, patch the attributes referencing it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:4,Deployability,Patch,Patch,4,/// Patch the frame info for an object file and emit it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:3,Availability,error,error,3,// error handler,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:24,Testability,log,log,24,/// Generate processing log to the standard output.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:4,Deployability,Update,Update,4,/// Update,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:29,Modifiability,variab,variable,29,/// Whether we want a static variable to force us to keep its enclosing; /// function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h:24,Deployability,patch,patch,24,"// This structure keeps patch for the attribute and, optionally,; // the value of relocation which should be applied. Currently,; // only location attribute needs to have relocation: either to the; // function ranges if location attribute is of type 'loclist',; // either to the operand of DW_OP_addr/DW_OP_addrx if location attribute; // is of type 'exprloc'.; // ASSUMPTION: Location attributes of 'loclist' type containing 'exprloc'; // with address expression operands are not supported yet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h:14,Modifiability,variab,variable,14,/// Is this a variable with a location attribute referencing address?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h:71,Modifiability,variab,variables,71,/// Mark every DIE in this unit as kept. This function also; /// marks variables as InDebugMap so that they appear in the; /// reconstructed accelerator tables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h:63,Deployability,patch,patch,63,/// Keep track of a DW_AT_range attribute that we will need to patch up later.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h:4,Security,Hash,Hash,4,/// Hash of the fully qualified name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h:61,Deployability,patch,patch,61,"/// 'rnglist'(DW_AT_ranges, DW_AT_start_scope) attributes to patch after; /// we have gathered all the unit's function addresses.; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h:65,Energy Efficiency,reduce,reduce,65,"/// Small helper that resolves and caches file paths. This helps reduce the; /// number of calls to realpath which is expensive. We assume the input are; /// files, and cache the realpath of their parent. This way we can quickly; /// resolve different files under the same path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h:35,Performance,cache,caches,35,"/// Small helper that resolves and caches file paths. This helps reduce the; /// number of calls to realpath which is expensive. We assume the input are; /// files, and cache the realpath of their parent. This way we can quickly; /// resolve different files under the same path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h:169,Performance,cache,cache,169,"/// Small helper that resolves and caches file paths. This helps reduce the; /// number of calls to realpath which is expensive. We assume the input are; /// files, and cache the realpath of their parent. This way we can quickly; /// resolve different files under the same path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h:43,Performance,cache,cache,43,/// Resolve a path by calling realpath and cache its result. The returned; /// StringRef is interned in the given \p StringPool.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h:60,Performance,cache,cache,60,"// If the ParentPath has not yet been resolved, resolve and cache it for; // future look-ups.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h:537,Security,access,accessing,537,"/// A DeclContext is a named program scope that is used for ODR uniquing of; /// types.; ///; /// The set of DeclContext for the ODR-subject parts of a Dwarf link is; /// expanded (and uniqued) with each new object file processed. We need to; /// determine the context of each DIE in an linked object file to see if the; /// corresponding type has already been emitted.; ///; /// The contexts are conceptually organized as a tree (eg. a function scope is; /// contained in a namespace scope that contains other scopes), but; /// storing/accessing them in an actual tree is too inefficient: we need to be; /// able to very quickly query a context for a given child context by name.; /// Storing a StringMap in each DeclContext would be too space inefficient.; ///; /// The solution here is to give each DeclContext a link to its parent (this; /// allows to walk up the tree), but to query the existence of a specific; /// DeclContext using a separate DenseMap keyed on the hash of the fully; /// qualified name of the context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h:972,Security,hash,hash,972,"/// A DeclContext is a named program scope that is used for ODR uniquing of; /// types.; ///; /// The set of DeclContext for the ODR-subject parts of a Dwarf link is; /// expanded (and uniqued) with each new object file processed. We need to; /// determine the context of each DIE in an linked object file to see if the; /// corresponding type has already been emitted.; ///; /// The contexts are conceptually organized as a tree (eg. a function scope is; /// contained in a namespace scope that contains other scopes), but; /// storing/accessing them in an actual tree is too inefficient: we need to be; /// able to very quickly query a context for a given child context by name.; /// Storing a StringMap in each DeclContext would be too space inefficient.; ///; /// The solution here is to give each DeclContext a link to its parent (this; /// allows to walk up the tree), but to query the existence of a specific; /// DeclContext using a separate DenseMap keyed on the hash of the fully; /// qualified name of the context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h:158,Energy Efficiency,allocate,allocated,158,/// This class gives a tree-like API to the DenseMap that stores the; /// DeclContext objects. It holds the BumpPtrAllocator where these objects will; /// be allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h:4,Performance,Cache,Cached,4,"/// Cached resolved paths from the line table.; /// The key is <UniqueUnitID, FileIdx>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h:29,Performance,cache,caches,29,/// Helper that resolves and caches fragments of file paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerDeclContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFStreamer.h:235,Testability,log,logic,235,/// User of DwarfStreamer should call initialization code; /// for AsmPrinter:; ///; /// InitializeAllTargetInfos();; /// InitializeAllTargetMCs();; /// InitializeAllTargets();; /// InitializeAllAsmPrinters();; /// The Dwarf streaming logic.; ///; /// All interactions with the MC layer that is used to build the debug; /// information binary representation are handled in this class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h:1804,Deployability,patch,patches,1804,"essesMap.; ///; /// The overall linking process looks like this:; ///; /// parrallel_for_each(ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Load Clang modules.; /// }; ///; /// parrallel_for_each(Compile Unit) {; /// 1. Load input DWARF for Compile Unit.; /// 2. Report warnings for Clang modules.; /// 3. Analyze live DIEs and type names(if ODR deduplication is requested).; /// 4. Clone DIEs(Generate output DIEs and resulting DWARF tables).; /// The result is in an OutDebugInfoBytes, which is an ELF file; /// containing DWARF tables corresponding to the current compile unit.; /// 5. Cleanup Input and Output DIEs.; /// }; ///; /// Deallocate loaded Object file.; /// }; ///; /// if (ODR deduplication is requested); /// Generate an artificial compilation unit (""Type Table"": used to partially; /// generate DIEs at the clone stage).; ///; /// for_each (ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Set offsets to Compile Units DWARF tables.; /// 2. Sort offsets/attributes/patches to have a predictable result.; /// 3. Patch size/offsets fields.; /// 4. Generate index tables.; /// 5. Move DWARF tables of compile units into the resulting file.; /// }; /// }; ///; /// Every compile unit is processed separately, visited only once; /// (except case inter-CU references exist), and used data is freed; /// after the compile unit is processed. The resulting file is glued together; /// from the generated debug tables which correspond to separate compile units.; ///; /// Handling inter-CU references: inter-CU references are hard to process; /// using only one pass. f.e. if CU1 references CU100 and CU100 references; /// CU1, we could not finish handling of CU1 until we finished CU100.; /// Thus we either need to load all CUs into the memory, either load CUs several; /// times. This implementation loads inter-connected CU into memory at the first; /// pass and processes them at the second pass.; ///; /// ODR deduplication: Artificial compilation unit will be constructed to",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h:1850,Deployability,Patch,Patch,1850,"s like this:; ///; /// parrallel_for_each(ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Load Clang modules.; /// }; ///; /// parrallel_for_each(Compile Unit) {; /// 1. Load input DWARF for Compile Unit.; /// 2. Report warnings for Clang modules.; /// 3. Analyze live DIEs and type names(if ODR deduplication is requested).; /// 4. Clone DIEs(Generate output DIEs and resulting DWARF tables).; /// The result is in an OutDebugInfoBytes, which is an ELF file; /// containing DWARF tables corresponding to the current compile unit.; /// 5. Cleanup Input and Output DIEs.; /// }; ///; /// Deallocate loaded Object file.; /// }; ///; /// if (ODR deduplication is requested); /// Generate an artificial compilation unit (""Type Table"": used to partially; /// generate DIEs at the clone stage).; ///; /// for_each (ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Set offsets to Compile Units DWARF tables.; /// 2. Sort offsets/attributes/patches to have a predictable result.; /// 3. Patch size/offsets fields.; /// 4. Generate index tables.; /// 5. Move DWARF tables of compile units into the resulting file.; /// }; /// }; ///; /// Every compile unit is processed separately, visited only once; /// (except case inter-CU references exist), and used data is freed; /// after the compile unit is processed. The resulting file is glued together; /// from the generated debug tables which correspond to separate compile units.; ///; /// Handling inter-CU references: inter-CU references are hard to process; /// using only one pass. f.e. if CU1 references CU100 and CU100 references; /// CU1, we could not finish handling of CU1 until we finished CU100.; /// Thus we either need to load all CUs into the memory, either load CUs several; /// times. This implementation loads inter-connected CU into memory at the first; /// pass and processes them at the second pass.; ///; /// ODR deduplication: Artificial compilation unit will be constructed to keep; /// type dies. All types are moved into that c",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h:2907,Deployability,patch,patched,2907,"ort warnings for Clang modules.; /// 3. Analyze live DIEs and type names(if ODR deduplication is requested).; /// 4. Clone DIEs(Generate output DIEs and resulting DWARF tables).; /// The result is in an OutDebugInfoBytes, which is an ELF file; /// containing DWARF tables corresponding to the current compile unit.; /// 5. Cleanup Input and Output DIEs.; /// }; ///; /// Deallocate loaded Object file.; /// }; ///; /// if (ODR deduplication is requested); /// Generate an artificial compilation unit (""Type Table"": used to partially; /// generate DIEs at the clone stage).; ///; /// for_each (ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Set offsets to Compile Units DWARF tables.; /// 2. Sort offsets/attributes/patches to have a predictable result.; /// 3. Patch size/offsets fields.; /// 4. Generate index tables.; /// 5. Move DWARF tables of compile units into the resulting file.; /// }; /// }; ///; /// Every compile unit is processed separately, visited only once; /// (except case inter-CU references exist), and used data is freed; /// after the compile unit is processed. The resulting file is glued together; /// from the generated debug tables which correspond to separate compile units.; ///; /// Handling inter-CU references: inter-CU references are hard to process; /// using only one pass. f.e. if CU1 references CU100 and CU100 references; /// CU1, we could not finish handling of CU1 until we finished CU100.; /// Thus we either need to load all CUs into the memory, either load CUs several; /// times. This implementation loads inter-connected CU into memory at the first; /// pass and processes them at the second pass.; ///; /// ODR deduplication: Artificial compilation unit will be constructed to keep; /// type dies. All types are moved into that compilation unit. Type's references; /// are patched so that they point to the corresponding types from artificial; /// compilation unit. All partial type definitions would be merged into single; /// type definition.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h:272,Modifiability,variab,variables,272,"/// ------------------------------------------------------------------; /// The core of the Dwarf linking logic.; ///; /// The generation of the dwarf information from the object files will be; /// driven by the selection of 'root DIEs', which are DIEs that; /// describe variables or functions that resolves to the corresponding; /// code section(and thus have entries in the Addresses map). All the debug; /// information that will be generated(the DIEs, but also the line; /// tables, ranges, ...) is derived from that set of root DIEs.; ///; /// The root DIEs are identified because they contain relocations that; /// points to code section(the low_pc for a function, the location for; /// a variable). These relocations are gathered as a very first step; /// when we start processing a object file by AddressesMap.; ///; /// The overall linking process looks like this:; ///; /// parrallel_for_each(ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Load Clang modules.; /// }; ///; /// parrallel_for_each(Compile Unit) {; /// 1. Load input DWARF for Compile Unit.; /// 2. Report warnings for Clang modules.; /// 3. Analyze live DIEs and type names(if ODR deduplication is requested).; /// 4. Clone DIEs(Generate output DIEs and resulting DWARF tables).; /// The result is in an OutDebugInfoBytes, which is an ELF file; /// containing DWARF tables corresponding to the current compile unit.; /// 5. Cleanup Input and Output DIEs.; /// }; ///; /// Deallocate loaded Object file.; /// }; ///; /// if (ODR deduplication is requested); /// Generate an artificial compilation unit (""Type Table"": used to partially; /// generate DIEs at the clone stage).; ///; /// for_each (ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Set offsets to Compile Units DWARF tables.; /// 2. Sort offsets/attributes/patches to have a predictable result.; /// 3. Patch size/offsets fields.; /// 4. Generate index tables.; /// 5. Move DWARF tables of compile units into the resulting file.; /// }; /// }; ///; /// E",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h:696,Modifiability,variab,variable,696,"/// ------------------------------------------------------------------; /// The core of the Dwarf linking logic.; ///; /// The generation of the dwarf information from the object files will be; /// driven by the selection of 'root DIEs', which are DIEs that; /// describe variables or functions that resolves to the corresponding; /// code section(and thus have entries in the Addresses map). All the debug; /// information that will be generated(the DIEs, but also the line; /// tables, ranges, ...) is derived from that set of root DIEs.; ///; /// The root DIEs are identified because they contain relocations that; /// points to code section(the low_pc for a function, the location for; /// a variable). These relocations are gathered as a very first step; /// when we start processing a object file by AddressesMap.; ///; /// The overall linking process looks like this:; ///; /// parrallel_for_each(ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Load Clang modules.; /// }; ///; /// parrallel_for_each(Compile Unit) {; /// 1. Load input DWARF for Compile Unit.; /// 2. Report warnings for Clang modules.; /// 3. Analyze live DIEs and type names(if ODR deduplication is requested).; /// 4. Clone DIEs(Generate output DIEs and resulting DWARF tables).; /// The result is in an OutDebugInfoBytes, which is an ELF file; /// containing DWARF tables corresponding to the current compile unit.; /// 5. Cleanup Input and Output DIEs.; /// }; ///; /// Deallocate loaded Object file.; /// }; ///; /// if (ODR deduplication is requested); /// Generate an artificial compilation unit (""Type Table"": used to partially; /// generate DIEs at the clone stage).; ///; /// for_each (ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Set offsets to Compile Units DWARF tables.; /// 2. Sort offsets/attributes/patches to have a predictable result.; /// 3. Patch size/offsets fields.; /// 4. Generate index tables.; /// 5. Move DWARF tables of compile units into the resulting file.; /// }; /// }; ///; /// E",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h:957,Performance,Load,Load,957,"/// ------------------------------------------------------------------; /// The core of the Dwarf linking logic.; ///; /// The generation of the dwarf information from the object files will be; /// driven by the selection of 'root DIEs', which are DIEs that; /// describe variables or functions that resolves to the corresponding; /// code section(and thus have entries in the Addresses map). All the debug; /// information that will be generated(the DIEs, but also the line; /// tables, ranges, ...) is derived from that set of root DIEs.; ///; /// The root DIEs are identified because they contain relocations that; /// points to code section(the low_pc for a function, the location for; /// a variable). These relocations are gathered as a very first step; /// when we start processing a object file by AddressesMap.; ///; /// The overall linking process looks like this:; ///; /// parrallel_for_each(ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Load Clang modules.; /// }; ///; /// parrallel_for_each(Compile Unit) {; /// 1. Load input DWARF for Compile Unit.; /// 2. Report warnings for Clang modules.; /// 3. Analyze live DIEs and type names(if ODR deduplication is requested).; /// 4. Clone DIEs(Generate output DIEs and resulting DWARF tables).; /// The result is in an OutDebugInfoBytes, which is an ELF file; /// containing DWARF tables corresponding to the current compile unit.; /// 5. Cleanup Input and Output DIEs.; /// }; ///; /// Deallocate loaded Object file.; /// }; ///; /// if (ODR deduplication is requested); /// Generate an artificial compilation unit (""Type Table"": used to partially; /// generate DIEs at the clone stage).; ///; /// for_each (ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Set offsets to Compile Units DWARF tables.; /// 2. Sort offsets/attributes/patches to have a predictable result.; /// 3. Patch size/offsets fields.; /// 4. Generate index tables.; /// 5. Move DWARF tables of compile units into the resulting file.; /// }; /// }; ///; /// E",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h:1037,Performance,Load,Load,1037,"-----------------; /// The core of the Dwarf linking logic.; ///; /// The generation of the dwarf information from the object files will be; /// driven by the selection of 'root DIEs', which are DIEs that; /// describe variables or functions that resolves to the corresponding; /// code section(and thus have entries in the Addresses map). All the debug; /// information that will be generated(the DIEs, but also the line; /// tables, ranges, ...) is derived from that set of root DIEs.; ///; /// The root DIEs are identified because they contain relocations that; /// points to code section(the low_pc for a function, the location for; /// a variable). These relocations are gathered as a very first step; /// when we start processing a object file by AddressesMap.; ///; /// The overall linking process looks like this:; ///; /// parrallel_for_each(ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Load Clang modules.; /// }; ///; /// parrallel_for_each(Compile Unit) {; /// 1. Load input DWARF for Compile Unit.; /// 2. Report warnings for Clang modules.; /// 3. Analyze live DIEs and type names(if ODR deduplication is requested).; /// 4. Clone DIEs(Generate output DIEs and resulting DWARF tables).; /// The result is in an OutDebugInfoBytes, which is an ELF file; /// containing DWARF tables corresponding to the current compile unit.; /// 5. Cleanup Input and Output DIEs.; /// }; ///; /// Deallocate loaded Object file.; /// }; ///; /// if (ODR deduplication is requested); /// Generate an artificial compilation unit (""Type Table"": used to partially; /// generate DIEs at the clone stage).; ///; /// for_each (ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Set offsets to Compile Units DWARF tables.; /// 2. Sort offsets/attributes/patches to have a predictable result.; /// 3. Patch size/offsets fields.; /// 4. Generate index tables.; /// 5. Move DWARF tables of compile units into the resulting file.; /// }; /// }; ///; /// Every compile unit is processed separately, visited on",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h:1465,Performance,load,loaded,1465," also the line; /// tables, ranges, ...) is derived from that set of root DIEs.; ///; /// The root DIEs are identified because they contain relocations that; /// points to code section(the low_pc for a function, the location for; /// a variable). These relocations are gathered as a very first step; /// when we start processing a object file by AddressesMap.; ///; /// The overall linking process looks like this:; ///; /// parrallel_for_each(ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Load Clang modules.; /// }; ///; /// parrallel_for_each(Compile Unit) {; /// 1. Load input DWARF for Compile Unit.; /// 2. Report warnings for Clang modules.; /// 3. Analyze live DIEs and type names(if ODR deduplication is requested).; /// 4. Clone DIEs(Generate output DIEs and resulting DWARF tables).; /// The result is in an OutDebugInfoBytes, which is an ELF file; /// containing DWARF tables corresponding to the current compile unit.; /// 5. Cleanup Input and Output DIEs.; /// }; ///; /// Deallocate loaded Object file.; /// }; ///; /// if (ODR deduplication is requested); /// Generate an artificial compilation unit (""Type Table"": used to partially; /// generate DIEs at the clone stage).; ///; /// for_each (ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Set offsets to Compile Units DWARF tables.; /// 2. Sort offsets/attributes/patches to have a predictable result.; /// 3. Patch size/offsets fields.; /// 4. Generate index tables.; /// 5. Move DWARF tables of compile units into the resulting file.; /// }; /// }; ///; /// Every compile unit is processed separately, visited only once; /// (except case inter-CU references exist), and used data is freed; /// after the compile unit is processed. The resulting file is glued together; /// from the generated debug tables which correspond to separate compile units.; ///; /// Handling inter-CU references: inter-CU references are hard to process; /// using only one pass. f.e. if CU1 references CU100 and CU100 references; /// CU1, we ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h:2546,Performance,load,load,2546,"ort warnings for Clang modules.; /// 3. Analyze live DIEs and type names(if ODR deduplication is requested).; /// 4. Clone DIEs(Generate output DIEs and resulting DWARF tables).; /// The result is in an OutDebugInfoBytes, which is an ELF file; /// containing DWARF tables corresponding to the current compile unit.; /// 5. Cleanup Input and Output DIEs.; /// }; ///; /// Deallocate loaded Object file.; /// }; ///; /// if (ODR deduplication is requested); /// Generate an artificial compilation unit (""Type Table"": used to partially; /// generate DIEs at the clone stage).; ///; /// for_each (ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Set offsets to Compile Units DWARF tables.; /// 2. Sort offsets/attributes/patches to have a predictable result.; /// 3. Patch size/offsets fields.; /// 4. Generate index tables.; /// 5. Move DWARF tables of compile units into the resulting file.; /// }; /// }; ///; /// Every compile unit is processed separately, visited only once; /// (except case inter-CU references exist), and used data is freed; /// after the compile unit is processed. The resulting file is glued together; /// from the generated debug tables which correspond to separate compile units.; ///; /// Handling inter-CU references: inter-CU references are hard to process; /// using only one pass. f.e. if CU1 references CU100 and CU100 references; /// CU1, we could not finish handling of CU1 until we finished CU100.; /// Thus we either need to load all CUs into the memory, either load CUs several; /// times. This implementation loads inter-connected CU into memory at the first; /// pass and processes them at the second pass.; ///; /// ODR deduplication: Artificial compilation unit will be constructed to keep; /// type dies. All types are moved into that compilation unit. Type's references; /// are patched so that they point to the corresponding types from artificial; /// compilation unit. All partial type definitions would be merged into single; /// type definition.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h:2583,Performance,load,load,2583,"ort warnings for Clang modules.; /// 3. Analyze live DIEs and type names(if ODR deduplication is requested).; /// 4. Clone DIEs(Generate output DIEs and resulting DWARF tables).; /// The result is in an OutDebugInfoBytes, which is an ELF file; /// containing DWARF tables corresponding to the current compile unit.; /// 5. Cleanup Input and Output DIEs.; /// }; ///; /// Deallocate loaded Object file.; /// }; ///; /// if (ODR deduplication is requested); /// Generate an artificial compilation unit (""Type Table"": used to partially; /// generate DIEs at the clone stage).; ///; /// for_each (ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Set offsets to Compile Units DWARF tables.; /// 2. Sort offsets/attributes/patches to have a predictable result.; /// 3. Patch size/offsets fields.; /// 4. Generate index tables.; /// 5. Move DWARF tables of compile units into the resulting file.; /// }; /// }; ///; /// Every compile unit is processed separately, visited only once; /// (except case inter-CU references exist), and used data is freed; /// after the compile unit is processed. The resulting file is glued together; /// from the generated debug tables which correspond to separate compile units.; ///; /// Handling inter-CU references: inter-CU references are hard to process; /// using only one pass. f.e. if CU1 references CU100 and CU100 references; /// CU1, we could not finish handling of CU1 until we finished CU100.; /// Thus we either need to load all CUs into the memory, either load CUs several; /// times. This implementation loads inter-connected CU into memory at the first; /// pass and processes them at the second pass.; ///; /// ODR deduplication: Artificial compilation unit will be constructed to keep; /// type dies. All types are moved into that compilation unit. Type's references; /// are patched so that they point to the corresponding types from artificial; /// compilation unit. All partial type definitions would be merged into single; /// type definition.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h:2632,Performance,load,loads,2632,"ort warnings for Clang modules.; /// 3. Analyze live DIEs and type names(if ODR deduplication is requested).; /// 4. Clone DIEs(Generate output DIEs and resulting DWARF tables).; /// The result is in an OutDebugInfoBytes, which is an ELF file; /// containing DWARF tables corresponding to the current compile unit.; /// 5. Cleanup Input and Output DIEs.; /// }; ///; /// Deallocate loaded Object file.; /// }; ///; /// if (ODR deduplication is requested); /// Generate an artificial compilation unit (""Type Table"": used to partially; /// generate DIEs at the clone stage).; ///; /// for_each (ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Set offsets to Compile Units DWARF tables.; /// 2. Sort offsets/attributes/patches to have a predictable result.; /// 3. Patch size/offsets fields.; /// 4. Generate index tables.; /// 5. Move DWARF tables of compile units into the resulting file.; /// }; /// }; ///; /// Every compile unit is processed separately, visited only once; /// (except case inter-CU references exist), and used data is freed; /// after the compile unit is processed. The resulting file is glued together; /// from the generated debug tables which correspond to separate compile units.; ///; /// Handling inter-CU references: inter-CU references are hard to process; /// using only one pass. f.e. if CU1 references CU100 and CU100 references; /// CU1, we could not finish handling of CU1 until we finished CU100.; /// Thus we either need to load all CUs into the memory, either load CUs several; /// times. This implementation loads inter-connected CU into memory at the first; /// pass and processes them at the second pass.; ///; /// ODR deduplication: Artificial compilation unit will be constructed to keep; /// type dies. All types are moved into that compilation unit. Type's references; /// are patched so that they point to the corresponding types from artificial; /// compilation unit. All partial type definitions would be merged into single; /// type definition.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h:1822,Safety,predict,predictable,1822,"essesMap.; ///; /// The overall linking process looks like this:; ///; /// parrallel_for_each(ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Load Clang modules.; /// }; ///; /// parrallel_for_each(Compile Unit) {; /// 1. Load input DWARF for Compile Unit.; /// 2. Report warnings for Clang modules.; /// 3. Analyze live DIEs and type names(if ODR deduplication is requested).; /// 4. Clone DIEs(Generate output DIEs and resulting DWARF tables).; /// The result is in an OutDebugInfoBytes, which is an ELF file; /// containing DWARF tables corresponding to the current compile unit.; /// 5. Cleanup Input and Output DIEs.; /// }; ///; /// Deallocate loaded Object file.; /// }; ///; /// if (ODR deduplication is requested); /// Generate an artificial compilation unit (""Type Table"": used to partially; /// generate DIEs at the clone stage).; ///; /// for_each (ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Set offsets to Compile Units DWARF tables.; /// 2. Sort offsets/attributes/patches to have a predictable result.; /// 3. Patch size/offsets fields.; /// 4. Generate index tables.; /// 5. Move DWARF tables of compile units into the resulting file.; /// }; /// }; ///; /// Every compile unit is processed separately, visited only once; /// (except case inter-CU references exist), and used data is freed; /// after the compile unit is processed. The resulting file is glued together; /// from the generated debug tables which correspond to separate compile units.; ///; /// Handling inter-CU references: inter-CU references are hard to process; /// using only one pass. f.e. if CU1 references CU100 and CU100 references; /// CU1, we could not finish handling of CU1 until we finished CU100.; /// Thus we either need to load all CUs into the memory, either load CUs several; /// times. This implementation loads inter-connected CU into memory at the first; /// pass and processes them at the second pass.; ///; /// ODR deduplication: Artificial compilation unit will be constructed to",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h:106,Testability,log,logic,106,"/// ------------------------------------------------------------------; /// The core of the Dwarf linking logic.; ///; /// The generation of the dwarf information from the object files will be; /// driven by the selection of 'root DIEs', which are DIEs that; /// describe variables or functions that resolves to the corresponding; /// code section(and thus have entries in the Addresses map). All the debug; /// information that will be generated(the DIEs, but also the line; /// tables, ranges, ...) is derived from that set of root DIEs.; ///; /// The root DIEs are identified because they contain relocations that; /// points to code section(the low_pc for a function, the location for; /// a variable). These relocations are gathered as a very first step; /// when we start processing a object file by AddressesMap.; ///; /// The overall linking process looks like this:; ///; /// parrallel_for_each(ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Load Clang modules.; /// }; ///; /// parrallel_for_each(Compile Unit) {; /// 1. Load input DWARF for Compile Unit.; /// 2. Report warnings for Clang modules.; /// 3. Analyze live DIEs and type names(if ODR deduplication is requested).; /// 4. Clone DIEs(Generate output DIEs and resulting DWARF tables).; /// The result is in an OutDebugInfoBytes, which is an ELF file; /// containing DWARF tables corresponding to the current compile unit.; /// 5. Cleanup Input and Output DIEs.; /// }; ///; /// Deallocate loaded Object file.; /// }; ///; /// if (ODR deduplication is requested); /// Generate an artificial compilation unit (""Type Table"": used to partially; /// generate DIEs at the clone stage).; ///; /// for_each (ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Set offsets to Compile Units DWARF tables.; /// 2. Sort offsets/attributes/patches to have a predictable result.; /// 3. Patch size/offsets fields.; /// 4. Generate index tables.; /// 5. Move DWARF tables of compile units into the resulting file.; /// }; /// }; ///; /// E",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:53,Integrability,Interface,Interface,53,"//===- ExecutionEngine.h - Abstract Execution Engine Interface --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the abstract interface that implements execution support; // for LLVM.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:414,Integrability,interface,interface,414,"//===- ExecutionEngine.h - Abstract Execution Engine Interface --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the abstract interface that implements execution support; // for LLVM.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:54,Integrability,synchroniz,synchronize,54,// end namespace object; /// Helper class for helping synchronize access to the global address map; /// table. Access to this class should be serialized under a mutex.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:66,Security,access,access,66,// end namespace object; /// Helper class for helping synchronize access to the global address map; /// table. Access to this class should be serialized under a mutex.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:111,Security,Access,Access,111,// end namespace object; /// Helper class for helping synchronize access to the global address map; /// table. Access to this class should be serialized under a mutex.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:13,Integrability,interface,interface,13,"/// Abstract interface for implementation execution of LLVM modules,; /// designed to support both interpreter and just-in-time (JIT) compiler; /// implementations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:174,Integrability,synchroniz,synchronized,174,"/// The state object holding the global address mapping, which must be; /// accessed synchronously.; //; // FIXME: There is no particular need the entire map needs to be; // synchronized. Wouldn't a reader-writer design be better here?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:76,Security,access,accessed,76,"/// The state object holding the global address mapping, which must be; /// accessed synchronously.; //; // FIXME: There is no particular need the entire map needs to be; // synchronized. Wouldn't a reader-writer design be better here?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:66,Performance,perform,performed,66,"/// The target data for the platform for which execution is being performed.; ///; /// Note: the DataLayout is LLVMContext specific because it has an; /// internal cache based on type pointers. It makes unsafe to reuse the; /// ExecutionEngine across context, we don't enforce this rule but undefined; /// behavior can occurs if the user tries to do it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:164,Performance,cache,cache,164,"/// The target data for the platform for which execution is being performed.; ///; /// Note: the DataLayout is LLVMContext specific because it has an; /// internal cache based on type pointers. It makes unsafe to reuse the; /// ExecutionEngine across context, we don't enforce this rule but undefined; /// behavior can occurs if the user tries to do it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:203,Safety,unsafe,unsafe,203,"/// The target data for the platform for which execution is being performed.; ///; /// Note: the DataLayout is LLVMContext specific because it has an; /// internal cache based on type pointers. It makes unsafe to reuse the; /// ExecutionEngine across context, we don't enforce this rule but undefined; /// behavior can occurs if the user tries to do it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:47,Modifiability,variab,variables,47,/// Whether JIT compilation of external global variables is allowed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:27,Performance,perform,perform,27,"/// Whether the JIT should perform lookups of external symbols (e.g.,; /// using dlsym).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:12,Security,access,access,12,// To allow access to JITCtor and InterpCtor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:79,Performance,optimiz,optimize,79,/// The list of Modules that we are JIT'ing from. We use a SmallVector to; /// optimize for the case where there is only one module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:21,Energy Efficiency,Allocate,Allocate,21,/// getMemoryforGV - Allocate memory for a global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:50,Modifiability,variab,variable,50,/// getMemoryforGV - Allocate memory for a global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:152,Safety,abort,abort,152,"/// LazyFunctionCreator - If an unknown function is needed, this function; /// pointer is invoked to create it. If this returns null, the JIT will; /// abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:136,Performance,load,load,136,/// addObjectFile - Add an ObjectFile to the execution engine.; ///; /// This method is only supported by MCJIT. MCJIT will immediately load the; /// object into memory and adds its symbols to the list used to resolve; /// external symbols while preparing other objects for execution.; ///; /// Objects added using this function will not be made executable until; /// needed by another object.; ///; /// MCJIT will take ownership of the ObjectFile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:184,Performance,load,loading,184,/// addArchive - Add an Archive to the execution engine.; ///; /// This method is only supported by MCJIT. MCJIT will use the archive to; /// resolve external symbols in objects it is loading. If a symbol is found; /// in the Archive the contained object file will be extracted (in memory); /// and loaded for possible execution.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:299,Performance,load,loaded,299,/// addArchive - Add an Archive to the execution engine.; ///; /// This method is only supported by MCJIT. MCJIT will use the archive to; /// resolve external symbols in objects it is loading. If a symbol is found; /// in the Archive the contained object file will be extracted (in memory); /// and loaded for possible execution.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:82,Modifiability,variab,variable,82,/// FindGlobalVariableNamed - Search all of the active modules to find the global variable; /// that defines Name. This is very slow operation and shouldn't be used for; /// general code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:382,Integrability,message,message,382,"/// getPointerToNamedFunction - This method returns the address of the; /// specified function by using the dlsym function call. As such it is only; /// useful for resolving library symbols, not code generated symbols.; ///; /// If AbortOnFailure is false and no function with the given name is; /// found, this function silently returns a null pointer. Otherwise,; /// it prints a message to stderr and aborts.; ///; /// This function is deprecated for the MCJIT execution engine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:232,Safety,Abort,AbortOnFailure,232,"/// getPointerToNamedFunction - This method returns the address of the; /// specified function by using the dlsym function call. As such it is only; /// useful for resolving library symbols, not code generated symbols.; ///; /// If AbortOnFailure is false and no function with the given name is; /// found, this function silently returns a null pointer. Otherwise,; /// it prints a message to stderr and aborts.; ///; /// This function is deprecated for the MCJIT execution engine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:404,Safety,abort,aborts,404,"/// getPointerToNamedFunction - This method returns the address of the; /// specified function by using the dlsym function call. As such it is only; /// useful for resolving library symbols, not code generated symbols.; ///; /// If AbortOnFailure is false and no function with the given name is; /// found, this function silently returns a null pointer. Otherwise,; /// it prints a message to stderr and aborts.; ///; /// This function is deprecated for the MCJIT execution engine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:232,Integrability,depend,depends,232,"/// generateCodeForModule - Run code generation for the specified module and; /// load it into memory.; ///; /// When this function has completed, all code and data for the specified; /// module, and any module on which this module depends, will be generated; /// and loaded into memory, but relocations will not yet have been applied; /// and all memory will be readable and writable but not executable.; ///; /// This function is primarily useful when generating code for an external; /// target, allowing the client an opportunity to remap section addresses; /// before relocations are applied. Clients that intend to execute code; /// locally can use the getFunctionAddress call, which will generate code; /// and apply final preparations all in one step.; ///; /// This method has no effect for the interpreter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:82,Performance,load,load,82,"/// generateCodeForModule - Run code generation for the specified module and; /// load it into memory.; ///; /// When this function has completed, all code and data for the specified; /// module, and any module on which this module depends, will be generated; /// and loaded into memory, but relocations will not yet have been applied; /// and all memory will be readable and writable but not executable.; ///; /// This function is primarily useful when generating code for an external; /// target, allowing the client an opportunity to remap section addresses; /// before relocations are applied. Clients that intend to execute code; /// locally can use the getFunctionAddress call, which will generate code; /// and apply final preparations all in one step.; ///; /// This method has no effect for the interpreter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:268,Performance,load,loaded,268,"/// generateCodeForModule - Run code generation for the specified module and; /// load it into memory.; ///; /// When this function has completed, all code and data for the specified; /// module, and any module on which this module depends, will be generated; /// and loaded into memory, but relocations will not yet have been applied; /// and all memory will be readable and writable but not executable.; ///; /// This function is primarily useful when generating code for an external; /// target, allowing the client an opportunity to remap section addresses; /// before relocations are applied. Clients that intend to execute code; /// locally can use the getFunctionAddress call, which will generate code; /// and apply final preparations all in one step.; ///; /// This method has no effect for the interpreter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:491,Availability,failure,failure,491,"/// finalizeObject - ensure the module is fully processed and is usable.; ///; /// It is the user-level function for completing the process of making the; /// object usable for execution. It should be called after sections within an; /// object have been relocated using mapSectionAddress. When this method is; /// called the MCJIT execution engine will reapply relocations for a loaded; /// object. This method has no effect for the interpreter.; ///; /// Returns true on success, false on failure. Error messages can be retrieved; /// by calling getError();",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:500,Availability,Error,Error,500,"/// finalizeObject - ensure the module is fully processed and is usable.; ///; /// It is the user-level function for completing the process of making the; /// object usable for execution. It should be called after sections within an; /// object have been relocated using mapSectionAddress. When this method is; /// called the MCJIT execution engine will reapply relocations for a loaded; /// object. This method has no effect for the interpreter.; ///; /// Returns true on success, false on failure. Error messages can be retrieved; /// by calling getError();",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:506,Integrability,message,messages,506,"/// finalizeObject - ensure the module is fully processed and is usable.; ///; /// It is the user-level function for completing the process of making the; /// object usable for execution. It should be called after sections within an; /// object have been relocated using mapSectionAddress. When this method is; /// called the MCJIT execution engine will reapply relocations for a loaded; /// object. This method has no effect for the interpreter.; ///; /// Returns true on success, false on failure. Error messages can be retrieved; /// by calling getError();",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:380,Performance,load,loaded,380,"/// finalizeObject - ensure the module is fully processed and is usable.; ///; /// It is the user-level function for completing the process of making the; /// object usable for execution. It should be called after sections within an; /// object have been relocated using mapSectionAddress. When this method is; /// called the MCJIT execution engine will reapply relocations for a loaded; /// object. This method has no effect for the interpreter.; ///; /// Returns true on success, false on failure. Error messages can be retrieved; /// by calling getError();",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:65,Usability,usab,usable,65,"/// finalizeObject - ensure the module is fully processed and is usable.; ///; /// It is the user-level function for completing the process of making the; /// object usable for execution. It should be called after sections within an; /// object have been relocated using mapSectionAddress. When this method is; /// called the MCJIT execution engine will reapply relocations for a loaded; /// object. This method has no effect for the interpreter.; ///; /// Returns true on success, false on failure. Error messages can be retrieved; /// by calling getError();",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:166,Usability,usab,usable,166,"/// finalizeObject - ensure the module is fully processed and is usable.; ///; /// It is the user-level function for completing the process of making the; /// object usable for execution. It should be called after sections within an; /// object have been relocated using mapSectionAddress. When this method is; /// called the MCJIT execution engine will reapply relocations for a loaded; /// object. This method has no effect for the interpreter.; ///; /// Returns true on success, false on failure. Error messages can be retrieved; /// by calling getError();",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:23,Availability,error,error,23,/// Returns true if an error has been recorded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:14,Availability,error,error,14,/// Clear the error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:20,Integrability,message,message,20,/// Clear the error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:4,Usability,Clear,Clear,4,/// Clear the error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:28,Availability,error,error,28,/// Returns the most recent error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:34,Integrability,message,message,34,/// Returns the most recent error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:56,Integrability,wrap,wraps,56,"/// runFunctionAsMain - This is a helper function which wraps runFunction to; /// handle the common task of starting up main with the specified argc, argv,; /// and envp parameters.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:176,Modifiability,variab,variables,176,"/// addGlobalMapping - Tell the execution engine that the specified global is; /// at the specified location. This is used internally as functions are JIT'd; /// and as global variables are laid out in memory. It can and should also be; /// used by clients of the EE that want to have an LLVM global overlay; /// existing data in memory. Values to be mapped should be named, and have; /// external or weak linkage. Mappings are automatically removed when their; /// GlobalValue is destroyed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:4,Usability,clear,clearAllGlobalMappings,4,"/// clearAllGlobalMappings - Clear all global mappings and start over again,; /// for use in dynamic compilation scenarios to move globals.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:29,Usability,Clear,Clear,29,"/// clearAllGlobalMappings - Clear all global mappings and start over again,; /// for use in dynamic compilation scenarios to move globals.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:4,Usability,clear,clearGlobalMappingsFromModule,4,"/// clearGlobalMappingsFromModule - Clear all global mappings that came from a; /// particular module, because it has been removed from the JIT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:36,Usability,Clear,Clear,36,"/// clearGlobalMappingsFromModule - Clear all global mappings that came from a; /// particular module, because it has been removed from the JIT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:4,Deployability,update,updateGlobalMapping,4,"/// updateGlobalMapping - Replace an existing mapping for GV with a new; /// address. This updates both maps as required. If ""Addr"" is null, the; /// entry for the global is removed from the mappings. This returns the old; /// value of the pointer, or null if it was not in the map.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:91,Deployability,update,updates,91,"/// updateGlobalMapping - Replace an existing mapping for GV with a new; /// address. This updates both maps as required. If ""Addr"" is null, the; /// entry for the global is removed from the mappings. This returns the old; /// value of the pointer, or null if it was not in the map.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:191,Availability,avail,available,191,"/// getPointerToFunctionOrStub - If the specified function has been; /// code-gen'd, return a pointer to the function. If not, compile it, or use; /// a stub to implement lazy compilation if available. See; /// getPointerToFunction for the requirements on destroying F.; ///; /// This function is deprecated for the MCJIT execution engine. Use; /// getFunctionAddress instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:153,Testability,stub,stub,153,"/// getPointerToFunctionOrStub - If the specified function has been; /// code-gen'd, return a pointer to the function. If not, compile it, or use; /// a stub to implement lazy compilation if available. See; /// getPointerToFunction for the requirements on destroying F.; ///; /// This function is deprecated for the MCJIT execution engine. Use; /// getFunctionAddress instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:78,Modifiability,variab,variable,78,"/// getOrEmitGlobalVariable - Return the address of the specified global; /// variable, possibly emitting it to memory if needed. This is used by the; /// Emitter.; ///; /// This function is deprecated for the MCJIT execution engine. Use; /// getGlobalValueAddress instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:33,Performance,cache,cache,33,/// Sets the pre-compiled object cache. The ownership of the ObjectCache is; /// not changed. Supported by MCJIT but not the interpreter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:522,Performance,perform,performance,522,"/// setProcessAllSections (MCJIT Only): By default, only sections that are; /// ""required for execution"" are passed to the RTDyldMemoryManager, and other; /// sections are discarded. Passing 'true' to this method will cause; /// RuntimeDyld to pass all sections to its RTDyldMemoryManager regardless; /// of whether they are ""required to execute"" in the usual sense.; ///; /// Rationale: Some MCJIT clients want to be able to inspect metadata; /// sections (e.g. Dwarf, Stack-maps) to enable functionality or analyze; /// performance. Passing these sections to the memory manager allows the; /// client to make policy about the relevant sections, rather than having; /// MCJIT do it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:34,Availability,avail,available,34,/// Return the target machine (if available).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:470,Safety,abort,abort,470,"/// DisableLazyCompilation - When lazy compilation is off (the default), the; /// JIT will eagerly compile every function reachable from the argument to; /// getPointerToFunction. If lazy compilation is turned on, the JIT will only; /// compile the one function and emit stubs to compile the rest when they're; /// first called. If lazy compilation is turned off again while some lazy; /// stubs are still around, and one of those stubs is called, the program will; /// abort.; ///; /// In order to safely compile lazily in a threaded program, the user must; /// ensure that 1) only one thread at a time can call any particular lazy; /// stub, and 2) any thread modifying LLVM IR must hold the JIT's lock; /// (ExecutionEngine::lock) or otherwise ensure that no other thread calls a; /// lazy stub. See http://llvm.org/PR5184 for details.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:499,Safety,safe,safely,499,"/// DisableLazyCompilation - When lazy compilation is off (the default), the; /// JIT will eagerly compile every function reachable from the argument to; /// getPointerToFunction. If lazy compilation is turned on, the JIT will only; /// compile the one function and emit stubs to compile the rest when they're; /// first called. If lazy compilation is turned off again while some lazy; /// stubs are still around, and one of those stubs is called, the program will; /// abort.; ///; /// In order to safely compile lazily in a threaded program, the user must; /// ensure that 1) only one thread at a time can call any particular lazy; /// stub, and 2) any thread modifying LLVM IR must hold the JIT's lock; /// (ExecutionEngine::lock) or otherwise ensure that no other thread calls a; /// lazy stub. See http://llvm.org/PR5184 for details.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:271,Testability,stub,stubs,271,"/// DisableLazyCompilation - When lazy compilation is off (the default), the; /// JIT will eagerly compile every function reachable from the argument to; /// getPointerToFunction. If lazy compilation is turned on, the JIT will only; /// compile the one function and emit stubs to compile the rest when they're; /// first called. If lazy compilation is turned off again while some lazy; /// stubs are still around, and one of those stubs is called, the program will; /// abort.; ///; /// In order to safely compile lazily in a threaded program, the user must; /// ensure that 1) only one thread at a time can call any particular lazy; /// stub, and 2) any thread modifying LLVM IR must hold the JIT's lock; /// (ExecutionEngine::lock) or otherwise ensure that no other thread calls a; /// lazy stub. See http://llvm.org/PR5184 for details.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:390,Testability,stub,stubs,390,"/// DisableLazyCompilation - When lazy compilation is off (the default), the; /// JIT will eagerly compile every function reachable from the argument to; /// getPointerToFunction. If lazy compilation is turned on, the JIT will only; /// compile the one function and emit stubs to compile the rest when they're; /// first called. If lazy compilation is turned off again while some lazy; /// stubs are still around, and one of those stubs is called, the program will; /// abort.; ///; /// In order to safely compile lazily in a threaded program, the user must; /// ensure that 1) only one thread at a time can call any particular lazy; /// stub, and 2) any thread modifying LLVM IR must hold the JIT's lock; /// (ExecutionEngine::lock) or otherwise ensure that no other thread calls a; /// lazy stub. See http://llvm.org/PR5184 for details.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:431,Testability,stub,stubs,431,"/// DisableLazyCompilation - When lazy compilation is off (the default), the; /// JIT will eagerly compile every function reachable from the argument to; /// getPointerToFunction. If lazy compilation is turned on, the JIT will only; /// compile the one function and emit stubs to compile the rest when they're; /// first called. If lazy compilation is turned off again while some lazy; /// stubs are still around, and one of those stubs is called, the program will; /// abort.; ///; /// In order to safely compile lazily in a threaded program, the user must; /// ensure that 1) only one thread at a time can call any particular lazy; /// stub, and 2) any thread modifying LLVM IR must hold the JIT's lock; /// (ExecutionEngine::lock) or otherwise ensure that no other thread calls a; /// lazy stub. See http://llvm.org/PR5184 for details.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:638,Testability,stub,stub,638,"/// DisableLazyCompilation - When lazy compilation is off (the default), the; /// JIT will eagerly compile every function reachable from the argument to; /// getPointerToFunction. If lazy compilation is turned on, the JIT will only; /// compile the one function and emit stubs to compile the rest when they're; /// first called. If lazy compilation is turned off again while some lazy; /// stubs are still around, and one of those stubs is called, the program will; /// abort.; ///; /// In order to safely compile lazily in a threaded program, the user must; /// ensure that 1) only one thread at a time can call any particular lazy; /// stub, and 2) any thread modifying LLVM IR must hold the JIT's lock; /// (ExecutionEngine::lock) or otherwise ensure that no other thread calls a; /// lazy stub. See http://llvm.org/PR5184 for details.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:793,Testability,stub,stub,793,"/// DisableLazyCompilation - When lazy compilation is off (the default), the; /// JIT will eagerly compile every function reachable from the argument to; /// getPointerToFunction. If lazy compilation is turned on, the JIT will only; /// compile the one function and emit stubs to compile the rest when they're; /// first called. If lazy compilation is turned off again while some lazy; /// stubs are still around, and one of those stubs is called, the program will; /// abort.; ///; /// In order to safely compile lazily in a threaded program, the user must; /// ensure that 1) only one thread at a time can call any particular lazy; /// stub, and 2) any thread modifying LLVM IR must hold the JIT's lock; /// (ExecutionEngine::lock) or otherwise ensure that no other thread calls a; /// lazy stub. See http://llvm.org/PR5184 for details.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:79,Energy Efficiency,allocate,allocate,79,"/// DisableGVCompilation - If called, the JIT will abort if it's asked to; /// allocate space and populate a GlobalVariable that is not internal to; /// the module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:51,Safety,abort,abort,51,"/// DisableGVCompilation - If called, the JIT will abort if it's asked to; /// allocate space and populate a GlobalVariable that is not internal to; /// the module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:127,Deployability,Install,InstallLazyFunctionCreator,127,"/// DisableSymbolSearching - If called, the JIT will not try to lookup unknown; /// symbols with dlsym. A client can still use InstallLazyFunctionCreator to; /// resolve symbols in a custom way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:150,Deployability,Release,Release,150,"/// Enable/Disable IR module verification.; ///; /// Note: Module verification is enabled by default in Debug builds, and; /// disabled by default in Release. Use this method to override the default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:4,Deployability,Install,InstallLazyFunctionCreator,4,"/// InstallLazyFunctionCreator - If an unknown function is needed, the; /// specified function pointer is invoked to create it. If it returns null,; /// the JIT will abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:166,Safety,abort,abort,166,"/// InstallLazyFunctionCreator - If an unknown function is needed, the; /// specified function pointer is invoked to create it. If it returns null,; /// the JIT will abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:300,Availability,error,error,300,"/// setMCJITMemoryManager - Sets the MCJIT memory manager to use. This allows; /// clients to customize their memory allocation policies for the MCJIT. This; /// is only appropriate for the MCJIT; setting this and configuring the builder; /// to create anything other than MCJIT will cause a runtime error. If create(); /// is called and is successful, the created engine takes ownership of the; /// memory manager. This option defaults to NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:214,Modifiability,config,configuring,214,"/// setMCJITMemoryManager - Sets the MCJIT memory manager to use. This allows; /// clients to customize their memory allocation policies for the MCJIT. This; /// is only appropriate for the MCJIT; setting this and configuring the builder; /// to create anything other than MCJIT will cause a runtime error. If create(); /// is called and is successful, the created engine takes ownership of the; /// memory manager. This option defaults to NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:26,Availability,error,error,26,/// setErrorStr - Set the error string to write to on error. This option; /// defaults to NULL.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:54,Availability,error,error,54,/// setErrorStr - Set the error string to write to on error. This option; /// defaults to NULL.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:26,Performance,optimiz,optimization,26,/// setOptLevel - Set the optimization level for the JIT. This option; /// defaults to CodeGenOptLevel::Default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Interpreter.h:50,Integrability,Interface,Interface,50,"//===-- Interpreter.h - Abstract Execution Engine Interface -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file forces the interpreter to link in on certain operating systems.; // (Windows).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Interpreter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Interpreter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h:422,Integrability,interface,interface,422,"//===- JITEventListener.h - Exposes events from JIT compilation -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the JITEventListener interface, which lets users get; // callbacks when significant events happen during the JIT compilation process.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h:28,Security,Expose,Exposes,28,"//===- JITEventListener.h - Exposes events from JIT compilation -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the JITEventListener interface, which lets users get; // callbacks when significant events happen during the JIT compilation process.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h:57,Integrability,interface,interface,57,"// end namespace object; /// JITEventListener - Abstract interface for use by the JIT to notify clients; /// about significant events during compilation. For example, to notify; /// profilers and debuggers that need to know where functions have been emitted.; ///; /// The default implementation of each method does nothing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h:386,Deployability,update,updated,386,/// notifyObjectLoaded - Called after an object has had its sections allocated; /// and addresses assigned to all symbols. Note: Section memory will not have; /// been relocated yet. notifyFunctionLoaded will not be called for; /// individual functions in the object.; ///; /// ELF-specific information; /// The ObjectImage contains the generated object image; /// with section headers updated to reflect the address at which sections; /// were loaded and with relocations performed in-place on debug sections.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h:69,Energy Efficiency,allocate,allocated,69,/// notifyObjectLoaded - Called after an object has had its sections allocated; /// and addresses assigned to all symbols. Note: Section memory will not have; /// been relocated yet. notifyFunctionLoaded will not be called for; /// individual functions in the object.; ///; /// ELF-specific information; /// The ObjectImage contains the generated object image; /// with section headers updated to reflect the address at which sections; /// were loaded and with relocations performed in-place on debug sections.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h:445,Performance,load,loaded,445,/// notifyObjectLoaded - Called after an object has had its sections allocated; /// and addresses assigned to all symbols. Note: Section memory will not have; /// been relocated yet. notifyFunctionLoaded will not be called for; /// individual functions in the object.; ///; /// ELF-specific information; /// The ObjectImage contains the generated object image; /// with section headers updated to reflect the address at which sections; /// were loaded and with relocations performed in-place on debug sections.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h:473,Performance,perform,performed,473,/// notifyObjectLoaded - Called after an object has had its sections allocated; /// and addresses assigned to all symbols. Note: Section memory will not have; /// been relocated yet. notifyFunctionLoaded will not be called for; /// individual functions in the object.; ///; /// ELF-specific information; /// The ObjectImage contains the generated object image; /// with section headers updated to reflect the address at which sections; /// were loaded and with relocations performed in-place on debug sections.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h:108,Deployability,release,released,108,/// notifyFreeingObject - Called just before the memory associated with; /// a previously emitted object is released.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h:45,Testability,test,test,45,// Construct an IntelJITEventListener with a test Intel JIT API implementation,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h:48,Testability,test,test,48,// Construct an OProfileJITEventListener with a test opagent implementation,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:274,Performance,perform,perform,274,"/// Convert a JITTargetAddress to a pointer.; ///; /// Note: This is a raw cast of the address bit pattern to the given pointer; /// type. When casting to a function pointer in order to execute JIT'd code; /// jitTargetAddressToFunction should be preferred, as it will also perform; /// pointer signing on targets that require it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:154,Performance,perform,perform,154,/// Convert a JITTargetAddress to a callable function pointer.; ///; /// Casts the given address to a callable function pointer. This operation; /// will perform pointer signing for platforms that require it (e.g. arm64e).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:32,Availability,error,error,32,/// Return true if there was an error retrieving this symbol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:164,Integrability,synchroniz,synchronization,164,"/// Returns true if this symbol is a materialization-side-effects-only; /// symbol. Such symbols do not have a real address. They exist to trigger; /// and support synchronization of materialization side effects, e.g. for; /// collecting initialization information. These symbols will vanish from; /// the symbol table immediately upon reaching the ready state, and will; /// appear to queries as if they were never defined (except that query; /// callback execution will be delayed until they reach the ready state).; /// MaterializationSideEffectOnly symbols should only be queried using the; /// SymbolLookupFlags::WeaklyReferencedSymbol flag (see; /// llvm/include/llvm/ExecutionEngine/Orc/Core.h).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:39,Availability,error,error,39,/// Create a JITSymbol representing an error in the symbol lookup; /// process (e.g. a network failure during a remote lookup).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:95,Availability,failure,failure,95,/// Create a JITSymbol representing an error in the symbol lookup; /// process (e.g. a network failure during a remote lookup).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:13,Availability,error,error,13,/// Move the error field value out of this JITSymbol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:223,Energy Efficiency,reduce,reduce,223,"/// Symbol resolution interface.; ///; /// Allows symbol flags and addresses to be looked up by name.; /// Symbol queries are done in bulk (i.e. you request resolution of a set of; /// symbols, rather than a single one) to reduce IPC overhead in the case of; /// remote JITing, and expose opportunities for parallel compilation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:22,Integrability,interface,interface,22,"/// Symbol resolution interface.; ///; /// Allows symbol flags and addresses to be looked up by name.; /// Symbol queries are done in bulk (i.e. you request resolution of a set of; /// symbols, rather than a single one) to reduce IPC overhead in the case of; /// remote JITing, and expose opportunities for parallel compilation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:282,Security,expose,expose,282,"/// Symbol resolution interface.; ///; /// Allows symbol flags and addresses to be looked up by name.; /// Symbol queries are done in bulk (i.e. you request resolution of a set of; /// symbols, rather than a single one) to reduce IPC overhead in the case of; /// remote JITing, and expose opportunities for parallel compilation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:122,Availability,error,error,122,"/// Returns the fully resolved address and flags for each of the given; /// symbols.; ///; /// This method will return an error if any of the given symbols can not be; /// resolved, or if the resolution process itself triggers an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:230,Availability,error,error,230,"/// Returns the fully resolved address and flags for each of the given; /// symbols.; ///; /// This method will return an error if any of the given symbols can not be; /// resolved, or if the resolution process itself triggers an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:29,Integrability,interface,interface,29,/// Legacy symbol resolution interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:4,Performance,Perform,Performs,4,"/// Performs lookup by, for each symbol, first calling; /// findSymbolInLogicalDylib and if that fails calling; /// findSymbol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:4,Performance,Perform,Performs,4,/// Performs flags lookup by calling findSymbolInLogicalDylib and; /// returning the flags value for that symbol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:197,Integrability,interface,interface,197,"/// This method returns the address of the specified symbol if it exists; /// within the logical dynamic library represented by this JITSymbolResolver.; /// Unlike findSymbol, queries through this interface should return addresses; /// for hidden symbols.; ///; /// This is of particular importance for the Orc JIT APIs, which support lazy; /// compilation by breaking up modules: Each of those broken out modules; /// must be able to resolve hidden symbols provided by the others. Clients; /// writing memory managers for MCJIT can usually ignore this method.; ///; /// This method will be queried by RuntimeDyld when checking for previous; /// definitions of common symbols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:89,Testability,log,logical,89,"/// This method returns the address of the specified symbol if it exists; /// within the logical dynamic library represented by this JITSymbolResolver.; /// Unlike findSymbol, queries through this interface should return addresses; /// for hidden symbols.; ///; /// This is of particular importance for the Orc JIT APIs, which support lazy; /// compilation by breaking up modules: Each of those broken out modules; /// must be able to resolve hidden symbols provided by the others. Clients; /// writing memory managers for MCJIT can usually ignore this method.; ///; /// This method will be queried by RuntimeDyld when checking for previous; /// definitions of common symbols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:65,Modifiability,variab,variable,65,"/// This method returns the address of the specified function or variable.; /// It is used to resolve symbols during module linking.; ///; /// If the returned symbol's address is equal to ~0ULL then RuntimeDyld will; /// skip all relocations for that symbol, and the client will be responsible; /// for handling them manually.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/MCJIT.h:121,Performance,optimiz,optimization,121,"// We must reference MCJIT in such a way that compilers will not; // delete it all as dead code, even with whole program optimization,; // yet is effectively a NO-OP. As the compiler isn't smart enough; // to know that getenv() never returns -1, this will do the job.; // This is so that globals in the translation units where these functions; // are defined are forced to be initialized, populating various; // registries.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/MCJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/MCJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ObjectCache.h:198,Availability,avail,available,198,/// This is the base ObjectCache type which can be provided to an; /// ExecutionEngine for the purpose of avoiding compilation for Modules that; /// have already been compiled and an object file is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ObjectCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ObjectCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ObjectCache.h:106,Safety,avoid,avoiding,106,/// This is the base ObjectCache type which can be provided to an; /// ExecutionEngine for the purpose of avoiding compilation for Modules that; /// have already been compiled and an object file is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ObjectCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ObjectCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ObjectCache.h:149,Availability,avail,available,149,"/// Returns a pointer to a newly allocated MemoryBuffer that contains the; /// object which corresponds with Module M, or 0 if an object is not; /// available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ObjectCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ObjectCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ObjectCache.h:33,Energy Efficiency,allocate,allocated,33,"/// Returns a pointer to a newly allocated MemoryBuffer that contains the; /// object which corresponds with Module M, or 0 if an object is not; /// available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ObjectCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ObjectCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h:45,Integrability,Wrap,Wrapper,45,"//===-- OProfileWrapper.h - OProfile JIT API Wrapper ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This file defines a OProfileWrapper object that detects if the oprofile; // daemon is running, and provides wrappers for opagent functions used to; // communicate with the oprofile JIT interface. The dynamic library libopagent; // does not need to be linked directly as this object lazily loads the library; // when the first op_ function is called.; //; // See http://oprofile.sourceforge.net/doc/devel/jit-interface.html for the; // definition of the interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h:487,Integrability,wrap,wrappers,487,"//===-- OProfileWrapper.h - OProfile JIT API Wrapper ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This file defines a OProfileWrapper object that detects if the oprofile; // daemon is running, and provides wrappers for opagent functions used to; // communicate with the oprofile JIT interface. The dynamic library libopagent; // does not need to be linked directly as this object lazily loads the library; // when the first op_ function is called.; //; // See http://oprofile.sourceforge.net/doc/devel/jit-interface.html for the; // definition of the interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h:564,Integrability,interface,interface,564,"//===-- OProfileWrapper.h - OProfile JIT API Wrapper ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This file defines a OProfileWrapper object that detects if the oprofile; // daemon is running, and provides wrappers for opagent functions used to; // communicate with the oprofile JIT interface. The dynamic library libopagent; // does not need to be linked directly as this object lazily loads the library; // when the first op_ function is called.; //; // See http://oprofile.sourceforge.net/doc/devel/jit-interface.html for the; // definition of the interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h:787,Integrability,interface,interface,787,"//===-- OProfileWrapper.h - OProfile JIT API Wrapper ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This file defines a OProfileWrapper object that detects if the oprofile; // daemon is running, and provides wrappers for opagent functions used to; // communicate with the oprofile JIT interface. The dynamic library libopagent; // does not need to be linked directly as this object lazily loads the library; // when the first op_ function is called.; //; // See http://oprofile.sourceforge.net/doc/devel/jit-interface.html for the; // definition of the interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h:832,Integrability,interface,interface,832,"//===-- OProfileWrapper.h - OProfile JIT API Wrapper ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This file defines a OProfileWrapper object that detects if the oprofile; // daemon is running, and provides wrappers for opagent functions used to; // communicate with the oprofile JIT interface. The dynamic library libopagent; // does not need to be linked directly as this object lazily loads the library; // when the first op_ function is called.; //; // See http://oprofile.sourceforge.net/doc/devel/jit-interface.html for the; // definition of the interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h:668,Performance,load,loads,668,"//===-- OProfileWrapper.h - OProfile JIT API Wrapper ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This file defines a OProfileWrapper object that detects if the oprofile; // daemon is running, and provides wrappers for opagent functions used to; // communicate with the oprofile JIT interface. The dynamic library libopagent; // does not need to be linked directly as this object lazily loads the library; // when the first op_ function is called.; //; // See http://oprofile.sourceforge.net/doc/devel/jit-interface.html for the; // definition of the interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h:427,Safety,detect,detects,427,"//===-- OProfileWrapper.h - OProfile JIT API Wrapper ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This file defines a OProfileWrapper object that detects if the oprofile; // daemon is running, and provides wrappers for opagent functions used to; // communicate with the oprofile JIT interface. The dynamic library libopagent; // does not need to be linked directly as this object lazily loads the library; // when the first op_ function is called.; //; // See http://oprofile.sourceforge.net/doc/devel/jit-interface.html for the; // definition of the interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h:69,Performance,load,load,69,"// For testing with a mock opagent implementation, skips the dynamic load and; // the function resolution.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h:7,Testability,test,testing,7,"// For testing with a mock opagent implementation, skips the dynamic load and; // the function resolution.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h:22,Testability,mock,mock,22,"// For testing with a mock opagent implementation, skips the dynamic load and; // the function resolution.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h:80,Performance,load,loaded,80,"// Returns true if the oprofiled process is running, the opagent library is; // loaded and a connection to the agent has been established, and false; // otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h:53,Integrability,wrap,wrapper,53,// Loads the libopagent library and initializes this wrapper if the oprofile; // daemon is running,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h:3,Performance,Load,Loads,3,// Loads the libopagent library and initializes this wrapper if the oprofile; // daemon is running,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:383,Integrability,Interface,Interface,383,"//===-- RTDyldMemoryManager.cpp - Memory manager for MC-JIT -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Interface of the runtime dynamic memory manager base class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:51,Performance,load,loaded,51,"/// This method is called after an object has been loaded into memory but; /// before relocations are applied to the loaded sections. The object load; /// may have been initiated by MCJIT to resolve an external symbol for another; /// object that is being finalized. In that case, the object about which; /// the memory manager is being notified will be finalized immediately after; /// the memory manager returns from this call.; ///; /// Memory managers which are preparing code for execution in an external; /// address space can use this call to remap the section addresses for the; /// newly loaded object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:117,Performance,load,loaded,117,"/// This method is called after an object has been loaded into memory but; /// before relocations are applied to the loaded sections. The object load; /// may have been initiated by MCJIT to resolve an external symbol for another; /// object that is being finalized. In that case, the object about which; /// the memory manager is being notified will be finalized immediately after; /// the memory manager returns from this call.; ///; /// Memory managers which are preparing code for execution in an external; /// address space can use this call to remap the section addresses for the; /// newly loaded object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:145,Performance,load,load,145,"/// This method is called after an object has been loaded into memory but; /// before relocations are applied to the loaded sections. The object load; /// may have been initiated by MCJIT to resolve an external symbol for another; /// object that is being finalized. In that case, the object about which; /// the memory manager is being notified will be finalized immediately after; /// the memory manager returns from this call.; ///; /// Memory managers which are preparing code for execution in an external; /// address space can use this call to remap the section addresses for the; /// newly loaded object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:597,Performance,load,loaded,597,"/// This method is called after an object has been loaded into memory but; /// before relocations are applied to the loaded sections. The object load; /// may have been initiated by MCJIT to resolve an external symbol for another; /// object that is being finalized. In that case, the object about which; /// the memory manager is being notified will be finalized immediately after; /// the memory manager returns from this call.; ///; /// Memory managers which are preparing code for execution in an external; /// address space can use this call to remap the section addresses for the; /// newly loaded object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:322,Energy Efficiency,allocate,allocated,322,"// RuntimeDyld clients often want to handle the memory management of; // what gets placed where. For JIT clients, this is the subset of; // JITMemoryManager required for dynamic loading of binaries.; //; // FIXME: As the RuntimeDyld fills out, additional routines will be needed; // for the varying types of objects to be allocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:255,Integrability,rout,routines,255,"// RuntimeDyld clients often want to handle the memory management of; // what gets placed where. For JIT clients, this is the subset of; // JITMemoryManager required for dynamic loading of binaries.; //; // FIXME: As the RuntimeDyld fills out, additional routines will be needed; // for the varying types of objects to be allocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:178,Performance,load,loading,178,"// RuntimeDyld clients often want to handle the memory management of; // what gets placed where. For JIT clients, this is the subset of; // JITMemoryManager required for dynamic loading of binaries.; //; // FIXME: As the RuntimeDyld fills out, additional routines will be needed; // for the varying types of objects to be allocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:65,Modifiability,variab,variable,65,/// This method returns the address of the specified function or variable in; /// the current process.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:146,Modifiability,variab,variable,146,/// Legacy symbol lookup - DEPRECATED! Please override findSymbol instead.; ///; /// This method returns the address of the specified function or variable.; /// It is used to resolve symbols during module linking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:85,Modifiability,variab,variable,85,"/// This method returns a RuntimeDyld::SymbolInfo for the specified function; /// or variable. It is used to resolve symbols during module linking.; ///; /// By default this falls back on the legacy lookup method:; /// 'getSymbolAddress'. The address returned by getSymbolAddress is treated as; /// a strong, exported symbol, consistent with historical treatment by; /// RuntimeDyld.; ///; /// Clients writing custom RTDyldMemoryManagers are encouraged to override; /// this method and return a SymbolInfo with the flags set correctly. This is; /// necessary for RuntimeDyld to correctly handle weak and non-exported symbols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:310,Integrability,message,message,310,"/// This method returns the address of the specified function. As such it is; /// only useful for resolving library symbols, not code generated symbols.; ///; /// If \p AbortOnFailure is false and no function with the given name is; /// found, this function returns a null pointer. Otherwise, it prints a; /// message to stderr and aborts.; ///; /// This function is deprecated for memory managers to be used with; /// MCJIT or RuntimeDyld. Use getSymbolAddress instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:169,Safety,Abort,AbortOnFailure,169,"/// This method returns the address of the specified function. As such it is; /// only useful for resolving library symbols, not code generated symbols.; ///; /// If \p AbortOnFailure is false and no function with the given name is; /// found, this function returns a null pointer. Otherwise, it prints a; /// message to stderr and aborts.; ///; /// This function is deprecated for memory managers to be used with; /// MCJIT or RuntimeDyld. Use getSymbolAddress instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:332,Safety,abort,aborts,332,"/// This method returns the address of the specified function. As such it is; /// only useful for resolving library symbols, not code generated symbols.; ///; /// If \p AbortOnFailure is false and no function with the given name is; /// found, this function returns a null pointer. Otherwise, it prints a; /// message to stderr and aborts.; ///; /// This function is deprecated for memory managers to be used with; /// MCJIT or RuntimeDyld. Use getSymbolAddress instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:383,Integrability,Interface,Interface,383,"//===- RuntimeDyld.h - Run-time dynamic linker for MC-JIT -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Interface for the runtime dynamic linker facilities of the MC-JIT.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:44,Availability,error,errors,44,"// end namespace object; /// Base class for errors originating in RuntimeDyld, e.g. missing relocation; /// support.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:26,Performance,load,loaded,26,/// Information about the loaded object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:4,Energy Efficiency,Allocate,Allocate,4,"/// Allocate a memory block of (at least) the given size suitable for; /// executable code. The SectionID is a unique identifier assigned by the; /// RuntimeDyld instance, and optionally recorded by the memory manager to; /// access a loaded section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:235,Performance,load,loaded,235,"/// Allocate a memory block of (at least) the given size suitable for; /// executable code. The SectionID is a unique identifier assigned by the; /// RuntimeDyld instance, and optionally recorded by the memory manager to; /// access a loaded section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:226,Security,access,access,226,"/// Allocate a memory block of (at least) the given size suitable for; /// executable code. The SectionID is a unique identifier assigned by the; /// RuntimeDyld instance, and optionally recorded by the memory manager to; /// access a loaded section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:4,Energy Efficiency,Allocate,Allocate,4,"/// Allocate a memory block of (at least) the given size suitable for data.; /// The SectionID is a unique identifier assigned by the JIT engine, and; /// optionally recorded by the memory manager to access a loaded section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:209,Performance,load,loaded,209,"/// Allocate a memory block of (at least) the given size suitable for data.; /// The SectionID is a unique identifier assigned by the JIT engine, and; /// optionally recorded by the memory manager to access a loaded section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:200,Security,access,access,200,"/// Allocate a memory block of (at least) the given size suitable for data.; /// The SectionID is a unique identifier assigned by the JIT engine, and; /// optionally recorded by the memory manager to access a loaded section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:7,Energy Efficiency,allocate,allocated,7,/// An allocated TLS section,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate a memory block of (at least) the given size to be used for; /// thread-local storage (TLS).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:80,Energy Efficiency,allocate,allocate,80,/// Inform the memory manager about the total amount of memory required to; /// allocate all sections to be loaded:; /// \p CodeSize - the total size of all code sections; /// \p DataSizeRO - the total size of all read-only data sections; /// \p DataSizeRW - the total size of all read-write data sections; ///; /// Note that by default the callback is disabled. To enable it; /// redefine the method needsToReserveAllocationSpace to return true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:108,Performance,load,loaded,108,/// Inform the memory manager about the total amount of memory required to; /// allocate all sections to be loaded:; /// \p CodeSize - the total size of all code sections; /// \p DataSizeRO - the total size of all read-only data sections; /// \p DataSizeRW - the total size of all read-write data sections; ///; /// Note that by default the callback is disabled. To enable it; /// redefine the method needsToReserveAllocationSpace to return true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:186,Energy Efficiency,allocate,allocated,186,"/// Override to return false to tell LLVM no stub space will be needed.; /// This requires some guarantees depending on architecuture, but when; /// you know what you are doing it saves allocated space.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:107,Integrability,depend,depending,107,"/// Override to return false to tell LLVM no stub space will be needed.; /// This requires some guarantees depending on architecuture, but when; /// you know what you are doing it saves allocated space.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:45,Testability,stub,stub,45,"/// Override to return false to tell LLVM no stub space will be needed.; /// This requires some guarantees depending on architecuture, but when; /// you know what you are doing it saves allocated space.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:172,Performance,Load,LoadAddr,172,"/// Register the EH frames with the runtime so that c++ exceptions work.; ///; /// \p Addr parameter provides the local address of the EH frame section; /// data, while \p LoadAddr provides the address of the data in the target; /// address space. If the section has not been remapped (which will usually; /// be the case for local execution) these two values will be the same.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:485,Availability,reliab,reliably,485,"/// This method is called when object loading is complete and section page; /// permissions can be applied. It is up to the memory manager implementation; /// to decide whether or not to act on this method. The memory manager will; /// typically allocate all sections as read-write and then apply specific; /// permissions when this method is called. Code sections cannot be executed; /// until this function has been called. In addition, any cache coherency; /// operations needed to reliably use the memory are also performed.; ///; /// Returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:558,Availability,error,error,558,"/// This method is called when object loading is complete and section page; /// permissions can be applied. It is up to the memory manager implementation; /// to decide whether or not to act on this method. The memory manager will; /// typically allocate all sections as read-write and then apply specific; /// permissions when this method is called. Code sections cannot be executed; /// until this function has been called. In addition, any cache coherency; /// operations needed to reliably use the memory are also performed.; ///; /// Returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:246,Energy Efficiency,allocate,allocate,246,"/// This method is called when object loading is complete and section page; /// permissions can be applied. It is up to the memory manager implementation; /// to decide whether or not to act on this method. The memory manager will; /// typically allocate all sections as read-write and then apply specific; /// permissions when this method is called. Code sections cannot be executed; /// until this function has been called. In addition, any cache coherency; /// operations needed to reliably use the memory are also performed.; ///; /// Returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:38,Performance,load,loading,38,"/// This method is called when object loading is complete and section page; /// permissions can be applied. It is up to the memory manager implementation; /// to decide whether or not to act on this method. The memory manager will; /// typically allocate all sections as read-write and then apply specific; /// permissions when this method is called. Code sections cannot be executed; /// until this function has been called. In addition, any cache coherency; /// operations needed to reliably use the memory are also performed.; ///; /// Returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:443,Performance,cache,cache,443,"/// This method is called when object loading is complete and section page; /// permissions can be applied. It is up to the memory manager implementation; /// to decide whether or not to act on this method. The memory manager will; /// typically allocate all sections as read-write and then apply specific; /// permissions when this method is called. Code sections cannot be executed; /// until this function has been called. In addition, any cache coherency; /// operations needed to reliably use the memory are also performed.; ///; /// Returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:518,Performance,perform,performed,518,"/// This method is called when object loading is complete and section page; /// permissions can be applied. It is up to the memory manager implementation; /// to decide whether or not to act on this method. The memory manager will; /// typically allocate all sections as read-write and then apply specific; /// permissions when this method is called. Code sections cannot be executed; /// until this function has been called. In addition, any cache coherency; /// operations needed to reliably use the memory are also performed.; ///; /// Returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:51,Performance,load,loaded,51,/// This method is called after an object has been loaded into memory but; /// before relocations are applied to the loaded sections.; ///; /// Memory managers which are preparing code for execution in an external; /// address space can use this call to remap the section addresses for the; /// newly loaded object.; ///; /// For clients that do not need access to an ExecutionEngine instance this; /// method should be preferred to its cousin; /// MCJITMemoryManager::notifyObjectLoaded as this method is compatible with; /// ORC JIT stacks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:117,Performance,load,loaded,117,/// This method is called after an object has been loaded into memory but; /// before relocations are applied to the loaded sections.; ///; /// Memory managers which are preparing code for execution in an external; /// address space can use this call to remap the section addresses for the; /// newly loaded object.; ///; /// For clients that do not need access to an ExecutionEngine instance this; /// method should be preferred to its cousin; /// MCJITMemoryManager::notifyObjectLoaded as this method is compatible with; /// ORC JIT stacks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:301,Performance,load,loaded,301,/// This method is called after an object has been loaded into memory but; /// before relocations are applied to the loaded sections.; ///; /// Memory managers which are preparing code for execution in an external; /// address space can use this call to remap the section addresses for the; /// newly loaded object.; ///; /// For clients that do not need access to an ExecutionEngine instance this; /// method should be preferred to its cousin; /// MCJITMemoryManager::notifyObjectLoaded as this method is compatible with; /// ORC JIT stacks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:355,Security,access,access,355,/// This method is called after an object has been loaded into memory but; /// before relocations are applied to the loaded sections.; ///; /// Memory managers which are preparing code for execution in an external; /// address space can use this call to remap the section addresses for the; /// newly loaded object.; ///; /// For clients that do not need access to an ExecutionEngine instance this; /// method should be preferred to its cousin; /// MCJITMemoryManager::notifyObjectLoaded as this method is compatible with; /// ORC JIT stacks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:64,Performance,load,loaded,64,/// Add the referenced object file to the list of objects to be loaded and; /// relocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:23,Performance,load,loaded,23,"/// If the section was loaded, return the section's load address,; /// otherwise return std::nullopt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:52,Performance,load,load,52,"/// If the section was loaded, return the section's load address,; /// otherwise return std::nullopt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:110,Testability,stub,stub,110,/// Set the NotifyStubEmitted callback. This is used for debugging; /// purposes. A callback is made for each stub that is generated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:50,Performance,load,loaded,50,"/// Register any EH frame sections that have been loaded but not previously; /// registered with the memory manager. Note, RuntimeDyld is responsible; /// for identifying the EH frame and calling the memory manager with the; /// EH frame section data. However, the memory manager itself will handle; /// the actual target-specific EH frame registration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:498,Performance,load,loaded,498,"/// By default, only sections that are ""required for execution"" are passed to; /// the RTDyldMemoryManager, and other sections are discarded. Passing 'true'; /// to this method will cause RuntimeDyld to pass all sections to its; /// memory manager regardless of whether they are ""required to execute"" in the; /// usual sense. This is useful for inspecting metadata sections that may not; /// contain relocations, E.g. Debug info, stackmaps.; ///; /// Must be called before the first object file is loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:490,Availability,error,errors,490,"/// Perform all actions needed to make the code owned by this RuntimeDyld; /// instance executable:; ///; /// 1) Apply relocations.; /// 2) Register EH frames.; /// 3) Update memory permissions*.; ///; /// * Finalization is potentially recursive**, and the 3rd step will only be; /// applied by the outermost call to finalize. This allows different; /// RuntimeDyld instances to share a memory manager without the innermost; /// finalization locking the memory and causing relocation fixup errors in; /// outer instances.; ///; /// ** Recursive finalization occurs when one RuntimeDyld instances needs the; /// address of a symbol owned by some other instance in order to apply; /// relocations.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:168,Deployability,Update,Update,168,"/// Perform all actions needed to make the code owned by this RuntimeDyld; /// instance executable:; ///; /// 1) Apply relocations.; /// 2) Register EH frames.; /// 3) Update memory permissions*.; ///; /// * Finalization is potentially recursive**, and the 3rd step will only be; /// applied by the outermost call to finalize. This allows different; /// RuntimeDyld instances to share a memory manager without the innermost; /// finalization locking the memory and causing relocation fixup errors in; /// outer instances.; ///; /// ** Recursive finalization occurs when one RuntimeDyld instances needs the; /// address of a symbol owned by some other instance in order to apply; /// relocations.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:4,Performance,Perform,Perform,4,"/// Perform all actions needed to make the code owned by this RuntimeDyld; /// instance executable:; ///; /// 1) Apply relocations.; /// 2) Register EH frames.; /// 3) Update memory permissions*.; ///; /// * Finalization is potentially recursive**, and the 3rd step will only be; /// applied by the outermost call to finalize. This allows different; /// RuntimeDyld instances to share a memory manager without the innermost; /// finalization locking the memory and causing relocation fixup errors in; /// outer instances.; ///; /// ** Recursive finalization occurs when one RuntimeDyld instances needs the; /// address of a symbol owned by some other instance in order to apply; /// relocations.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:75,Integrability,interface,interface,75,// RuntimeDyldImpl is the actual class. RuntimeDyld is just the public; // interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:244,Performance,perform,perform,244,// Asynchronous JIT link for ORC.; //; // Warning: This API is experimental and probably should not be used by anyone; // but ORC's RTDyldObjectLinkingLayer2. Internally it constructs a RuntimeDyld; // instance and uses continuation passing to perform the fix-up and finalize; // steps asynchronously.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h:45,Testability,test,tester,45,"//===---- RuntimeDyldChecker.h - RuntimeDyld tester framework -----*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h:349,Availability,mask,masking,349,"/// RuntimeDyld invariant checker for verifying that RuntimeDyld has; /// correctly applied relocations.; ///; /// The RuntimeDyldChecker class evaluates expressions against an attached; /// RuntimeDyld instance to verify that relocations have been applied; /// correctly.; ///; /// The expression language supports basic pointer arithmetic and bit-masking,; /// and has limited disassembler integration for accessing instruction; /// operands and the next PC (program counter) address for each instruction.; ///; /// The language syntax is:; ///; /// check = expr '=' expr; ///; /// expr = binary_expr; /// | sliceable_expr; ///; /// sliceable_expr = '*{' number '}' load_addr_expr [slice]; /// | '(' expr ')' [slice]; /// | ident_expr [slice]; /// | number [slice]; ///; /// slice = '[' high-bit-index ':' low-bit-index ']'; ///; /// load_addr_expr = symbol; /// | '(' symbol '+' number ')'; /// | '(' symbol '-' number ')'; ///; /// ident_expr = 'decode_operand' '(' symbol ',' operand-index ')'; /// | 'next_pc' '(' symbol ')'; /// | 'stub_addr' '(' stub-container-name ',' symbol ')'; /// | 'got_addr' '(' stub-container-name ',' symbol ')'; /// | 'section_addr' '(' stub-container-name ',' symbol ')'; /// | symbol; ///; /// binary_expr = expr '+' expr; /// | expr '-' expr; /// | expr '&' expr; /// | expr '|' expr; /// | expr '<<' expr; /// | expr '>>' expr; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h:392,Deployability,integrat,integration,392,"/// RuntimeDyld invariant checker for verifying that RuntimeDyld has; /// correctly applied relocations.; ///; /// The RuntimeDyldChecker class evaluates expressions against an attached; /// RuntimeDyld instance to verify that relocations have been applied; /// correctly.; ///; /// The expression language supports basic pointer arithmetic and bit-masking,; /// and has limited disassembler integration for accessing instruction; /// operands and the next PC (program counter) address for each instruction.; ///; /// The language syntax is:; ///; /// check = expr '=' expr; ///; /// expr = binary_expr; /// | sliceable_expr; ///; /// sliceable_expr = '*{' number '}' load_addr_expr [slice]; /// | '(' expr ')' [slice]; /// | ident_expr [slice]; /// | number [slice]; ///; /// slice = '[' high-bit-index ':' low-bit-index ']'; ///; /// load_addr_expr = symbol; /// | '(' symbol '+' number ')'; /// | '(' symbol '-' number ')'; ///; /// ident_expr = 'decode_operand' '(' symbol ',' operand-index ')'; /// | 'next_pc' '(' symbol ')'; /// | 'stub_addr' '(' stub-container-name ',' symbol ')'; /// | 'got_addr' '(' stub-container-name ',' symbol ')'; /// | 'section_addr' '(' stub-container-name ',' symbol ')'; /// | symbol; ///; /// binary_expr = expr '+' expr; /// | expr '-' expr; /// | expr '&' expr; /// | expr '|' expr; /// | expr '<<' expr; /// | expr '>>' expr; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h:392,Integrability,integrat,integration,392,"/// RuntimeDyld invariant checker for verifying that RuntimeDyld has; /// correctly applied relocations.; ///; /// The RuntimeDyldChecker class evaluates expressions against an attached; /// RuntimeDyld instance to verify that relocations have been applied; /// correctly.; ///; /// The expression language supports basic pointer arithmetic and bit-masking,; /// and has limited disassembler integration for accessing instruction; /// operands and the next PC (program counter) address for each instruction.; ///; /// The language syntax is:; ///; /// check = expr '=' expr; ///; /// expr = binary_expr; /// | sliceable_expr; ///; /// sliceable_expr = '*{' number '}' load_addr_expr [slice]; /// | '(' expr ')' [slice]; /// | ident_expr [slice]; /// | number [slice]; ///; /// slice = '[' high-bit-index ':' low-bit-index ']'; ///; /// load_addr_expr = symbol; /// | '(' symbol '+' number ')'; /// | '(' symbol '-' number ')'; ///; /// ident_expr = 'decode_operand' '(' symbol ',' operand-index ')'; /// | 'next_pc' '(' symbol ')'; /// | 'stub_addr' '(' stub-container-name ',' symbol ')'; /// | 'got_addr' '(' stub-container-name ',' symbol ')'; /// | 'section_addr' '(' stub-container-name ',' symbol ')'; /// | symbol; ///; /// binary_expr = expr '+' expr; /// | expr '-' expr; /// | expr '&' expr; /// | expr '|' expr; /// | expr '<<' expr; /// | expr '>>' expr; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h:408,Security,access,accessing,408,"/// RuntimeDyld invariant checker for verifying that RuntimeDyld has; /// correctly applied relocations.; ///; /// The RuntimeDyldChecker class evaluates expressions against an attached; /// RuntimeDyld instance to verify that relocations have been applied; /// correctly.; ///; /// The expression language supports basic pointer arithmetic and bit-masking,; /// and has limited disassembler integration for accessing instruction; /// operands and the next PC (program counter) address for each instruction.; ///; /// The language syntax is:; ///; /// check = expr '=' expr; ///; /// expr = binary_expr; /// | sliceable_expr; ///; /// sliceable_expr = '*{' number '}' load_addr_expr [slice]; /// | '(' expr ')' [slice]; /// | ident_expr [slice]; /// | number [slice]; ///; /// slice = '[' high-bit-index ':' low-bit-index ']'; ///; /// load_addr_expr = symbol; /// | '(' symbol '+' number ')'; /// | '(' symbol '-' number ')'; ///; /// ident_expr = 'decode_operand' '(' symbol ',' operand-index ')'; /// | 'next_pc' '(' symbol ')'; /// | 'stub_addr' '(' stub-container-name ',' symbol ')'; /// | 'got_addr' '(' stub-container-name ',' symbol ')'; /// | 'section_addr' '(' stub-container-name ',' symbol ')'; /// | symbol; ///; /// binary_expr = expr '+' expr; /// | expr '-' expr; /// | expr '&' expr; /// | expr '|' expr; /// | expr '<<' expr; /// | expr '>>' expr; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h:1054,Testability,stub,stub-container-name,1054,"/// RuntimeDyld invariant checker for verifying that RuntimeDyld has; /// correctly applied relocations.; ///; /// The RuntimeDyldChecker class evaluates expressions against an attached; /// RuntimeDyld instance to verify that relocations have been applied; /// correctly.; ///; /// The expression language supports basic pointer arithmetic and bit-masking,; /// and has limited disassembler integration for accessing instruction; /// operands and the next PC (program counter) address for each instruction.; ///; /// The language syntax is:; ///; /// check = expr '=' expr; ///; /// expr = binary_expr; /// | sliceable_expr; ///; /// sliceable_expr = '*{' number '}' load_addr_expr [slice]; /// | '(' expr ')' [slice]; /// | ident_expr [slice]; /// | number [slice]; ///; /// slice = '[' high-bit-index ':' low-bit-index ']'; ///; /// load_addr_expr = symbol; /// | '(' symbol '+' number ')'; /// | '(' symbol '-' number ')'; ///; /// ident_expr = 'decode_operand' '(' symbol ',' operand-index ')'; /// | 'next_pc' '(' symbol ')'; /// | 'stub_addr' '(' stub-container-name ',' symbol ')'; /// | 'got_addr' '(' stub-container-name ',' symbol ')'; /// | 'section_addr' '(' stub-container-name ',' symbol ')'; /// | symbol; ///; /// binary_expr = expr '+' expr; /// | expr '-' expr; /// | expr '&' expr; /// | expr '|' expr; /// | expr '<<' expr; /// | expr '>>' expr; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h:1111,Testability,stub,stub-container-name,1111,"/// RuntimeDyld invariant checker for verifying that RuntimeDyld has; /// correctly applied relocations.; ///; /// The RuntimeDyldChecker class evaluates expressions against an attached; /// RuntimeDyld instance to verify that relocations have been applied; /// correctly.; ///; /// The expression language supports basic pointer arithmetic and bit-masking,; /// and has limited disassembler integration for accessing instruction; /// operands and the next PC (program counter) address for each instruction.; ///; /// The language syntax is:; ///; /// check = expr '=' expr; ///; /// expr = binary_expr; /// | sliceable_expr; ///; /// sliceable_expr = '*{' number '}' load_addr_expr [slice]; /// | '(' expr ')' [slice]; /// | ident_expr [slice]; /// | number [slice]; ///; /// slice = '[' high-bit-index ':' low-bit-index ']'; ///; /// load_addr_expr = symbol; /// | '(' symbol '+' number ')'; /// | '(' symbol '-' number ')'; ///; /// ident_expr = 'decode_operand' '(' symbol ',' operand-index ')'; /// | 'next_pc' '(' symbol ')'; /// | 'stub_addr' '(' stub-container-name ',' symbol ')'; /// | 'got_addr' '(' stub-container-name ',' symbol ')'; /// | 'section_addr' '(' stub-container-name ',' symbol ')'; /// | symbol; ///; /// binary_expr = expr '+' expr; /// | expr '-' expr; /// | expr '&' expr; /// | expr '|' expr; /// | expr '<<' expr; /// | expr '>>' expr; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h:1172,Testability,stub,stub-container-name,1172,"/// RuntimeDyld invariant checker for verifying that RuntimeDyld has; /// correctly applied relocations.; ///; /// The RuntimeDyldChecker class evaluates expressions against an attached; /// RuntimeDyld instance to verify that relocations have been applied; /// correctly.; ///; /// The expression language supports basic pointer arithmetic and bit-masking,; /// and has limited disassembler integration for accessing instruction; /// operands and the next PC (program counter) address for each instruction.; ///; /// The language syntax is:; ///; /// check = expr '=' expr; ///; /// expr = binary_expr; /// | sliceable_expr; ///; /// sliceable_expr = '*{' number '}' load_addr_expr [slice]; /// | '(' expr ')' [slice]; /// | ident_expr [slice]; /// | number [slice]; ///; /// slice = '[' high-bit-index ':' low-bit-index ']'; ///; /// load_addr_expr = symbol; /// | '(' symbol '+' number ')'; /// | '(' symbol '-' number ')'; ///; /// ident_expr = 'decode_operand' '(' symbol ',' operand-index ')'; /// | 'next_pc' '(' symbol ')'; /// | 'stub_addr' '(' stub-container-name ',' symbol ')'; /// | 'got_addr' '(' stub-container-name ',' symbol ')'; /// | 'section_addr' '(' stub-container-name ',' symbol ')'; /// | symbol; ///; /// binary_expr = expr '+' expr; /// | expr '-' expr; /// | expr '&' expr; /// | expr '|' expr; /// | expr '<<' expr; /// | expr '>>' expr; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h:56,Availability,error,error,56,"/// Returns the address of the requested section (or an error message; /// in the second element of the pair if the address cannot be found).; ///; /// if 'LocalAddress' is true, this returns the address of the section; /// within the linker's memory. If 'LocalAddress' is false it returns the; /// address within the target process (i.e. the load address).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h:62,Integrability,message,message,62,"/// Returns the address of the requested section (or an error message; /// in the second element of the pair if the address cannot be found).; ///; /// if 'LocalAddress' is true, this returns the address of the section; /// within the linker's memory. If 'LocalAddress' is false it returns the; /// address within the target process (i.e. the load address).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h:343,Performance,load,load,343,"/// Returns the address of the requested section (or an error message; /// in the second element of the pair if the address cannot be found).; ///; /// if 'LocalAddress' is true, this returns the address of the section; /// within the linker's memory. If 'LocalAddress' is false it returns the; /// address within the target process (i.e. the load address).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h:65,Performance,load,load,65,"/// If there is a section at the given local address, return its load; /// address, otherwise return std::nullopt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:105,Energy Efficiency,allocate,allocate,105,"/// This is a simple memory manager which implements the methods called by; /// the RuntimeDyld class to allocate memory for section-based loading of; /// objects, usually those generated by the MCJIT execution engine.; ///; /// This memory manager allocates all section memory as read-write. The; /// RuntimeDyld will copy JITed section memory into these allocated blocks; /// and perform any necessary linking and relocations.; ///; /// Any client using this memory manager MUST ensure that section-specific; /// page permissions have been applied before attempting to execute functions; /// in the JITed object. Permissions can be applied either by calling; /// MCJIT::finalizeObject or by calling SectionMemoryManager::finalizeMemory; /// directly. Clients of MCJIT should call MCJIT::finalizeObject.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:249,Energy Efficiency,allocate,allocates,249,"/// This is a simple memory manager which implements the methods called by; /// the RuntimeDyld class to allocate memory for section-based loading of; /// objects, usually those generated by the MCJIT execution engine.; ///; /// This memory manager allocates all section memory as read-write. The; /// RuntimeDyld will copy JITed section memory into these allocated blocks; /// and perform any necessary linking and relocations.; ///; /// Any client using this memory manager MUST ensure that section-specific; /// page permissions have been applied before attempting to execute functions; /// in the JITed object. Permissions can be applied either by calling; /// MCJIT::finalizeObject or by calling SectionMemoryManager::finalizeMemory; /// directly. Clients of MCJIT should call MCJIT::finalizeObject.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:356,Energy Efficiency,allocate,allocated,356,"/// This is a simple memory manager which implements the methods called by; /// the RuntimeDyld class to allocate memory for section-based loading of; /// objects, usually those generated by the MCJIT execution engine.; ///; /// This memory manager allocates all section memory as read-write. The; /// RuntimeDyld will copy JITed section memory into these allocated blocks; /// and perform any necessary linking and relocations.; ///; /// Any client using this memory manager MUST ensure that section-specific; /// page permissions have been applied before attempting to execute functions; /// in the JITed object. Permissions can be applied either by calling; /// MCJIT::finalizeObject or by calling SectionMemoryManager::finalizeMemory; /// directly. Clients of MCJIT should call MCJIT::finalizeObject.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:139,Performance,load,loading,139,"/// This is a simple memory manager which implements the methods called by; /// the RuntimeDyld class to allocate memory for section-based loading of; /// objects, usually those generated by the MCJIT execution engine.; ///; /// This memory manager allocates all section memory as read-write. The; /// RuntimeDyld will copy JITed section memory into these allocated blocks; /// and perform any necessary linking and relocations.; ///; /// Any client using this memory manager MUST ensure that section-specific; /// page permissions have been applied before attempting to execute functions; /// in the JITed object. Permissions can be applied either by calling; /// MCJIT::finalizeObject or by calling SectionMemoryManager::finalizeMemory; /// directly. Clients of MCJIT should call MCJIT::finalizeObject.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:382,Performance,perform,perform,382,"/// This is a simple memory manager which implements the methods called by; /// the RuntimeDyld class to allocate memory for section-based loading of; /// objects, usually those generated by the MCJIT execution engine.; ///; /// This memory manager allocates all section memory as read-write. The; /// RuntimeDyld will copy JITed section memory into these allocated blocks; /// and perform any necessary linking and relocations.; ///; /// Any client using this memory manager MUST ensure that section-specific; /// page permissions have been applied before attempting to execute functions; /// in the JITed object. Permissions can be applied either by calling; /// MCJIT::finalizeObject or by calling SectionMemoryManager::finalizeMemory; /// directly. Clients of MCJIT should call MCJIT::finalizeObject.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:14,Usability,simpl,simple,14,"/// This is a simple memory manager which implements the methods called by; /// the RuntimeDyld class to allocate memory for section-based loading of; /// objects, usually those generated by the MCJIT execution engine.; ///; /// This memory manager allocates all section memory as read-write. The; /// RuntimeDyld will copy JITed section memory into these allocated blocks; /// and perform any necessary linking and relocations.; ///; /// Any client using this memory manager MUST ensure that section-specific; /// page permissions have been applied before attempting to execute functions; /// in the JITed object. Permissions can be applied either by calling; /// MCJIT::finalizeObject or by calling SectionMemoryManager::finalizeMemory; /// directly. Clients of MCJIT should call MCJIT::finalizeObject.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:47,Energy Efficiency,allocate,allocate,47,/// This enum describes the various reasons to allocate pages from; /// allocateMappedMemory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:72,Energy Efficiency,allocate,allocateMappedMemory,72,/// This enum describes the various reasons to allocate pages from; /// allocateMappedMemory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:28,Integrability,interface,interface,28,/// Implementations of this interface are used by SectionMemoryManager to; /// request pages from the operating system.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:454,Availability,error,error,454,"/// This method attempts to allocate \p NumBytes bytes of virtual memory for; /// \p Purpose. \p NearBlock may point to an existing allocation, in which; /// case an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address. \p Flags is used to set the initial protection flags for the; /// block of the memory. \p EC [out] returns an object describing any error; /// that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the system; /// allocation granularity (64K on Windows, page size on Linux). If the; /// address following \p NearBlock is not so aligned, it will be rounded up; /// to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful, otherwise a; /// null MemoryBlock with \p EC describing the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:1046,Availability,error,error,1046,"/// This method attempts to allocate \p NumBytes bytes of virtual memory for; /// \p Purpose. \p NearBlock may point to an existing allocation, in which; /// case an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address. \p Flags is used to set the initial protection flags for the; /// block of the memory. \p EC [out] returns an object describing any error; /// that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the system; /// allocation granularity (64K on Windows, page size on Linux). If the; /// address following \p NearBlock is not so aligned, it will be rounded up; /// to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful, otherwise a; /// null MemoryBlock with \p EC describing the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:28,Energy Efficiency,allocate,allocate,28,"/// This method attempts to allocate \p NumBytes bytes of virtual memory for; /// \p Purpose. \p NearBlock may point to an existing allocation, in which; /// case an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address. \p Flags is used to set the initial protection flags for the; /// block of the memory. \p EC [out] returns an object describing any error; /// that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the system; /// allocation granularity (64K on Windows, page size on Linux). If the; /// address following \p NearBlock is not so aligned, it will be rounded up; /// to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful, otherwise a; /// null MemoryBlock with \p EC describing the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:185,Energy Efficiency,allocate,allocate,185,"/// This method attempts to allocate \p NumBytes bytes of virtual memory for; /// \p Purpose. \p NearBlock may point to an existing allocation, in which; /// case an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address. \p Flags is used to set the initial protection flags for the; /// block of the memory. \p EC [out] returns an object describing any error; /// that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the system; /// allocation granularity (64K on Windows, page size on Linux). If the; /// address following \p NearBlock is not so aligned, it will be rounded up; /// to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful, otherwise a; /// null MemoryBlock with \p EC describing the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:247,Energy Efficiency,allocate,allocated,247,"/// This method attempts to allocate \p NumBytes bytes of virtual memory for; /// \p Purpose. \p NearBlock may point to an existing allocation, in which; /// case an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address. \p Flags is used to set the initial protection flags for the; /// block of the memory. \p EC [out] returns an object describing any error; /// that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the system; /// allocation granularity (64K on Windows, page size on Linux). If the; /// address following \p NearBlock is not so aligned, it will be rounded up; /// to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful, otherwise a; /// null MemoryBlock with \p EC describing the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:504,Energy Efficiency,allocate,allocate,504,"/// This method attempts to allocate \p NumBytes bytes of virtual memory for; /// \p Purpose. \p NearBlock may point to an existing allocation, in which; /// case an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address. \p Flags is used to set the initial protection flags for the; /// block of the memory. \p EC [out] returns an object describing any error; /// that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the system; /// allocation granularity (64K on Windows, page size on Linux). If the; /// address following \p NearBlock is not so aligned, it will be rounded up; /// to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful, otherwise a; /// null MemoryBlock with \p EC describing the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:586,Energy Efficiency,allocate,allocated,586,"/// This method attempts to allocate \p NumBytes bytes of virtual memory for; /// \p Purpose. \p NearBlock may point to an existing allocation, in which; /// case an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address. \p Flags is used to set the initial protection flags for the; /// block of the memory. \p EC [out] returns an object describing any error; /// that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the system; /// allocation granularity (64K on Windows, page size on Linux). If the; /// address following \p NearBlock is not so aligned, it will be rounded up; /// to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful, otherwise a; /// null MemoryBlock with \p EC describing the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:670,Energy Efficiency,allocate,allocated,670,"/// This method attempts to allocate \p NumBytes bytes of virtual memory for; /// \p Purpose. \p NearBlock may point to an existing allocation, in which; /// case an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address. \p Flags is used to set the initial protection flags for the; /// block of the memory. \p EC [out] returns an object describing any error; /// that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the system; /// allocation granularity (64K on Windows, page size on Linux). If the; /// address following \p NearBlock is not so aligned, it will be rounded up; /// to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful, otherwise a; /// null MemoryBlock with \p EC describing the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:653,Availability,failure,failure,653,"/// This method sets the protection flags for a block of memory to the state; /// specified by \p Flags. The behavior is not specified if the memory was; /// not allocated using the allocateMappedMemory method.; /// \p Block describes the memory block to be protected.; /// \p Flags specifies the new protection state to be assigned to the block.; ///; /// If \p Flags is MF_WRITE, the actual behavior varies with the operating; /// system (i.e. MF_READ | MF_WRITE on Windows) and the target architecture; /// (i.e. MF_WRITE -> MF_READ | MF_WRITE on i386).; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:667,Availability,error,error,667,"/// This method sets the protection flags for a block of memory to the state; /// specified by \p Flags. The behavior is not specified if the memory was; /// not allocated using the allocateMappedMemory method.; /// \p Block describes the memory block to be protected.; /// \p Flags specifies the new protection state to be assigned to the block.; ///; /// If \p Flags is MF_WRITE, the actual behavior varies with the operating; /// system (i.e. MF_READ | MF_WRITE on Windows) and the target architecture; /// (i.e. MF_WRITE -> MF_READ | MF_WRITE on i386).; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:162,Energy Efficiency,allocate,allocated,162,"/// This method sets the protection flags for a block of memory to the state; /// specified by \p Flags. The behavior is not specified if the memory was; /// not allocated using the allocateMappedMemory method.; /// \p Block describes the memory block to be protected.; /// \p Flags specifies the new protection state to be assigned to the block.; ///; /// If \p Flags is MF_WRITE, the actual behavior varies with the operating; /// system (i.e. MF_READ | MF_WRITE on Windows) and the target architecture; /// (i.e. MF_WRITE -> MF_READ | MF_WRITE on i386).; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:182,Energy Efficiency,allocate,allocateMappedMemory,182,"/// This method sets the protection flags for a block of memory to the state; /// specified by \p Flags. The behavior is not specified if the memory was; /// not allocated using the allocateMappedMemory method.; /// \p Block describes the memory block to be protected.; /// \p Flags specifies the new protection state to be assigned to the block.; ///; /// If \p Flags is MF_WRITE, the actual behavior varies with the operating; /// system (i.e. MF_READ | MF_WRITE on Windows) and the target architecture; /// (i.e. MF_WRITE -> MF_READ | MF_WRITE on i386).; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:332,Availability,failure,failure,332,"/// This method releases a block of memory that was allocated with the; /// allocateMappedMemory method. It should not be used to release any memory; /// block allocated any other way.; /// \p Block describes the memory to be released.; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:346,Availability,error,error,346,"/// This method releases a block of memory that was allocated with the; /// allocateMappedMemory method. It should not be used to release any memory; /// block allocated any other way.; /// \p Block describes the memory to be released.; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:16,Deployability,release,releases,16,"/// This method releases a block of memory that was allocated with the; /// allocateMappedMemory method. It should not be used to release any memory; /// block allocated any other way.; /// \p Block describes the memory to be released.; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:130,Deployability,release,release,130,"/// This method releases a block of memory that was allocated with the; /// allocateMappedMemory method. It should not be used to release any memory; /// block allocated any other way.; /// \p Block describes the memory to be released.; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:226,Deployability,release,released,226,"/// This method releases a block of memory that was allocated with the; /// allocateMappedMemory method. It should not be used to release any memory; /// block allocated any other way.; /// \p Block describes the memory to be released.; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:52,Energy Efficiency,allocate,allocated,52,"/// This method releases a block of memory that was allocated with the; /// allocateMappedMemory method. It should not be used to release any memory; /// block allocated any other way.; /// \p Block describes the memory to be released.; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:76,Energy Efficiency,allocate,allocateMappedMemory,76,"/// This method releases a block of memory that was allocated with the; /// allocateMappedMemory method. It should not be used to release any memory; /// block allocated any other way.; /// \p Block describes the memory to be released.; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:160,Energy Efficiency,allocate,allocated,160,"/// This method releases a block of memory that was allocated with the; /// allocateMappedMemory method. It should not be used to release any memory; /// block allocated any other way.; /// \p Block describes the memory to be released.; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:4,Energy Efficiency,Allocate,Allocates,4,/// Allocates a memory block of (at least) the given size suitable for; /// executable code.; ///; /// The value of \p Alignment must be a power of two. If \p Alignment is zero; /// a default alignment of 16 will be used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:139,Energy Efficiency,power,power,139,/// Allocates a memory block of (at least) the given size suitable for; /// executable code.; ///; /// The value of \p Alignment must be a power of two. If \p Alignment is zero; /// a default alignment of 16 will be used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:4,Energy Efficiency,Allocate,Allocates,4,/// Allocates a memory block of (at least) the given size suitable for; /// executable code.; ///; /// The value of \p Alignment must be a power of two. If \p Alignment is zero; /// a default alignment of 16 will be used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:139,Energy Efficiency,power,power,139,/// Allocates a memory block of (at least) the given size suitable for; /// executable code.; ///; /// The value of \p Alignment must be a power of two. If \p Alignment is zero; /// a default alignment of 16 will be used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:560,Availability,reliab,reliably,560,"/// Update section-specific memory permissions and other attributes.; ///; /// This method is called when object loading is complete and section page; /// permissions can be applied. It is up to the memory manager implementation; /// to decide whether or not to act on this method. The memory manager will; /// typically allocate all sections as read-write and then apply specific; /// permissions when this method is called. Code sections cannot be executed; /// until this function has been called. In addition, any cache coherency; /// operations needed to reliably use the memory are also performed.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:634,Availability,error,error,634,"/// Update section-specific memory permissions and other attributes.; ///; /// This method is called when object loading is complete and section page; /// permissions can be applied. It is up to the memory manager implementation; /// to decide whether or not to act on this method. The memory manager will; /// typically allocate all sections as read-write and then apply specific; /// permissions when this method is called. Code sections cannot be executed; /// until this function has been called. In addition, any cache coherency; /// operations needed to reliably use the memory are also performed.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:4,Deployability,Update,Update,4,"/// Update section-specific memory permissions and other attributes.; ///; /// This method is called when object loading is complete and section page; /// permissions can be applied. It is up to the memory manager implementation; /// to decide whether or not to act on this method. The memory manager will; /// typically allocate all sections as read-write and then apply specific; /// permissions when this method is called. Code sections cannot be executed; /// until this function has been called. In addition, any cache coherency; /// operations needed to reliably use the memory are also performed.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:321,Energy Efficiency,allocate,allocate,321,"/// Update section-specific memory permissions and other attributes.; ///; /// This method is called when object loading is complete and section page; /// permissions can be applied. It is up to the memory manager implementation; /// to decide whether or not to act on this method. The memory manager will; /// typically allocate all sections as read-write and then apply specific; /// permissions when this method is called. Code sections cannot be executed; /// until this function has been called. In addition, any cache coherency; /// operations needed to reliably use the memory are also performed.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:113,Performance,load,loading,113,"/// Update section-specific memory permissions and other attributes.; ///; /// This method is called when object loading is complete and section page; /// permissions can be applied. It is up to the memory manager implementation; /// to decide whether or not to act on this method. The memory manager will; /// typically allocate all sections as read-write and then apply specific; /// permissions when this method is called. Code sections cannot be executed; /// until this function has been called. In addition, any cache coherency; /// operations needed to reliably use the memory are also performed.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:518,Performance,cache,cache,518,"/// Update section-specific memory permissions and other attributes.; ///; /// This method is called when object loading is complete and section page; /// permissions can be applied. It is up to the memory manager implementation; /// to decide whether or not to act on this method. The memory manager will; /// typically allocate all sections as read-write and then apply specific; /// permissions when this method is called. Code sections cannot be executed; /// until this function has been called. In addition, any cache coherency; /// operations needed to reliably use the memory are also performed.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:593,Performance,perform,performed,593,"/// Update section-specific memory permissions and other attributes.; ///; /// This method is called when object loading is complete and section page; /// permissions can be applied. It is up to the memory manager implementation; /// to decide whether or not to act on this method. The memory manager will; /// typically allocate all sections as read-write and then apply specific; /// permissions when this method is called. Code sections cannot be executed; /// until this function has been called. In addition, any cache coherency; /// operations needed to reliably use the memory are also performed.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:27,Performance,cache,cache,27,"/// Invalidate instruction cache for code sections.; ///; /// Some platforms with separate data cache and instruction cache require; /// explicit cache flush, otherwise JIT code manipulations (like resolved; /// relocations) will get to the data cache but not to the instruction cache.; ///; /// This method is called from finalizeMemory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:96,Performance,cache,cache,96,"/// Invalidate instruction cache for code sections.; ///; /// Some platforms with separate data cache and instruction cache require; /// explicit cache flush, otherwise JIT code manipulations (like resolved; /// relocations) will get to the data cache but not to the instruction cache.; ///; /// This method is called from finalizeMemory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:118,Performance,cache,cache,118,"/// Invalidate instruction cache for code sections.; ///; /// Some platforms with separate data cache and instruction cache require; /// explicit cache flush, otherwise JIT code manipulations (like resolved; /// relocations) will get to the data cache but not to the instruction cache.; ///; /// This method is called from finalizeMemory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:146,Performance,cache,cache,146,"/// Invalidate instruction cache for code sections.; ///; /// Some platforms with separate data cache and instruction cache require; /// explicit cache flush, otherwise JIT code manipulations (like resolved; /// relocations) will get to the data cache but not to the instruction cache.; ///; /// This method is called from finalizeMemory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:246,Performance,cache,cache,246,"/// Invalidate instruction cache for code sections.; ///; /// Some platforms with separate data cache and instruction cache require; /// explicit cache flush, otherwise JIT code manipulations (like resolved; /// relocations) will get to the data cache but not to the instruction cache.; ///; /// This method is called from finalizeMemory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:279,Performance,cache,cache,279,"/// Invalidate instruction cache for code sections.; ///; /// Some platforms with separate data cache and instruction cache require; /// explicit cache flush, otherwise JIT code manipulations (like resolved; /// relocations) will get to the data cache but not to the instruction cache.; ///; /// This method is called from finalizeMemory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:137,Deployability,update,update,137,"// If there is a pending allocation from the same reservation right before; // this block, store it's index in PendingMem, to be able to update the; // pending region if part of this block is allocated, rather than having to; // create a new one",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:192,Energy Efficiency,allocate,allocated,192,"// If there is a pending allocation from the same reservation right before; // this block, store it's index in PendingMem, to be able to update the; // pending region if part of this block is allocated, rather than having to; // create a new one",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:58,Energy Efficiency,Allocate,AllocatedMem,58,"// PendingMem contains all blocks of memory (subblocks of AllocatedMem); // which have not yet had their permissions applied, but have been given; // out to the user. FreeMem contains all block of memory, which have; // neither had their permissions applied, nor been given out to the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:82,Deployability,patch,patch,82,/// Write immediate value for unconditional PC-relative branch with link.; /// We patch the instruction opcode to account for an instruction-set state; /// switch: we use the bl instruction to stay in ARM and the blx instruction; /// to switch to Thumb.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:169,Testability,stub,stub,169,"/// Write immediate value for conditional PC-relative branch without link.; /// If the branch target is not ARM, we are forced to generate an explicit; /// interworking stub.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:82,Deployability,patch,patch,82,/// Write immediate value for unconditional PC-relative branch with link.; /// We patch the instruction opcode to account for an instruction-set state; /// switch: we use the bl instruction to stay in Thumb and the blx instruction; /// to switch to ARM.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:213,Testability,stub,stub,213,"/// Write immediate value for PC-relative branch without link. The instruction; /// can be made conditional by an IT block. If the branch target is not ARM,; /// we are forced to generate an explicit interworking stub.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:177,Integrability,depend,depending,177,"/// AArch32 uses stubs for a number of purposes, like branch range extension; /// or interworking between Arm and Thumb instruction subsets.; ///; /// Stub implementations vary depending on CPU architecture (v4, v6, v7),; /// instruction subset and branch type (absolute/PC-relative).; ///; /// For each kind of stub, the StubsFlavor defines one concrete form that is; /// used throughout the LinkGraph.; ///; /// Stubs are often called ""veneers"" in the official docs and online.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:17,Testability,stub,stubs,17,"/// AArch32 uses stubs for a number of purposes, like branch range extension; /// or interworking between Arm and Thumb instruction subsets.; ///; /// Stub implementations vary depending on CPU architecture (v4, v6, v7),; /// instruction subset and branch type (absolute/PC-relative).; ///; /// For each kind of stub, the StubsFlavor defines one concrete form that is; /// used throughout the LinkGraph.; ///; /// Stubs are often called ""veneers"" in the official docs and online.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:151,Testability,Stub,Stub,151,"/// AArch32 uses stubs for a number of purposes, like branch range extension; /// or interworking between Arm and Thumb instruction subsets.; ///; /// Stub implementations vary depending on CPU architecture (v4, v6, v7),; /// instruction subset and branch type (absolute/PC-relative).; ///; /// For each kind of stub, the StubsFlavor defines one concrete form that is; /// used throughout the LinkGraph.; ///; /// Stubs are often called ""veneers"" in the official docs and online.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:312,Testability,stub,stub,312,"/// AArch32 uses stubs for a number of purposes, like branch range extension; /// or interworking between Arm and Thumb instruction subsets.; ///; /// Stub implementations vary depending on CPU architecture (v4, v6, v7),; /// instruction subset and branch type (absolute/PC-relative).; ///; /// For each kind of stub, the StubsFlavor defines one concrete form that is; /// used throughout the LinkGraph.; ///; /// Stubs are often called ""veneers"" in the official docs and online.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:322,Testability,Stub,StubsFlavor,322,"/// AArch32 uses stubs for a number of purposes, like branch range extension; /// or interworking between Arm and Thumb instruction subsets.; ///; /// Stub implementations vary depending on CPU architecture (v4, v6, v7),; /// instruction subset and branch type (absolute/PC-relative).; ///; /// For each kind of stub, the StubsFlavor defines one concrete form that is; /// used throughout the LinkGraph.; ///; /// Stubs are often called ""veneers"" in the official docs and online.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:414,Testability,Stub,Stubs,414,"/// AArch32 uses stubs for a number of purposes, like branch range extension; /// or interworking between Arm and Thumb instruction subsets.; ///; /// Stub implementations vary depending on CPU architecture (v4, v6, v7),; /// instruction subset and branch type (absolute/PC-relative).; ///; /// For each kind of stub, the StubsFlavor defines one concrete form that is; /// used throughout the LinkGraph.; ///; /// Stubs are often called ""veneers"" in the official docs and online.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:21,Deployability,configurat,configuration,21,/// JITLink sub-arch configuration for Arm CPU models,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:21,Modifiability,config,configuration,21,/// JITLink sub-arch configuration for Arm CPU models,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:24,Deployability,configurat,configuration,24,/// Obtain the sub-arch configuration for a given Arm CPU model.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:24,Modifiability,config,configuration,24,/// Obtain the sub-arch configuration for a given Arm CPU model.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:190,Availability,Mask,Mask,190,"/// Collection of named constants per fixup kind; ///; /// Mandatory entries:; /// Opcode - Values of the op-code bits in the instruction, with; /// unaffected bits nulled; /// OpcodeMask - Mask with all bits set that encode the op-code; ///; /// Other common entries:; /// ImmMask - Mask with all bits set that encode the immediate value; /// RegMask - Mask with all bits set that encode the register; ///; /// Specializations can add further custom fields without restrictions.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:284,Availability,Mask,Mask,284,"/// Collection of named constants per fixup kind; ///; /// Mandatory entries:; /// Opcode - Values of the op-code bits in the instruction, with; /// unaffected bits nulled; /// OpcodeMask - Mask with all bits set that encode the op-code; ///; /// Other common entries:; /// ImmMask - Mask with all bits set that encode the immediate value; /// RegMask - Mask with all bits set that encode the register; ///; /// Specializations can add further custom fields without restrictions.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:354,Availability,Mask,Mask,354,"/// Collection of named constants per fixup kind; ///; /// Mandatory entries:; /// Opcode - Values of the op-code bits in the instruction, with; /// unaffected bits nulled; /// OpcodeMask - Mask with all bits set that encode the op-code; ///; /// Other common entries:; /// ImmMask - Mask with all bits set that encode the immediate value; /// RegMask - Mask with all bits set that encode the register; ///; /// Specializations can add further custom fields without restrictions.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:4,Testability,Stub,Stubs,4,/// Stubs builder emits non-position-independent Arm stubs for pre-v7 CPUs.; /// These architectures have no MovT/MovW instructions and don't support Thumb2.; /// BL is the only Thumb instruction that can generate stubs and they can always; /// be transformed into BLX.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:53,Testability,stub,stubs,53,/// Stubs builder emits non-position-independent Arm stubs for pre-v7 CPUs.; /// These architectures have no MovT/MovW instructions and don't support Thumb2.; /// BL is the only Thumb instruction that can generate stubs and they can always; /// be transformed into BLX.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:214,Testability,stub,stubs,214,/// Stubs builder emits non-position-independent Arm stubs for pre-v7 CPUs.; /// These architectures have no MovT/MovW instructions and don't support Thumb2.; /// BL is the only Thumb instruction that can generate stubs and they can always; /// be transformed into BLX.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:62,Testability,stub,stubs,62,/// Name of the object file section that will contain all our stubs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:8,Testability,stub,stub,8,"// Each stub uses a single block that can have 2 entryponts, one for Arm and; // one for Thumb",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:4,Testability,Stub,Stubs,4,/// Stubs builder for v7 emits non-position-independent Arm and Thumb stubs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:70,Testability,stub,stubs,70,/// Stubs builder for v7 emits non-position-independent Arm and Thumb stubs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:62,Testability,stub,stubs,62,/// Name of the object file section that will contain all our stubs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:122,Availability,Error,Errors,122,"/// A plain 32-bit pointer value relocation.; ///; /// Fixup expression:; /// Fixup <- Target + Addend : uint32; ///; /// Errors:; /// - The target must reside in the low 32-bits of the address space,; /// otherwise an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:232,Availability,error,error,232,"/// A plain 32-bit pointer value relocation.; ///; /// Fixup expression:; /// Fixup <- Target + Addend : uint32; ///; /// Errors:; /// - The target must reside in the low 32-bits of the address space,; /// otherwise an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:150,Availability,Error,Errors,150,"/// A 32-bit delta.; ///; /// Delta from the fixup to the target.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend : int64; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:255,Availability,error,error,255,"/// A 32-bit delta.; ///; /// Delta from the fixup to the target.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend : int64; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:164,Availability,Error,Errors,164,"/// A 32-bit negative delta.; ///; /// Delta from the target back to the fixup.; ///; /// Fixup expression:; /// Fixup <- Fixup - Target + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:269,Availability,error,error,269,"/// A 32-bit negative delta.; ///; /// Delta from the target back to the fixup.; ///; /// Fixup expression:; /// Fixup <- Fixup - Target + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:562,Availability,Error,Errors,562,/// A 26-bit PC-relative branch.; ///; /// Represents a PC-relative call or branch to a target within +/-128Mb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int26; ///; /// Notes:; /// The '26' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF and MachO relocations.; /// Since the low two bits must be zero (because of the 32-bit alignment of; /// the target) the operand is effectively a signed 28-bit number.; ///; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int26 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:685,Availability,error,error,685,/// A 26-bit PC-relative branch.; ///; /// Represents a PC-relative call or branch to a target within +/-128Mb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int26; ///; /// Notes:; /// The '26' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF and MachO relocations.; /// Since the low two bits must be zero (because of the 32-bit alignment of; /// the target) the operand is effectively a signed 28-bit number.; ///; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int26 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:805,Availability,error,error,805,/// A 26-bit PC-relative branch.; ///; /// Represents a PC-relative call or branch to a target within +/-128Mb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int26; ///; /// Notes:; /// The '26' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF and MachO relocations.; /// Since the low two bits must be zero (because of the 32-bit alignment of; /// the target) the operand is effectively a signed 28-bit number.; ///; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int26 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:560,Availability,Error,Errors,560,/// A 14-bit PC-relative test and branch.; ///; /// Represents a PC-relative test and branch to a target within +/-32Kb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int14; ///; /// Notes:; /// The '14' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF relocation.; /// Since the low two bits must be zero (because of the 32-bit alignment of; /// the target) the operand is effectively a signed 16-bit number.; ///; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int14 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:683,Availability,error,error,683,/// A 14-bit PC-relative test and branch.; ///; /// Represents a PC-relative test and branch to a target within +/-32Kb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int14; ///; /// Notes:; /// The '14' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF relocation.; /// Since the low two bits must be zero (because of the 32-bit alignment of; /// the target) the operand is effectively a signed 16-bit number.; ///; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int14 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:803,Availability,error,error,803,/// A 14-bit PC-relative test and branch.; ///; /// Represents a PC-relative test and branch to a target within +/-32Kb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int14; ///; /// Notes:; /// The '14' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF relocation.; /// Since the low two bits must be zero (because of the 32-bit alignment of; /// the target) the operand is effectively a signed 16-bit number.; ///; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int14 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:25,Testability,test,test,25,/// A 14-bit PC-relative test and branch.; ///; /// Represents a PC-relative test and branch to a target within +/-32Kb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int14; ///; /// Notes:; /// The '14' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF relocation.; /// Since the low two bits must be zero (because of the 32-bit alignment of; /// the target) the operand is effectively a signed 16-bit number.; ///; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int14 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:77,Testability,test,test,77,/// A 14-bit PC-relative test and branch.; ///; /// Represents a PC-relative test and branch to a target within +/-32Kb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int14; ///; /// Notes:; /// The '14' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF relocation.; /// Since the low two bits must be zero (because of the 32-bit alignment of; /// the target) the operand is effectively a signed 16-bit number.; ///; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int14 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:565,Availability,Error,Errors,565,/// A 19-bit PC-relative conditional branch.; ///; /// Represents a PC-relative conditional branch to a target within +/-1Mb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int19; ///; /// Notes:; /// The '19' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF relocation.; /// Since the low two bits must be zero (because of the 32-bit alignment of; /// the target) the operand is effectively a signed 21-bit number.; ///; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int19 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:688,Availability,error,error,688,/// A 19-bit PC-relative conditional branch.; ///; /// Represents a PC-relative conditional branch to a target within +/-1Mb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int19; ///; /// Notes:; /// The '19' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF relocation.; /// Since the low two bits must be zero (because of the 32-bit alignment of; /// the target) the operand is effectively a signed 21-bit number.; ///; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int19 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:808,Availability,error,error,808,/// A 19-bit PC-relative conditional branch.; ///; /// Represents a PC-relative conditional branch to a target within +/-1Mb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int19; ///; /// Notes:; /// The '19' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF relocation.; /// Since the low two bits must be zero (because of the 32-bit alignment of; /// the target) the operand is effectively a signed 21-bit number.; ///; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int19 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:54,Integrability,depend,depends,54,/// A 16-bit slice of the target address (which slice depends on the; /// instruction at the fixup location).; ///; /// Used to fix up MOVK/MOVN/MOVZ instructions.; ///; /// Fixup expression:; ///; /// Fixup <- (Target + Addend) >> Shift : uint16; ///; /// where Shift is encoded in the instruction at the fixup location.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:265,Availability,Error,Errors,265,/// The signed 21-bit delta from the fixup to the target.; ///; /// Typically used to load a pointers at a PC-relative offset of +/- 1Mb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; ///; /// Fixup <- (Target - Fixup) >> 2 : int19; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int19 or an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:388,Availability,error,error,388,/// The signed 21-bit delta from the fixup to the target.; ///; /// Typically used to load a pointers at a PC-relative offset of +/- 1Mb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; ///; /// Fixup <- (Target - Fixup) >> 2 : int19; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int19 or an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:501,Availability,error,error,501,/// The signed 21-bit delta from the fixup to the target.; ///; /// Typically used to load a pointers at a PC-relative offset of +/- 1Mb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; ///; /// Fixup <- (Target - Fixup) >> 2 : int19; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int19 or an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:86,Performance,load,load,86,/// The signed 21-bit delta from the fixup to the target.; ///; /// Typically used to load a pointers at a PC-relative offset of +/- 1Mb. The; /// target must be 32-bit aligned.; ///; /// Fixup expression:; ///; /// Fixup <- (Target - Fixup) >> 2 : int19; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 32-bit aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int19 or an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:185,Availability,Error,Errors,185,/// The signed 21-bit delta from the fixup to the target.; ///; /// Fixup expression:; ///; /// Fixup <- Target - Fixup + Addend : int21; ///; /// Notes:; /// For ADR fixups.; ///; /// Errors:; /// - The result of the fixup expression must fit into an int21 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:289,Availability,error,error,289,/// The signed 21-bit delta from the fixup to the target.; ///; /// Fixup expression:; ///; /// Fixup <- Target - Fixup + Addend : int21; ///; /// Notes:; /// For ADR fixups.; ///; /// Errors:; /// - The result of the fixup expression must fit into an int21 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:248,Availability,Error,Errors,248,/// The signed 21-bit delta from the fixup page to the page containing the; /// target.; ///; /// Fixup expression:; ///; /// Fixup <- (((Target + Addend) & ~0xfff) - (Fixup & ~0xfff)) >> 12 : int21; ///; /// Notes:; /// For ADRP fixups.; ///; /// Errors:; /// - The result of the fixup expression must fit into an int21 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:352,Availability,error,error,352,/// The signed 21-bit delta from the fixup page to the page containing the; /// target.; ///; /// Fixup expression:; ///; /// Fixup <- (((Target + Addend) & ~0xfff) - (Fixup & ~0xfff)) >> 12 : int21; ///; /// Notes:; /// For ADRP fixups.; ///; /// Errors:; /// - The result of the fixup expression must fit into an int21 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:300,Availability,Error,Errors,300,/// The 12-bit (potentially shifted) offset of the target within its page.; ///; /// Typically used to fix up LDR immediates.; ///; /// Fixup expression:; ///; /// Fixup <- ((Target + Addend) >> Shift) & 0xfff : uint12; ///; /// where Shift is encoded in the size field of the instruction.; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into a uint12 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:416,Availability,error,error,416,/// The 12-bit (potentially shifted) offset of the target within its page.; ///; /// Typically used to fix up LDR immediates.; ///; /// Fixup expression:; ///; /// Fixup <- ((Target + Addend) >> Shift) & 0xfff : uint12; ///; /// where Shift is encoded in the size field of the instruction.; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into a uint12 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:536,Availability,error,error,536,/// The 12-bit (potentially shifted) offset of the target within its page.; ///; /// Typically used to fix up LDR immediates.; ///; /// Fixup expression:; ///; /// Fixup <- ((Target + Addend) >> Shift) & 0xfff : uint12; ///; /// where Shift is encoded in the size field of the instruction.; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into a uint12 otherwise an; /// out-of-range error will be returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:505,Availability,Error,Errors,505,"/// A GOT entry getter/constructor, transformed to Page21 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Page21 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:532,Availability,Failure,Failure,532,"/// A GOT entry getter/constructor, transformed to Page21 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Page21 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:521,Testability,ASSERT,ASSERTION,521,"/// A GOT entry getter/constructor, transformed to Page21 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Page21 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:617,Testability,assert,assert,617,"/// A GOT entry getter/constructor, transformed to Page21 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Page21 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:517,Availability,Error,Errors,517,"/// A GOT entry getter/constructor, transformed to Pageoffset12 pointing at; /// the GOT entry for the original target.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:544,Availability,Failure,Failure,544,"/// A GOT entry getter/constructor, transformed to Pageoffset12 pointing at; /// the GOT entry for the original target.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:533,Testability,ASSERT,ASSERTION,533,"/// A GOT entry getter/constructor, transformed to Pageoffset12 pointing at; /// the GOT entry for the original target.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:629,Testability,assert,assert,629,"/// A GOT entry getter/constructor, transformed to Pageoffset12 pointing at; /// the GOT entry for the original target.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:508,Availability,Error,Errors,508,"/// A GOT entry getter/constructor, transformed to Delta32 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32/ targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:535,Availability,Failure,Failure,535,"/// A GOT entry getter/constructor, transformed to Delta32 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32/ targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:524,Testability,ASSERT,ASSERTION,524,"/// A GOT entry getter/constructor, transformed to Delta32 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32/ targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:620,Testability,assert,assert,620,"/// A GOT entry getter/constructor, transformed to Delta32 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32/ targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:322,Availability,Error,Errors,322,"/// A TLVP entry getter/constructor, transformed to Page21.; ///; /// Indicates that this edge should be transformed into a Page21 targeting the; /// TLVP entry for the edge's current target. A TLVP entry for the target; /// should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:349,Availability,Failure,Failure,349,"/// A TLVP entry getter/constructor, transformed to Page21.; ///; /// Indicates that this edge should be transformed into a Page21 targeting the; /// TLVP entry for the edge's current target. A TLVP entry for the target; /// should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:338,Testability,ASSERT,ASSERTION,338,"/// A TLVP entry getter/constructor, transformed to Page21.; ///; /// Indicates that this edge should be transformed into a Page21 targeting the; /// TLVP entry for the edge's current target. A TLVP entry for the target; /// should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:434,Testability,assert,assert,434,"/// A TLVP entry getter/constructor, transformed to Page21.; ///; /// Indicates that this edge should be transformed into a Page21 targeting the; /// TLVP entry for the edge's current target. A TLVP entry for the target; /// should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:334,Availability,Error,Errors,334,"/// A TLVP entry getter/constructor, transformed to PageOffset12.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the TLVP entry for the edge's current target. A TLVP entry for; /// the target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:361,Availability,Failure,Failure,361,"/// A TLVP entry getter/constructor, transformed to PageOffset12.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the TLVP entry for the edge's current target. A TLVP entry for; /// the target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:350,Testability,ASSERT,ASSERTION,350,"/// A TLVP entry getter/constructor, transformed to PageOffset12.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the TLVP entry for the edge's current target. A TLVP entry for; /// the target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:446,Testability,assert,assert,446,"/// A TLVP entry getter/constructor, transformed to PageOffset12.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the TLVP entry for the edge's current target. A TLVP entry for; /// the target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:331,Availability,Error,Errors,331,"/// A TLSDesc entry getter/constructor, transformed to Page21.; ///; /// Indicates that this edge should be transformed into a Page21 targeting the; /// TLSDesc entry for the edge's current target. A TLSDesc entry for the; /// target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:358,Availability,Failure,Failure,358,"/// A TLSDesc entry getter/constructor, transformed to Page21.; ///; /// Indicates that this edge should be transformed into a Page21 targeting the; /// TLSDesc entry for the edge's current target. A TLSDesc entry for the; /// target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:347,Testability,ASSERT,ASSERTION,347,"/// A TLSDesc entry getter/constructor, transformed to Page21.; ///; /// Indicates that this edge should be transformed into a Page21 targeting the; /// TLSDesc entry for the edge's current target. A TLSDesc entry for the; /// target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:443,Testability,assert,assert,443,"/// A TLSDesc entry getter/constructor, transformed to Page21.; ///; /// Indicates that this edge should be transformed into a Page21 targeting the; /// TLSDesc entry for the edge's current target. A TLSDesc entry for the; /// target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:343,Availability,Error,Errors,343,"/// A TLSDesc entry getter/constructor, transformed to PageOffset12.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the TLSDesc entry for the edge's current target. A TLSDesc entry; /// for the target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:370,Availability,Failure,Failure,370,"/// A TLSDesc entry getter/constructor, transformed to PageOffset12.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the TLSDesc entry for the edge's current target. A TLSDesc entry; /// for the target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:359,Testability,ASSERT,ASSERTION,359,"/// A TLSDesc entry getter/constructor, transformed to PageOffset12.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the TLSDesc entry for the edge's current target. A TLSDesc entry; /// for the target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:455,Testability,assert,assert,455,"/// A TLSDesc entry getter/constructor, transformed to PageOffset12.; ///; /// Indicates that this edge should be transformed into a PageOffset12; /// targeting the TLSDesc entry for the edge's current target. A TLSDesc entry; /// for the target should be created if one does not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:25,Testability,stub,stub,25,"/// AArch64 pointer jump stub content.; ///; /// Contains the instruction sequence for an indirect jump via an in-memory; /// pointer:; /// ADRP x16, ptr@page21; /// LDR x16, [x16, ptr@pageoff12]; /// BR x16",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:18,Testability,stub,stub,18,/// Create a jump stub block that jumps via the pointer at the given symbol.; ///; /// The stub block will have the following default values:; /// alignment: 32-bit; /// alignment-offset: 0; /// address: highest allowable: (~11U),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:91,Testability,stub,stub,91,/// Create a jump stub block that jumps via the pointer at the given symbol.; ///; /// The stub block will have the following default values:; /// alignment: 32-bit; /// alignment-offset: 0; /// address: highest allowable: (~11U),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:18,Testability,stub,stub,18,/// Create a jump stub that jumps via the pointer at the given symbol and; /// an anonymous symbol pointing to it. Return the anonymous symbol.; ///; /// The stub block will be created by createPointerJumpStubBlock.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h:158,Testability,stub,stub,158,/// Create a jump stub that jumps via the pointer at the given symbol and; /// an anonymous symbol pointing to it. Return the anonymous symbol.; ///; /// The stub block will be created by createPointerJumpStubBlock.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/COFF.h:75,Testability,stub,stub,75,/// Link the given graph.; ///; /// Uses conservative defaults for GOT and stub handling based on the target; /// platform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/COFF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/COFF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF.h:75,Testability,stub,stub,75,/// Link the given graph.; ///; /// Uses conservative defaults for GOT and stub handling based on the target; /// platform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF_ppc64.h:307,Testability,test,tested,307,"/// Create a LinkGraph from an ELF/ppc64 relocatable object.; ///; /// Note: The graph does not take ownership of the underlying buffer, nor copy; /// its contents. The caller is responsible for ensuring that the object buffer; /// outlives the graph.; ///; /// WARNING: The big-endian backend has not been tested yet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF_ppc64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF_ppc64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF_ppc64.h:134,Testability,test,tested,134,"/// jit-link the given object buffer, which must be a ELF ppc64le object file.; ///; /// WARNING: The big-endian backend has not been tested yet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF_ppc64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF_ppc64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF_riscv.h:24,Performance,perform,performs,24,/// Returns a pass that performs linker relaxation. Should be added to; /// PostAllocationPasses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF_riscv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ELF_riscv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:122,Availability,Error,Errors,122,"/// A plain 32-bit pointer value relocation.; ///; /// Fixup expression:; /// Fixup <- Target + Addend : uint32; ///; /// Errors:; /// - The target must reside in the low 32-bits of the address space,; /// otherwise an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:232,Availability,error,error,232,"/// A plain 32-bit pointer value relocation.; ///; /// Fixup expression:; /// Fixup <- Target + Addend : uint32; ///; /// Errors:; /// - The target must reside in the low 32-bits of the address space,; /// otherwise an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:457,Availability,Error,Errors,457,"/// A 32-bit PC-relative relocation.; ///; /// Represents a data/control flow instruction using PC-relative addressing; /// to a target.; ///; /// The fixup expression for this kind includes an implicit offset to account; /// for the PC (unlike the Delta edges) so that a PCRel32 with a target; /// T and addend zero is a call/branch to the start (offset zero) of T.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:562,Availability,error,error,562,"/// A 32-bit PC-relative relocation.; ///; /// Represents a data/control flow instruction using PC-relative addressing; /// to a target.; ///; /// The fixup expression for this kind includes an implicit offset to account; /// for the PC (unlike the Delta edges) so that a PCRel32 with a target; /// T and addend zero is a call/branch to the start (offset zero) of T.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:122,Availability,Error,Errors,122,"/// A plain 16-bit pointer value relocation.; ///; /// Fixup expression:; /// Fixup <- Target + Addend : uint16; ///; /// Errors:; /// - The target must reside in the low 16-bits of the address space,; /// otherwise an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:232,Availability,error,error,232,"/// A plain 16-bit pointer value relocation.; ///; /// Fixup expression:; /// Fixup <- Target + Addend : uint16; ///; /// Errors:; /// - The target must reside in the low 16-bits of the address space,; /// otherwise an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:457,Availability,Error,Errors,457,"/// A 16-bit PC-relative relocation.; ///; /// Represents a data/control flow instruction using PC-relative addressing; /// to a target.; ///; /// The fixup expression for this kind includes an implicit offset to account; /// for the PC (unlike the Delta edges) so that a PCRel16 with a target; /// T and addend zero is a call/branch to the start (offset zero) of T.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int16; ///; /// Errors:; /// - The result of the fixup expression must fit into an int16, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:562,Availability,error,error,562,"/// A 16-bit PC-relative relocation.; ///; /// Represents a data/control flow instruction using PC-relative addressing; /// to a target.; ///; /// The fixup expression for this kind includes an implicit offset to account; /// for the PC (unlike the Delta edges) so that a PCRel16 with a target; /// T and addend zero is a call/branch to the start (offset zero) of T.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int16; ///; /// Errors:; /// - The result of the fixup expression must fit into an int16, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:150,Availability,Error,Errors,150,"/// A 32-bit delta.; ///; /// Delta from the fixup to the target.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend : int64; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:255,Availability,error,error,255,"/// A 32-bit delta.; ///; /// Delta from the fixup to the target.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend : int64; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:172,Availability,Error,Errors,172,"/// A 32-bit GOT delta.; ///; /// Delta from the global offset table to the target.; ///; /// Fixup expression:; /// Fixup <- Target - GOTSymbol + Addend : int32; ///; /// Errors:; /// - *ASSERTION* Failure to a null pointer GOTSymbol, which the GOT section; /// symbol was not been defined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:199,Availability,Failure,Failure,199,"/// A 32-bit GOT delta.; ///; /// Delta from the global offset table to the target.; ///; /// Fixup expression:; /// Fixup <- Target - GOTSymbol + Addend : int32; ///; /// Errors:; /// - *ASSERTION* Failure to a null pointer GOTSymbol, which the GOT section; /// symbol was not been defined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:188,Testability,ASSERT,ASSERTION,188,"/// A 32-bit GOT delta.; ///; /// Delta from the global offset table to the target.; ///; /// Fixup expression:; /// Fixup <- Target - GOTSymbol + Addend : int32; ///; /// Errors:; /// - *ASSERTION* Failure to a null pointer GOTSymbol, which the GOT section; /// symbol was not been defined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:543,Availability,Error,Errors,543,"/// A GOT entry offset within GOT getter/constructor, transformed to; /// Delta32FromGOT pointing at the GOT entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32FromGOT; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:570,Availability,Failure,Failure,570,"/// A GOT entry offset within GOT getter/constructor, transformed to; /// Delta32FromGOT pointing at the GOT entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32FromGOT; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:559,Testability,ASSERT,ASSERTION,559,"/// A GOT entry offset within GOT getter/constructor, transformed to; /// Delta32FromGOT pointing at the GOT entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32FromGOT; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:655,Testability,assert,assert,655,"/// A GOT entry offset within GOT getter/constructor, transformed to; /// Delta32FromGOT pointing at the GOT entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32FromGOT; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:490,Availability,Error,Errors,490,"/// A 32-bit PC-relative branch.; ///; /// Represents a PC-relative call or branch to a target. This can be used to; /// identify, record, and/or patch call sites.; ///; /// The fixup expression for this kind includes an implicit offset to account; /// for the PC (unlike the Delta edges) so that a Branch32PCRel with a target; /// T and addend zero is a call/branch to the start (offset zero) of T.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:595,Availability,error,error,595,"/// A 32-bit PC-relative branch.; ///; /// Represents a PC-relative call or branch to a target. This can be used to; /// identify, record, and/or patch call sites.; ///; /// The fixup expression for this kind includes an implicit offset to account; /// for the PC (unlike the Delta edges) so that a Branch32PCRel with a target; /// T and addend zero is a call/branch to the start (offset zero) of T.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:146,Deployability,patch,patch,146,"/// A 32-bit PC-relative branch.; ///; /// Represents a PC-relative call or branch to a target. This can be used to; /// identify, record, and/or patch call sites.; ///; /// The fixup expression for this kind includes an implicit offset to account; /// for the PC (unlike the Delta edges) so that a Branch32PCRel with a target; /// T and addend zero is a call/branch to the start (offset zero) of T.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:702,Availability,Error,Errors,702,"/// A 32-bit PC-relative branch to a pointer jump stub.; ///; /// The target of this relocation should be a pointer jump stub of the form:; ///; /// \code{.s}; /// .text; /// jmp *tgtptr; /// ; ...; ///; /// .data; /// tgtptr:; /// .quad 0; /// \endcode; ///; /// This edge kind has the same fixup expression as BranchPCRel32, but further; /// identifies the call/branch as being to a pointer jump stub. For edges of; /// this kind the jump stub should not be bypassed (use; /// BranchPCRel32ToPtrJumpStubBypassable for that), but the pointer location; /// target may be recorded to allow manipulation at runtime.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4 : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:807,Availability,error,error,807,"/// A 32-bit PC-relative branch to a pointer jump stub.; ///; /// The target of this relocation should be a pointer jump stub of the form:; ///; /// \code{.s}; /// .text; /// jmp *tgtptr; /// ; ...; ///; /// .data; /// tgtptr:; /// .quad 0; /// \endcode; ///; /// This edge kind has the same fixup expression as BranchPCRel32, but further; /// identifies the call/branch as being to a pointer jump stub. For edges of; /// this kind the jump stub should not be bypassed (use; /// BranchPCRel32ToPtrJumpStubBypassable for that), but the pointer location; /// target may be recorded to allow manipulation at runtime.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4 : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:50,Testability,stub,stub,50,"/// A 32-bit PC-relative branch to a pointer jump stub.; ///; /// The target of this relocation should be a pointer jump stub of the form:; ///; /// \code{.s}; /// .text; /// jmp *tgtptr; /// ; ...; ///; /// .data; /// tgtptr:; /// .quad 0; /// \endcode; ///; /// This edge kind has the same fixup expression as BranchPCRel32, but further; /// identifies the call/branch as being to a pointer jump stub. For edges of; /// this kind the jump stub should not be bypassed (use; /// BranchPCRel32ToPtrJumpStubBypassable for that), but the pointer location; /// target may be recorded to allow manipulation at runtime.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4 : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:121,Testability,stub,stub,121,"/// A 32-bit PC-relative branch to a pointer jump stub.; ///; /// The target of this relocation should be a pointer jump stub of the form:; ///; /// \code{.s}; /// .text; /// jmp *tgtptr; /// ; ...; ///; /// .data; /// tgtptr:; /// .quad 0; /// \endcode; ///; /// This edge kind has the same fixup expression as BranchPCRel32, but further; /// identifies the call/branch as being to a pointer jump stub. For edges of; /// this kind the jump stub should not be bypassed (use; /// BranchPCRel32ToPtrJumpStubBypassable for that), but the pointer location; /// target may be recorded to allow manipulation at runtime.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4 : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:398,Testability,stub,stub,398,"/// A 32-bit PC-relative branch to a pointer jump stub.; ///; /// The target of this relocation should be a pointer jump stub of the form:; ///; /// \code{.s}; /// .text; /// jmp *tgtptr; /// ; ...; ///; /// .data; /// tgtptr:; /// .quad 0; /// \endcode; ///; /// This edge kind has the same fixup expression as BranchPCRel32, but further; /// identifies the call/branch as being to a pointer jump stub. For edges of; /// this kind the jump stub should not be bypassed (use; /// BranchPCRel32ToPtrJumpStubBypassable for that), but the pointer location; /// target may be recorded to allow manipulation at runtime.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4 : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:441,Testability,stub,stub,441,"/// A 32-bit PC-relative branch to a pointer jump stub.; ///; /// The target of this relocation should be a pointer jump stub of the form:; ///; /// \code{.s}; /// .text; /// jmp *tgtptr; /// ; ...; ///; /// .data; /// tgtptr:; /// .quad 0; /// \endcode; ///; /// This edge kind has the same fixup expression as BranchPCRel32, but further; /// identifies the call/branch as being to a pointer jump stub. For edges of; /// this kind the jump stub should not be bypassed (use; /// BranchPCRel32ToPtrJumpStubBypassable for that), but the pointer location; /// target may be recorded to allow manipulation at runtime.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4 : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:430,Availability,Error,Errors,430,"/// A relaxable version of BranchPCRel32ToPtrJumpStub.; ///; /// The edge kind has the same fixup expression as BranchPCRel32ToPtrJumpStub,; /// but identifies the call/branch as being to a pointer jump stub that may be; /// bypassed with a direct jump to the ultimate target if the ultimate target; /// is within range of the fixup location.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4: int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:535,Availability,error,error,535,"/// A relaxable version of BranchPCRel32ToPtrJumpStub.; ///; /// The edge kind has the same fixup expression as BranchPCRel32ToPtrJumpStub,; /// but identifies the call/branch as being to a pointer jump stub that may be; /// bypassed with a direct jump to the ultimate target if the ultimate target; /// is within range of the fixup location.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4: int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:203,Testability,stub,stub,203,"/// A relaxable version of BranchPCRel32ToPtrJumpStub.; ///; /// The edge kind has the same fixup expression as BranchPCRel32ToPtrJumpStub,; /// but identifies the call/branch as being to a pointer jump stub that may be; /// bypassed with a direct jump to the ultimate target if the ultimate target; /// is within range of the fixup location.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4: int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:22,Testability,stub,stub,22,/// i386 pointer jump stub content.; ///; /// Contains the instruction sequence for an indirect jump via an in-memory; /// pointer:; /// jmpq *ptr,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:18,Testability,stub,stub,18,/// Create a jump stub block that jumps via the pointer at the given symbol.; ///; /// The stub block will have the following default values:; /// alignment: 8-bit; /// alignment-offset: 0; /// address: highest allowable: (~5U),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:91,Testability,stub,stub,91,/// Create a jump stub block that jumps via the pointer at the given symbol.; ///; /// The stub block will have the following default values:; /// alignment: 8-bit; /// alignment-offset: 0; /// address: highest allowable: (~5U),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:61,Testability,stub,stub,61,"// Offset is 2 because the the first 2 bytes of the; // jump stub block are {0xff, 0x25} -- an indirect absolute; // jump.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:18,Testability,stub,stub,18,/// Create a jump stub that jumps via the pointer at the given symbol and; /// an anonymous symbol pointing to it. Return the anonymous symbol.; ///; /// The stub block will be created by createPointerJumpStubBlock.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:158,Testability,stub,stub,158,/// Create a jump stub that jumps via the pointer at the given symbol and; /// an anonymous symbol pointing to it. Return the anonymous symbol.; ///; /// The stub block will be created by createPointerJumpStubBlock.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:79,Performance,optimiz,optimized,79,// Set the edge kind to Branch32ToPtrJumpStubBypassable to enable it to; // be optimized when the target is in-range.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:4,Performance,Optimiz,Optimize,4,"/// Optimize the GOT and Stub relocations if the edge target address is in range; /// 1. PCRel32GOTLoadRelaxable. For this edge kind, if the target is in range,; /// then replace GOT load with lea. (THIS IS UNIMPLEMENTED RIGHT NOW!); /// 2. BranchPCRel32ToPtrJumpStubRelaxable. For this edge kind, if the target is; /// in range, replace a indirect jump by plt stub with a direct jump to the; /// target",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:183,Performance,load,load,183,"/// Optimize the GOT and Stub relocations if the edge target address is in range; /// 1. PCRel32GOTLoadRelaxable. For this edge kind, if the target is in range,; /// then replace GOT load with lea. (THIS IS UNIMPLEMENTED RIGHT NOW!); /// 2. BranchPCRel32ToPtrJumpStubRelaxable. For this edge kind, if the target is; /// in range, replace a indirect jump by plt stub with a direct jump to the; /// target",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:25,Testability,Stub,Stub,25,"/// Optimize the GOT and Stub relocations if the edge target address is in range; /// 1. PCRel32GOTLoadRelaxable. For this edge kind, if the target is in range,; /// then replace GOT load with lea. (THIS IS UNIMPLEMENTED RIGHT NOW!); /// 2. BranchPCRel32ToPtrJumpStubRelaxable. For this edge kind, if the target is; /// in range, replace a indirect jump by plt stub with a direct jump to the; /// target",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:361,Testability,stub,stub,361,"/// Optimize the GOT and Stub relocations if the edge target address is in range; /// 1. PCRel32GOTLoadRelaxable. For this edge kind, if the target is in range,; /// then replace GOT load with lea. (THIS IS UNIMPLEMENTED RIGHT NOW!); /// 2. BranchPCRel32ToPtrJumpStubRelaxable. For this edge kind, if the target is; /// in range, replace a indirect jump by plt stub with a direct jump to the; /// target",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:19,Availability,error,errors,19,"/// Base class for errors originating in JIT linker, e.g. missing relocation; /// support.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:16,Availability,alive,alive,16,// Keeps target alive. Offset/addend zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:78,Availability,down,downcast,78,"/// Returns true if this is a defined addressable, in which case you; /// can downcast this to a Block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:24,Energy Efficiency,allocate,allocated,24,"// bitfields for Block, allocated here to improve packing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:248,Energy Efficiency,allocate,allocate,248,"/// Create a defined addressable for the given content.; /// The content is assumed to be writable, and the caller is responsible; /// for ensuring that it lives for the duration of the Block's lifetime.; /// The standard way to achieve this is to allocate it on the Graph's; /// allocator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:186,Energy Efficiency,allocate,allocated,186,"/// Get mutable content for this block.; ///; /// If this Block's content is not already mutable this will trigger a copy; /// of the existing immutable content to a new, mutable buffer allocated using; /// LinkGraph::allocateContent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:218,Energy Efficiency,allocate,allocateContent,218,"/// Get mutable content for this block.; ///; /// If this Block's content is not already mutable this will trigger a copy; /// of the existing immutable content to a new, mutable buffer allocated using; /// LinkGraph::allocateContent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:117,Availability,error,error,117,/// Get mutable content for this block.; ///; /// This block's content must already be mutable. It is a programmatic error; /// to call this on a block with immutable content -- consider using; /// getMutableContent instead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:92,Testability,assert,asserting,92,/// Returns true if this block's content is mutable.; ///; /// This is primarily useful for asserting that a block is already in a; /// mutable state prior to modifying the content. E.g. when applying; /// fixups we expect the block to already be mutable as it should have been; /// copied to working memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:8,Availability,error,errors,8,/// For errors and debugging output.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:100,Integrability,interface,interface,100,"/// Defines the scope in which this symbol should be visible:; /// Default -- Visible in the public interface of the linkage unit.; /// Hidden -- Visible within the linkage unit, but not exported from it.; /// Local -- Visible only within the LinkGraph.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate a mutable buffer of the given size using the LinkGraph's; /// allocator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate a copy of the given string using the LinkGraph's allocator.; /// This can be useful when renaming symbols or adding new content to the; /// graph.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate a copy of the given string using the LinkGraph's allocator.; /// This can be useful when renaming symbols or adding new content to the; /// graph.; ///; /// Note: This Twine-based overload requires an extra string copy and an; /// extra heap allocation for large strings. The ArrayRef<char> overload; /// should be preferred where possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:4,Energy Efficiency,Allocate,Allocate,4,"/// Allocate a copy of the given string using the LinkGraph's allocator.; ///; /// The allocated string will be terminated with a null character, and the; /// returned MutableArrayRef will include this null character in the last; /// position.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:87,Energy Efficiency,allocate,allocated,87,"/// Allocate a copy of the given string using the LinkGraph's allocator.; ///; /// The allocated string will be terminated with a null character, and the; /// returned MutableArrayRef will include this null character in the last; /// position.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:4,Energy Efficiency,Allocate,Allocate,4,"/// Allocate a copy of the given string using the LinkGraph's allocator.; ///; /// The allocated string will be terminated with a null character, and the; /// returned MutableArrayRef will include this null character in the last; /// position.; ///; /// Note: This Twine-based overload requires an extra string copy and an; /// extra heap allocation for large strings. The ArrayRef<char> overload; /// should be preferred where possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:87,Energy Efficiency,allocate,allocated,87,"/// Allocate a copy of the given string using the LinkGraph's allocator.; ///; /// The allocated string will be terminated with a null character, and the; /// returned MutableArrayRef will include this null character in the last; /// position.; ///; /// Note: This Twine-based overload requires an extra string copy and an; /// extra heap allocation for large strings. The ArrayRef<char> overload; /// should be preferred where possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:95,Energy Efficiency,allocate,allocated,95,/// Create a content block with initially mutable data of the given size.; /// Content will be allocated via the LinkGraph's allocateBuffer method.; /// By default the memory will be zero-initialized. Passing false for; /// ZeroInitialize will prevent this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:125,Energy Efficiency,allocate,allocateBuffer,125,/// Create a content block with initially mutable data of the given size.; /// Content will be allocated via the LinkGraph's allocateBuffer method.; /// By default the memory will be zero-initialized. Passing false for; /// ZeroInitialize will prevent this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:4,Performance,Cache,Cache,4,/// Cache type for the splitBlock function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:1534,Deployability,update,updated,1534,"/// Splits block B at the given index which must be greater than zero.; /// If SplitIndex == B.getSize() then this function is a no-op and returns B.; /// If SplitIndex < B.getSize() then this function returns a new block; /// covering the range [ 0, SplitIndex ), and B is modified to cover the range; /// [ SplitIndex, B.size() ).; ///; /// The optional Cache parameter can be used to speed up repeated calls to; /// splitBlock for a single block. If the value is None the cache will be; /// treated as uninitialized and splitBlock will populate it. Otherwise it; /// is assumed to contain the list of Symbols pointing at B, sorted in; /// descending order of offset.; ///; /// Notes:; ///; /// 1. splitBlock must be used with care. Splitting a block may cause; /// incoming edges to become invalid if the edge target subexpression; /// points outside the bounds of the newly split target block (E.g. an; /// edge 'S + 10 : Pointer64' where S points to a newly split block; /// whose size is less than 10). No attempt is made to detect invalidation; /// of incoming edges, as in general this requires context that the; /// LinkGraph does not have. Clients are responsible for ensuring that; /// splitBlock is not used in a way that invalidates edges.; ///; /// 2. The newly introduced block will have a new ordinal which will be; /// higher than any other ordinals in the section. Clients are responsible; /// for re-assigning block ordinals to restore a compatible order if; /// needed.; ///; /// 3. The cache is not automatically updated if new symbols are introduced; /// between calls to splitBlock. Any newly introduced symbols may be; /// added to the cache manually (descending offset order must be; /// preserved), or the cache can be set to None and rebuilt by; /// splitBlock on the next call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:356,Performance,Cache,Cache,356,"/// Splits block B at the given index which must be greater than zero.; /// If SplitIndex == B.getSize() then this function is a no-op and returns B.; /// If SplitIndex < B.getSize() then this function returns a new block; /// covering the range [ 0, SplitIndex ), and B is modified to cover the range; /// [ SplitIndex, B.size() ).; ///; /// The optional Cache parameter can be used to speed up repeated calls to; /// splitBlock for a single block. If the value is None the cache will be; /// treated as uninitialized and splitBlock will populate it. Otherwise it; /// is assumed to contain the list of Symbols pointing at B, sorted in; /// descending order of offset.; ///; /// Notes:; ///; /// 1. splitBlock must be used with care. Splitting a block may cause; /// incoming edges to become invalid if the edge target subexpression; /// points outside the bounds of the newly split target block (E.g. an; /// edge 'S + 10 : Pointer64' where S points to a newly split block; /// whose size is less than 10). No attempt is made to detect invalidation; /// of incoming edges, as in general this requires context that the; /// LinkGraph does not have. Clients are responsible for ensuring that; /// splitBlock is not used in a way that invalidates edges.; ///; /// 2. The newly introduced block will have a new ordinal which will be; /// higher than any other ordinals in the section. Clients are responsible; /// for re-assigning block ordinals to restore a compatible order if; /// needed.; ///; /// 3. The cache is not automatically updated if new symbols are introduced; /// between calls to splitBlock. Any newly introduced symbols may be; /// added to the cache manually (descending offset order must be; /// preserved), or the cache can be set to None and rebuilt by; /// splitBlock on the next call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:475,Performance,cache,cache,475,"/// Splits block B at the given index which must be greater than zero.; /// If SplitIndex == B.getSize() then this function is a no-op and returns B.; /// If SplitIndex < B.getSize() then this function returns a new block; /// covering the range [ 0, SplitIndex ), and B is modified to cover the range; /// [ SplitIndex, B.size() ).; ///; /// The optional Cache parameter can be used to speed up repeated calls to; /// splitBlock for a single block. If the value is None the cache will be; /// treated as uninitialized and splitBlock will populate it. Otherwise it; /// is assumed to contain the list of Symbols pointing at B, sorted in; /// descending order of offset.; ///; /// Notes:; ///; /// 1. splitBlock must be used with care. Splitting a block may cause; /// incoming edges to become invalid if the edge target subexpression; /// points outside the bounds of the newly split target block (E.g. an; /// edge 'S + 10 : Pointer64' where S points to a newly split block; /// whose size is less than 10). No attempt is made to detect invalidation; /// of incoming edges, as in general this requires context that the; /// LinkGraph does not have. Clients are responsible for ensuring that; /// splitBlock is not used in a way that invalidates edges.; ///; /// 2. The newly introduced block will have a new ordinal which will be; /// higher than any other ordinals in the section. Clients are responsible; /// for re-assigning block ordinals to restore a compatible order if; /// needed.; ///; /// 3. The cache is not automatically updated if new symbols are introduced; /// between calls to splitBlock. Any newly introduced symbols may be; /// added to the cache manually (descending offset order must be; /// preserved), or the cache can be set to None and rebuilt by; /// splitBlock on the next call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:1507,Performance,cache,cache,1507,"/// Splits block B at the given index which must be greater than zero.; /// If SplitIndex == B.getSize() then this function is a no-op and returns B.; /// If SplitIndex < B.getSize() then this function returns a new block; /// covering the range [ 0, SplitIndex ), and B is modified to cover the range; /// [ SplitIndex, B.size() ).; ///; /// The optional Cache parameter can be used to speed up repeated calls to; /// splitBlock for a single block. If the value is None the cache will be; /// treated as uninitialized and splitBlock will populate it. Otherwise it; /// is assumed to contain the list of Symbols pointing at B, sorted in; /// descending order of offset.; ///; /// Notes:; ///; /// 1. splitBlock must be used with care. Splitting a block may cause; /// incoming edges to become invalid if the edge target subexpression; /// points outside the bounds of the newly split target block (E.g. an; /// edge 'S + 10 : Pointer64' where S points to a newly split block; /// whose size is less than 10). No attempt is made to detect invalidation; /// of incoming edges, as in general this requires context that the; /// LinkGraph does not have. Clients are responsible for ensuring that; /// splitBlock is not used in a way that invalidates edges.; ///; /// 2. The newly introduced block will have a new ordinal which will be; /// higher than any other ordinals in the section. Clients are responsible; /// for re-assigning block ordinals to restore a compatible order if; /// needed.; ///; /// 3. The cache is not automatically updated if new symbols are introduced; /// between calls to splitBlock. Any newly introduced symbols may be; /// added to the cache manually (descending offset order must be; /// preserved), or the cache can be set to None and rebuilt by; /// splitBlock on the next call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:1660,Performance,cache,cache,1660,"/// Splits block B at the given index which must be greater than zero.; /// If SplitIndex == B.getSize() then this function is a no-op and returns B.; /// If SplitIndex < B.getSize() then this function returns a new block; /// covering the range [ 0, SplitIndex ), and B is modified to cover the range; /// [ SplitIndex, B.size() ).; ///; /// The optional Cache parameter can be used to speed up repeated calls to; /// splitBlock for a single block. If the value is None the cache will be; /// treated as uninitialized and splitBlock will populate it. Otherwise it; /// is assumed to contain the list of Symbols pointing at B, sorted in; /// descending order of offset.; ///; /// Notes:; ///; /// 1. splitBlock must be used with care. Splitting a block may cause; /// incoming edges to become invalid if the edge target subexpression; /// points outside the bounds of the newly split target block (E.g. an; /// edge 'S + 10 : Pointer64' where S points to a newly split block; /// whose size is less than 10). No attempt is made to detect invalidation; /// of incoming edges, as in general this requires context that the; /// LinkGraph does not have. Clients are responsible for ensuring that; /// splitBlock is not used in a way that invalidates edges.; ///; /// 2. The newly introduced block will have a new ordinal which will be; /// higher than any other ordinals in the section. Clients are responsible; /// for re-assigning block ordinals to restore a compatible order if; /// needed.; ///; /// 3. The cache is not automatically updated if new symbols are introduced; /// between calls to splitBlock. Any newly introduced symbols may be; /// added to the cache manually (descending offset order must be; /// preserved), or the cache can be set to None and rebuilt by; /// splitBlock on the next call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:1732,Performance,cache,cache,1732,"/// Splits block B at the given index which must be greater than zero.; /// If SplitIndex == B.getSize() then this function is a no-op and returns B.; /// If SplitIndex < B.getSize() then this function returns a new block; /// covering the range [ 0, SplitIndex ), and B is modified to cover the range; /// [ SplitIndex, B.size() ).; ///; /// The optional Cache parameter can be used to speed up repeated calls to; /// splitBlock for a single block. If the value is None the cache will be; /// treated as uninitialized and splitBlock will populate it. Otherwise it; /// is assumed to contain the list of Symbols pointing at B, sorted in; /// descending order of offset.; ///; /// Notes:; ///; /// 1. splitBlock must be used with care. Splitting a block may cause; /// incoming edges to become invalid if the edge target subexpression; /// points outside the bounds of the newly split target block (E.g. an; /// edge 'S + 10 : Pointer64' where S points to a newly split block; /// whose size is less than 10). No attempt is made to detect invalidation; /// of incoming edges, as in general this requires context that the; /// LinkGraph does not have. Clients are responsible for ensuring that; /// splitBlock is not used in a way that invalidates edges.; ///; /// 2. The newly introduced block will have a new ordinal which will be; /// higher than any other ordinals in the section. Clients are responsible; /// for re-assigning block ordinals to restore a compatible order if; /// needed.; ///; /// 3. The cache is not automatically updated if new symbols are introduced; /// between calls to splitBlock. Any newly introduced symbols may be; /// added to the cache manually (descending offset order must be; /// preserved), or the cache can be set to None and rebuilt by; /// splitBlock on the next call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:1031,Safety,detect,detect,1031,"/// Splits block B at the given index which must be greater than zero.; /// If SplitIndex == B.getSize() then this function is a no-op and returns B.; /// If SplitIndex < B.getSize() then this function returns a new block; /// covering the range [ 0, SplitIndex ), and B is modified to cover the range; /// [ SplitIndex, B.size() ).; ///; /// The optional Cache parameter can be used to speed up repeated calls to; /// splitBlock for a single block. If the value is None the cache will be; /// treated as uninitialized and splitBlock will populate it. Otherwise it; /// is assumed to contain the list of Symbols pointing at B, sorted in; /// descending order of offset.; ///; /// Notes:; ///; /// 1. splitBlock must be used with care. Splitting a block may cause; /// incoming edges to become invalid if the edge target subexpression; /// points outside the bounds of the newly split target block (E.g. an; /// edge 'S + 10 : Pointer64' where S points to a newly split block; /// whose size is less than 10). No attempt is made to detect invalidation; /// of incoming edges, as in general this requires context that the; /// LinkGraph does not have. Clients are responsible for ensuring that; /// splitBlock is not used in a way that invalidates edges.; ///; /// 2. The newly introduced block will have a new ordinal which will be; /// higher than any other ordinals in the section. Clients are responsible; /// for re-assigning block ordinals to restore a compatible order if; /// needed.; ///; /// 3. The cache is not automatically updated if new symbols are introduced; /// between calls to splitBlock. Any newly introduced symbols may be; /// added to the cache manually (descending offset order must be; /// preserved), or the cache can be set to None and rebuilt by; /// splitBlock on the next call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:322,Availability,error,error,322,"/// Add an external symbol.; /// Some formats (e.g. ELF) allow Symbols to have sizes. For Symbols whose; /// size is not known, you should substitute '0'.; /// The IsWeaklyReferenced argument determines whether the symbol must be; /// present during lookup: Externals that are strongly referenced must be; /// found or an error will be emitted. Externals that are weakly referenced; /// are permitted to be undefined, in which case they are assigned an address; /// of 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:340,Safety,safe,safe,340,/// Transfers the given Block and all Symbols pointing to it to the given; /// Section.; ///; /// No attempt is made to check compatibility of the source and destination; /// sections. Blocks may be moved between sections with incompatible; /// permissions (e.g. from data to text). The client is responsible for; /// ensuring that this is safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:4,Security,Access,Accessor,4,/// Accessor for the AllocActions object for this graph. This can be used to; /// register allocation action calls prior to finalization.; ///; /// Accessing this object after finalization will result in undefined; /// behavior.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:148,Security,Access,Accessing,148,/// Accessor for the AllocActions object for this graph. This can be used to; /// register allocation action calls prior to finalization.; ///; /// Accessing this object after finalization will result in undefined; /// behavior.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:39,Availability,error,error,39,/// Add a block to the map. Returns an error if the block overlaps with any; /// existing block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:49,Availability,error,error,49,"/// Add a range of blocks to the map. Returns an error if any block in the; /// range overlaps with any other block in the range, or with any existing; /// block in the map.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:22,Deployability,configurat,configuration,22,"/// An LinkGraph pass configuration, consisting of a list of pre-prune,; /// post-prune, and post-fixup passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:22,Modifiability,config,configuration,22,"/// An LinkGraph pass configuration, consisting of a list of pre-prune,; /// post-prune, and post-fixup passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:118,Energy Efficiency,allocate,allocated,118,"/// Post-prune passes.; ///; /// These passes are called on the graph after dead stripping, but before; /// memory is allocated or nodes assigned their final addresses.; ///; /// Notable use cases: Building GOT, stub, and TLV symbols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:212,Testability,stub,stub,212,"/// Post-prune passes.; ///; /// These passes are called on the graph after dead stripping, but before; /// memory is allocated or nodes assigned their final addresses.; ///; /// Notable use cases: Building GOT, stub, and TLV symbols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:97,Energy Efficiency,allocate,allocated,97,"/// Post-allocation passes.; ///; /// These passes are called on the graph after memory has been allocated and; /// defined nodes have been assigned their final addresses, but before the; /// context has been notified of these addresses. At this point externals; /// have not been resolved, and symbol content has not yet been copied into; /// working memory.; ///; /// Notable use cases: Setting up data structures associated with addresses; /// of defined symbols (e.g. a mapping of __dso_handle to JITDylib* for the; /// JIT runtime) -- using a PostAllocationPass for this ensures that the; /// data structures are in-place before any query for resolved symbols; /// can complete.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:91,Energy Efficiency,allocate,allocated,91,"/// Pre-fixup passes.; ///; /// These passes are called on the graph after memory has been allocated,; /// content copied into working memory, and all nodes (including externals); /// have been assigned their final addresses, but before any fixups have been; /// applied.; ///; /// Notable use cases: Late link-time optimizations like GOT and stub; /// elimination.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:316,Performance,optimiz,optimizations,316,"/// Pre-fixup passes.; ///; /// These passes are called on the graph after memory has been allocated,; /// content copied into working memory, and all nodes (including externals); /// have been assigned their final addresses, but before any fixups have been; /// applied.; ///; /// Notable use cases: Late link-time optimizations like GOT and stub; /// elimination.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:343,Testability,stub,stub,343,"/// Pre-fixup passes.; ///; /// These passes are called on the graph after memory has been allocated,; /// content copied into working memory, and all nodes (including externals); /// have been assigned their final addresses, but before any fixups have been; /// applied.; ///; /// Notable use cases: Late link-time optimizations like GOT and stub; /// elimination.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:168,Deployability,update,updated,168,"/// Post-fixup passes.; ///; /// These passes are called on the graph after block contents has been copied; /// to working memory, and fixups applied. Blocks have been updated to point; /// to their fixed up content.; ///; /// Notable use cases: Testing and validation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:258,Security,validat,validation,258,"/// Post-fixup passes.; ///; /// These passes are called on the graph after block contents has been copied; /// to working memory, and fixups applied. Blocks have been updated to point; /// to their fixed up content.; ///; /// Notable use cases: Testing and validation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:246,Testability,Test,Testing,246,"/// Post-fixup passes.; ///; /// These passes are called on the graph after block contents has been copied; /// to working memory, and fixups applied. Blocks have been updated to point; /// to their fixed up content.; ///; /// Notable use cases: Testing and validation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:92,Availability,error,error,92,/// A function object to call with a resolved symbol map (See AsyncLookupResult); /// or an error if resolution failed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:341,Availability,error,error,341,"/// Called by JITLink once all defined symbols in the graph have been assigned; /// their final memory locations in the target process. At this point the; /// LinkGraph can be inspected to build a symbol table, however the block; /// content will not generally have been copied to the target location yet.; ///; /// If the client detects an error in the LinkGraph state (e.g. unexpected or; /// missing symbols) they may return an error here. The error will be; /// propagated to notifyFailed and the linker will bail out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:431,Availability,error,error,431,"/// Called by JITLink once all defined symbols in the graph have been assigned; /// their final memory locations in the target process. At this point the; /// LinkGraph can be inspected to build a symbol table, however the block; /// content will not generally have been copied to the target location yet.; ///; /// If the client detects an error in the LinkGraph state (e.g. unexpected or; /// missing symbols) they may return an error here. The error will be; /// propagated to notifyFailed and the linker will bail out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:447,Availability,error,error,447,"/// Called by JITLink once all defined symbols in the graph have been assigned; /// their final memory locations in the target process. At this point the; /// LinkGraph can be inspected to build a symbol table, however the block; /// content will not generally have been copied to the target location yet.; ///; /// If the client detects an error in the LinkGraph state (e.g. unexpected or; /// missing symbols) they may return an error here. The error will be; /// propagated to notifyFailed and the linker will bail out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:330,Safety,detect,detects,330,"/// Called by JITLink once all defined symbols in the graph have been assigned; /// their final memory locations in the target process. At this point the; /// LinkGraph can be inspected to build a symbol table, however the block; /// content will not generally have been copied to the target location yet.; ///; /// If the client detects an error in the LinkGraph state (e.g. unexpected or; /// missing symbols) they may return an error here. The error will be; /// propagated to notifyFailed and the linker will bail out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:165,Integrability,depend,dependencies,165,/// Called by JITLink to notify the context that the object has been; /// finalized (i.e. emitted to memory and memory permissions set). If all of; /// this objects dependencies have also been finalized then the code is ready; /// to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:280,Deployability,pipeline,pipeline,280,/// Called by JITLink prior to linking to determine whether default passes for; /// the target should be added. The default implementation returns true.; /// If subclasses override this method to return false for any target then; /// they are required to fully configure the pass pipeline for that target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:261,Modifiability,config,configure,261,/// Called by JITLink prior to linking to determine whether default passes for; /// the target should be added. The default implementation returns true.; /// If subclasses override this method to return false for any target then; /// they are required to fully configure the pass pipeline for that target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:41,Deployability,pipeline,pipeline,41,/// Called by JITLink to modify the pass pipeline prior to linking.; /// The default version performs no modification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:93,Performance,perform,performs,93,/// Called by JITLink to modify the pass pipeline prior to linking.; /// The default version performs no modification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:27,Availability,error,error,27,/// Create an out of range error for the given edge in the given block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:18,Testability,stub,stub,18,/// Create a jump stub that jumps via the pointer at the given symbol and; /// an anonymous symbol pointing to it. Return the anonymous symbol.; ///; /// The stub block will be created by createPointerJumpStubBlock.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:158,Testability,stub,stub,158,/// Create a jump stub that jumps via the pointer at the given symbol and; /// an anonymous symbol pointing to it. Return the anonymous symbol.; ///; /// The stub block will be created by createPointerJumpStubBlock.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:53,Integrability,interface,interface,53,"//===-- JITLinkMemoryManager.h - JITLink mem manager interface --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains the JITLinkMemoryManager interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:417,Integrability,interface,interface,417,"//===-- JITLinkMemoryManager.h - JITLink mem manager interface --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains the JITLinkMemoryManager interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:183,Integrability,synchroniz,synchronization,183,/// Manages allocations of JIT memory.; ///; /// Instances of this class may be accessed concurrently from multiple threads; /// and their implemetations should include any necessary synchronization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:89,Performance,concurren,concurrently,89,/// Manages allocations of JIT memory.; ///; /// Instances of this class may be accessed concurrently from multiple threads; /// and their implemetations should include any necessary synchronization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:80,Security,access,accessed,80,/// Manages allocations of JIT memory.; ///; /// Instances of this class may be accessed concurrently from multiple threads; /// and their implemetations should include any necessary synchronization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:390,Availability,alive,alive,390,"/// Represents an allocation which has not been finalized yet.; ///; /// InFlightAllocs manage both executor memory allocations and working; /// memory allocations.; ///; /// On finalization, the InFlightAlloc should transfer the content of; /// working memory into executor memory, apply memory protections, and; /// run any finalization functions.; ///; /// Working memory should be kept alive at least until one of the following; /// happens: (1) the InFlightAlloc instance is destroyed, (2) the; /// InFlightAlloc is abandoned, (3) finalized target memory is destroyed.; ///; /// If abandon is called then working memory and executor memory should both; /// be freed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:276,Availability,Error,Error,276,/// Start the allocation process.; ///; /// If the initial allocation is successful then the OnAllocated function will; /// be called with a std::unique_ptr<InFlightAlloc> value. If the assocation; /// is unsuccessful then the OnAllocated function will be called with an; /// Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:16,Usability,simpl,simplifies,16,"/// BasicLayout simplifies the implementation of JITLinkMemoryManagers.; ///; /// BasicLayout groups Sections into Segments based on their memory protection; /// and deallocation policies. JITLinkMemoryManagers can construct a BasicLayout; /// from a Graph, and then assign working memory and addresses to each of the; /// Segments. These addreses will be mapped back onto the Graph blocks in; /// the apply method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:255,Availability,failure,failures,255,"/// The Alignment, ContentSize and ZeroFillSize of each segment will be; /// pre-filled from the Graph. Clients must set the Addr and WorkingMem fields; /// prior to calling apply.; //; // FIXME: The C++98 initializer is an attempt to work around compile failures; // due to http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1397.; // We should be able to switch this back to member initialization once that; // issue is fixed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:330,Availability,error,error,330,"/// Returns the total number of required to allocate all segments (with each; /// segment padded out to page size) for all standard segments, and all; /// finalize segments.; ///; /// This is a convenience function for the common case where the segments will; /// be allocated contiguously.; ///; /// This function will return an error if any segment has an alignment that; /// is higher than a page.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:44,Energy Efficiency,allocate,allocate,44,"/// Returns the total number of required to allocate all segments (with each; /// segment padded out to page size) for all standard segments, and all; /// finalize segments.; ///; /// This is a convenience function for the common case where the segments will; /// be allocated contiguously.; ///; /// This function will return an error if any segment has an alignment that; /// is higher than a page.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:267,Energy Efficiency,allocate,allocated,267,"/// Returns the total number of required to allocate all segments (with each; /// segment padded out to page size) for all standard segments, and all; /// finalize segments.; ///; /// This is a convenience function for the common case where the segments will; /// be allocated contiguously.; ///; /// This function will return an error if any segment has an alignment that; /// is higher than a page.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:31,Usability,simpl,simple,31,"/// A utility class for making simple allocations using JITLinkMemoryManager.; ///; /// SimpleSegementAlloc takes a mapping of AllocGroups to Segments and uses; /// this to create a LinkGraph with one Section (containing one Block) per; /// Segment. Clients can obtain a pointer to the working memory and executor; /// address of that block using the Segment's AllocGroup. Once memory has been; /// populated, clients can call finalize to finalize the memory.; ///; /// Note: Segments with MemLifetime::NoAlloc are not permitted, since they would; /// not be useful, and their presence is likely to indicate a bug.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:88,Usability,Simpl,SimpleSegementAlloc,88,"/// A utility class for making simple allocations using JITLinkMemoryManager.; ///; /// SimpleSegementAlloc takes a mapping of AllocGroups to Segments and uses; /// this to create a LinkGraph with one Section (containing one Block) per; /// Segment. Clients can obtain a pointer to the working memory and executor; /// address of that block using the Segment's AllocGroup. Once memory has been; /// populated, clients can call finalize to finalize the memory.; ///; /// Note: Segments with MemLifetime::NoAlloc are not permitted, since they would; /// not be useful, and their presence is likely to indicate a bug.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:30,Energy Efficiency,allocate,allocated,30,/// Describes a segment to be allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:32,Energy Efficiency,allocate,allocates,32,/// A JITLinkMemoryManager that allocates in-process memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:21,Safety,detect,detect,21,/// Attempts to auto-detect the host page size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:122,Availability,Error,Errors,122,"/// A plain 32-bit pointer value relocation.; ///; /// Fixup expression:; /// Fixup <- Target + Addend : uint32; ///; /// Errors:; /// - The target must reside in the low 32-bits of the address space,; /// otherwise an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:232,Availability,error,error,232,"/// A plain 32-bit pointer value relocation.; ///; /// Fixup expression:; /// Fixup <- Target + Addend : uint32; ///; /// Errors:; /// - The target must reside in the low 32-bits of the address space,; /// otherwise an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:547,Availability,Error,Errors,547,/// A 26-bit PC-relative branch.; ///; /// Represents a PC-relative call or branch to a target within +/-128Mb. The; /// target must be 4-byte aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int26; ///; /// Notes:; /// The '26' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF relocations. Since the low; /// two bits must be zero (because of the 4-byte alignment of the target) the; /// operand is effectively a signed 28-bit number.; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 4-byte aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int26 otherwise an; /// out-of-range error will be returned.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:670,Availability,error,error,670,/// A 26-bit PC-relative branch.; ///; /// Represents a PC-relative call or branch to a target within +/-128Mb. The; /// target must be 4-byte aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int26; ///; /// Notes:; /// The '26' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF relocations. Since the low; /// two bits must be zero (because of the 4-byte alignment of the target) the; /// operand is effectively a signed 28-bit number.; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 4-byte aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int26 otherwise an; /// out-of-range error will be returned.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:790,Availability,error,error,790,/// A 26-bit PC-relative branch.; ///; /// Represents a PC-relative call or branch to a target within +/-128Mb. The; /// target must be 4-byte aligned.; ///; /// Fixup expression:; /// Fixup <- (Target - Fixup + Addend) >> 2 : int26; ///; /// Notes:; /// The '26' in the name refers to the number operand bits and follows the; /// naming convention used by the corresponding ELF relocations. Since the low; /// two bits must be zero (because of the 4-byte alignment of the target) the; /// operand is effectively a signed 28-bit number.; ///; /// Errors:; /// - The result of the unshifted part of the fixup expression must be; /// 4-byte aligned otherwise an alignment error will be returned.; /// - The result of the fixup expression must fit into an int26 otherwise an; /// out-of-range error will be returned.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:150,Availability,Error,Errors,150,"/// A 32-bit delta.; ///; /// Delta from the fixup to the target.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:255,Availability,error,error,255,"/// A 32-bit delta.; ///; /// Delta from the fixup to the target.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:164,Availability,Error,Errors,164,"/// A 32-bit negative delta.; ///; /// Delta from the target back to the fixup.; ///; /// Fixup expression:; /// Fixup <- Fixup - Target + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:269,Availability,error,error,269,"/// A 32-bit negative delta.; ///; /// Delta from the target back to the fixup.; ///; /// Fixup expression:; /// Fixup <- Fixup - Target + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:282,Availability,Error,Errors,282,/// The signed 20-bit delta from the fixup page to the page containing the; /// target.; ///; /// Fixup expression:; /// Fixup <- (((Target + Addend + ((Target + Addend) & 0x800)) & ~0xfff); // - (Fixup & ~0xfff)) >> 12 : int20; ///; /// Notes:; /// For PCALAU12I fixups.; ///; /// Errors:; /// - The result of the fixup expression must fit into an int20 otherwise an; /// out-of-range error will be returned.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:386,Availability,error,error,386,/// The signed 20-bit delta from the fixup page to the page containing the; /// target.; ///; /// Fixup expression:; /// Fixup <- (((Target + Addend + ((Target + Addend) & 0x800)) & ~0xfff); // - (Fixup & ~0xfff)) >> 12 : int20; ///; /// Notes:; /// For PCALAU12I fixups.; ///; /// Errors:; /// - The result of the fixup expression must fit into an int20 otherwise an; /// out-of-range error will be returned.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:509,Availability,Error,Errors,509,"/// A GOT entry getter/constructor, transformed to Page20 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Page20 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT/PLT builder pass inserted; /// by default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:536,Availability,Failure,Failure,536,"/// A GOT entry getter/constructor, transformed to Page20 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Page20 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT/PLT builder pass inserted; /// by default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:525,Testability,ASSERT,ASSERTION,525,"/// A GOT entry getter/constructor, transformed to Page20 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Page20 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT/PLT builder pass inserted; /// by default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:621,Testability,assert,assert,621,"/// A GOT entry getter/constructor, transformed to Page20 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Page20 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT/PLT builder pass inserted; /// by default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:14,Testability,stub,stub,14,"/// loongarch stub content.; ///; /// Contains the instruction sequence for an indirect jump via an in-memory; /// pointer:; /// pcalau12i $t8, %page20(ptr); /// ld.[w/d] $t8, %pageoff12(ptr); /// jr $t8",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h:18,Testability,stub,stub,18,/// Create a jump stub that jumps via the pointer at the given symbol and; /// an anonymous symbol pointing to it. Return the anonymous symbol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/loongarch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO.h:118,Testability,stub,stub,118,"/// jit-link the given ObjBuffer, which must be a MachO object file.; ///; /// Uses conservative defaults for GOT and stub handling based on the target; /// platform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_arm64.h:376,Testability,stub,stubs,376,"/// jit-link the given object buffer, which must be a MachO arm64 object file.; ///; /// If PrePrunePasses is empty then a default mark-live pass will be inserted; /// that will mark all exported atoms live. If PrePrunePasses is not empty, the; /// caller is responsible for including a pass to mark atoms as live.; ///; /// If PostPrunePasses is empty then a default GOT-and-stubs insertion pass will; /// be inserted. If PostPrunePasses is not empty then the caller is responsible; /// for including a pass to insert GOT and stub edges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_arm64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_arm64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_arm64.h:527,Testability,stub,stub,527,"/// jit-link the given object buffer, which must be a MachO arm64 object file.; ///; /// If PrePrunePasses is empty then a default mark-live pass will be inserted; /// that will mark all exported atoms live. If PrePrunePasses is not empty, the; /// caller is responsible for including a pass to mark atoms as live.; ///; /// If PostPrunePasses is empty then a default GOT-and-stubs insertion pass will; /// be inserted. If PostPrunePasses is not empty then the caller is responsible; /// for including a pass to insert GOT and stub edges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_arm64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_arm64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_x86_64.h:331,Testability,stub,stubs,331,"/// jit-link the given LinkGraph.; ///; /// If PrePrunePasses is empty then a default mark-live pass will be inserted; /// that will mark all exported atoms live. If PrePrunePasses is not empty, the; /// caller is responsible for including a pass to mark atoms as live.; ///; /// If PostPrunePasses is empty then a default GOT-and-stubs insertion pass will; /// be inserted. If PostPrunePasses is not empty then the caller is responsible; /// for including a pass to insert GOT and stub edges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_x86_64.h:482,Testability,stub,stub,482,"/// jit-link the given LinkGraph.; ///; /// If PrePrunePasses is empty then a default mark-live pass will be inserted; /// that will mark all exported atoms live. If PrePrunePasses is not empty, the; /// caller is responsible for including a pass to mark atoms as live.; ///; /// If PostPrunePasses is empty then a default GOT-and-stubs insertion pass will; /// be inserted. If PostPrunePasses is not empty then the caller is responsible; /// for including a pass to insert GOT and stub edges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/MachO_x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h:432,Energy Efficiency,Power,PowerPC,432,"//===--- ppc64.h - Generic JITLink ppc64 edge kinds, utilities --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Generic utilities for graphs representing 64-bit PowerPC objects.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h:52,Testability,stub,stub,52,"// FIXME: One external symbol can only have one PLT stub in a object file.; // This is a limitation when we need different PLT stubs for the same symbol.; // For example, we need two different PLT stubs for `bl __tls_get_addr` and; // `bl __tls_get_addr@notoc`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h:127,Testability,stub,stubs,127,"// FIXME: One external symbol can only have one PLT stub in a object file.; // This is a limitation when we need different PLT stubs for the same symbol.; // For example, we need two different PLT stubs for `bl __tls_get_addr` and; // `bl __tls_get_addr@notoc`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h:197,Testability,stub,stubs,197,"// FIXME: One external symbol can only have one PLT stub in a object file.; // This is a limitation when we need different PLT stubs for the same symbol.; // For example, we need two different PLT stubs for `bl __tls_get_addr` and; // `bl __tls_get_addr@notoc`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h:17,Testability,stub,stub,17,// Addend to the stub is zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h:59,Testability,stub,stub,59,"// TODO: There are cases a local function call need a call stub.; // 1. Caller uses TOC, the callee doesn't, need a r2 save stub.; // 2. Caller doesn't use TOC, the callee does, need a r12 setup stub.; // 3. Branching target is out of range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h:124,Testability,stub,stub,124,"// TODO: There are cases a local function call need a call stub.; // 1. Caller uses TOC, the callee doesn't, need a r2 save stub.; // 2. Caller doesn't use TOC, the callee does, need a r12 setup stub.; // 3. Branching target is out of range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h:195,Testability,stub,stub,195,"// TODO: There are cases a local function call need a call stub.; // 1. Caller uses TOC, the callee doesn't, need a r2 save stub.; // 2. Caller doesn't use TOC, the callee does, need a r12 setup stub.; // 3. Branching target is out of range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/TableManager.h:222,Availability,down,down,222,"/// A CRTP base for tables that are built on demand, e.g. Global Offset Tables; /// and Procedure Linkage Tables.; /// The getEntyrForTarget function returns the table entry corresponding to the; /// given target, calling down to the implementation class to build an entry if; /// one does not already exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/TableManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/TableManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:122,Availability,Error,Errors,122,"/// A plain 32-bit pointer value relocation.; ///; /// Fixup expression:; /// Fixup <- Target + Addend : uint32; ///; /// Errors:; /// - The target must reside in the low 32-bits of the address space,; /// otherwise an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:232,Availability,error,error,232,"/// A plain 32-bit pointer value relocation.; ///; /// Fixup expression:; /// Fixup <- Target + Addend : uint32; ///; /// Errors:; /// - The target must reside in the low 32-bits of the address space,; /// otherwise an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:121,Availability,Error,Errors,121,"/// A signed 32-bit pointer value relocation; ///; /// Fixup expression:; /// Fixup <- Target + Addend : int32; ///; /// Errors:; /// - The target must reside in the signed 32-bits([-2**31, 2**32 - 1]) of; /// the address space, otherwise an out-of-range error will be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:255,Availability,error,error,255,"/// A signed 32-bit pointer value relocation; ///; /// Fixup expression:; /// Fixup <- Target + Addend : int32; ///; /// Errors:; /// - The target must reside in the signed 32-bits([-2**31, 2**32 - 1]) of; /// the address space, otherwise an out-of-range error will be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:122,Availability,Error,Errors,122,"/// A plain 16-bit pointer value relocation.; ///; /// Fixup expression:; /// Fixup <- Target + Addend : uint16; ///; /// Errors:; /// - The target must reside in the low 16-bits of the address space,; /// otherwise an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:232,Availability,error,error,232,"/// A plain 16-bit pointer value relocation.; ///; /// Fixup expression:; /// Fixup <- Target + Addend : uint16; ///; /// Errors:; /// - The target must reside in the low 16-bits of the address space,; /// otherwise an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:120,Availability,Error,Errors,120,"/// A plain 8-bit pointer value relocation.; ///; /// Fixup expression:; /// Fixup <- Target + Addend : uint8; ///; /// Errors:; /// - The target must reside in the low 8-bits of the address space,; /// otherwise an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:229,Availability,error,error,229,"/// A plain 8-bit pointer value relocation.; ///; /// Fixup expression:; /// Fixup <- Target + Addend : uint8; ///; /// Errors:; /// - The target must reside in the low 8-bits of the address space,; /// otherwise an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:150,Availability,Error,Errors,150,"/// A 32-bit delta.; ///; /// Delta from the fixup to the target.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend : int64; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:255,Availability,error,error,255,"/// A 32-bit delta.; ///; /// Delta from the fixup to the target.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend : int64; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:164,Availability,Error,Errors,164,"/// A 32-bit negative delta.; ///; /// Delta from the target back to the fixup.; ///; /// Fixup expression:; /// Fixup <- Fixup - Target + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:269,Availability,error,error,269,"/// A 32-bit negative delta.; ///; /// Delta from the target back to the fixup.; ///; /// Fixup expression:; /// Fixup <- Fixup - Target + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:171,Availability,Error,Errors,171,"/// A 64-bit GOT delta.; ///; /// Delta from the global offset table to the target; ///; /// Fixup expression:; /// Fixup <- Target - GOTSymbol + Addend : int64; ///; /// Errors:; /// - *ASSERTION* Failure to a null pointer GOTSymbol, which the GOT section; /// symbol was not been defined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:198,Availability,Failure,Failure,198,"/// A 64-bit GOT delta.; ///; /// Delta from the global offset table to the target; ///; /// Fixup expression:; /// Fixup <- Target - GOTSymbol + Addend : int64; ///; /// Errors:; /// - *ASSERTION* Failure to a null pointer GOTSymbol, which the GOT section; /// symbol was not been defined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:187,Testability,ASSERT,ASSERTION,187,"/// A 64-bit GOT delta.; ///; /// Delta from the global offset table to the target; ///; /// Fixup expression:; /// Fixup <- Target - GOTSymbol + Addend : int64; ///; /// Errors:; /// - *ASSERTION* Failure to a null pointer GOTSymbol, which the GOT section; /// symbol was not been defined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:490,Availability,Error,Errors,490,"/// A 32-bit PC-relative branch.; ///; /// Represents a PC-relative call or branch to a target. This can be used to; /// identify, record, and/or patch call sites.; ///; /// The fixup expression for this kind includes an implicit offset to account; /// for the PC (unlike the Delta edges) so that a Branch32PCRel with a target; /// T and addend zero is a call/branch to the start (offset zero) of T.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:595,Availability,error,error,595,"/// A 32-bit PC-relative branch.; ///; /// Represents a PC-relative call or branch to a target. This can be used to; /// identify, record, and/or patch call sites.; ///; /// The fixup expression for this kind includes an implicit offset to account; /// for the PC (unlike the Delta edges) so that a Branch32PCRel with a target; /// T and addend zero is a call/branch to the start (offset zero) of T.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:146,Deployability,patch,patch,146,"/// A 32-bit PC-relative branch.; ///; /// Represents a PC-relative call or branch to a target. This can be used to; /// identify, record, and/or patch call sites.; ///; /// The fixup expression for this kind includes an implicit offset to account; /// for the PC (unlike the Delta edges) so that a Branch32PCRel with a target; /// T and addend zero is a call/branch to the start (offset zero) of T.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:457,Availability,Error,Errors,457,"/// A 32-bit PC-relative relocation.; ///; /// Represents a data/control flow instruction using PC-relative addressing; /// to a target.; ///; /// The fixup expression for this kind includes an implicit offset to account; /// for the PC (unlike the Delta edges) so that a PCRel32 with a target; /// T and addend zero is a call/branch to the start (offset zero) of T.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:562,Availability,error,error,562,"/// A 32-bit PC-relative relocation.; ///; /// Represents a data/control flow instruction using PC-relative addressing; /// to a target.; ///; /// The fixup expression for this kind includes an implicit offset to account; /// for the PC (unlike the Delta edges) so that a PCRel32 with a target; /// T and addend zero is a call/branch to the start (offset zero) of T.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:709,Availability,Error,Errors,709,"/// A 32-bit PC-relative branch to a pointer jump stub.; ///; /// The target of this relocation should be a pointer jump stub of the form:; ///; /// \code{.s}; /// .text; /// jmpq *tgtptr(%rip); /// ; ...; ///; /// .data; /// tgtptr:; /// .quad 0; /// \endcode; ///; /// This edge kind has the same fixup expression as BranchPCRel32, but further; /// identifies the call/branch as being to a pointer jump stub. For edges of; /// this kind the jump stub should not be bypassed (use; /// BranchPCRel32ToPtrJumpStubBypassable for that), but the pointer location; /// target may be recorded to allow manipulation at runtime.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4 : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:814,Availability,error,error,814,"/// A 32-bit PC-relative branch to a pointer jump stub.; ///; /// The target of this relocation should be a pointer jump stub of the form:; ///; /// \code{.s}; /// .text; /// jmpq *tgtptr(%rip); /// ; ...; ///; /// .data; /// tgtptr:; /// .quad 0; /// \endcode; ///; /// This edge kind has the same fixup expression as BranchPCRel32, but further; /// identifies the call/branch as being to a pointer jump stub. For edges of; /// this kind the jump stub should not be bypassed (use; /// BranchPCRel32ToPtrJumpStubBypassable for that), but the pointer location; /// target may be recorded to allow manipulation at runtime.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4 : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:50,Testability,stub,stub,50,"/// A 32-bit PC-relative branch to a pointer jump stub.; ///; /// The target of this relocation should be a pointer jump stub of the form:; ///; /// \code{.s}; /// .text; /// jmpq *tgtptr(%rip); /// ; ...; ///; /// .data; /// tgtptr:; /// .quad 0; /// \endcode; ///; /// This edge kind has the same fixup expression as BranchPCRel32, but further; /// identifies the call/branch as being to a pointer jump stub. For edges of; /// this kind the jump stub should not be bypassed (use; /// BranchPCRel32ToPtrJumpStubBypassable for that), but the pointer location; /// target may be recorded to allow manipulation at runtime.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4 : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:121,Testability,stub,stub,121,"/// A 32-bit PC-relative branch to a pointer jump stub.; ///; /// The target of this relocation should be a pointer jump stub of the form:; ///; /// \code{.s}; /// .text; /// jmpq *tgtptr(%rip); /// ; ...; ///; /// .data; /// tgtptr:; /// .quad 0; /// \endcode; ///; /// This edge kind has the same fixup expression as BranchPCRel32, but further; /// identifies the call/branch as being to a pointer jump stub. For edges of; /// this kind the jump stub should not be bypassed (use; /// BranchPCRel32ToPtrJumpStubBypassable for that), but the pointer location; /// target may be recorded to allow manipulation at runtime.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4 : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:405,Testability,stub,stub,405,"/// A 32-bit PC-relative branch to a pointer jump stub.; ///; /// The target of this relocation should be a pointer jump stub of the form:; ///; /// \code{.s}; /// .text; /// jmpq *tgtptr(%rip); /// ; ...; ///; /// .data; /// tgtptr:; /// .quad 0; /// \endcode; ///; /// This edge kind has the same fixup expression as BranchPCRel32, but further; /// identifies the call/branch as being to a pointer jump stub. For edges of; /// this kind the jump stub should not be bypassed (use; /// BranchPCRel32ToPtrJumpStubBypassable for that), but the pointer location; /// target may be recorded to allow manipulation at runtime.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4 : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:448,Testability,stub,stub,448,"/// A 32-bit PC-relative branch to a pointer jump stub.; ///; /// The target of this relocation should be a pointer jump stub of the form:; ///; /// \code{.s}; /// .text; /// jmpq *tgtptr(%rip); /// ; ...; ///; /// .data; /// tgtptr:; /// .quad 0; /// \endcode; ///; /// This edge kind has the same fixup expression as BranchPCRel32, but further; /// identifies the call/branch as being to a pointer jump stub. For edges of; /// this kind the jump stub should not be bypassed (use; /// BranchPCRel32ToPtrJumpStubBypassable for that), but the pointer location; /// target may be recorded to allow manipulation at runtime.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4 : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:430,Availability,Error,Errors,430,"/// A relaxable version of BranchPCRel32ToPtrJumpStub.; ///; /// The edge kind has the same fixup expression as BranchPCRel32ToPtrJumpStub,; /// but identifies the call/branch as being to a pointer jump stub that may be; /// bypassed with a direct jump to the ultimate target if the ultimate target; /// is within range of the fixup location.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4: int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:535,Availability,error,error,535,"/// A relaxable version of BranchPCRel32ToPtrJumpStub.; ///; /// The edge kind has the same fixup expression as BranchPCRel32ToPtrJumpStub,; /// but identifies the call/branch as being to a pointer jump stub that may be; /// bypassed with a direct jump to the ultimate target if the ultimate target; /// is within range of the fixup location.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4: int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:203,Testability,stub,stub,203,"/// A relaxable version of BranchPCRel32ToPtrJumpStub.; ///; /// The edge kind has the same fixup expression as BranchPCRel32ToPtrJumpStub,; /// but identifies the call/branch as being to a pointer jump stub that may be; /// bypassed with a direct jump to the ultimate target if the ultimate target; /// is within range of the fixup location.; ///; /// Fixup expression:; /// Fixup <- Target - Fixup + Addend - 4: int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:507,Availability,Error,Errors,507,"/// A GOT entry getter/constructor, transformed to Delta32 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:534,Availability,Failure,Failure,534,"/// A GOT entry getter/constructor, transformed to Delta32 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:523,Testability,ASSERT,ASSERTION,523,"/// A GOT entry getter/constructor, transformed to Delta32 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:619,Testability,assert,assert,619,"/// A GOT entry getter/constructor, transformed to Delta32 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta32 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:507,Availability,Error,Errors,507,"/// A GOT entry getter/constructor, transformed to Delta64 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta64 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:534,Availability,Failure,Failure,534,"/// A GOT entry getter/constructor, transformed to Delta64 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta64 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:523,Testability,ASSERT,ASSERTION,523,"/// A GOT entry getter/constructor, transformed to Delta64 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta64 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:619,Testability,assert,assert,619,"/// A GOT entry getter/constructor, transformed to Delta64 pointing at the GOT; /// entry for the original target.; ///; /// Indicates that this edge should be transformed into a Delta64 targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:547,Availability,Error,Errors,547,"/// A GOT entry offset within GOT getter/constructor, transformed to; /// Delta64FromGOT; /// pointing at the GOT entry for the original target; ///; /// Indicates that this edge should be transformed into a Delta64FromGOT; /// targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:574,Availability,Failure,Failure,574,"/// A GOT entry offset within GOT getter/constructor, transformed to; /// Delta64FromGOT; /// pointing at the GOT entry for the original target; ///; /// Indicates that this edge should be transformed into a Delta64FromGOT; /// targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:563,Testability,ASSERT,ASSERTION,563,"/// A GOT entry offset within GOT getter/constructor, transformed to; /// Delta64FromGOT; /// pointing at the GOT entry for the original target; ///; /// Indicates that this edge should be transformed into a Delta64FromGOT; /// targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:659,Testability,assert,assert,659,"/// A GOT entry offset within GOT getter/constructor, transformed to; /// Delta64FromGOT; /// pointing at the GOT entry for the original target; ///; /// Indicates that this edge should be transformed into a Delta64FromGOT; /// targeting; /// the GOT entry for the edge's current target, maintaining the same addend.; /// A GOT entry for the target should be created if one does not already; /// exist.; ///; /// Edges of this kind are usually handled by a GOT builder pass inserted by; /// default; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:229,Availability,Error,Errors,229,"/// A PC-relative load of a GOT entry, relaxable if GOT entry target is; /// in-range of the fixup; ///; /// TODO: Explain the optimization; ///; /// Fixup expression; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:334,Availability,error,error,334,"/// A PC-relative load of a GOT entry, relaxable if GOT entry target is; /// in-range of the fixup; ///; /// TODO: Explain the optimization; ///; /// Fixup expression; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:18,Performance,load,load,18,"/// A PC-relative load of a GOT entry, relaxable if GOT entry target is; /// in-range of the fixup; ///; /// TODO: Explain the optimization; ///; /// Fixup expression; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:127,Performance,optimiz,optimization,127,"/// A PC-relative load of a GOT entry, relaxable if GOT entry target is; /// in-range of the fixup; ///; /// TODO: Explain the optimization; ///; /// Fixup expression; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:343,Availability,Error,Errors,343,"/// A PC-relative REX load of a GOT entry, relaxable if GOT entry target; /// is in-range of the fixup.; ///; /// If the GOT entry target is in-range of the fixup then the load from the; /// GOT may be replaced with a direct memory address calculation.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:448,Availability,error,error,448,"/// A PC-relative REX load of a GOT entry, relaxable if GOT entry target; /// is in-range of the fixup.; ///; /// If the GOT entry target is in-range of the fixup then the load from the; /// GOT may be replaced with a direct memory address calculation.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:22,Performance,load,load,22,"/// A PC-relative REX load of a GOT entry, relaxable if GOT entry target; /// is in-range of the fixup.; ///; /// If the GOT entry target is in-range of the fixup then the load from the; /// GOT may be replaced with a direct memory address calculation.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:172,Performance,load,load,172,"/// A PC-relative REX load of a GOT entry, relaxable if GOT entry target; /// is in-range of the fixup.; ///; /// If the GOT entry target is in-range of the fixup then the load from the; /// GOT may be replaced with a direct memory address calculation.; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:545,Availability,Error,Errors,545,"/// A GOT entry getter/constructor, transformed to; /// PCRel32ToGOTLoadREXRelaxable pointing at the GOT entry for the original; /// target.; ///; /// Indicates that this edge should be lowered to a PC32ToGOTLoadREXRelaxable; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually lowered by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:572,Availability,Failure,Failure,572,"/// A GOT entry getter/constructor, transformed to; /// PCRel32ToGOTLoadREXRelaxable pointing at the GOT entry for the original; /// target.; ///; /// Indicates that this edge should be lowered to a PC32ToGOTLoadREXRelaxable; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually lowered by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:561,Testability,ASSERT,ASSERTION,561,"/// A GOT entry getter/constructor, transformed to; /// PCRel32ToGOTLoadREXRelaxable pointing at the GOT entry for the original; /// target.; ///; /// Indicates that this edge should be lowered to a PC32ToGOTLoadREXRelaxable; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually lowered by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:657,Testability,assert,assert,657,"/// A GOT entry getter/constructor, transformed to; /// PCRel32ToGOTLoadREXRelaxable pointing at the GOT entry for the original; /// target.; ///; /// Indicates that this edge should be lowered to a PC32ToGOTLoadREXRelaxable; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually lowered by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:539,Availability,Error,Errors,539,"/// A GOT entry getter/constructor, transformed to; /// PCRel32ToGOTLoadRelaxable pointing at the GOT entry for the original; /// target.; ///; /// Indicates that this edge should be lowered to a PC32ToGOTLoadRelaxable; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually lowered by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:566,Availability,Failure,Failure,566,"/// A GOT entry getter/constructor, transformed to; /// PCRel32ToGOTLoadRelaxable pointing at the GOT entry for the original; /// target.; ///; /// Indicates that this edge should be lowered to a PC32ToGOTLoadRelaxable; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually lowered by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:555,Testability,ASSERT,ASSERTION,555,"/// A GOT entry getter/constructor, transformed to; /// PCRel32ToGOTLoadRelaxable pointing at the GOT entry for the original; /// target.; ///; /// Indicates that this edge should be lowered to a PC32ToGOTLoadRelaxable; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually lowered by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:651,Testability,assert,assert,651,"/// A GOT entry getter/constructor, transformed to; /// PCRel32ToGOTLoadRelaxable pointing at the GOT entry for the original; /// target.; ///; /// Indicates that this edge should be lowered to a PC32ToGOTLoadRelaxable; /// targeting the GOT entry for the edge's current target, maintaining the; /// same addend. A GOT entry for the target should be created if one does not; /// already exist.; ///; /// Edges of this kind are usually lowered by a GOT builder pass inserted by; /// default.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:547,Availability,Error,Errors,547,"/// A PC-relative REX load of a Thread Local Variable Pointer (TLVP) entry,; /// relaxable if the TLVP entry target is in-range of the fixup.; ///; /// If the TLVP entry target is in-range of the fixup then the load from the; /// TLVP may be replaced with a direct memory address calculation.; ///; /// The target of this edge must be a thread local variable entry of the form; /// .quad <tlv getter thunk>; /// .quad <tlv key>; /// .quad <tlv initializer>; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; /// - The target must be either external, or a TLV entry of the required; /// form, otherwise a malformed TLV entry error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:652,Availability,error,error,652,"/// A PC-relative REX load of a Thread Local Variable Pointer (TLVP) entry,; /// relaxable if the TLVP entry target is in-range of the fixup.; ///; /// If the TLVP entry target is in-range of the fixup then the load from the; /// TLVP may be replaced with a direct memory address calculation.; ///; /// The target of this edge must be a thread local variable entry of the form; /// .quad <tlv getter thunk>; /// .quad <tlv key>; /// .quad <tlv initializer>; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; /// - The target must be either external, or a TLV entry of the required; /// form, otherwise a malformed TLV entry error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:793,Availability,error,error,793,"/// A PC-relative REX load of a Thread Local Variable Pointer (TLVP) entry,; /// relaxable if the TLVP entry target is in-range of the fixup.; ///; /// If the TLVP entry target is in-range of the fixup then the load from the; /// TLVP may be replaced with a direct memory address calculation.; ///; /// The target of this edge must be a thread local variable entry of the form; /// .quad <tlv getter thunk>; /// .quad <tlv key>; /// .quad <tlv initializer>; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; /// - The target must be either external, or a TLV entry of the required; /// form, otherwise a malformed TLV entry error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:45,Modifiability,Variab,Variable,45,"/// A PC-relative REX load of a Thread Local Variable Pointer (TLVP) entry,; /// relaxable if the TLVP entry target is in-range of the fixup.; ///; /// If the TLVP entry target is in-range of the fixup then the load from the; /// TLVP may be replaced with a direct memory address calculation.; ///; /// The target of this edge must be a thread local variable entry of the form; /// .quad <tlv getter thunk>; /// .quad <tlv key>; /// .quad <tlv initializer>; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; /// - The target must be either external, or a TLV entry of the required; /// form, otherwise a malformed TLV entry error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:350,Modifiability,variab,variable,350,"/// A PC-relative REX load of a Thread Local Variable Pointer (TLVP) entry,; /// relaxable if the TLVP entry target is in-range of the fixup.; ///; /// If the TLVP entry target is in-range of the fixup then the load from the; /// TLVP may be replaced with a direct memory address calculation.; ///; /// The target of this edge must be a thread local variable entry of the form; /// .quad <tlv getter thunk>; /// .quad <tlv key>; /// .quad <tlv initializer>; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; /// - The target must be either external, or a TLV entry of the required; /// form, otherwise a malformed TLV entry error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:22,Performance,load,load,22,"/// A PC-relative REX load of a Thread Local Variable Pointer (TLVP) entry,; /// relaxable if the TLVP entry target is in-range of the fixup.; ///; /// If the TLVP entry target is in-range of the fixup then the load from the; /// TLVP may be replaced with a direct memory address calculation.; ///; /// The target of this edge must be a thread local variable entry of the form; /// .quad <tlv getter thunk>; /// .quad <tlv key>; /// .quad <tlv initializer>; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; /// - The target must be either external, or a TLV entry of the required; /// form, otherwise a malformed TLV entry error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:211,Performance,load,load,211,"/// A PC-relative REX load of a Thread Local Variable Pointer (TLVP) entry,; /// relaxable if the TLVP entry target is in-range of the fixup.; ///; /// If the TLVP entry target is in-range of the fixup then the load from the; /// TLVP may be replaced with a direct memory address calculation.; ///; /// The target of this edge must be a thread local variable entry of the form; /// .quad <tlv getter thunk>; /// .quad <tlv key>; /// .quad <tlv initializer>; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; /// - The target must be either external, or a TLV entry of the required; /// form, otherwise a malformed TLV entry error will be returned.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:378,Availability,Error,Errors,378,"/// A TLVP entry getter/constructor, transformed to; /// Delta32ToTLVPLoadREXRelaxable.; ///; /// Indicates that this edge should be transformed into a; /// Delta32ToTLVPLoadREXRelaxable targeting the TLVP entry for the edge's; /// current target. A TLVP entry for the target should be created if one does; /// not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:405,Availability,Failure,Failure,405,"/// A TLVP entry getter/constructor, transformed to; /// Delta32ToTLVPLoadREXRelaxable.; ///; /// Indicates that this edge should be transformed into a; /// Delta32ToTLVPLoadREXRelaxable targeting the TLVP entry for the edge's; /// current target. A TLVP entry for the target should be created if one does; /// not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:394,Testability,ASSERT,ASSERTION,394,"/// A TLVP entry getter/constructor, transformed to; /// Delta32ToTLVPLoadREXRelaxable.; ///; /// Indicates that this edge should be transformed into a; /// Delta32ToTLVPLoadREXRelaxable targeting the TLVP entry for the edge's; /// current target. A TLVP entry for the target should be created if one does; /// not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:490,Testability,assert,assert,490,"/// A TLVP entry getter/constructor, transformed to; /// Delta32ToTLVPLoadREXRelaxable.; ///; /// Indicates that this edge should be transformed into a; /// Delta32ToTLVPLoadREXRelaxable targeting the TLVP entry for the edge's; /// current target. A TLVP entry for the target should be created if one does; /// not already exist.; ///; /// Fixup expression:; /// NONE; ///; /// Errors:; /// - *ASSERTION* Failure to handle edges of this kind prior to the fixup; /// phase will result in an assert/unreachable during the fixup phase.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:24,Testability,stub,stub,24,/// x86-64 pointer jump stub content.; ///; /// Contains the instruction sequence for an indirect jump via an in-memory; /// pointer:; /// jmpq *ptr(%rip),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:18,Testability,stub,stub,18,/// Create a jump stub block that jumps via the pointer at the given symbol.; ///; /// The stub block will have the following default values:; /// alignment: 8-bit; /// alignment-offset: 0; /// address: highest allowable: (~5U),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:91,Testability,stub,stub,91,/// Create a jump stub block that jumps via the pointer at the given symbol.; ///; /// The stub block will have the following default values:; /// alignment: 8-bit; /// alignment-offset: 0; /// address: highest allowable: (~5U),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:18,Testability,stub,stub,18,/// Create a jump stub that jumps via the pointer at the given symbol and; /// an anonymous symbol pointing to it. Return the anonymous symbol.; ///; /// The stub block will be created by createPointerJumpStubBlock.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:158,Testability,stub,stub,158,/// Create a jump stub that jumps via the pointer at the given symbol and; /// an anonymous symbol pointing to it. Return the anonymous symbol.; ///; /// The stub block will be created by createPointerJumpStubBlock.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:79,Performance,optimiz,optimized,79,// Set the edge kind to Branch32ToPtrJumpStubBypassable to enable it to; // be optimized when the target is in-range.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:4,Performance,Optimiz,Optimize,4,"/// Optimize the GOT and Stub relocations if the edge target address is in range; /// 1. PCRel32GOTLoadRelaxable. For this edge kind, if the target is in range,; /// then replace GOT load with lea; /// 2. BranchPCRel32ToPtrJumpStubRelaxable. For this edge kind, if the target is; /// in range, replace a indirect jump by plt stub with a direct jump to the; /// target",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:183,Performance,load,load,183,"/// Optimize the GOT and Stub relocations if the edge target address is in range; /// 1. PCRel32GOTLoadRelaxable. For this edge kind, if the target is in range,; /// then replace GOT load with lea; /// 2. BranchPCRel32ToPtrJumpStubRelaxable. For this edge kind, if the target is; /// in range, replace a indirect jump by plt stub with a direct jump to the; /// target",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:25,Testability,Stub,Stub,25,"/// Optimize the GOT and Stub relocations if the edge target address is in range; /// 1. PCRel32GOTLoadRelaxable. For this edge kind, if the target is in range,; /// then replace GOT load with lea; /// 2. BranchPCRel32ToPtrJumpStubRelaxable. For this edge kind, if the target is; /// in range, replace a indirect jump by plt stub with a direct jump to the; /// target",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:325,Testability,stub,stub,325,"/// Optimize the GOT and Stub relocations if the edge target address is in range; /// 1. PCRel32GOTLoadRelaxable. For this edge kind, if the target is in range,; /// then replace GOT load with lea; /// 2. BranchPCRel32ToPtrJumpStubRelaxable. For this edge kind, if the target is; /// in range, replace a indirect jump by plt stub with a direct jump to the; /// target",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFPlatform.h:4,Integrability,Mediat,Mediates,4,/// Mediates between COFF initialization and ExecutionSession state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFPlatform.h:79,Performance,load,loaded,79,/// A function that will be called with the name of dll file that must be; /// loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFPlatform.h:9,Integrability,depend,dependency,9,// Build dependency graph of a JITDylib,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h:397,Performance,load,loading,397,"//===----- COFFVCRuntimeSupport.h -- VC runtime support in ORC --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Utilities for loading and initializaing vc runtime in Orc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h:305,Deployability,install,installation,305,"/// Try to create a COFFVCRuntimeBootstrapper instance. An optional; /// RuntimePath can be given to specify the location of directory that; /// contains all vc runtime library files such as ucrt.lib and msvcrt.lib. If; /// no path was given, it will try to search the MSVC toolchain and Windows; /// SDK installation and use the found library files automatically.; ///; /// Note that depending on the build setting, a different library; /// file must be used. In general, if vc runtime was statically linked to the; /// object file that is to be jit-linked, LoadStaticVCRuntime and; /// InitializeStaticVCRuntime must be used with libcmt.lib, libucrt.lib,; /// libvcruntimelib. If vc runtime was dynamically linked LoadDynamicVCRuntime; /// must be used along with msvcrt.lib, ucrt.lib, vcruntime.lib.; ///; /// More information is on:; /// https://docs.microsoft.com/en-us/cpp/c-runtime-library/crt-library-features",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h:385,Integrability,depend,depending,385,"/// Try to create a COFFVCRuntimeBootstrapper instance. An optional; /// RuntimePath can be given to specify the location of directory that; /// contains all vc runtime library files such as ucrt.lib and msvcrt.lib. If; /// no path was given, it will try to search the MSVC toolchain and Windows; /// SDK installation and use the found library files automatically.; ///; /// Note that depending on the build setting, a different library; /// file must be used. In general, if vc runtime was statically linked to the; /// object file that is to be jit-linked, LoadStaticVCRuntime and; /// InitializeStaticVCRuntime must be used with libcmt.lib, libucrt.lib,; /// libvcruntimelib. If vc runtime was dynamically linked LoadDynamicVCRuntime; /// must be used along with msvcrt.lib, ucrt.lib, vcruntime.lib.; ///; /// More information is on:; /// https://docs.microsoft.com/en-us/cpp/c-runtime-library/crt-library-features",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h:559,Performance,Load,LoadStaticVCRuntime,559,"/// Try to create a COFFVCRuntimeBootstrapper instance. An optional; /// RuntimePath can be given to specify the location of directory that; /// contains all vc runtime library files such as ucrt.lib and msvcrt.lib. If; /// no path was given, it will try to search the MSVC toolchain and Windows; /// SDK installation and use the found library files automatically.; ///; /// Note that depending on the build setting, a different library; /// file must be used. In general, if vc runtime was statically linked to the; /// object file that is to be jit-linked, LoadStaticVCRuntime and; /// InitializeStaticVCRuntime must be used with libcmt.lib, libucrt.lib,; /// libvcruntimelib. If vc runtime was dynamically linked LoadDynamicVCRuntime; /// must be used along with msvcrt.lib, ucrt.lib, vcruntime.lib.; ///; /// More information is on:; /// https://docs.microsoft.com/en-us/cpp/c-runtime-library/crt-library-features",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h:716,Performance,Load,LoadDynamicVCRuntime,716,"/// Try to create a COFFVCRuntimeBootstrapper instance. An optional; /// RuntimePath can be given to specify the location of directory that; /// contains all vc runtime library files such as ucrt.lib and msvcrt.lib. If; /// no path was given, it will try to search the MSVC toolchain and Windows; /// SDK installation and use the found library files automatically.; ///; /// Note that depending on the build setting, a different library; /// file must be used. In general, if vc runtime was statically linked to the; /// object file that is to be jit-linked, LoadStaticVCRuntime and; /// InitializeStaticVCRuntime must be used with libcmt.lib, libucrt.lib,; /// libvcruntimelib. If vc runtime was dynamically linked LoadDynamicVCRuntime; /// must be used along with msvcrt.lib, ucrt.lib, vcruntime.lib.; ///; /// More information is on:; /// https://docs.microsoft.com/en-us/cpp/c-runtime-library/crt-library-features",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h:198,Performance,Concurren,ConcurrentIRCompiler,198,"/// Simple compile functor: Takes a single IR module and returns an ObjectFile.; /// This compiler supports a single compilation thread and LLVMContext only.; /// For multithreaded compilation, use ConcurrentIRCompiler below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h:4,Usability,Simpl,Simple,4,"/// Simple compile functor: Takes a single IR module and returns an ObjectFile.; /// This compiler supports a single compilation thread and LLVMContext only.; /// For multithreaded compilation, use ConcurrentIRCompiler below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h:16,Usability,simpl,simple,16,/// Construct a simple compile functor with the given target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h:6,Usability,Simpl,SimpleCompiler,6,"/// A SimpleCompiler that owns its TargetMachine.; ///; /// This is convenient for clients who don't want to own their TargetMachines,; /// e.g. LLJIT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h:13,Safety,safe,safe,13,/// A thread-safe version of SimpleCompiler.; ///; /// This class creates a new TargetMachine and SimpleCompiler instance for each; /// compile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h:29,Usability,Simpl,SimpleCompiler,29,/// A thread-safe version of SimpleCompiler.; ///; /// This class creates a new TargetMachine and SimpleCompiler instance for each; /// compile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h:98,Usability,Simpl,SimpleCompiler,98,/// A thread-safe version of SimpleCompiler.; ///; /// This class creates a new TargetMachine and SimpleCompiler instance for each; /// compile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:108,Safety,safe,safe,108,"/// Runs the given callback under the session lock, passing in the associated; /// ResourceKey. This is the safe way to associate resources with trackers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:103,Testability,log,logging,103,/// Returns the key associated with this tracker.; /// This method should not be used except for debug logging: there is no; /// guarantee that the returned value will remain valid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:192,Integrability,interface,interface,192,"/// Lookup flags that apply to each dylib in the search order for a lookup.; ///; /// If MatchHiddenSymbolsOnly is used (the default) for a given dylib, then; /// only symbols in that Dylib's interface will be searched. If; /// MatchHiddenSymbols is used then symbols with hidden visibility will match; /// as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:235,Availability,error,error,235,"/// Lookup flags that apply to each symbol in a lookup.; ///; /// If RequiredSymbol is used (the default) for a given symbol then that symbol; /// must be found during the lookup or the lookup will fail returning a; /// SymbolNotFound error. If WeaklyReferencedSymbol is used and the given; /// symbol is not found then the query will continue, and no result for the; /// missing symbol will be present in the result (assuming the rest of the; /// lookup succeeds).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:39,Performance,perform,performed,39,/// Describes the kind of lookup being performed. The lookup kind is passed to; /// symbol generators (if they're invoked) to help them determine what; /// definitions to generate.; ///; /// Static -- Lookup is being performed as-if at static link time (e.g.; /// generators representing static archives should pull in new; /// definitions).; ///; /// DLSym -- Lookup is being performed as-if at runtime (e.g. generators; /// representing static archives should not pull in new definitions).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:217,Performance,perform,performed,217,/// Describes the kind of lookup being performed. The lookup kind is passed to; /// symbol generators (if they're invoked) to help them determine what; /// definitions to generate.; ///; /// Static -- Lookup is being performed as-if at static link time (e.g.; /// generators representing static archives should pull in new; /// definitions).; ///; /// DLSym -- Lookup is being performed as-if at runtime (e.g. generators; /// representing static archives should not pull in new definitions).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:377,Performance,perform,performed,377,/// Describes the kind of lookup being performed. The lookup kind is passed to; /// symbol generators (if they're invoked) to help them determine what; /// definitions to generate.; ///; /// Static -- Lookup is being performed as-if at static link time (e.g.; /// generators representing static archives should pull in new; /// definitions).; ///; /// DLSym -- Lookup is being performed as-if at runtime (e.g. generators; /// representing static archives should not pull in new definitions).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:133,Performance,optimiz,optimized,133,"/// A set of symbols to look up, each associated with a SymbolLookupFlags; /// value.; ///; /// This class is backed by a vector and optimized for fast insertion,; /// deletion and iteration. It does not guarantee a stable order between; /// operations, and will not automatically detect duplicate elements (they; /// can be manually checked by calling the validate method).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:281,Safety,detect,detect,281,"/// A set of symbols to look up, each associated with a SymbolLookupFlags; /// value.; ///; /// This class is backed by a vector and optimized for fast insertion,; /// deletion and iteration. It does not guarantee a stable order between; /// operations, and will not automatically detect duplicate elements (they; /// can be manually checked by calling the validate method).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:357,Security,validat,validate,357,"/// A set of symbols to look up, each associated with a SymbolLookupFlags; /// value.; ///; /// This class is backed by a vector and optimized for fast insertion,; /// deletion and iteration. It does not guarantee a stable order between; /// operations, and will not automatically detect duplicate elements (they; /// can be manually checked by calling the validate method).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:210,Availability,failure,failure,210,"/// Loop over the elements of this SymbolLookupSet, applying the Body function; /// to each one. Body must be callable as; /// Expected<bool>(const SymbolStringPtr &, SymbolLookupFlags).; /// If Body returns a failure value, the loop exits immediately. If Body; /// returns true then the element just passed in is removed from the set. If; /// Body returns false then the element is retained.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:87,Testability,assert,assertions,87,/// Returns true if this set contains any duplicates. This should only be used; /// in assertions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:29,Integrability,depend,dependencies,29,/// Callback to register the dependencies for a given query.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:90,Integrability,depend,dependants,90,/// This can be used as the value for a RegisterDependenciesFunction if there; /// are no dependants to register with.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:4,Availability,Error,Errors,4,/// Errors of this type should be returned if a module fails to include; /// definitions that are claimed by the module's associated; /// MaterializationResponsibility. If this error is returned it is indicative of; /// a broken transformation / compiler / object cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:177,Availability,error,error,177,/// Errors of this type should be returned if a module fails to include; /// definitions that are claimed by the module's associated; /// MaterializationResponsibility. If this error is returned it is indicative of; /// a broken transformation / compiler / object cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:264,Performance,cache,cache,264,/// Errors of this type should be returned if a module fails to include; /// definitions that are claimed by the module's associated; /// MaterializationResponsibility. If this error is returned it is indicative of; /// a broken transformation / compiler / object cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:4,Availability,Error,Errors,4,/// Errors of this type should be returned if a module contains definitions for; /// symbols that are not claimed by the module's associated; /// MaterializationResponsibility. If this error is returned it is indicative of; /// a broken transformation / compiler / object cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:185,Availability,error,error,185,/// Errors of this type should be returned if a module contains definitions for; /// symbols that are not claimed by the module's associated; /// MaterializationResponsibility. If this error is returned it is indicative of; /// a broken transformation / compiler / object cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:272,Performance,cache,cache,272,/// Errors of this type should be returned if a module contains definitions for; /// symbols that are not claimed by the module's associated; /// MaterializationResponsibility. If this error is returned it is indicative of; /// a broken transformation / compiler / object cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:375,Availability,error,error,375,"/// Tracks responsibility for materialization, and mediates interactions between; /// MaterializationUnits and JDs.; ///; /// An instance of this class is passed to MaterializationUnits when their; /// materialize method is called. It allows MaterializationUnits to resolve and; /// emit symbols, or abandon materialization by notifying any unmaterialized; /// symbols of an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:51,Integrability,mediat,mediates,51,"/// Tracks responsibility for materialization, and mediates interactions between; /// MaterializationUnits and JDs.; ///; /// An instance of this class is passed to MaterializationUnits when their; /// materialize method is called. It allows MaterializationUnits to resolve and; /// emit symbols, or abandon materialization by notifying any unmaterialized; /// symbols of an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:166,Availability,error,error,166,/// Destruct a MaterializationResponsibility instance. In debug mode; /// this asserts that all symbols being tracked have been either; /// emitted or notified of an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:79,Testability,assert,asserts,79,/// Destruct a MaterializationResponsibility instance. In debug mode; /// this asserts that all symbols being tracked have been either; /// emitted or notified of an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:108,Safety,safe,safe,108,"/// Runs the given callback under the session lock, passing in the associated; /// ResourceKey. This is the safe way to associate resources with trackers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:493,Availability,error,error,493,"/// Notifies the target JITDylib that the given symbols have been resolved.; /// This will update the given symbols' addresses in the JITDylib, and notify; /// any pending queries on the given symbols of their resolution. The given; /// symbols must be ones covered by this MaterializationResponsibility; /// instance. Individual calls to this method may resolve a subset of the; /// symbols, but all symbols must have been resolved prior to calling emit.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:557,Availability,error,error,557,"/// Notifies the target JITDylib that the given symbols have been resolved.; /// This will update the given symbols' addresses in the JITDylib, and notify; /// any pending queries on the given symbols of their resolution. The given; /// symbols must be ones covered by this MaterializationResponsibility; /// instance. Individual calls to this method may resolve a subset of the; /// symbols, but all symbols must have been resolved prior to calling emit.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:580,Availability,failure,failure,580,"/// Notifies the target JITDylib that the given symbols have been resolved.; /// This will update the given symbols' addresses in the JITDylib, and notify; /// any pending queries on the given symbols of their resolution. The given; /// symbols must be ones covered by this MaterializationResponsibility; /// instance. Individual calls to this method may resolve a subset of the; /// symbols, but all symbols must have been resolved prior to calling emit.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:636,Availability,error,error,636,"/// Notifies the target JITDylib that the given symbols have been resolved.; /// This will update the given symbols' addresses in the JITDylib, and notify; /// any pending queries on the given symbols of their resolution. The given; /// symbols must be ones covered by this MaterializationResponsibility; /// instance. Individual calls to this method may resolve a subset of the; /// symbols, but all symbols must have been resolved prior to calling emit.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:853,Availability,Error,Error,853,"/// Notifies the target JITDylib that the given symbols have been resolved.; /// This will update the given symbols' addresses in the JITDylib, and notify; /// any pending queries on the given symbols of their resolution. The given; /// symbols must be ones covered by this MaterializationResponsibility; /// instance. Individual calls to this method may resolve a subset of the; /// symbols, but all symbols must have been resolved prior to calling emit.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:91,Deployability,update,update,91,"/// Notifies the target JITDylib that the given symbols have been resolved.; /// This will update the given symbols' addresses in the JITDylib, and notify; /// any pending queries on the given symbols of their resolution. The given; /// symbols must be ones covered by this MaterializationResponsibility; /// instance. Individual calls to this method may resolve a subset of the; /// symbols, but all symbols must have been resolved prior to calling emit.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:593,Integrability,depend,dependency,593,"/// Notifies the target JITDylib that the given symbols have been resolved.; /// This will update the given symbols' addresses in the JITDylib, and notify; /// any pending queries on the given symbols of their resolution. The given; /// symbols must be ones covered by this MaterializationResponsibility; /// instance. Individual calls to this method may resolve a subset of the; /// symbols, but all symbols must have been resolved prior to calling emit.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:706,Integrability,depend,dependencies,706,"/// Notifies the target JITDylib that the given symbols have been resolved.; /// This will update the given symbols' addresses in the JITDylib, and notify; /// any pending queries on the given symbols of their resolution. The given; /// symbols must be ones covered by this MaterializationResponsibility; /// instance. Individual calls to this method may resolve a subset of the; /// symbols, but all symbols must have been resolved prior to calling emit.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:881,Integrability,wrap,wrapped,881,"/// Notifies the target JITDylib that the given symbols have been resolved.; /// This will update the given symbols' addresses in the JITDylib, and notify; /// any pending queries on the given symbols of their resolution. The given; /// symbols must be ones covered by this MaterializationResponsibility; /// instance. Individual calls to this method may resolve a subset of the; /// symbols, but all symbols must have been resolved prior to calling emit.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:662,Testability,log,log,662,"/// Notifies the target JITDylib that the given symbols have been resolved.; /// This will update the given symbols' addresses in the JITDylib, and notify; /// any pending queries on the given symbols of their resolution. The given; /// symbols must be ones covered by this MaterializationResponsibility; /// instance. Individual calls to this method may resolve a subset of the; /// symbols, but all symbols must have been resolved prior to calling emit.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:214,Availability,error,error,214,/// Notifies the target JITDylib (and any pending queries on that JITDylib); /// that all symbols covered by this MaterializationResponsibility instance; /// have been emitted.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:278,Availability,error,error,278,/// Notifies the target JITDylib (and any pending queries on that JITDylib); /// that all symbols covered by this MaterializationResponsibility instance; /// have been emitted.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:301,Availability,failure,failure,301,/// Notifies the target JITDylib (and any pending queries on that JITDylib); /// that all symbols covered by this MaterializationResponsibility instance; /// have been emitted.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:357,Availability,error,error,357,/// Notifies the target JITDylib (and any pending queries on that JITDylib); /// that all symbols covered by this MaterializationResponsibility instance; /// have been emitted.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:574,Availability,Error,Error,574,/// Notifies the target JITDylib (and any pending queries on that JITDylib); /// that all symbols covered by this MaterializationResponsibility instance; /// have been emitted.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:314,Integrability,depend,dependency,314,/// Notifies the target JITDylib (and any pending queries on that JITDylib); /// that all symbols covered by this MaterializationResponsibility instance; /// have been emitted.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:427,Integrability,depend,dependencies,427,/// Notifies the target JITDylib (and any pending queries on that JITDylib); /// that all symbols covered by this MaterializationResponsibility instance; /// have been emitted.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:602,Integrability,wrap,wrapped,602,/// Notifies the target JITDylib (and any pending queries on that JITDylib); /// that all symbols covered by this MaterializationResponsibility instance; /// have been emitted.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:383,Testability,log,log,383,/// Notifies the target JITDylib (and any pending queries on that JITDylib); /// that all symbols covered by this MaterializationResponsibility instance; /// have been emitted.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:358,Availability,error,errors,358,"/// Attempt to claim responsibility for new definitions. This method can be; /// used to claim responsibility for symbols that are added to a; /// materialization unit during the compilation process (e.g. literal pool; /// symbols). Symbol linkage rules are the same as for symbols that are; /// defined up front: duplicate strong definitions will result in errors.; /// Duplicate weak definitions will be discarded (in which case they will; /// not be added to this responsibility instance).; ///; /// This method can be used by materialization units that want to add; /// additional symbols at materialization time (e.g. stubs, compile; /// callbacks, metadata).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:623,Testability,stub,stubs,623,"/// Attempt to claim responsibility for new definitions. This method can be; /// used to claim responsibility for symbols that are added to a; /// materialization unit during the compilation process (e.g. literal pool; /// symbols). Symbol linkage rules are the same as for symbols that are; /// defined up front: duplicate strong definitions will result in errors.; /// Duplicate weak definitions will be discarded (in which case they will; /// not be added to this responsibility instance).; ///; /// This method can be used by materialization units that want to add; /// additional symbols at materialization time (e.g. stubs, compile; /// callbacks, metadata).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:99,Availability,error,error,99,"/// Notify all not-yet-emitted covered by this MaterializationResponsibility; /// instance that an error has occurred.; /// This will remove all symbols covered by this MaterializationResponsibility; /// from the target JITDylib, and send an error to any queries waiting on; /// these symbols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:242,Availability,error,error,242,"/// Notify all not-yet-emitted covered by this MaterializationResponsibility; /// instance that an error has occurred.; /// This will remove all symbols covered by this MaterializationResponsibility; /// from the target JITDylib, and send an error to any queries waiting on; /// these symbols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:8,Integrability,depend,dependencies,8,/// Add dependencies that apply to all symbols covered by this instance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:200,Availability,avail,available,200,"/// Implementations of this method should discard the given symbol; /// from the source (e.g. if the source is an LLVM IR Module and the; /// symbol is a function, delete the function body or mark it available; /// externally).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:49,Integrability,depend,dependencies,49,"/// Emitted to memory, but waiting on transitive dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:14,Safety,safe,safe,14,/// Ready and safe for clients to access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:34,Security,access,access,34,/// Ready and safe for clients to access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:132,Availability,avail,available,132,/// A symbol query that returns results via a callback when results are; /// ready.; ///; /// makes a callback when all symbols are available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:4,Integrability,Wrap,Wraps,4,/// Wraps state for a lookup-in-progress.; /// DefinitionGenerators can optionally take ownership of a LookupState object; /// to suspend a lookup-in-progress while they search for definitions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:787,Availability,alive,alive,787,"/// Represents a JIT'd dynamic library.; ///; /// This class aims to mimic the behavior of a regular dylib or shared object,; /// but without requiring the contained program representations to be compiled; /// up-front. The JITDylib's content is defined by adding MaterializationUnits,; /// and contained MaterializationUnits will typically rely on the JITDylib's; /// links-against order to resolve external references (similar to a regular; /// dylib).; ///; /// The JITDylib object is a thin wrapper that references state held by the; /// ExecutionSession. JITDylibs can be removed, clearing this underlying state; /// and leaving the JITDylib object in a defunct state. In this state the; /// JITDylib's name is guaranteed to remain accessible. If the ExecutionSession; /// is still alive then other operations are callable but will return an Error; /// or null result (depending on the API). It is illegal to call any operation; /// other than getName on a JITDylib after the ExecutionSession has been torn; /// down.; ///; /// JITDylibs cannot be moved or copied. Their address is stable, and useful as; /// a key in some JIT data structures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:847,Availability,Error,Error,847,"/// Represents a JIT'd dynamic library.; ///; /// This class aims to mimic the behavior of a regular dylib or shared object,; /// but without requiring the contained program representations to be compiled; /// up-front. The JITDylib's content is defined by adding MaterializationUnits,; /// and contained MaterializationUnits will typically rely on the JITDylib's; /// links-against order to resolve external references (similar to a regular; /// dylib).; ///; /// The JITDylib object is a thin wrapper that references state held by the; /// ExecutionSession. JITDylibs can be removed, clearing this underlying state; /// and leaving the JITDylib object in a defunct state. In this state the; /// JITDylib's name is guaranteed to remain accessible. If the ExecutionSession; /// is still alive then other operations are callable but will return an Error; /// or null result (depending on the API). It is illegal to call any operation; /// other than getName on a JITDylib after the ExecutionSession has been torn; /// down.; ///; /// JITDylibs cannot be moved or copied. Their address is stable, and useful as; /// a key in some JIT data structures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:1017,Availability,down,down,1017,"/// Represents a JIT'd dynamic library.; ///; /// This class aims to mimic the behavior of a regular dylib or shared object,; /// but without requiring the contained program representations to be compiled; /// up-front. The JITDylib's content is defined by adding MaterializationUnits,; /// and contained MaterializationUnits will typically rely on the JITDylib's; /// links-against order to resolve external references (similar to a regular; /// dylib).; ///; /// The JITDylib object is a thin wrapper that references state held by the; /// ExecutionSession. JITDylibs can be removed, clearing this underlying state; /// and leaving the JITDylib object in a defunct state. In this state the; /// JITDylib's name is guaranteed to remain accessible. If the ExecutionSession; /// is still alive then other operations are callable but will return an Error; /// or null result (depending on the API). It is illegal to call any operation; /// other than getName on a JITDylib after the ExecutionSession has been torn; /// down.; ///; /// JITDylibs cannot be moved or copied. Their address is stable, and useful as; /// a key in some JIT data structures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:495,Integrability,wrap,wrapper,495,"/// Represents a JIT'd dynamic library.; ///; /// This class aims to mimic the behavior of a regular dylib or shared object,; /// but without requiring the contained program representations to be compiled; /// up-front. The JITDylib's content is defined by adding MaterializationUnits,; /// and contained MaterializationUnits will typically rely on the JITDylib's; /// links-against order to resolve external references (similar to a regular; /// dylib).; ///; /// The JITDylib object is a thin wrapper that references state held by the; /// ExecutionSession. JITDylibs can be removed, clearing this underlying state; /// and leaving the JITDylib object in a defunct state. In this state the; /// JITDylib's name is guaranteed to remain accessible. If the ExecutionSession; /// is still alive then other operations are callable but will return an Error; /// or null result (depending on the API). It is illegal to call any operation; /// other than getName on a JITDylib after the ExecutionSession has been torn; /// down.; ///; /// JITDylibs cannot be moved or copied. Their address is stable, and useful as; /// a key in some JIT data structures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:874,Integrability,depend,depending,874,"/// Represents a JIT'd dynamic library.; ///; /// This class aims to mimic the behavior of a regular dylib or shared object,; /// but without requiring the contained program representations to be compiled; /// up-front. The JITDylib's content is defined by adding MaterializationUnits,; /// and contained MaterializationUnits will typically rely on the JITDylib's; /// links-against order to resolve external references (similar to a regular; /// dylib).; ///; /// The JITDylib object is a thin wrapper that references state held by the; /// ExecutionSession. JITDylibs can be removed, clearing this underlying state; /// and leaving the JITDylib object in a defunct state. In this state the; /// JITDylib's name is guaranteed to remain accessible. If the ExecutionSession; /// is still alive then other operations are callable but will return an Error; /// or null result (depending on the API). It is illegal to call any operation; /// other than getName on a JITDylib after the ExecutionSession has been torn; /// down.; ///; /// JITDylibs cannot be moved or copied. Their address is stable, and useful as; /// a key in some JIT data structures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:737,Security,access,accessible,737,"/// Represents a JIT'd dynamic library.; ///; /// This class aims to mimic the behavior of a regular dylib or shared object,; /// but without requiring the contained program representations to be compiled; /// up-front. The JITDylib's content is defined by adding MaterializationUnits,; /// and contained MaterializationUnits will typically rely on the JITDylib's; /// links-against order to resolve external references (similar to a regular; /// dylib).; ///; /// The JITDylib object is a thin wrapper that references state held by the; /// ExecutionSession. JITDylibs can be removed, clearing this underlying state; /// and leaving the JITDylib object in a defunct state. In this state the; /// JITDylib's name is guaranteed to remain accessible. If the ExecutionSession; /// is still alive then other operations are callable but will return an Error; /// or null result (depending on the API). It is illegal to call any operation; /// other than getName on a JITDylib after the ExecutionSession has been torn; /// down.; ///; /// JITDylibs cannot be moved or copied. Their address is stable, and useful as; /// a key in some JIT data structures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:586,Usability,clear,clearing,586,"/// Represents a JIT'd dynamic library.; ///; /// This class aims to mimic the behavior of a regular dylib or shared object,; /// but without requiring the contained program representations to be compiled; /// up-front. The JITDylib's content is defined by adding MaterializationUnits,; /// and contained MaterializationUnits will typically rely on the JITDylib's; /// links-against order to resolve external references (similar to a regular; /// dylib).; ///; /// The JITDylib object is a thin wrapper that references state held by the; /// ExecutionSession. JITDylibs can be removed, clearing this underlying state; /// and leaving the JITDylib object in a defunct state. In this state the; /// JITDylib's name is guaranteed to remain accessible. If the ExecutionSession; /// is still alive then other operations are callable but will return an Error; /// or null result (depending on the API). It is illegal to call any operation; /// other than getName on a JITDylib after the ExecutionSession has been torn; /// down.; ///; /// JITDylibs cannot be moved or copied. Their address is stable, and useful as; /// a key in some JIT data structures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:202,Availability,alive,alive,202,"/// Get a reference to the ExecutionSession for this JITDylib.; ///; /// It is legal to call this method on a defunct JITDylib, however the result; /// will only usable if the ExecutionSession is still alive. If this JITDylib; /// is held by an error that may have torn down the JIT then the result; /// should not be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:245,Availability,error,error,245,"/// Get a reference to the ExecutionSession for this JITDylib.; ///; /// It is legal to call this method on a defunct JITDylib, however the result; /// will only usable if the ExecutionSession is still alive. If this JITDylib; /// is held by an error that may have torn down the JIT then the result; /// should not be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:270,Availability,down,down,270,"/// Get a reference to the ExecutionSession for this JITDylib.; ///; /// It is legal to call this method on a defunct JITDylib, however the result; /// will only usable if the ExecutionSession is still alive. If this JITDylib; /// is held by an error that may have torn down the JIT then the result; /// should not be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:162,Usability,usab,usable,162,"/// Get a reference to the ExecutionSession for this JITDylib.; ///; /// It is legal to call this method on a defunct JITDylib, however the result; /// will only usable if the ExecutionSession is still alive. If this JITDylib; /// is held by an error that may have torn down the JIT then the result; /// should not be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:200,Performance,concurren,concurrently,200,"/// Calls remove on all trackers currently associated with this JITDylib.; /// Does not run static deinits.; ///; /// Note that removal happens outside the session lock, so new code may be; /// added concurrently while the clear is underway, and the newly added; /// code will *not* be cleared. Adding new code concurrently with a clear; /// is usually a bug and should be avoided.; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:311,Performance,concurren,concurrently,311,"/// Calls remove on all trackers currently associated with this JITDylib.; /// Does not run static deinits.; ///; /// Note that removal happens outside the session lock, so new code may be; /// added concurrently while the clear is underway, and the newly added; /// code will *not* be cleared. Adding new code concurrently with a clear; /// is usually a bug and should be avoided.; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:373,Safety,avoid,avoided,373,"/// Calls remove on all trackers currently associated with this JITDylib.; /// Does not run static deinits.; ///; /// Note that removal happens outside the session lock, so new code may be; /// added concurrently while the clear is underway, and the newly added; /// code will *not* be cleared. Adding new code concurrently with a clear; /// is usually a bug and should be avoided.; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:223,Usability,clear,clear,223,"/// Calls remove on all trackers currently associated with this JITDylib.; /// Does not run static deinits.; ///; /// Note that removal happens outside the session lock, so new code may be; /// added concurrently while the clear is underway, and the newly added; /// code will *not* be cleared. Adding new code concurrently with a clear; /// is usually a bug and should be avoided.; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:286,Usability,clear,cleared,286,"/// Calls remove on all trackers currently associated with this JITDylib.; /// Does not run static deinits.; ///; /// Note that removal happens outside the session lock, so new code may be; /// added concurrently while the clear is underway, and the newly added; /// code will *not* be cleared. Adding new code concurrently with a clear; /// is usually a bug and should be avoided.; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:331,Usability,clear,clear,331,"/// Calls remove on all trackers currently associated with this JITDylib.; /// Does not run static deinits.; ///; /// Note that removal happens outside the session lock, so new code may be; /// added concurrently while the clear is underway, and the newly added; /// code will *not* be cleared. Adding new code concurrently with a clear; /// is usually a bug and should be avoided.; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:517,Availability,redundant,redundant,517,"/// Set the link order to be used when fixing up definitions in JITDylib.; /// This will replace the previous link order, and apply to any symbol; /// resolutions made for definitions in this JITDylib after the call to; /// setLinkOrder (even if the definition itself was added before the; /// call).; ///; /// If LinkAgainstThisJITDylibFirst is true (the default) then this JITDylib; /// will add itself to the beginning of the LinkOrder (Clients should not; /// put this JITDylib in the list in this case, to avoid redundant lookups).; ///; /// If LinkAgainstThisJITDylibFirst is false then the link order will be used; /// as-is. The primary motivation for this feature is to support deliberate; /// shadowing of symbols in this JITDylib by a facade JITDylib. For example,; /// the facade may resolve function names to stubs, and the stubs may compile; /// lazily by looking up symbols in this dylib. Adding the facade dylib; /// as the first in the link order (instead of this dylib) ensures that; /// definitions within this dylib resolve to the lazy-compiling stubs,; /// rather than immediately materializing the definitions in this dylib.; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:511,Safety,avoid,avoid,511,"/// Set the link order to be used when fixing up definitions in JITDylib.; /// This will replace the previous link order, and apply to any symbol; /// resolutions made for definitions in this JITDylib after the call to; /// setLinkOrder (even if the definition itself was added before the; /// call).; ///; /// If LinkAgainstThisJITDylibFirst is true (the default) then this JITDylib; /// will add itself to the beginning of the LinkOrder (Clients should not; /// put this JITDylib in the list in this case, to avoid redundant lookups).; ///; /// If LinkAgainstThisJITDylibFirst is false then the link order will be used; /// as-is. The primary motivation for this feature is to support deliberate; /// shadowing of symbols in this JITDylib by a facade JITDylib. For example,; /// the facade may resolve function names to stubs, and the stubs may compile; /// lazily by looking up symbols in this dylib. Adding the facade dylib; /// as the first in the link order (instead of this dylib) ensures that; /// definitions within this dylib resolve to the lazy-compiling stubs,; /// rather than immediately materializing the definitions in this dylib.; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:517,Safety,redund,redundant,517,"/// Set the link order to be used when fixing up definitions in JITDylib.; /// This will replace the previous link order, and apply to any symbol; /// resolutions made for definitions in this JITDylib after the call to; /// setLinkOrder (even if the definition itself was added before the; /// call).; ///; /// If LinkAgainstThisJITDylibFirst is true (the default) then this JITDylib; /// will add itself to the beginning of the LinkOrder (Clients should not; /// put this JITDylib in the list in this case, to avoid redundant lookups).; ///; /// If LinkAgainstThisJITDylibFirst is false then the link order will be used; /// as-is. The primary motivation for this feature is to support deliberate; /// shadowing of symbols in this JITDylib by a facade JITDylib. For example,; /// the facade may resolve function names to stubs, and the stubs may compile; /// lazily by looking up symbols in this dylib. Adding the facade dylib; /// as the first in the link order (instead of this dylib) ensures that; /// definitions within this dylib resolve to the lazy-compiling stubs,; /// rather than immediately materializing the definitions in this dylib.; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:822,Testability,stub,stubs,822,"/// Set the link order to be used when fixing up definitions in JITDylib.; /// This will replace the previous link order, and apply to any symbol; /// resolutions made for definitions in this JITDylib after the call to; /// setLinkOrder (even if the definition itself was added before the; /// call).; ///; /// If LinkAgainstThisJITDylibFirst is true (the default) then this JITDylib; /// will add itself to the beginning of the LinkOrder (Clients should not; /// put this JITDylib in the list in this case, to avoid redundant lookups).; ///; /// If LinkAgainstThisJITDylibFirst is false then the link order will be used; /// as-is. The primary motivation for this feature is to support deliberate; /// shadowing of symbols in this JITDylib by a facade JITDylib. For example,; /// the facade may resolve function names to stubs, and the stubs may compile; /// lazily by looking up symbols in this dylib. Adding the facade dylib; /// as the first in the link order (instead of this dylib) ensures that; /// definitions within this dylib resolve to the lazy-compiling stubs,; /// rather than immediately materializing the definitions in this dylib.; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:837,Testability,stub,stubs,837,"/// Set the link order to be used when fixing up definitions in JITDylib.; /// This will replace the previous link order, and apply to any symbol; /// resolutions made for definitions in this JITDylib after the call to; /// setLinkOrder (even if the definition itself was added before the; /// call).; ///; /// If LinkAgainstThisJITDylibFirst is true (the default) then this JITDylib; /// will add itself to the beginning of the LinkOrder (Clients should not; /// put this JITDylib in the list in this case, to avoid redundant lookups).; ///; /// If LinkAgainstThisJITDylibFirst is false then the link order will be used; /// as-is. The primary motivation for this feature is to support deliberate; /// shadowing of symbols in this JITDylib by a facade JITDylib. For example,; /// the facade may resolve function names to stubs, and the stubs may compile; /// lazily by looking up symbols in this dylib. Adding the facade dylib; /// as the first in the link order (instead of this dylib) ensures that; /// definitions within this dylib resolve to the lazy-compiling stubs,; /// rather than immediately materializing the definitions in this dylib.; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:1066,Testability,stub,stubs,1066,"/// Set the link order to be used when fixing up definitions in JITDylib.; /// This will replace the previous link order, and apply to any symbol; /// resolutions made for definitions in this JITDylib after the call to; /// setLinkOrder (even if the definition itself was added before the; /// call).; ///; /// If LinkAgainstThisJITDylibFirst is true (the default) then this JITDylib; /// will add itself to the beginning of the LinkOrder (Clients should not; /// put this JITDylib in the list in this case, to avoid redundant lookups).; ///; /// If LinkAgainstThisJITDylibFirst is false then the link order will be used; /// as-is. The primary motivation for this feature is to support deliberate; /// shadowing of symbols in this JITDylib by a facade JITDylib. For example,; /// the facade may resolve function names to stubs, and the stubs may compile; /// lazily by looking up symbols in this dylib. Adding the facade dylib; /// as the first in the link order (instead of this dylib) ensures that; /// definitions within this dylib resolve to the lazy-compiling stubs,; /// rather than immediately materializing the definitions in this dylib.; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:262,Availability,error,errors,262,"/// Define all symbols provided by the materialization unit to be part of this; /// JITDylib.; ///; /// If RT is not specified then the default resource tracker will be used.; ///; /// This overload always takes ownership of the MaterializationUnit. If any; /// errors occur, the MaterializationUnit consumed.; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:169,Availability,error,error,169,"/// Define all symbols provided by the materialization unit to be part of this; /// JITDylib.; ///; /// This overload only takes ownership of the MaterializationUnit no error is; /// generated. If an error occurs, ownership remains with the caller. This; /// may allow the caller to modify the MaterializationUnit to correct the; /// issue, then re-call define.; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:200,Availability,error,error,200,"/// Define all symbols provided by the materialization unit to be part of this; /// JITDylib.; ///; /// This overload only takes ownership of the MaterializationUnit no error is; /// generated. If an error occurs, ownership remains with the caller. This; /// may allow the caller to modify the MaterializationUnit to correct the; /// issue, then re-call define.; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:144,Availability,error,error,144,"/// Tries to remove the given symbols.; ///; /// If any symbols are not defined in this JITDylib this method will return; /// a SymbolsNotFound error covering the missing symbols.; ///; /// If all symbols are found but some symbols are in the process of being; /// materialized this method will return a SymbolsCouldNotBeRemoved error.; ///; /// On success, all symbols are removed. On failure, the JITDylib state is; /// left unmodified (no symbols are removed).; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:329,Availability,error,error,329,"/// Tries to remove the given symbols.; ///; /// If any symbols are not defined in this JITDylib this method will return; /// a SymbolsNotFound error covering the missing symbols.; ///; /// If all symbols are found but some symbols are in the process of being; /// materialized this method will return a SymbolsCouldNotBeRemoved error.; ///; /// On success, all symbols are removed. On failure, the JITDylib state is; /// left unmodified (no symbols are removed).; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:386,Availability,failure,failure,386,"/// Tries to remove the given symbols.; ///; /// If any symbols are not defined in this JITDylib this method will return; /// a SymbolsNotFound error covering the missing symbols.; ///; /// If all symbols are found but some symbols are in the process of being; /// materialized this method will return a SymbolsCouldNotBeRemoved error.; ///; /// On success, all symbols are removed. On failure, the JITDylib state is; /// left unmodified (no symbols are removed).; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:254,Availability,error,error,254,"/// Returns the given JITDylibs and all of their transitive dependencies in; /// DFS order (based on linkage relationships). Each JITDylib will appear; /// only once.; ///; /// If any JITDylib in the order is defunct then this method will return an; /// error, otherwise returns the order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:60,Integrability,depend,dependencies,60,"/// Returns the given JITDylibs and all of their transitive dependencies in; /// DFS order (based on linkage relationships). Each JITDylib will appear; /// only once.; ///; /// If any JITDylib in the order is defunct then this method will return an; /// error, otherwise returns the order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:262,Availability,error,error,262,"/// Returns the given JITDylibs and all of their transitive dependencies in; /// reverse DFS order (based on linkage relationships). Each JITDylib will; /// appear only once.; ///; /// If any JITDylib in the order is defunct then this method will return an; /// error, otherwise returns the order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:60,Integrability,depend,dependencies,60,"/// Returns the given JITDylibs and all of their transitive dependencies in; /// reverse DFS order (based on linkage relationships). Each JITDylib will; /// appear only once.; ///; /// If any JITDylib in the order is defunct then this method will return an; /// error, otherwise returns the order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:194,Availability,error,error,194,"/// Return this JITDylib and its transitive dependencies in DFS order; /// based on linkage relationships.; ///; /// If any JITDylib in the order is defunct then this method will return an; /// error, otherwise returns the order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:44,Integrability,depend,dependencies,44,"/// Return this JITDylib and its transitive dependencies in DFS order; /// based on linkage relationships.; ///; /// If any JITDylib in the order is defunct then this method will return an; /// error, otherwise returns the order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:202,Availability,error,error,202,"/// Rteurn this JITDylib and its transitive dependencies in reverse DFS order; /// based on linkage relationships.; ///; /// If any JITDylib in the order is defunct then this method will return an; /// error, otherwise returns the order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:44,Integrability,depend,dependencies,44,"/// Rteurn this JITDylib and its transitive dependencies in reverse DFS order; /// based on linkage relationships.; ///; /// If any JITDylib in the order is defunct then this method will return an; /// error, otherwise returns the order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:42,Integrability,mediat,mediate,42,/// Platforms set up standard symbols and mediate interactions between dynamic; /// initializers (e.g. C++ static constructors) and ExecutionSession state.; /// Note that Platforms do not automatically run initializers: clients are still; /// responsible for doing this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:169,Deployability,install,install,169,/// This method will be called outside the session lock each time a JITDylib; /// is created (unless it is created with EmptyJITDylib set) to allow the; /// Platform to install any JITDylib specific standard symbols (e.g; /// __dso_handle).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:59,Performance,Perform,Performs,59,/// A utility function for looking up initializer symbols. Performs a blocking; /// lookup for the given symbols in each of the given JITDylibs.; ///; /// Note: This function is deprecated and will be removed in the near future.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:4,Performance,Perform,Performs,4,"/// Performs an async lookup for the given symbols in each of the given; /// JITDylibs, calling the given handler once all lookups have completed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:18,Availability,error,errors,18,/// For reporting errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:20,Integrability,wrap,wrapper-function,20,/// An asynchronous wrapper-function callable from the executor via; /// jit-dispatch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:50,Integrability,wrap,wrapper,50,/// A map associating tag names with asynchronous wrapper function; /// implementations in the JIT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:272,Deployability,install,install,272,/// Add a new bare JITDylib to this ExecutionSession.; ///; /// The JITDylib Name is required to be unique. Clients should verify that; /// names are not being re-used (E.g. by calling getJITDylibByName) if names; /// are based on user input.; ///; /// This call does not install any library code or symbols into the newly; /// created JITDylib. The client is responsible for all configuration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:380,Deployability,configurat,configuration,380,/// Add a new bare JITDylib to this ExecutionSession.; ///; /// The JITDylib Name is required to be unique. Clients should verify that; /// names are not being re-used (E.g. by calling getJITDylibByName) if names; /// are based on user input.; ///; /// This call does not install any library code or symbols into the newly; /// created JITDylib. The client is responsible for all configuration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:380,Modifiability,config,configuration,380,/// Add a new bare JITDylib to this ExecutionSession.; ///; /// The JITDylib Name is required to be unique. Clients should verify that; /// names are not being re-used (E.g. by calling getJITDylibByName) if names; /// are based on user input.; ///; /// This call does not install any library code or symbols into the newly; /// created JITDylib. The client is responsible for all configuration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:326,Deployability,install,install,326,/// Add a new JITDylib to this ExecutionSession.; ///; /// The JITDylib Name is required to be unique. Clients should verify that; /// names are not being re-used (e.g. by calling getJITDylibByName) if names; /// are based on user input.; ///; /// If a Platform is attached then Platform::setupJITDylib will be called to; /// install standard platform symbols (e.g. standard library interposes).; /// If no Platform is attached this call is equivalent to createBareJITDylib.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:803,Integrability,depend,depend,803,"/// Removes the given JITDylibs from the ExecutionSession.; ///; /// This method clears all resources held for the JITDylibs, puts them in the; /// closed state, and clears all references to them that are held by the; /// ExecutionSession or other JITDylibs. No further code can be added to the; /// removed JITDylibs, and the JITDylib objects will be freed once any; /// remaining JITDylibSPs pointing to them are destroyed.; ///; /// This method does *not* run static destructors for code contained in the; /// JITDylibs, and each JITDylib can only be removed once.; ///; /// JITDylibs will be removed in the order given. Teardown is usually; /// independent for each JITDylib, but not always. In particular, where the; /// ORC runtime is used it is expected that teardown off all JITDylibs will; /// depend on it, so the JITDylib containing the ORC runtime must be removed; /// last. If the client has introduced any other dependencies they should be; /// accounted for in the removal order too.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:926,Integrability,depend,dependencies,926,"/// Removes the given JITDylibs from the ExecutionSession.; ///; /// This method clears all resources held for the JITDylibs, puts them in the; /// closed state, and clears all references to them that are held by the; /// ExecutionSession or other JITDylibs. No further code can be added to the; /// removed JITDylibs, and the JITDylib objects will be freed once any; /// remaining JITDylibSPs pointing to them are destroyed.; ///; /// This method does *not* run static destructors for code contained in the; /// JITDylibs, and each JITDylib can only be removed once.; ///; /// JITDylibs will be removed in the order given. Teardown is usually; /// independent for each JITDylib, but not always. In particular, where the; /// ORC runtime is used it is expected that teardown off all JITDylibs will; /// depend on it, so the JITDylib containing the ORC runtime must be removed; /// last. If the client has introduced any other dependencies they should be; /// accounted for in the removal order too.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:81,Usability,clear,clears,81,"/// Removes the given JITDylibs from the ExecutionSession.; ///; /// This method clears all resources held for the JITDylibs, puts them in the; /// closed state, and clears all references to them that are held by the; /// ExecutionSession or other JITDylibs. No further code can be added to the; /// removed JITDylibs, and the JITDylib objects will be freed once any; /// remaining JITDylibSPs pointing to them are destroyed.; ///; /// This method does *not* run static destructors for code contained in the; /// JITDylibs, and each JITDylib can only be removed once.; ///; /// JITDylibs will be removed in the order given. Teardown is usually; /// independent for each JITDylib, but not always. In particular, where the; /// ORC runtime is used it is expected that teardown off all JITDylibs will; /// depend on it, so the JITDylib containing the ORC runtime must be removed; /// last. If the client has introduced any other dependencies they should be; /// accounted for in the removal order too.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:166,Usability,clear,clears,166,"/// Removes the given JITDylibs from the ExecutionSession.; ///; /// This method clears all resources held for the JITDylibs, puts them in the; /// closed state, and clears all references to them that are held by the; /// ExecutionSession or other JITDylibs. No further code can be added to the; /// removed JITDylibs, and the JITDylib objects will be freed once any; /// remaining JITDylibSPs pointing to them are destroyed.; ///; /// This method does *not* run static destructors for code contained in the; /// JITDylibs, and each JITDylib can only be removed once.; ///; /// JITDylibs will be removed in the order given. Teardown is usually; /// independent for each JITDylib, but not always. In particular, where the; /// ORC runtime is used it is expected that teardown off all JITDylibs will; /// depend on it, so the JITDylib containing the ORC runtime must be removed; /// last. If the client has introduced any other dependencies they should be; /// accounted for in the removal order too.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:12,Availability,error,error,12,/// Set the error reporter function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:13,Availability,error,error,13,/// Report a error for this execution session.; ///; /// Unhandled errors can be sent here to log them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:67,Availability,error,errors,67,/// Report a error for this execution session.; ///; /// Unhandled errors can be sent here to log them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:94,Testability,log,log,94,/// Report a error for this execution session.; ///; /// Unhandled errors can be sent here to log them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:619,Integrability,depend,dependencies,619,"/// Search the given JITDylibs for the given symbols.; ///; /// SearchOrder lists the JITDylibs to search. For each dylib, the associated; /// boolean indicates whether the search should match against non-exported; /// (hidden visibility) symbols in that dylib (true means match against; /// non-exported symbols, false means do not match).; ///; /// The NotifyComplete callback will be called once all requested symbols; /// reach the required state.; ///; /// If all symbols are found, the RegisterDependencies function will be called; /// while the session lock is held. This gives clients a chance to register; /// dependencies for on the queried symbols for any symbols they are; /// materializing (if a MaterializationResponsibility instance is present,; /// this can be implemented by calling; /// MaterializationResponsibility::addDependencies). If there are no; /// dependenant symbols for this query (e.g. it is being made by a top level; /// client to get an address to call) then the value NoDependenciesToRegister; /// can be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:875,Integrability,depend,dependenant,875,"/// Search the given JITDylibs for the given symbols.; ///; /// SearchOrder lists the JITDylibs to search. For each dylib, the associated; /// boolean indicates whether the search should match against non-exported; /// (hidden visibility) symbols in that dylib (true means match against; /// non-exported symbols, false means do not match).; ///; /// The NotifyComplete callback will be called once all requested symbols; /// reach the required state.; ///; /// If all symbols are found, the RegisterDependencies function will be called; /// while the session lock is held. This gives clients a chance to register; /// dependencies for on the queried symbols for any symbols they are; /// materializing (if a MaterializationResponsibility instance is present,; /// this can be implemented by calling; /// MaterializationResponsibility::addDependencies). If there are no; /// dependenant symbols for this query (e.g. it is being made by a top level; /// client to get an address to call) then the value NoDependenciesToRegister; /// can be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:183,Availability,error,error,183,"/// Blocking version of lookup above. Returns the resolved symbol map.; /// If WaitUntilReady is true (the default), will not return until all; /// requested symbols are ready (or an error occurs). If WaitUntilReady is; /// false, will return as soon as all requested symbols are resolved,; /// or an error occurs. If WaitUntilReady is false and an error occurs; /// after resolution, the function will return a success value, but the; /// error will be reported via reportErrors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:301,Availability,error,error,301,"/// Blocking version of lookup above. Returns the resolved symbol map.; /// If WaitUntilReady is true (the default), will not return until all; /// requested symbols are ready (or an error occurs). If WaitUntilReady is; /// false, will return as soon as all requested symbols are resolved,; /// or an error occurs. If WaitUntilReady is false and an error occurs; /// after resolution, the function will return a success value, but the; /// error will be reported via reportErrors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:349,Availability,error,error,349,"/// Blocking version of lookup above. Returns the resolved symbol map.; /// If WaitUntilReady is true (the default), will not return until all; /// requested symbols are ready (or an error occurs). If WaitUntilReady is; /// false, will return as soon as all requested symbols are resolved,; /// or an error occurs. If WaitUntilReady is false and an error occurs; /// after resolution, the function will return a success value, but the; /// error will be reported via reportErrors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:440,Availability,error,error,440,"/// Blocking version of lookup above. Returns the resolved symbol map.; /// If WaitUntilReady is true (the default), will not return until all; /// requested symbols are ready (or an error occurs). If WaitUntilReady is; /// false, will return as soon as all requested symbols are resolved,; /// or an error occurs. If WaitUntilReady is false and an error occurs; /// after resolution, the function will return a success value, but the; /// error will be reported via reportErrors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:10,Integrability,wrap,wrapper,10,"/// Run a wrapper function in the executor.; ///; /// The wrapper function should be callable as:; ///; /// \code{.cpp}; /// CWrapperFunctionResult fn(uint8_t *Data, uint64_t Size);; /// \endcode{.cpp}; ///; /// The given OnComplete function will be called to return the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:58,Integrability,wrap,wrapper,58,"/// Run a wrapper function in the executor.; ///; /// The wrapper function should be callable as:; ///; /// \code{.cpp}; /// CWrapperFunctionResult fn(uint8_t *Data, uint64_t Size);; /// \endcode{.cpp}; ///; /// The given OnComplete function will be called to return the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:10,Integrability,wrap,wrapper,10,"/// Run a wrapper function in the executor. The wrapper function should be; /// callable as:; ///; /// \code{.cpp}; /// CWrapperFunctionResult fn(uint8_t *Data, uint64_t Size);; /// \endcode{.cpp}",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:48,Integrability,wrap,wrapper,48,"/// Run a wrapper function in the executor. The wrapper function should be; /// callable as:; ///; /// \code{.cpp}; /// CWrapperFunctionResult fn(uint8_t *Data, uint64_t Size);; /// \endcode{.cpp}",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:10,Integrability,wrap,wrapper,10,/// Run a wrapper function using SPS to serialize the arguments and; /// deserialize the results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:10,Integrability,wrap,wrapper,10,/// Run a wrapper function using SPS to serialize the arguments and; /// deserialize the results.; ///; /// If SPSSignature is a non-void function signature then the second argument; /// (the first in the Args list) should be a reference to a return value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:4,Integrability,Wrap,Wrap,4,/// Wrap a handler that takes concrete argument types (and a sender for a; /// concrete return type) to produce an AsyncHandlerWrapperFunction. Uses SPS; /// to unpack the arguments and pack the result.; ///; /// This function is intended to support easy construction of; /// AsyncHandlerWrapperFunctions that can be associated with a tag; /// (using registerJITDispatchHandler) and called from the executor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:4,Integrability,Wrap,Wrap,4,/// Wrap a class method that takes concrete argument types (and a sender for; /// a concrete return type) to produce an AsyncHandlerWrapperFunction. Uses; /// SPS to unpack the arguments and pack the result.; ///; /// This function is intended to support easy construction of; /// AsyncHandlerWrapperFunctions that can be associated with a tag; /// (using registerJITDispatchHandler) and called from the executor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:489,Availability,error,error,489,"/// For each tag symbol name, associate the corresponding; /// AsyncHandlerWrapperFunction with the address of that symbol. The; /// handler becomes callable from the executor using the ORC runtime; /// __orc_rt_jit_dispatch function and the given tag.; ///; /// Tag symbols will be looked up in JD using LookupKind::Static,; /// JITDylibLookupFlags::MatchAllSymbols (hidden tags will be found), and; /// LookupFlags::WeaklyReferencedSymbol. Missing tag definitions will not; /// cause an error, the handler will simply be dropped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:513,Usability,simpl,simply,513,"/// For each tag symbol name, associate the corresponding; /// AsyncHandlerWrapperFunction with the address of that symbol. The; /// handler becomes callable from the executor using the ORC runtime; /// __orc_rt_jit_dispatch function and the given tag.; ///; /// Tag symbols will be looked up in JD using LookupKind::Static,; /// JITDylibLookupFlags::MatchAllSymbols (hidden tags will be found), and; /// LookupFlags::WeaklyReferencedSymbol. Missing tag definitions will not; /// cause an error, the handler will simply be dropped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:30,Integrability,wrap,wrapper,30,/// Run a registered jit-side wrapper function.; /// This should be called by the ExecutorProcessControl instance in response; /// to incoming jit-dispatch requests from the executor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:132,Performance,perform,performed,132,"/// OL_applyQueryPhase1 is an optionally re-startable loop for triggering; /// definition generation. It is called when a lookup is performed, and again; /// each time that LookupState::continueLookup is called.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h:401,Modifiability,plugin,plugin,401,"//===---- DebugObjectManagerPlugin.h - JITLink debug objects ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // ObjectLinkingLayer plugin for emitting debug objects.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h:621,Modifiability,plugin,plugin,621,"/// Creates and manages DebugObjects for JITLink artifacts.; ///; /// DebugObjects are created when linking for a MaterializationResponsibility; /// starts. They are pending as long as materialization is in progress.; ///; /// There can only be one pending DebugObject per MaterializationResponsibility.; /// If materialization fails, pending DebugObjects are discarded.; ///; /// Once executable code for the MaterializationResponsibility is emitted, the; /// corresponding DebugObject is finalized to target memory and the provided; /// DebugObjectRegistrar is notified. Ownership of DebugObjects remains with the; /// plugin.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h:415,Deployability,release,release,415,"/// Create the plugin to submit DebugObjects for JITLink artifacts. For all; /// options the recommended setting is true.; ///; /// RequireDebugSections:; /// Submit debug objects to the executor only if they contain actual debug; /// info. Turning this off may allow minimal debugging based on raw symbol; /// names. Note that this may cause significant memory and transport; /// overhead for objects built with a release configuration.; ///; /// AutoRegisterCode:; /// Notify the debugger for each new debug object. This is a good default; /// mode, but it may cause significant overhead when adding many modules in; /// sequence. When turning this off, the user has to issue the call to; /// __jit_debug_register_code() on the executor side manually.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h:423,Deployability,configurat,configuration,423,"/// Create the plugin to submit DebugObjects for JITLink artifacts. For all; /// options the recommended setting is true.; ///; /// RequireDebugSections:; /// Submit debug objects to the executor only if they contain actual debug; /// info. Turning this off may allow minimal debugging based on raw symbol; /// names. Note that this may cause significant memory and transport; /// overhead for objects built with a release configuration.; ///; /// AutoRegisterCode:; /// Notify the debugger for each new debug object. This is a good default; /// mode, but it may cause significant overhead when adding many modules in; /// sequence. When turning this off, the user has to issue the call to; /// __jit_debug_register_code() on the executor side manually.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h:15,Modifiability,plugin,plugin,15,"/// Create the plugin to submit DebugObjects for JITLink artifacts. For all; /// options the recommended setting is true.; ///; /// RequireDebugSections:; /// Submit debug objects to the executor only if they contain actual debug; /// info. Turning this off may allow minimal debugging based on raw symbol; /// names. Note that this may cause significant memory and transport; /// overhead for objects built with a release configuration.; ///; /// AutoRegisterCode:; /// Notify the debugger for each new debug object. This is a good default; /// mode, but it may cause significant overhead when adding many modules in; /// sequence. When turning this off, the user has to issue the call to; /// __jit_debug_register_code() on the executor side manually.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h:423,Modifiability,config,configuration,423,"/// Create the plugin to submit DebugObjects for JITLink artifacts. For all; /// options the recommended setting is true.; ///; /// RequireDebugSections:; /// Submit debug objects to the executor only if they contain actual debug; /// info. Turning this off may allow minimal debugging based on raw symbol; /// names. Note that this may cause significant memory and transport; /// overhead for objects built with a release configuration.; ///; /// AutoRegisterCode:; /// Notify the debugger for each new debug object. This is a good default; /// mode, but it may cause significant overhead when adding many modules in; /// sequence. When turning this off, the user has to issue the call to; /// __jit_debug_register_code() on the executor side manually.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h:4,Integrability,Mediat,Mediates,4,/// Mediates between ELFNix initialization and ExecutionSession state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h:1037,Integrability,depend,depends,1037,"/// Try to create a ELFNixPlatform instance, adding the ORC runtime to the; /// given JITDylib.; ///; /// The ORC runtime requires access to a number of symbols in; /// libc++. It is up to the caller to ensure that the required; /// symbols can be referenced by code added to PlatformJD. The; /// standard way to achieve this is to first attach dynamic library; /// search generators for either the given process, or for the; /// specific required libraries, to PlatformJD, then to create the; /// platform instance:; ///; /// \code{.cpp}; /// auto &PlatformJD = ES.createBareJITDylib(""stdlib"");; /// PlatformJD.addGenerator(; /// ExitOnErr(EPCDynamicLibrarySearchGenerator; /// ::GetForTargetProcess(EPC)));; /// ES.setPlatform(; /// ExitOnErr(ELFNixPlatform::Create(ES, ObjLayer, EPC, PlatformJD,; /// ""/path/to/orc/runtime"")));; /// \endcode; ///; /// Alternatively, these symbols could be added to another JITDylib that; /// PlatformJD links against.; ///; /// Clients are also responsible for ensuring that any JIT'd code that; /// depends on runtime functions (including any code using TLV or static; /// destructors) can reference the runtime symbols. This is usually achieved; /// by linking any JITDylibs containing regular code against; /// PlatformJD.; ///; /// By default, ELFNixPlatform will add the set of aliases returned by the; /// standardPlatformAliases function. This includes both required aliases; /// (e.g. __cxa_atexit -> __orc_rt_elf_cxa_atexit for static destructor; /// support), and optional aliases that provide JIT versions of common; /// functions (e.g. dlopen -> __orc_rt_elf_jit_dlopen). Clients can; /// override these defaults by passing a non-None value for the; /// RuntimeAliases function, in which case the client is responsible for; /// setting up all aliases (including the required ones).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h:131,Security,access,access,131,"/// Try to create a ELFNixPlatform instance, adding the ORC runtime to the; /// given JITDylib.; ///; /// The ORC runtime requires access to a number of symbols in; /// libc++. It is up to the caller to ensure that the required; /// symbols can be referenced by code added to PlatformJD. The; /// standard way to achieve this is to first attach dynamic library; /// search generators for either the given process, or for the; /// specific required libraries, to PlatformJD, then to create the; /// platform instance:; ///; /// \code{.cpp}; /// auto &PlatformJD = ES.createBareJITDylib(""stdlib"");; /// PlatformJD.addGenerator(; /// ExitOnErr(EPCDynamicLibrarySearchGenerator; /// ::GetForTargetProcess(EPC)));; /// ES.setPlatform(; /// ExitOnErr(ELFNixPlatform::Create(ES, ObjLayer, EPC, PlatformJD,; /// ""/path/to/orc/runtime"")));; /// \endcode; ///; /// Alternatively, these symbols could be added to another JITDylib that; /// PlatformJD links against.; ///; /// Clients are also responsible for ensuring that any JIT'd code that; /// depends on runtime functions (including any code using TLV or static; /// destructors) can reference the runtime symbols. This is usually achieved; /// by linking any JITDylibs containing regular code against; /// PlatformJD.; ///; /// By default, ELFNixPlatform will add the set of aliases returned by the; /// standardPlatformAliases function. This includes both required aliases; /// (e.g. __cxa_atexit -> __orc_rt_elf_cxa_atexit for static destructor; /// support), and optional aliases that provide JIT versions of common; /// functions (e.g. dlopen -> __orc_rt_elf_jit_dlopen). Clients can; /// override these defaults by passing a non-None value for the; /// RuntimeAliases function, in which case the client is responsible for; /// setting up all aliases (including the required ones).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h:34,Safety,avoid,avoid,34,// InitSeqs gets its own mutex to avoid locking the whole session when; // aggregating data from the jitlink.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDebugObjectRegistrar.h:13,Integrability,interface,interface,13,/// Abstract interface for registering debug objects in the executor process.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDebugObjectRegistrar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDebugObjectRegistrar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDebugObjectRegistrar.h:108,Integrability,interface,interface,108,/// Create a ExecutorProcessControl-based DebugObjectRegistrar that emits debug; /// objects to the GDB JIT interface. This will use the EPC's lookupSymbols; /// method to find the registration/deregistration function addresses by name.; ///; /// If RegistrationFunctionsDylib is non-None then it will be searched to find; /// the registration functions. If it is None then the process dylib will be; /// loaded to find the registration functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDebugObjectRegistrar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDebugObjectRegistrar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDebugObjectRegistrar.h:405,Performance,load,loaded,405,/// Create a ExecutorProcessControl-based DebugObjectRegistrar that emits debug; /// objects to the GDB JIT interface. This will use the EPC's lookupSymbols; /// method to find the registration/deregistration function addresses by name.; ///; /// If RegistrationFunctionsDylib is non-None then it will be searched to find; /// the registration functions. If it is None then the process dylib will be; /// loaded to find the registration functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDebugObjectRegistrar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDebugObjectRegistrar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDynamicLibrarySearchGenerator.h:391,Performance,load,loading,391,"//===------------ EPCDynamicLibrarySearchGenerator.h ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Support loading and searching of dynamic libraries in an executor process; // via the ExecutorProcessControl class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDynamicLibrarySearchGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDynamicLibrarySearchGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDynamicLibrarySearchGenerator.h:181,Availability,failure,failure,181,"/// Permanently loads the library at the given path and, on success, returns; /// a DynamicLibrarySearchGenerator that will search it for symbol definitions; /// in the library. On failure returns the reason the library failed to load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDynamicLibrarySearchGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDynamicLibrarySearchGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDynamicLibrarySearchGenerator.h:16,Performance,load,loads,16,"/// Permanently loads the library at the given path and, on success, returns; /// a DynamicLibrarySearchGenerator that will search it for symbol definitions; /// in the library. On failure returns the reason the library failed to load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDynamicLibrarySearchGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDynamicLibrarySearchGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDynamicLibrarySearchGenerator.h:230,Performance,load,load,230,"/// Permanently loads the library at the given path and, on success, returns; /// a DynamicLibrarySearchGenerator that will search it for symbol definitions; /// in the library. On failure returns the reason the library failed to load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDynamicLibrarySearchGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCDynamicLibrarySearchGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCEHFrameRegistrar.h:348,Performance,load,loaded,348,/// Create from a ExecutorProcessControl instance alone. This will use; /// the EPC's lookupSymbols method to find the registration/deregistration; /// function addresses by name.; ///; /// If RegistrationFunctionsDylib is non-None then it will be searched to; /// find the registration functions. If it is None then the process dylib; /// will be loaded to find the registration functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCEHFrameRegistrar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCEHFrameRegistrar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h:400,Performance,load,loading,400,"//===- EPCGenericDylibManager.h -- Generic EPC Dylib management -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements dylib loading and searching by making calls to; // ExecutorProcessControl::callWrapper.; //; // This simplifies the implementaton of new ExecutorProcessControl instances,; // as this implementation will always work (at the cost of some performance; // overhead for the calls).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h:630,Performance,perform,performance,630,"//===- EPCGenericDylibManager.h -- Generic EPC Dylib management -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements dylib loading and searching by making calls to; // ExecutorProcessControl::callWrapper.; //; // This simplifies the implementaton of new ExecutorProcessControl instances,; // as this implementation will always work (at the cost of some performance; // overhead for the calls).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h:495,Usability,simpl,simplifies,495,"//===- EPCGenericDylibManager.h -- Generic EPC Dylib management -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements dylib loading and searching by making calls to; // ExecutorProcessControl::callWrapper.; //; // This simplifies the implementaton of new ExecutorProcessControl instances,; // as this implementation will always work (at the cost of some performance; // overhead for the calls).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h:34,Security,access,access,34,/// Function addresses for memory access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h:4,Performance,Load,Loads,4,/// Loads the dylib with the given name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h:636,Performance,perform,performance,636,"//===- EPCGenericJITLinkMemoryManager.h - EPC-based mem manager -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements JITLinkMemoryManager by making remove calls via; // ExecutorProcessControl::callWrapperAsync.; //; // This simplifies the implementaton of new ExecutorProcessControl instances,; // as this implementation will always work (at the cost of some performance; // overhead for the calls).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h:501,Usability,simpl,simplifies,501,"//===- EPCGenericJITLinkMemoryManager.h - EPC-based mem manager -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements JITLinkMemoryManager by making remove calls via; // ExecutorProcessControl::callWrapperAsync.; //; // This simplifies the implementaton of new ExecutorProcessControl instances,; // as this implementation will always work (at the cost of some performance; // overhead for the calls).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h:34,Security,access,access,34,/// Function addresses for memory access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h:134,Integrability,depend,depends,134,/// FIXME: This specialization should be moved into TargetProcessControlTypes.h; /// (or wherever those types get merged to) once ORC depends on JITLink.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericMemoryAccess.h:644,Performance,perform,performance,644,"//===- EPCGenericMemoryAccess.h - Generic EPC MemoryAccess impl -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements ExecutorProcessControl::MemoryAccess by making calls to; // ExecutorProcessControl::callWrapperAsync.; //; // This simplifies the implementaton of new ExecutorProcessControl instances,; // as this implementation will always work (at the cost of some performance; // overhead for the calls).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericMemoryAccess.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericMemoryAccess.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericMemoryAccess.h:509,Usability,simpl,simplifies,509,"//===- EPCGenericMemoryAccess.h - Generic EPC MemoryAccess impl -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements ExecutorProcessControl::MemoryAccess by making calls to; // ExecutorProcessControl::callWrapperAsync.; //; // This simplifies the implementaton of new ExecutorProcessControl instances,; // as this implementation will always work (at the cost of some performance; // overhead for the calls).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericMemoryAccess.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericMemoryAccess.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericMemoryAccess.h:34,Security,access,access,34,/// Function addresses for memory access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericMemoryAccess.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericMemoryAccess.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericRTDyldMemoryManager.h:32,Security,access,access,32,/// Symbol addresses for memory access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericRTDyldMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericRTDyldMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericRTDyldMemoryManager.h:38,Energy Efficiency,allocate,allocated,38,// Group of section allocations to be allocated together in the executor. The; // RemoteCodeAddr will stand in as the id of the group for deallocation; // purposes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericRTDyldMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericRTDyldMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h:406,Testability,stub,stubs,406,"//===--- EPCIndirectionUtils.h - EPC based indirection utils ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Indirection utilities (stubs, trampolines, lazy call-throughs) that use the; // ExecutorProcessControl API to interact with the executor process.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h:51,Testability,stub,stubs,51,"/// Provides ExecutorProcessControl based indirect stubs, trampoline pool and; /// lazy call through manager.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h:52,Testability,stub,stub,52,"/// ABI support base class. Used to write resolver, stub, and trampoline; /// blocks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h:4,Deployability,Release,Release,4,/// Release memory for resources held by this instance. This *must* be called; /// prior to destruction of the class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCIndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:4,Security,Access,Accessor,4,/// Accessor for an element of the global_ctors/global_dtors array.; ///; /// This class provides a read-only view of the element with any casts on; /// the function stripped away.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:4,Testability,Test,Test,4,/// Test iterators for equality.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:4,Testability,Test,Test,4,/// Test iterators for inequality.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:350,Availability,down,down,350,"/// Support class for static dtor execution. For hosted (in-process) JITs; /// only!; ///; /// If a __cxa_atexit function isn't found C++ programs that use static; /// destructors will fail to link. However, we don't want to use the host; /// process's __cxa_atexit, because it will schedule JIT'd destructors to run; /// after the JIT has been torn down, which is no good. This class makes it easy; /// to override __cxa_atexit (and the related __dso_handle).; ///; /// To use, clients should manually call searchOverrides from their symbol; /// resolver. This should generally be done after attempting symbol resolution; /// inside the JIT, but before searching the host process's symbol table. When; /// the client determines that destructors should be run (generally at JIT; /// teardown or after a return from main), the runDestructors method should be; /// called.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:283,Energy Efficiency,schedul,schedule,283,"/// Support class for static dtor execution. For hosted (in-process) JITs; /// only!; ///; /// If a __cxa_atexit function isn't found C++ programs that use static; /// destructors will fail to link. However, we don't want to use the host; /// process's __cxa_atexit, because it will schedule JIT'd destructors to run; /// after the JIT has been torn down, which is no good. This class makes it easy; /// to override __cxa_atexit (and the related __dso_handle).; ///; /// To use, clients should manually call searchOverrides from their symbol; /// resolver. This should generally be done after attempting symbol resolution; /// inside the JIT, but before searching the host process's symbol table. When; /// the client determines that destructors should be run (generally at JIT; /// teardown or after a return from main), the runDestructors method should be; /// called.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:7,Integrability,interface,interface,7,/// An interface for Itanium __cxa_atexit interposer implementations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:23,Security,expose,expose,23,"/// A utility class to expose symbols found via dlsym to the JIT.; ///; /// If an instance of this class is attached to a JITDylib as a fallback; /// definition generator, then any symbol found in the given DynamicLibrary that; /// passes the 'Allow' predicate will be added to the JITDylib.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:181,Availability,failure,failure,181,"/// Permanently loads the library at the given path and, on success, returns; /// a DynamicLibrarySearchGenerator that will search it for symbol definitions; /// in the library. On failure returns the reason the library failed to load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:16,Performance,load,loads,16,"/// Permanently loads the library at the given path and, on success, returns; /// a DynamicLibrarySearchGenerator that will search it for symbol definitions; /// in the library. On failure returns the reason the library failed to load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:230,Performance,load,load,230,"/// Permanently loads the library at the given path and, on success, returns; /// a DynamicLibrarySearchGenerator that will search it for symbol definitions; /// in the library. On failure returns the reason the library failed to load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:23,Security,expose,expose,23,"/// A utility class to expose symbols from a static library.; ///; /// If an instance of this class is attached to a JITDylib as a fallback; /// definition generator, then any symbol found in the archive will result in; /// the containing object being added to the JITDylib.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:3,Integrability,Interface,Interface,3,// Interface builder function for objects loaded from this archive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:42,Performance,load,loaded,42,// Interface builder function for objects loaded from this archive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:306,Availability,error,error,306,/// Try to create a StaticLibraryDefinitionGenerator from the given path.; ///; /// This call will succeed if the file at the given path is a static library; /// or a MachO universal binary containing a static library that is compatible; /// with the ExecutionSession's triple. Otherwise it will return an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:180,Availability,error,error,180,"/// Try to create a StaticLibrarySearchGenerator from the given memory buffer.; /// This call will succeed if the buffer contains a valid archive, otherwise; /// it will return an error.; ///; /// This call will succeed if the buffer contains a valid static library or a; /// MachO universal binary containing a static library that is compatible; /// with the ExecutionSession's triple. Otherwise it will return an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:415,Availability,error,error,415,"/// Try to create a StaticLibrarySearchGenerator from the given memory buffer.; /// This call will succeed if the buffer contains a valid archive, otherwise; /// it will return an error.; ///; /// This call will succeed if the buffer contains a valid static library or a; /// MachO universal binary containing a static library that is compatible; /// with the ExecutionSession's triple. Otherwise it will return an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:110,Performance,load,load,110,/// Returns a list of filenames of dynamic libraries that this archive has; /// imported. This class does not load these libraries by itself. User is; /// responsible for making sure these libraries are avaliable to the JITDylib.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:80,Testability,stub,stubs,80,"/// A utility class to create COFF dllimport GOT symbols (__imp_*) and PLT; /// stubs.; ///; /// If an instance of this class is attached to a JITDylib as a fallback; /// definition generator, PLT stubs and dllimport __imp_ symbols will be; /// generated for external symbols found outside the given jitdylib. Currently; /// only supports x86_64 architecture.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h:197,Testability,stub,stubs,197,"/// A utility class to create COFF dllimport GOT symbols (__imp_*) and PLT; /// stubs.; ///; /// If an instance of this class is attached to a JITDylib as a fallback; /// definition generator, PLT stubs and dllimport __imp_ symbols will be; /// generated for external symbols found outside the given jitdylib. Currently; /// only supports x86_64 architecture.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:26,Integrability,Wrap,WrapperFunctionResults,26,"/// A handler or incoming WrapperFunctionResults -- either return values from; /// callWrapper* calls, or incoming JIT-dispatch requests.; ///; /// IncomingWFRHandlers are constructible from; /// unique_function<void(shared::WrapperFunctionResult)>s using the; /// runInPlace function or a RunWithDispatch object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:225,Integrability,Wrap,WrapperFunctionResult,225,"/// A handler or incoming WrapperFunctionResults -- either return values from; /// callWrapper* calls, or incoming JIT-dispatch requests.; ///; /// IncomingWFRHandlers are constructible from; /// unique_function<void(shared::WrapperFunctionResult)>s using the; /// runInPlace function or a RunWithDispatch object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:98,Integrability,Wrap,WrapperFunctionResult,98,"/// Constructs an IncomingWFRHandler from a function object that is callable; /// as void(shared::WrapperFunctionResult). The function object will be called; /// directly. This should be used with care as it may block listener threads; /// in remote EPCs. It is only suitable for simple tasks (e.g. setting a; /// future), or for performing some quick analysis before dispatching ""real""; /// work as a Task.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:330,Performance,perform,performing,330,"/// Constructs an IncomingWFRHandler from a function object that is callable; /// as void(shared::WrapperFunctionResult). The function object will be called; /// directly. This should be used with care as it may block listener threads; /// in remote EPCs. It is only suitable for simple tasks (e.g. setting a; /// future), or for performing some quick analysis before dispatching ""real""; /// work as a Task.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:280,Usability,simpl,simple,280,"/// Constructs an IncomingWFRHandler from a function object that is callable; /// as void(shared::WrapperFunctionResult). The function object will be called; /// directly. This should be used with care as it may block listener threads; /// in remote EPCs. It is only suitable for simple tasks (e.g. setting a; /// future), or for performing some quick analysis before dispatching ""real""; /// work as a Task.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:157,Integrability,wrap,wrapping,157,"/// Constructs an IncomingWFRHandler from a function object by creating a new; /// function object that dispatches the original using a TaskDispatcher,; /// wrapping the original as a GenericNamedTask.; ///; /// This is the default approach for running WFR handlers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:214,Availability,error,error,214,"/// For each (ExecutorAddr&, StringRef) pair, looks up the string in the; /// bootstrap symbols map and writes its address to the ExecutorAddr if; /// found. If any symbol is not found then the function returns an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:4,Performance,Load,Load,4,/// Load the dynamic library at the given path and return a handle to it.; /// If LibraryPath is null this function will return the global handle for; /// the target process.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:239,Availability,error,error,239,/// Search for symbols in the target process.; ///; /// The result of the lookup is a 2-dimensional array of target addresses; /// that correspond to the lookup order. If a required symbol is not; /// found then this method will return an error. If a weakly referenced; /// symbol is not found then it be assigned a '0' value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:10,Integrability,wrap,wrapper,10,"/// Run a wrapper function in the executor. The given WFRHandler will be; /// called on the result when it is returned.; ///; /// The wrapper function should be callable as:; ///; /// \code{.cpp}; /// CWrapperFunctionResult fn(uint8_t *Data, uint64_t Size);; /// \endcode{.cpp}",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:134,Integrability,wrap,wrapper,134,"/// Run a wrapper function in the executor. The given WFRHandler will be; /// called on the result when it is returned.; ///; /// The wrapper function should be callable as:; ///; /// \code{.cpp}; /// CWrapperFunctionResult fn(uint8_t *Data, uint64_t Size);; /// \endcode{.cpp}",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:10,Integrability,wrap,wrapper,10,/// Run a wrapper function in the executor using the given Runner to dispatch; /// OnComplete when the result is ready.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:10,Integrability,wrap,wrapper,10,/// Run a wrapper function in the executor. OnComplete will be dispatched; /// as a GenericNamedTask using this instance's TaskDispatch object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:10,Integrability,wrap,wrapper,10,"/// Run a wrapper function in the executor. The wrapper function should be; /// callable as:; ///; /// \code{.cpp}; /// CWrapperFunctionResult fn(uint8_t *Data, uint64_t Size);; /// \endcode{.cpp}",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:48,Integrability,wrap,wrapper,48,"/// Run a wrapper function in the executor. The wrapper function should be; /// callable as:; ///; /// \code{.cpp}; /// CWrapperFunctionResult fn(uint8_t *Data, uint64_t Size);; /// \endcode{.cpp}",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:10,Integrability,wrap,wrapper,10,/// Run a wrapper function using SPS to serialize the arguments and; /// deserialize the results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:10,Integrability,wrap,wrapper,10,/// Run a wrapper function using SPS to serialize the arguments and; /// deserialize the results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:10,Integrability,wrap,wrapper,10,/// Run a wrapper function using SPS to serialize the arguments and; /// deserialize the results.; ///; /// If SPSSignature is a non-void function signature then the second argument; /// (the first in the Args list) should be a reference to a return value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:102,Availability,down,down,102,/// Disconnect from the target process.; ///; /// This should be called after the JIT session is shut down.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:43,Testability,assert,asserts,43,"/// A ExecutorProcessControl instance that asserts if any of its methods are; /// used. Suitable for use is unit tests, and by ORC clients who haven't moved; /// to ExecutorProcessControl-based APIs yet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:113,Testability,test,tests,113,"/// A ExecutorProcessControl instance that asserts if any of its methods are; /// used. Suitable for use is unit tests, and by ORC clients who haven't moved; /// to ExecutorProcessControl-based APIs yet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:11,Availability,avail,available,11,/// Get an available trampoline address.; /// Returns an error if no trampoline can be created.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:57,Availability,error,error,57,/// Get an available trampoline address.; /// Returns an error if no trampoline can be created.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:87,Availability,error,error,87,"/// Creates a LocalTrampolinePool with the given RunCallback function.; /// Returns an error if this function is unable to correctly allocate, write; /// and protect the resolver code block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:133,Energy Efficiency,allocate,allocate,133,"/// Creates a LocalTrampolinePool with the given RunCallback function.; /// Returns an error if this function is unable to correctly allocate, write; /// and protect the resolver code block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:64,Availability,Error,ErrorHandlerAddress,64,/// Construct a InProcessJITCompileCallbackManager.; /// @param ErrorHandlerAddress The address of an error handler in the target; /// process to be used if a compile callback fails.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:102,Availability,error,error,102,/// Construct a InProcessJITCompileCallbackManager.; /// @param ErrorHandlerAddress The address of an error handler in the target; /// process to be used if a compile callback fails.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:58,Testability,stub,stubs,58,/// Base class for managing collections of named indirect stubs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:20,Testability,stub,stub,20,"/// Create a single stub with the given name, target address and flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:11,Testability,Stub,StubInits,11,"/// Create StubInits.size() stubs with the given names, target; /// addresses, and flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:28,Testability,stub,stubs,28,"/// Create StubInits.size() stubs with the given names, target; /// addresses, and flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:13,Testability,stub,stub,13,"/// Find the stub with the given name. If ExportedStubsOnly is true,; /// this will only return a result if the stub's flags indicate that it; /// is exported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:112,Testability,stub,stub,112,"/// Find the stub with the given name. If ExportedStubsOnly is true,; /// this will only return a result if the stub's flags indicate that it; /// is exported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:44,Testability,stub,stub,44,/// Find the implementation-pointer for the stub.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:59,Testability,stub,stub,59,/// Change the value of the implementation pointer for the stub.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:3,Energy Efficiency,Allocate,Allocate,3,// Allocate memory for stubs and pointers in one call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:23,Testability,stub,stubs,23,// Allocate memory for stubs and pointers in one call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:122,Availability,Error,ErrorHandlerAddress,122,"/// Create a local compile callback manager.; ///; /// The given target triple will determine the ABI, and the given; /// ErrorHandlerAddress will be used by the resulting compile callback; /// manager if a compile callback fails.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:28,Testability,stub,stubs,28,/// Create a local indirect stubs manager builder.; ///; /// The given target triple will determine the ABI.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:185,Testability,stub,stub,185,/// Build a function pointer of FunctionType with the given constant; /// address.; ///; /// Usage example: Turn a trampoline address into a function pointer constant; /// for use in a stub.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:39,Testability,stub,stub,39,/// Turn a function declaration into a stub function that makes an; /// indirect call using the given function pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:139,Testability,stub,stub,139,"/// Clone a function declaration into a new module.; ///; /// This function can be used as the first step towards creating a callback; /// stub (see makeStub).; ///; /// If the VMap argument is non-null, a mapping will be added between F and; /// the new declaration, and between each of F's arguments and the new; /// declaration's arguments. This map can then be passed in to moveFunction to; /// move the function body if required. Note: When moving functions between; /// modules with these utilities, all decls should be cloned (and added to a; /// single VMap) before any bodies are moved. This will ensure that references; /// between functions all refer to the versions in the new module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:19,Modifiability,variab,variable,19,/// Clone a global variable declaration into a new module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:224,Testability,stub,stub,224,"/// Introduce relocations to \p Sym in its own definition if there are any; /// pointers formed via PC-relative address that do not already have a; /// relocation.; ///; /// This is useful when introducing indirection via a stub function at link time; /// without compiler support. If a function pointer is formed without a; /// relocation, e.g. in the definition of \c foo; ///; /// \code; /// _foo:; /// leaq -7(%rip), rax # form pointer to _foo without relocation; /// _bar:; /// leaq (%rip), %rax # uses X86_64_RELOC_SIGNED to '_foo'; /// \endcode; ///; /// the pointer to \c _foo computed by \c _foo and \c _bar may differ if we; /// introduce a stub for _foo. If the pointer is used as a key, this may be; /// observable to the program. This pass will attempt to introduce the missing; /// ""self-relocation"" on the leaq instruction.; ///; /// This is based on disassembly and should be considered ""best effort"". It may; /// silently fail to add relocations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:651,Testability,stub,stub,651,"/// Introduce relocations to \p Sym in its own definition if there are any; /// pointers formed via PC-relative address that do not already have a; /// relocation.; ///; /// This is useful when introducing indirection via a stub function at link time; /// without compiler support. If a function pointer is formed without a; /// relocation, e.g. in the definition of \c foo; ///; /// \code; /// _foo:; /// leaq -7(%rip), rax # form pointer to _foo without relocation; /// _bar:; /// leaq (%rip), %rax # uses X86_64_RELOC_SIGNED to '_foo'; /// \endcode; ///; /// the pointer to \c _foo computed by \c _foo and \c _bar may differ if we; /// introduce a stub for _foo. If the pointer is used as a key, this may be; /// observable to the program. This pass will attempt to introduce the missing; /// ""self-relocation"" on the leaq instruction.; ///; /// This is based on disassembly and should be considered ""best effort"". It may; /// silently fail to add relocations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h:25,Performance,optimiz,optimization,25,/// Set the LLVM CodeGen optimization level.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h:4,Security,Access,Access,4,/// Access subtarget features.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h:4,Security,Access,Access,4,/// Access subtarget features.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h:84,Modifiability,config,configured,84,"/// Set TargetOptions.; ///; /// Note: This operation will overwrite any previously configured options,; /// including EmulatedTLS and UseInitArray which the JITTargetMachineBuilder; /// sets by default. Clients are responsible for re-enabling these overwritten; /// options.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h:4,Security,Access,Access,4,/// Access TargetOptions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h:4,Security,Access,Access,4,/// Access TargetOptions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h:4,Security,Access,Access,4,/// Access Triple.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h:4,Security,Access,Access,4,/// Access Triple.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:39,Integrability,interface,interfaces,39,"//===---------------- Layer.h -- Layer interfaces --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Layer interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:388,Integrability,interface,interfaces,388,"//===---------------- Layer.h -- Layer interfaces --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Layer interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:271,Availability,avail,available-externally,271,"/// IRMaterializationUnit is a convenient base class for MaterializationUnits; /// wrapping LLVM IR. Represents materialization responsibility for all symbols; /// in the given module. If symbols are overridden by other definitions, then; /// their linkage is changed to available-externally.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:83,Integrability,wrap,wrapping,83,"/// IRMaterializationUnit is a convenient base class for MaterializationUnits; /// wrapping LLVM IR. Represents materialization responsibility for all symbols; /// in the given module. If symbols are overridden by other definitions, then; /// their linkage is changed to available-externally.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:4,Integrability,Interface,Interface,4,/// Interface for layers that accept LLVM IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:18,Modifiability,layers,layers,18,/// Interface for layers that accept LLVM IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:221,Performance,load,load,221,"/// Sets the CloneToNewContextOnEmit flag (false by default).; ///; /// When set, IR modules added to this layer will be cloned on to a new; /// context before emit is called. This can be used by clients who want; /// to load all IR using one LLVMContext (to save memory via type and; /// constant uniquing), but want to move Modules to fresh contexts before; /// compiling them to enable concurrent compilation.; /// Single threaded clients, or clients who load every module on a new; /// context, need not set this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:389,Performance,concurren,concurrent,389,"/// Sets the CloneToNewContextOnEmit flag (false by default).; ///; /// When set, IR modules added to this layer will be cloned on to a new; /// context before emit is called. This can be used by clients who want; /// to load all IR using one LLVMContext (to save memory via type and; /// constant uniquing), but want to move Modules to fresh contexts before; /// compiling them to enable concurrent compilation.; /// Single threaded clients, or clients who load every module on a new; /// context, need not set this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:458,Performance,load,load,458,"/// Sets the CloneToNewContextOnEmit flag (false by default).; ///; /// When set, IR modules added to this layer will be cloned on to a new; /// context before emit is called. This can be used by clients who want; /// to load all IR using one LLVMContext (to save memory via type and; /// constant uniquing), but want to move Modules to fresh contexts before; /// compiling them to enable concurrent compilation.; /// Single threaded clients, or clients who load every module on a new; /// context, need not set this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:4,Integrability,Interface,Interface,4,/// Interface for Layers that accept object files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:18,Modifiability,Layers,Layers,18,/// Interface for Layers that accept object files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:134,Integrability,interface,interface,134,/// Adds a MaterializationUnit for the object file in the given memory buffer; /// to the JITDylib for the given ResourceTracker. The interface for the; /// object will be built using the default object interface builder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:203,Integrability,interface,interface,203,/// Adds a MaterializationUnit for the object file in the given memory buffer; /// to the JITDylib for the given ResourceTracker. The interface for the; /// object will be built using the default object interface builder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:110,Integrability,interface,interface,110,/// Adds a MaterializationUnit for the object file in the given memory buffer; /// to the given JITDylib. The interface for the object will be built using; /// the default object interface builder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:179,Integrability,interface,interface,179,/// Adds a MaterializationUnit for the object file in the given memory buffer; /// to the given JITDylib. The interface for the object will be built using; /// the default object interface builder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:36,Integrability,interface,interface,36,/// Create using the default object interface builder function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:33,Performance,multi-thread,multi-threaded,33,"/// Destruct this instance. If a multi-threaded instance, waits for all; /// compile threads to complete.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:55,Availability,avail,available,55,"/// Load a (real) dynamic library and make its symbols available through a; /// new JITDylib with the same name.; ///; /// If the given *executor* path contains a valid platform dynamic library; /// then that library will be loaded, and a new bare JITDylib whose name is; /// the given path will be created to make the library's symbols available to; /// JIT'd code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:337,Availability,avail,available,337,"/// Load a (real) dynamic library and make its symbols available through a; /// new JITDylib with the same name.; ///; /// If the given *executor* path contains a valid platform dynamic library; /// then that library will be loaded, and a new bare JITDylib whose name is; /// the given path will be created to make the library's symbols available to; /// JIT'd code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:4,Performance,Load,Load,4,"/// Load a (real) dynamic library and make its symbols available through a; /// new JITDylib with the same name.; ///; /// If the given *executor* path contains a valid platform dynamic library; /// then that library will be loaded, and a new bare JITDylib whose name is; /// the given path will be created to make the library's symbols available to; /// JIT'd code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:225,Performance,load,loaded,225,"/// Load a (real) dynamic library and make its symbols available through a; /// new JITDylib with the same name.; ///; /// If the given *executor* path contains a valid platform dynamic library; /// then that library will be loaded, and a new bare JITDylib whose name is; /// the given path will be created to make the library's symbols available to; /// JIT'd code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:7,Modifiability,extend,extended,7,/// An extended version of LLJIT that supports lazy function-at-a-time; /// compilation of LLVM IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:120,Safety,detect,detectHost,120,"/// Set the JITTargetMachineBuilder for this instance.; ///; /// If this method is not called, JITTargetMachineBuilder::detectHost will be; /// used to construct a default target machine builder for the host platform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:174,Modifiability,config,configured,174,"/// Set a setup function for the process symbols dylib. If not provided,; /// but LinkProcessSymbolsJITDylibByDefault is true, then the process-symbols; /// JITDylib will be configured with a DynamicLibrarySearchGenerator with a; /// default symbol filter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:273,Performance,Concurren,ConcurrentIRCompiler,273,"/// Set a CompileFunctionCreator.; ///; /// If this method is not called, a default creation function wil be used; /// that will construct a basic IR compile function that is compatible with; /// the selected number of threads (SimpleCompiler for '0' compile threads,; /// ConcurrentIRCompiler otherwise).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:228,Usability,Simpl,SimpleCompiler,228,"/// Set a CompileFunctionCreator.; ///; /// If this method is not called, a default creation function wil be used; /// that will construct a basic IR compile function that is compatible with; /// the selected number of threads (SimpleCompiler for '0' compile threads,; /// ConcurrentIRCompiler otherwise).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:189,Deployability,install,installing,189,/// Set a setup function to be run just before the PlatformSetupFunction is; /// run.; ///; /// This can be used to customize the LLJIT instance before the platform is; /// set up. E.g. By installing a debugger support plugin before the platform; /// is set up (when the ORC runtime is loaded) we enable debugging of the; /// runtime itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:219,Modifiability,plugin,plugin,219,/// Set a setup function to be run just before the PlatformSetupFunction is; /// run.; ///; /// This can be used to customize the LLJIT instance before the platform is; /// set up. E.g. By installing a debugger support plugin before the platform; /// is set up (when the ORC runtime is loaded) we enable debugging of the; /// runtime itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:286,Performance,load,loaded,286,/// Set a setup function to be run just before the PlatformSetupFunction is; /// run.; ///; /// This can be used to customize the LLJIT instance before the platform is; /// set up. E.g. By installing a debugger support plugin before the platform; /// is set up (when the ORC runtime is loaded) we enable debugging of the; /// runtime itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:129,Modifiability,config,configure,129,/// Set up an PlatformSetupFunction.; ///; /// If this method is not called then setUpGenericLLVMIRPlatform; /// will be used to configure the JIT's platform support.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:92,Performance,perform,performed,92,"/// Set the number of compile threads to use.; ///; /// If set to zero, compilation will be performed on the execution thread when; /// JITing in-process. If set to any other number N, a thread pool of N; /// threads will be created for compilation.; ///; /// If this method is not called, behavior will be as if it were called with; /// a zero argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:4,Modifiability,Config,Configure,4,/// Configure the LLJIT instance to use orc runtime support. This overload; /// assumes that the client has manually configured a Platform object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:117,Modifiability,config,configured,117,/// Configure the LLJIT instance to use orc runtime support. This overload; /// assumes that the client has manually configured a Platform object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:4,Modifiability,Config,Configure,4,/// Configure the LLJIT instance to use the ORC runtime and the detected; /// native target for the executor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:64,Safety,detect,detected,64,/// Configure the LLJIT instance to use the ORC runtime and the detected; /// native target for the executor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:264,Availability,avail,available,264,/// Configure the LLJIT instance to scrape modules for llvm.global_ctors and; /// llvm.global_dtors variables and (if present) build initialization and; /// deinitialization functions. Platform specific initialization configurations; /// should be preferred where available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:218,Deployability,configurat,configurations,218,/// Configure the LLJIT instance to scrape modules for llvm.global_ctors and; /// llvm.global_dtors variables and (if present) build initialization and; /// deinitialization functions. Platform specific initialization configurations; /// should be preferred where available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:4,Modifiability,Config,Configure,4,/// Configure the LLJIT instance to scrape modules for llvm.global_ctors and; /// llvm.global_dtors variables and (if present) build initialization and; /// deinitialization functions. Platform specific initialization configurations; /// should be preferred where available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:100,Modifiability,variab,variables,100,/// Configure the LLJIT instance to scrape modules for llvm.global_ctors and; /// llvm.global_dtors variables and (if present) build initialization and; /// deinitialization functions. Platform specific initialization configurations; /// should be preferred where available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:218,Modifiability,config,configurations,218,/// Configure the LLJIT instance to scrape modules for llvm.global_ctors and; /// llvm.global_dtors variables and (if present) build initialization and; /// deinitialization functions. Platform specific initialization configurations; /// should be preferred where available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:4,Modifiability,Config,Configure,4,"/// Configure the LLJIT instance to disable platform support explicitly. This is; /// useful in two cases: for platforms that don't have such requirements and for; /// platforms, that we have no explicit support yet and that don't work well; /// with the generic IR platform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h:479,Safety,avoid,avoid,479,"//===-- LookupAndRecordAddrs.h - Symbol lookup support utility --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Record the addresses of a set of symbols into ExecutorAddr objects.; //; // This can be used to avoid repeated lookup (via ExecutionSession::lookup) of; // the given symbols.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h:336,Availability,error,error,336,"/// Record addresses of the given symbols in the given ExecutorAddrs.; ///; /// Useful for making permanent records of symbol addreses to call or; /// access in the executor (e.g. runtime support functions in Platform; /// subclasses).; ///; /// By default the symbols are looked up using; /// SymbolLookupFlags::RequiredSymbol, and an error will be generated if any of; /// the requested symbols are not defined.; ///; /// If SymbolLookupFlags::WeaklyReferencedSymbol is used then any missing; /// symbols will have their corresponding address objects set to zero, and; /// this function will never generate an error (the caller will need to check; /// addresses before using them).; ///; /// Asynchronous version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h:612,Availability,error,error,612,"/// Record addresses of the given symbols in the given ExecutorAddrs.; ///; /// Useful for making permanent records of symbol addreses to call or; /// access in the executor (e.g. runtime support functions in Platform; /// subclasses).; ///; /// By default the symbols are looked up using; /// SymbolLookupFlags::RequiredSymbol, and an error will be generated if any of; /// the requested symbols are not defined.; ///; /// If SymbolLookupFlags::WeaklyReferencedSymbol is used then any missing; /// symbols will have their corresponding address objects set to zero, and; /// this function will never generate an error (the caller will need to check; /// addresses before using them).; ///; /// Asynchronous version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h:151,Security,access,access,151,"/// Record addresses of the given symbols in the given ExecutorAddrs.; ///; /// Useful for making permanent records of symbol addreses to call or; /// access in the executor (e.g. runtime support functions in Platform; /// subclasses).; ///; /// By default the symbols are looked up using; /// SymbolLookupFlags::RequiredSymbol, and an error will be generated if any of; /// the requested symbols are not defined.; ///; /// If SymbolLookupFlags::WeaklyReferencedSymbol is used then any missing; /// symbols will have their corresponding address objects set to zero, and; /// this function will never generate an error (the caller will need to check; /// addresses before using them).; ///; /// Asynchronous version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h:44,Integrability,wrap,wrappers,44,/// Base type for MachOBuilder load command wrappers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h:31,Performance,load,load,31,/// Base type for MachOBuilder load command wrappers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h:30,Integrability,wrap,wrapper,30,/// MachOBuilder load command wrapper type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h:17,Performance,load,load,17,/// MachOBuilder load command wrapper type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h:11,Performance,perform,perform,11,// Call to perform layout on the MachO. Returns the total size of the; // resulting file.; // This method will automatically insert some load commands (e.g.; // LC_SYMTAB) and fill in load command fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h:137,Performance,load,load,137,// Call to perform layout on the MachO. Returns the total size of the; // resulting file.; // This method will automatically insert some load commands (e.g.; // LC_SYMTAB) and fill in load command fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h:184,Performance,load,load,184,// Call to perform layout on the MachO. Returns the total size of the; // resulting file.; // This method will automatically insert some load commands (e.g.; // LC_SYMTAB) and fill in load command fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h:27,Performance,load,load,27,"// Lay out header, segment load command, and other load commands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h:51,Performance,load,load,51,"// Lay out header, segment load command, and other load commands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h:42,Deployability,update,update,42,// Calculate offset to start of nlist and update symtab command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h:37,Deployability,update,update,37,// Calculate string table bounds and update symtab command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h:4,Integrability,Mediat,Mediates,4,/// Mediates between MachO initialization and ExecutionSession state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h:4,Deployability,Configurat,Configuration,4,/// Configuration for the mach-o header of a JITDylib. Specify common load; /// commands that should be added to the header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h:4,Modifiability,Config,Configuration,4,/// Configuration for the mach-o header of a JITDylib. Specify common load; /// commands that should be added to the header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h:70,Performance,load,load,70,/// Configuration for the mach-o header of a JITDylib. Specify common load; /// commands that should be added to the header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h:4,Usability,Simpl,Simple,4,/// Simple MachO header graph builder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h:1134,Integrability,depend,depends,1134,"/// Try to create a MachOPlatform instance, adding the ORC runtime to the; /// given JITDylib.; ///; /// The ORC runtime requires access to a number of symbols in libc++, and; /// requires access to symbols in libobjc, and libswiftCore to support; /// Objective-C and Swift code. It is up to the caller to ensure that the; /// required symbols can be referenced by code added to PlatformJD. The; /// standard way to achieve this is to first attach dynamic library search; /// generators for either the given process, or for the specific required; /// libraries, to PlatformJD, then to create the platform instance:; ///; /// \code{.cpp}; /// auto &PlatformJD = ES.createBareJITDylib(""stdlib"");; /// PlatformJD.addGenerator(; /// ExitOnErr(EPCDynamicLibrarySearchGenerator; /// ::GetForTargetProcess(EPC)));; /// ES.setPlatform(; /// ExitOnErr(MachOPlatform::Create(ES, ObjLayer, EPC, PlatformJD,; /// ""/path/to/orc/runtime"")));; /// \endcode; ///; /// Alternatively, these symbols could be added to another JITDylib that; /// PlatformJD links against.; ///; /// Clients are also responsible for ensuring that any JIT'd code that; /// depends on runtime functions (including any code using TLV or static; /// destructors) can reference the runtime symbols. This is usually achieved; /// by linking any JITDylibs containing regular code against; /// PlatformJD.; ///; /// By default, MachOPlatform will add the set of aliases returned by the; /// standardPlatformAliases function. This includes both required aliases; /// (e.g. __cxa_atexit -> __orc_rt_macho_cxa_atexit for static destructor; /// support), and optional aliases that provide JIT versions of common; /// functions (e.g. dlopen -> __orc_rt_macho_jit_dlopen). Clients can; /// override these defaults by passing a non-None value for the; /// RuntimeAliases function, in which case the client is responsible for; /// setting up all aliases (including the required ones).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h:130,Security,access,access,130,"/// Try to create a MachOPlatform instance, adding the ORC runtime to the; /// given JITDylib.; ///; /// The ORC runtime requires access to a number of symbols in libc++, and; /// requires access to symbols in libobjc, and libswiftCore to support; /// Objective-C and Swift code. It is up to the caller to ensure that the; /// required symbols can be referenced by code added to PlatformJD. The; /// standard way to achieve this is to first attach dynamic library search; /// generators for either the given process, or for the specific required; /// libraries, to PlatformJD, then to create the platform instance:; ///; /// \code{.cpp}; /// auto &PlatformJD = ES.createBareJITDylib(""stdlib"");; /// PlatformJD.addGenerator(; /// ExitOnErr(EPCDynamicLibrarySearchGenerator; /// ::GetForTargetProcess(EPC)));; /// ES.setPlatform(; /// ExitOnErr(MachOPlatform::Create(ES, ObjLayer, EPC, PlatformJD,; /// ""/path/to/orc/runtime"")));; /// \endcode; ///; /// Alternatively, these symbols could be added to another JITDylib that; /// PlatformJD links against.; ///; /// Clients are also responsible for ensuring that any JIT'd code that; /// depends on runtime functions (including any code using TLV or static; /// destructors) can reference the runtime symbols. This is usually achieved; /// by linking any JITDylibs containing regular code against; /// PlatformJD.; ///; /// By default, MachOPlatform will add the set of aliases returned by the; /// standardPlatformAliases function. This includes both required aliases; /// (e.g. __cxa_atexit -> __orc_rt_macho_cxa_atexit for static destructor; /// support), and optional aliases that provide JIT versions of common; /// functions (e.g. dlopen -> __orc_rt_macho_jit_dlopen). Clients can; /// override these defaults by passing a non-None value for the; /// RuntimeAliases function, in which case the client is responsible for; /// setting up all aliases (including the required ones).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h:189,Security,access,access,189,"/// Try to create a MachOPlatform instance, adding the ORC runtime to the; /// given JITDylib.; ///; /// The ORC runtime requires access to a number of symbols in libc++, and; /// requires access to symbols in libobjc, and libswiftCore to support; /// Objective-C and Swift code. It is up to the caller to ensure that the; /// required symbols can be referenced by code added to PlatformJD. The; /// standard way to achieve this is to first attach dynamic library search; /// generators for either the given process, or for the specific required; /// libraries, to PlatformJD, then to create the platform instance:; ///; /// \code{.cpp}; /// auto &PlatformJD = ES.createBareJITDylib(""stdlib"");; /// PlatformJD.addGenerator(; /// ExitOnErr(EPCDynamicLibrarySearchGenerator; /// ::GetForTargetProcess(EPC)));; /// ES.setPlatform(; /// ExitOnErr(MachOPlatform::Create(ES, ObjLayer, EPC, PlatformJD,; /// ""/path/to/orc/runtime"")));; /// \endcode; ///; /// Alternatively, these symbols could be added to another JITDylib that; /// PlatformJD links against.; ///; /// Clients are also responsible for ensuring that any JIT'd code that; /// depends on runtime functions (including any code using TLV or static; /// destructors) can reference the runtime symbols. This is usually achieved; /// by linking any JITDylibs containing regular code against; /// PlatformJD.; ///; /// By default, MachOPlatform will add the set of aliases returned by the; /// standardPlatformAliases function. This includes both required aliases; /// (e.g. __cxa_atexit -> __orc_rt_macho_cxa_atexit for static destructor; /// support), and optional aliases that provide JIT versions of common; /// functions (e.g. dlopen -> __orc_rt_macho_jit_dlopen). Clients can; /// override these defaults by passing a non-None value for the; /// RuntimeAliases function, in which case the client is responsible for; /// setting up all aliases (including the required ones).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h:4,Deployability,Install,Install,4,/// Install any platform-specific symbols (e.g. `__dso_handle`) and create a; /// mach-o header based on the given options.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h:52,Usability,clear,cleared,52,// FIXME: ObjCImageInfos and HeaderAddrs need to be cleared when; // JITDylibs are removed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h:256,Availability,error,error,256,"// Request that that the given symbols be materialized. The bool element of; // each pair indicates whether the symbol must be initialized, or whether it; // is optional. If any required symbol is not found then the pushSymbols; // function will return an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h:4,Usability,Simpl,Simple,4,/// Simple MachO header graph builder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MapperJITLinkMemoryManager.h:58,Energy Efficiency,allocate,allocated,58,// Ranges that have been reserved in executor but not yet allocated,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MapperJITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MapperJITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MapperJITLinkMemoryManager.h:58,Energy Efficiency,allocate,allocated,58,// Ranges that have been reserved in executor and already allocated,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MapperJITLinkMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MapperJITLinkMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MemoryMapper.h:31,Integrability,synchroniz,synchronized,31,"/// Ensures executor memory is synchronized with working copy memory, sends; /// functions to be called after initilization and before deinitialization and; /// applies memory protections; /// Returns a unique address identifying the allocation. This address should; /// be passed to deinitialize to run deallocation actions (and reset; /// permissions where possible).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MemoryMapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MemoryMapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MemoryMapper.h:4,Deployability,Release,Release,4,/// Release address space acquired through reserve(),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MemoryMapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MemoryMapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h:35,Integrability,interface,interface,35,"//===-- ObjectFileInterface.h - MU interface utils for objects --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Utilities for building MaterializationUnit::Interface objects from; // object files.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h:427,Integrability,Interface,Interface,427,"//===-- ObjectFileInterface.h - MU interface utils for objects --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Utilities for building MaterializationUnit::Interface objects from; // object files.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h:47,Integrability,interface,interface,47,"/// Adds an initializer symbol to the given MU interface.; /// The init symbol's name is guaranteed to be unique within I, and will be of; /// the form $.<ObjFileName>.__inits.<N>, where N is some integer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h:107,Availability,error,error,107,"/// Returns a MaterializationUnit::Interface for the object file contained in; /// the given buffer, or an error if the buffer does not contain a valid object; /// file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h:35,Integrability,Interface,Interface,35,"/// Returns a MaterializationUnit::Interface for the object file contained in; /// the given buffer, or an error if the buffer does not contain a valid object; /// file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:4,Modifiability,Plugin,Plugin,4,"/// Plugin instances can be added to the ObjectLinkingLayer to receive; /// callbacks when code is loaded or emitted, and when JITLink is being; /// configured.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:149,Modifiability,config,configured,149,"/// Plugin instances can be added to the ObjectLinkingLayer to receive; /// callbacks when code is loaded or emitted, and when JITLink is being; /// configured.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:99,Performance,load,loaded,99,"/// Plugin instances can be added to the ObjectLinkingLayer to receive; /// callbacks when code is loaded or emitted, and when JITLink is being; /// configured.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:157,Deployability,update,update,157,/// Return any dependencies that synthetic symbols (e.g. init symbols); /// have on symbols in the LinkGraph.; /// This is used by the ObjectLinkingLayer to update the dependencies for; /// the synthetic symbols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:15,Integrability,depend,dependencies,15,/// Return any dependencies that synthetic symbols (e.g. init symbols); /// have on symbols in the LinkGraph.; /// This is used by the ObjectLinkingLayer to update the dependencies for; /// the synthetic symbols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:168,Integrability,depend,dependencies,168,/// Return any dependencies that synthetic symbols (e.g. init symbols); /// have on symbols in the LinkGraph.; /// This is used by the ObjectLinkingLayer to update the dependencies for; /// the synthetic symbols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:128,Usability,simpl,simplify,128,/// Construct an ObjectLinkingLayer. Takes ownership of the given; /// JITLinkMemoryManager. This method is a temporary hack to simplify; /// co-existence with RTDyldObjectLinkingLayer (which also owns its; /// allocators).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:15,Modifiability,config,config,15,/// Add a pass-config modifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:741,Integrability,depend,depend,741,"/// If set, this ObjectLinkingLayer instance will claim responsibility; /// for any symbols provided by a given object file that were not already in; /// the MaterializationResponsibility instance. Setting this flag allows; /// higher-level program representations (e.g. LLVM IR) to be added based on; /// only a subset of the symbols they provide, without having to write; /// intervening layers to scan and add the additional symbols. This trades; /// diagnostic quality for convenience however: If all symbols are enumerated; /// up-front then clashes can be detected and reported early (and usually; /// deterministically). If this option is set, clashes for the additional; /// symbols may not be detected until late, and detection may depend on; /// the flow of control through JIT'd code. Use with care.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:390,Modifiability,layers,layers,390,"/// If set, this ObjectLinkingLayer instance will claim responsibility; /// for any symbols provided by a given object file that were not already in; /// the MaterializationResponsibility instance. Setting this flag allows; /// higher-level program representations (e.g. LLVM IR) to be added based on; /// only a subset of the symbols they provide, without having to write; /// intervening layers to scan and add the additional symbols. This trades; /// diagnostic quality for convenience however: If all symbols are enumerated; /// up-front then clashes can be detected and reported early (and usually; /// deterministically). If this option is set, clashes for the additional; /// symbols may not be detected until late, and detection may depend on; /// the flow of control through JIT'd code. Use with care.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:562,Safety,detect,detected,562,"/// If set, this ObjectLinkingLayer instance will claim responsibility; /// for any symbols provided by a given object file that were not already in; /// the MaterializationResponsibility instance. Setting this flag allows; /// higher-level program representations (e.g. LLVM IR) to be added based on; /// only a subset of the symbols they provide, without having to write; /// intervening layers to scan and add the additional symbols. This trades; /// diagnostic quality for convenience however: If all symbols are enumerated; /// up-front then clashes can be detected and reported early (and usually; /// deterministically). If this option is set, clashes for the additional; /// symbols may not be detected until late, and detection may depend on; /// the flow of control through JIT'd code. Use with care.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:702,Safety,detect,detected,702,"/// If set, this ObjectLinkingLayer instance will claim responsibility; /// for any symbols provided by a given object file that were not already in; /// the MaterializationResponsibility instance. Setting this flag allows; /// higher-level program representations (e.g. LLVM IR) to be added based on; /// only a subset of the symbols they provide, without having to write; /// intervening layers to scan and add the additional symbols. This trades; /// diagnostic quality for convenience however: If all symbols are enumerated; /// up-front then clashes can be detected and reported early (and usually; /// deterministically). If this option is set, clashes for the additional; /// symbols may not be detected until late, and detection may depend on; /// the flow of control through JIT'd code. Use with care.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:727,Safety,detect,detection,727,"/// If set, this ObjectLinkingLayer instance will claim responsibility; /// for any symbols provided by a given object file that were not already in; /// the MaterializationResponsibility instance. Setting this flag allows; /// higher-level program representations (e.g. LLVM IR) to be added based on; /// only a subset of the symbols they provide, without having to write; /// intervening layers to scan and add the additional symbols. This trades; /// diagnostic quality for convenience however: If all symbols are enumerated; /// up-front then clashes can be detected and reported early (and usually; /// deterministically). If this option is set, clashes for the additional; /// symbols may not be detected until late, and detection may depend on; /// the flow of control through JIT'd code. Use with care.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:28,Testability,stub,stubs,28,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:55,Testability,Stub,StubsBlockWorkingMem,55,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:82,Testability,Stub,Stubs,82,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:120,Testability,Stub,StubsBlockTargetAddress,120,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:163,Testability,stub,stub,163,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:28,Testability,stub,stubs,28,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:55,Testability,Stub,StubsBlockWorkingMem,55,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:82,Testability,Stub,Stubs,82,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:120,Testability,Stub,StubsBlockTargetAddress,120,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:163,Testability,stub,stub,163,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:28,Testability,stub,stubs,28,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:55,Testability,Stub,StubsBlockWorkingMem,55,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:82,Testability,Stub,Stubs,82,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:120,Testability,Stub,StubsBlockTargetAddress,120,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:163,Testability,stub,stub,163,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:28,Testability,stub,stubs,28,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:55,Testability,Stub,StubsBlockWorkingMem,55,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:82,Testability,Stub,Stubs,82,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:120,Testability,Stub,StubsBlockTargetAddress,120,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:163,Testability,stub,stub,163,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:28,Testability,stub,stubs,28,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:55,Testability,Stub,StubsBlockWorkingMem,55,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:82,Testability,Stub,Stubs,82,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:120,Testability,Stub,StubsBlockTargetAddress,120,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:163,Testability,stub,stub,163,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:28,Testability,stub,stubs,28,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:55,Testability,Stub,StubsBlockWorkingMem,55,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:82,Testability,Stub,Stubs,82,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:120,Testability,Stub,StubsBlockTargetAddress,120,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:163,Testability,stub,stub,163,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:28,Testability,stub,stubs,28,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:55,Testability,Stub,StubsBlockWorkingMem,55,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:82,Testability,Stub,Stubs,82,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:120,Testability,Stub,StubsBlockTargetAddress,120,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h:163,Testability,stub,stub,163,"/// Write NumStubs indirect stubs to working memory at StubsBlockWorkingMem.; /// Stubs will be written as if linked at StubsBlockTargetAddress, with the; /// Nth stub using the Nth pointer in memory starting at; /// PointersBlockTargetAddress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/OrcABISupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:33,Performance,load,loaded,33,/// Functor for receiving object-loaded notifications.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:106,Energy Efficiency,allocate,allocated,106,"/// Set the 'ProcessAllSections' flag.; ///; /// If set to true, all sections in each object file will be allocated using; /// the memory manager, rather than just the sections required for execution.; ///; /// This is kludgy, and may be removed in the future.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:747,Integrability,depend,depend,747,"/// If set, this RTDyldObjectLinkingLayer instance will claim responsibility; /// for any symbols provided by a given object file that were not already in; /// the MaterializationResponsibility instance. Setting this flag allows; /// higher-level program representations (e.g. LLVM IR) to be added based on; /// only a subset of the symbols they provide, without having to write; /// intervening layers to scan and add the additional symbols. This trades; /// diagnostic quality for convenience however: If all symbols are enumerated; /// up-front then clashes can be detected and reported early (and usually; /// deterministically). If this option is set, clashes for the additional; /// symbols may not be detected until late, and detection may depend on; /// the flow of control through JIT'd code. Use with care.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:396,Modifiability,layers,layers,396,"/// If set, this RTDyldObjectLinkingLayer instance will claim responsibility; /// for any symbols provided by a given object file that were not already in; /// the MaterializationResponsibility instance. Setting this flag allows; /// higher-level program representations (e.g. LLVM IR) to be added based on; /// only a subset of the symbols they provide, without having to write; /// intervening layers to scan and add the additional symbols. This trades; /// diagnostic quality for convenience however: If all symbols are enumerated; /// up-front then clashes can be detected and reported early (and usually; /// deterministically). If this option is set, clashes for the additional; /// symbols may not be detected until late, and detection may depend on; /// the flow of control through JIT'd code. Use with care.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:568,Safety,detect,detected,568,"/// If set, this RTDyldObjectLinkingLayer instance will claim responsibility; /// for any symbols provided by a given object file that were not already in; /// the MaterializationResponsibility instance. Setting this flag allows; /// higher-level program representations (e.g. LLVM IR) to be added based on; /// only a subset of the symbols they provide, without having to write; /// intervening layers to scan and add the additional symbols. This trades; /// diagnostic quality for convenience however: If all symbols are enumerated; /// up-front then clashes can be detected and reported early (and usually; /// deterministically). If this option is set, clashes for the additional; /// symbols may not be detected until late, and detection may depend on; /// the flow of control through JIT'd code. Use with care.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:708,Safety,detect,detected,708,"/// If set, this RTDyldObjectLinkingLayer instance will claim responsibility; /// for any symbols provided by a given object file that were not already in; /// the MaterializationResponsibility instance. Setting this flag allows; /// higher-level program representations (e.g. LLVM IR) to be added based on; /// only a subset of the symbols they provide, without having to write; /// intervening layers to scan and add the additional symbols. This trades; /// diagnostic quality for convenience however: If all symbols are enumerated; /// up-front then clashes can be detected and reported early (and usually; /// deterministically). If this option is set, clashes for the additional; /// symbols may not be detected until late, and detection may depend on; /// the flow of control through JIT'd code. Use with care.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:733,Safety,detect,detection,733,"/// If set, this RTDyldObjectLinkingLayer instance will claim responsibility; /// for any symbols provided by a given object file that were not already in; /// the MaterializationResponsibility instance. Setting this flag allows; /// higher-level program representations (e.g. LLVM IR) to be added based on; /// only a subset of the symbols they provide, without having to write; /// intervening layers to scan and add the additional symbols. This trades; /// diagnostic quality for convenience however: If all symbols are enumerated; /// up-front then clashes can be detected and reported early (and usually; /// deterministically). If this option is set, clashes for the additional; /// symbols may not be detected until late, and detection may depend on; /// the flow of control through JIT'd code. Use with care.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h:10,Usability,Simpl,SimpleRemoteEPC,10,"//===---- SimpleRemoteEPC.h - Simple remote executor control ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Simple remote executor process control.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h:30,Usability,Simpl,Simple,30,"//===---- SimpleRemoteEPC.h - Simple remote executor control ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Simple remote executor process control.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h:383,Usability,Simpl,Simple,383,"//===---- SimpleRemoteEPC.h - Simple remote executor control ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Simple remote executor process control.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h:86,Security,access,access,86,"/// A setup object containing callbacks to construct a memory manager and; /// memory access object. Both are optional. If not specified,; /// EPCGenericJITLinkMemoryManager and EPCGenericMemoryAccess will be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h:13,Usability,Simpl,SimpleRemoteEPC,13,/// Create a SimpleRemoteEPC using the given transport type and args.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SpeculateAnalyses.h:222,Availability,down,down,222,"// This Query generates a sequence of basic blocks which follows the order of; // execution.; // A handful of BB with higher block frequencies are taken, then path to entry; // and end BB are discovered by traversing up & down the CFG.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SpeculateAnalyses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SpeculateAnalyses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h:72,Deployability,update,update,72,"// FIX ME: find a right way to distinguish the pre-compile Symbols, and update; // the callsite",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h:38,Safety,avoid,avoid,38,"// Copy CandidateSet is necessary, to avoid unsynchronized access to; // the datastructure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h:59,Security,access,access,59,"// Copy CandidateSet is necessary, to avoid unsynchronized access to; // the datastructure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h:56,Testability,Stub,Stub,56,// Speculatively compile likely functions for the given Stub Address.; // destination of __orc_speculate_for jump,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h:25,Testability,Stub,Stub,25,"// FIXME : Register with Stub Address, after JITLink Fix.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h:37,Safety,safe,safe,37,"//===-- SymbolStringPool.h -- Thread-safe pool for JIT symbols --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains a thread-safe string pool suitable for use with ORC.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h:401,Safety,safe,safe,401,"//===-- SymbolStringPool.h -- Thread-safe pool for JIT symbols --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains a thread-safe string pool suitable for use with ORC.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h:139,Testability,test,testing,139,// Returns true if the pool entry's ref count is above zero (or if the entry; // is an empty or tombstone value). Useful for debugging and testing -- this; // method can be used to identify SymbolStringPtrs and; // NonOwningSymbolStringPtrs that are pointing to abandoned pool entries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h:13,Safety,unsafe,unsafe,13,/// Provides unsafe access to ownership operations on SymbolStringPtr.; /// This class can be used to manage SymbolStringPtr instances from C.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h:20,Security,access,access,20,/// Provides unsafe access to ownership operations on SymbolStringPtr.; /// This class can be used to manage SymbolStringPtr instances from C.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h:14,Safety,unsafe,unsafe,14,/// Create an unsafe pool entry ref without changing the ref-count.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h:55,Performance,perform,performing,55,/// Creates a SymbolStringPtr for this entry *without* performing a retain; /// operation during construction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h:140,Security,hash,hash,140,"/// Non-owning SymbolStringPool entry pointer. Instances are comparable with; /// SymbolStringPtr instances and guaranteed to have the same hash, but do not; /// affect the ref-count of the pooled string (and are therefore cheaper to; /// copy).; ///; /// NonOwningSymbolStringPtrs are silently invalidated if the pool entry's; /// ref-count drops to zero, so they should only be used in contexts where a; /// corresponding SymbolStringPtr is known to exist (which will guarantee that; /// the ref-count stays above zero). E.g. in a graph where nodes are; /// represented by SymbolStringPtrs the edges can be represented by pairs of; /// NonOwningSymbolStringPtrs and this will make the introduction of deletion; /// of edges cheaper.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TaskDispatch.h:34,Performance,perform,performed,34,/// Description of the task to be performed. Used for logging.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TaskDispatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TaskDispatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TaskDispatch.h:54,Testability,log,logging,54,/// Description of the task to be performed. Used for logging.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TaskDispatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TaskDispatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h:45,Integrability,interface,interfaces,45,"//===----------- ThreadSafeModule.h -- Layer interfaces ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Thread safe wrappers and utilities for Module and LLVMContext.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h:395,Integrability,wrap,wrappers,395,"//===----------- ThreadSafeModule.h -- Layer interfaces ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Thread safe wrappers and utilities for Module and LLVMContext.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h:390,Safety,safe,safe,390,"//===----------- ThreadSafeModule.h -- Layer interfaces ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Thread safe wrappers and utilities for Module and LLVMContext.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h:106,Performance,concurren,concurrent,106,/// An LLVMContext together with an associated mutex that can be used to lock; /// the context to prevent concurrent access by other threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h:117,Security,access,access,117,/// An LLVMContext together with an associated mutex that can be used to lock; /// the context to prevent concurrent access by other threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h:327,Availability,down,down,327,// We have to explicitly define this move operator to copy the fields in; // reverse order (i.e. module first) to ensure the dependencies are; // protected: The old module that is being overwritten must be destroyed; // *before* the context that it depends on.; // We also need to lock the context to make sure the module tear-down; // does not overlap any other work on the context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h:125,Integrability,depend,dependencies,125,// We have to explicitly define this move operator to copy the fields in; // reverse order (i.e. module first) to ensure the dependencies are; // protected: The old module that is being overwritten must be destroyed; // *before* the context that it depends on.; // We also need to lock the context to make sure the module tear-down; // does not overlap any other work on the context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h:249,Integrability,depend,depends,249,// We have to explicitly define this move operator to copy the fields in; // reverse order (i.e. module first) to ensure the dependencies are; // protected: The old module that is being overwritten must be destroyed; // *before* the context that it depends on.; // We also need to lock the context to make sure the module tear-down; // does not overlap any other work on the context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h:79,Integrability,wrap,wraps,79,/// Boolean conversion: This ThreadSafeModule will evaluate to true if it; /// wraps a non-null module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h:451,Integrability,protocol,protocol,451,"//===--- DebugerSupportPlugin.h -- Utils for debugger support ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Generates debug objects and registers them using the jit-loader-gdb protocol.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h:440,Performance,load,loader-gdb,440,"//===--- DebugerSupportPlugin.h -- Utils for debugger support ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Generates debug objects and registers them using the jit-loader-gdb protocol.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h:43,Deployability,install,installs,43,"/// For each object containing debug info, installs JITLink passes to synthesize; /// a debug object and then register it via the GDB JIT-registration interface.; ///; /// Currently MachO only. For ELF use DebugObjectManagerPlugin. These two; /// plugins will be merged in the near future.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h:151,Integrability,interface,interface,151,"/// For each object containing debug info, installs JITLink passes to synthesize; /// a debug object and then register it via the GDB JIT-registration interface.; ///; /// Currently MachO only. For ELF use DebugObjectManagerPlugin. These two; /// plugins will be merged in the near future.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h:247,Modifiability,plugin,plugins,247,"/// For each object containing debug info, installs JITLink passes to synthesize; /// a debug object and then register it via the GDB JIT-registration interface.; ///; /// Currently MachO only. For ELF use DebugObjectManagerPlugin. These two; /// plugins will be merged in the near future.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebugInfoSupport.h:8,Integrability,wrap,wrapper,8,// Thin wrapper around preserveDebugSections to be used as a standalone plugin.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebugInfoSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebugInfoSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebugInfoSupport.h:72,Modifiability,plugin,plugin,72,// Thin wrapper around preserveDebugSections to be used as a standalone plugin.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebugInfoSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebugInfoSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.h:223,Performance,load,load,223,/// Log perf jitdump events for each object (see; /// https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/perf/Documentation/jitdump-specification.txt).; /// Currently has support for dumping code load records and unwind info records.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.h:4,Testability,Log,Log,4,/// Log perf jitdump events for each object (see; /// https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/perf/Documentation/jitdump-specification.txt).; /// Currently has support for dumping code load records and unwind info records.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/AllocationActions.h:14,Integrability,Wrap,WrapperFunctionCalls,14,"/// A pair of WrapperFunctionCalls, one to be run at finalization time, one to; /// be run at deallocation time.; ///; /// AllocActionCallPairs should be constructed for paired operations (e.g.; /// __register_ehframe and __deregister_ehframe for eh-frame registration).; /// See comments for AllocActions for execution ordering.; ///; /// For unpaired operations one or the other member can be left unused, as; /// AllocationActionCalls with an FnAddr of zero will be skipped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/AllocationActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/AllocationActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/AllocationActions.h:131,Energy Efficiency,allocate,allocate,131,/// Returns the number of deallocaton actions in the given AllocActions array.; ///; /// This can be useful if clients want to pre-allocate room for deallocation; /// actions with the rest of their memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/AllocationActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/AllocationActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/AllocationActions.h:223,Availability,error,error,223,"/// Run finalize actions.; ///; /// If any finalize action fails then the corresponding dealloc actions will be; /// run in reverse order (not including the deallocation action for the failed; /// finalize action), and the error for the failing action will be returned.; ///; /// If all finalize actions succeed then a vector of deallocation actions will; /// be returned. The dealloc actions should be run by calling; /// runDeallocationActions. If this function succeeds then the AA argument will; /// be cleared before the function returns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/AllocationActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/AllocationActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/AllocationActions.h:507,Usability,clear,cleared,507,"/// Run finalize actions.; ///; /// If any finalize action fails then the corresponding dealloc actions will be; /// run in reverse order (not including the deallocation action for the failed; /// finalize action), and the error for the failing action will be returned.; ///; /// If all finalize actions succeed then a vector of deallocation actions will; /// be returned. The dealloc actions should be run by calling; /// runDeallocationActions. If this function succeeds then the AA argument will; /// be cleared before the function returns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/AllocationActions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/AllocationActions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/ExecutorAddress.h:6,Integrability,wrap,wrap,6,/// A wrap/unwrap function that leaves pointers unmodified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/ExecutorAddress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/ExecutorAddress.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/ExecutorAddress.h:12,Integrability,wrap,wrap,12,/// Default wrap function to use on this host.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/ExecutorAddress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/ExecutorAddress.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h:56,Energy Efficiency,allocate,allocated,56,/// Describes a memory lifetime policy for memory to be allocated by a; /// JITLinkMemoryManager.; ///; /// All memory allocated by a call to JITLinkMemoryManager::allocate should be; /// deallocated if a call is made to; /// JITLinkMemoryManager::InFlightAllocation::abandon. The policies below apply; /// to finalized allocations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h:119,Energy Efficiency,allocate,allocated,119,/// Describes a memory lifetime policy for memory to be allocated by a; /// JITLinkMemoryManager.; ///; /// All memory allocated by a call to JITLinkMemoryManager::allocate should be; /// deallocated if a call is made to; /// JITLinkMemoryManager::InFlightAllocation::abandon. The policies below apply; /// to finalized allocations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h:164,Energy Efficiency,allocate,allocate,164,/// Describes a memory lifetime policy for memory to be allocated by a; /// JITLinkMemoryManager.; ///; /// All memory allocated by a call to JITLinkMemoryManager::allocate should be; /// deallocated if a call is made to; /// JITLinkMemoryManager::InFlightAllocation::abandon. The policies below apply; /// to finalized allocations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h:30,Energy Efficiency,allocate,allocated,30,/// Standard memory should be allocated by the allocator and then deallocated; /// when the deallocate method is called for the finalized allocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h:30,Energy Efficiency,allocate,allocated,30,"/// Finalize memory should be allocated by the allocator, and then be; /// overwritten and deallocated after all finalization functions have been; /// run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h:33,Energy Efficiency,allocate,allocated,33,"/// NoAlloc memory should not be allocated by the JITLinkMemoryManager at; /// all. It is used for sections that don't need to be transferred to the; /// executor process, typically metadata sections.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h:68,Performance,Optimiz,Optimized,68,/// A pair of memory protections and allocation policies.; ///; /// Optimized for use as a small map key.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/MemoryFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/OrcError.h:38,Availability,Error,Error,38,"//===--------------- OrcError.h - Orc Error Types ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Define an error category, error codes, and helper utilities for Orc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/OrcError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/OrcError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/OrcError.h:393,Availability,error,error,393,"//===--------------- OrcError.h - Orc Error Types ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Define an error category, error codes, and helper utilities for Orc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/OrcError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/OrcError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/OrcError.h:409,Availability,error,error,409,"//===--------------- OrcError.h - Orc Error Types ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Define an error category, error codes, and helper utilities for Orc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/OrcError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/OrcError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/OrcError.h:7,Availability,Error,Errors,7,// RPC Errors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/OrcError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/OrcError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h:436,Integrability,synchroniz,synchronized,436,"//===---- SimplePackedSerialization.h - simple serialization ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The behavior of the utilities in this header must be synchronized with the; // behavior of the utilities in; // compiler-rt/lib/orc/simple_packed_serialization.h.; //; // The Simple Packed Serialization (SPS) utilities are used to generate; // argument and return buffers for wrapper functions using the following; // serialization scheme:; //; // Primitives (signed types should be two's complement):; // bool, char, int8_t, uint8_t -- 8-bit (0=false, 1=true); // int16_t, uint16_t -- 16-bit little endian; // int32_t, uint32_t -- 32-bit little endian; // int64_t, int64_t -- 64-bit little endian; //; // Sequence<T>:; // Serialized as the sequence length (as a uint64_t) followed by the; // serialization of each of the elements without padding.; //; // Tuple<T1, ..., TN>:; // Serialized as each of the element types from T1 to TN without padding.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h:659,Integrability,wrap,wrapper,659,"//===---- SimplePackedSerialization.h - simple serialization ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The behavior of the utilities in this header must be synchronized with the; // behavior of the utilities in; // compiler-rt/lib/orc/simple_packed_serialization.h.; //; // The Simple Packed Serialization (SPS) utilities are used to generate; // argument and return buffers for wrapper functions using the following; // serialization scheme:; //; // Primitives (signed types should be two's complement):; // bool, char, int8_t, uint8_t -- 8-bit (0=false, 1=true); // int16_t, uint16_t -- 16-bit little endian; // int32_t, uint32_t -- 32-bit little endian; // int64_t, int64_t -- 64-bit little endian; //; // Sequence<T>:; // Serialized as the sequence length (as a uint64_t) followed by the; // serialization of each of the elements without padding.; //; // Tuple<T1, ..., TN>:; // Serialized as each of the element types from T1 to TN without padding.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h:10,Usability,Simpl,SimplePackedSerialization,10,"//===---- SimplePackedSerialization.h - simple serialization ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The behavior of the utilities in this header must be synchronized with the; // behavior of the utilities in; // compiler-rt/lib/orc/simple_packed_serialization.h.; //; // The Simple Packed Serialization (SPS) utilities are used to generate; // argument and return buffers for wrapper functions using the following; // serialization scheme:; //; // Primitives (signed types should be two's complement):; // bool, char, int8_t, uint8_t -- 8-bit (0=false, 1=true); // int16_t, uint16_t -- 16-bit little endian; // int32_t, uint32_t -- 32-bit little endian; // int64_t, int64_t -- 64-bit little endian; //; // Sequence<T>:; // Serialized as the sequence length (as a uint64_t) followed by the; // serialization of each of the elements without padding.; //; // Tuple<T1, ..., TN>:; // Serialized as each of the element types from T1 to TN without padding.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h:40,Usability,simpl,simple,40,"//===---- SimplePackedSerialization.h - simple serialization ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The behavior of the utilities in this header must be synchronized with the; // behavior of the utilities in; // compiler-rt/lib/orc/simple_packed_serialization.h.; //; // The Simple Packed Serialization (SPS) utilities are used to generate; // argument and return buffers for wrapper functions using the following; // serialization scheme:; //; // Primitives (signed types should be two's complement):; // bool, char, int8_t, uint8_t -- 8-bit (0=false, 1=true); // int16_t, uint16_t -- 16-bit little endian; // int32_t, uint32_t -- 32-bit little endian; // int64_t, int64_t -- 64-bit little endian; //; // Sequence<T>:; // Serialized as the sequence length (as a uint64_t) followed by the; // serialization of each of the elements without padding.; //; // Tuple<T1, ..., TN>:; // Serialized as each of the element types from T1 to TN without padding.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h:558,Usability,Simpl,Simple,558,"//===---- SimplePackedSerialization.h - simple serialization ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The behavior of the utilities in this header must be synchronized with the; // behavior of the utilities in; // compiler-rt/lib/orc/simple_packed_serialization.h.; //; // The Simple Packed Serialization (SPS) utilities are used to generate; // argument and return buffers for wrapper functions using the following; // serialization scheme:; //; // Primitives (signed types should be two's complement):; // bool, char, int8_t, uint8_t -- 8-bit (0=false, 1=true); // int16_t, uint16_t -- 16-bit little endian; // int32_t, uint32_t -- 32-bit little endian; // int64_t, int64_t -- 64-bit little endian; //; // Sequence<T>:; // Serialized as the sequence length (as a uint64_t) followed by the; // serialization of each of the elements without padding.; //; // Tuple<T1, ..., TN>:; // Serialized as each of the element types from T1 to TN without padding.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h:116,Security,access,access,116,// FIXME: This typedef is here to enable SPS arg serialization from; // JITLink. It can be removed once JITLink can access SPS directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h:21,Availability,error,errors,21,/// SPS tag type for errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h:86,Availability,error,error,86,"/// SPS tag type for expecteds, which are either a T or a string representing; /// an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h:32,Availability,Error,Errors,32,"/// Helper type for serializing Errors.; ///; /// llvm::Errors are move-only, and not inspectable except by consuming them.; /// This makes them unsuitable for direct serialization via; /// SPSSerializationTraits, which needs to inspect values twice (once to; /// determine the amount of space to reserve, and then again to serialize).; ///; /// The SPSSerializableError type is a helper that can be; /// constructed from an llvm::Error, but inspected more than once.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h:56,Availability,Error,Errors,56,"/// Helper type for serializing Errors.; ///; /// llvm::Errors are move-only, and not inspectable except by consuming them.; /// This makes them unsuitable for direct serialization via; /// SPSSerializationTraits, which needs to inspect values twice (once to; /// determine the amount of space to reserve, and then again to serialize).; ///; /// The SPSSerializableError type is a helper that can be; /// constructed from an llvm::Error, but inspected more than once.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h:431,Availability,Error,Error,431,"/// Helper type for serializing Errors.; ///; /// llvm::Errors are move-only, and not inspectable except by consuming them.; /// This makes them unsuitable for direct serialization via; /// SPSSerializationTraits, which needs to inspect values twice (once to; /// determine the amount of space to reserve, and then again to serialize).; ///; /// The SPSSerializableError type is a helper that can be; /// constructed from an llvm::Error, but inspected more than once.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:383,Integrability,Message,Message,383,"//===--- SimpleRemoteEPCUtils.h - Utils for Simple Remote EPC ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Message definitions and other utilities for SimpleRemoteEPC and; // SimpleRemoteEPCServer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:9,Usability,Simpl,SimpleRemoteEPCUtils,9,"//===--- SimpleRemoteEPCUtils.h - Utils for Simple Remote EPC ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Message definitions and other utilities for SimpleRemoteEPC and; // SimpleRemoteEPCServer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:44,Usability,Simpl,Simple,44,"//===--- SimpleRemoteEPCUtils.h - Utils for Simple Remote EPC ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Message definitions and other utilities for SimpleRemoteEPC and; // SimpleRemoteEPCServer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:427,Usability,Simpl,SimpleRemoteEPC,427,"//===--- SimpleRemoteEPCUtils.h - Utils for Simple Remote EPC ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Message definitions and other utilities for SimpleRemoteEPC and; // SimpleRemoteEPCServer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:451,Usability,Simpl,SimpleRemoteEPCServer,451,"//===--- SimpleRemoteEPCUtils.h - Utils for Simple Remote EPC ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Message definitions and other utilities for SimpleRemoteEPC and; // SimpleRemoteEPCServer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:17,Usability,Simpl,SimpleRemoteEPCDefaultBootstrapSymbolNames,17,// end namespace SimpleRemoteEPCDefaultBootstrapSymbolNames,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:54,Availability,Error,Error,54,"/// Handle receipt of a message.; ///; /// Returns an Error if the message cannot be handled, 'EndSession' if the; /// client will not accept any further messages, and 'ContinueSession'; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:24,Integrability,message,message,24,"/// Handle receipt of a message.; ///; /// Returns an Error if the message cannot be handled, 'EndSession' if the; /// client will not accept any further messages, and 'ContinueSession'; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:67,Integrability,message,message,67,"/// Handle receipt of a message.; ///; /// Returns an Error if the message cannot be handled, 'EndSession' if the; /// client will not accept any further messages, and 'ContinueSession'; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:154,Integrability,message,messages,154,"/// Handle receipt of a message.; ///; /// Returns an Error if the message cannot be handled, 'EndSession' if the; /// client will not accept any further messages, and 'ContinueSession'; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:161,Availability,Error,Error,161,"/// Handle a disconnection from the underlying transport. No further messages; /// should be sent to handleMessage after this is called.; /// Err may contain an Error value indicating unexpected disconnection. This; /// allows clients to log such errors, but no attempt should be made at; /// recovery (which should be handled inside the transport class, if it is; /// supported at all).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:247,Availability,error,errors,247,"/// Handle a disconnection from the underlying transport. No further messages; /// should be sent to handleMessage after this is called.; /// Err may contain an Error value indicating unexpected disconnection. This; /// allows clients to log such errors, but no attempt should be made at; /// recovery (which should be handled inside the transport class, if it is; /// supported at all).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:293,Availability,recover,recovery,293,"/// Handle a disconnection from the underlying transport. No further messages; /// should be sent to handleMessage after this is called.; /// Err may contain an Error value indicating unexpected disconnection. This; /// allows clients to log such errors, but no attempt should be made at; /// recovery (which should be handled inside the transport class, if it is; /// supported at all).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:69,Integrability,message,messages,69,"/// Handle a disconnection from the underlying transport. No further messages; /// should be sent to handleMessage after this is called.; /// Err may contain an Error value indicating unexpected disconnection. This; /// allows clients to log such errors, but no attempt should be made at; /// recovery (which should be handled inside the transport class, if it is; /// supported at all).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:293,Safety,recover,recovery,293,"/// Handle a disconnection from the underlying transport. No further messages; /// should be sent to handleMessage after this is called.; /// Err may contain an Error value indicating unexpected disconnection. This; /// allows clients to log such errors, but no attempt should be made at; /// recovery (which should be handled inside the transport class, if it is; /// supported at all).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:238,Testability,log,log,238,"/// Handle a disconnection from the underlying transport. No further messages; /// should be sent to handleMessage after this is called.; /// Err may contain an Error value indicating unexpected disconnection. This; /// allows clients to log such errors, but no attempt should be made at; /// recovery (which should be handled inside the transport class, if it is; /// supported at all).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:91,Integrability,message,messages,91,/// Called during setup of the client to indicate that the client is ready; /// to receive messages.; ///; /// Transport objects should not access the client until this method is; /// called.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:140,Security,access,access,140,/// Called during setup of the client to indicate that the client is ready; /// to receive messages.; ///; /// Transport objects should not access the client until this method is; /// called.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:27,Integrability,message,message,27,/// Send a SimpleRemoteEPC message.; ///; /// This function may be called concurrently. Subclasses should implement; /// locking if required for the underlying transport.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:74,Performance,concurren,concurrently,74,/// Send a SimpleRemoteEPC message.; ///; /// This function may be called concurrently. Subclasses should implement; /// locking if required for the underlying transport.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:11,Usability,Simpl,SimpleRemoteEPC,11,/// Send a SimpleRemoteEPC message.; ///; /// This function may be called concurrently. Subclasses should implement; /// locking if required for the underlying transport.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/TargetProcessControlTypes.h:33,Performance,load,loaded,33,/// A handle used to represent a loaded dylib in the target process.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/TargetProcessControlTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/TargetProcessControlTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:7,Integrability,Wrap,WrapperFunctionUtils,7,"//===- WrapperFunctionUtils.h - Utilities for wrapper functions -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A buffer for serialized results.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:46,Integrability,wrap,wrapper,46,"//===- WrapperFunctionUtils.h - Utilities for wrapper functions -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A buffer for serialized results.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:78,Deployability,release,releases,78,/// C++ wrapper function result: Same as CWrapperFunctionResult but; /// auto-releases memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:8,Integrability,wrap,wrapper,8,/// C++ wrapper function result: Same as CWrapperFunctionResult but; /// auto-releases memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:21,Integrability,Wrap,WrapperFunctionResult,21,/// Create a default WrapperFunctionResult.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:13,Integrability,Wrap,WrapperFunctionResult,13,/// Create a WrapperFunctionResult by taking ownership of a; /// CWrapperFunctionResult.; ///; /// Warning: This should only be used by clients writing wrapper-function; /// caller utilities (like TargetProcessControl).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:152,Integrability,wrap,wrapper-function,152,/// Create a WrapperFunctionResult by taking ownership of a; /// CWrapperFunctionResult.; ///; /// Warning: This should only be used by clients writing wrapper-function; /// caller utilities (like TargetProcessControl).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:4,Deployability,Release,Release,4,/// Release ownership of the contained CWrapperFunctionResult.; /// Warning: Do not use -- this method will be removed in the future. It only; /// exists to temporarily support some code that will eventually be moved to; /// the ORC runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:75,Integrability,Wrap,WrapperFunctionResult,75,/// Returns true if this value is equivalent to a default-constructed; /// WrapperFunctionResult.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:13,Integrability,Wrap,WrapperFunctionResult,13,/// Create a WrapperFunctionResult with the given size and return a pointer; /// to the underlying memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:26,Availability,error,error,26,/// Create an out-of-band error by copying the given string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:26,Availability,error,error,26,/// Create an out-of-band error by copying the given string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:36,Availability,error,error,36,"/// If this value is an out-of-band error then this returns the error message,; /// otherwise returns nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:64,Availability,error,error,64,"/// If this value is an out-of-band error then this returns the error message,; /// otherwise returns nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:70,Integrability,message,message,70,"/// If this value is an out-of-band error then this returns the error message,; /// otherwise returns nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:25,Availability,Error,Error,25,// Did you forget to use Error / Expected in your handler?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:11,Integrability,wrap,wrapper,11,"/// Call a wrapper function. Caller should be callable as; /// WrapperFunctionResult Fn(const char *ArgData, size_t ArgSize);",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:63,Integrability,Wrap,WrapperFunctionResult,63,"/// Call a wrapper function. Caller should be callable as; /// WrapperFunctionResult Fn(const char *ArgData, size_t ArgSize);",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:20,Availability,Error,Error,20,// RetT might be an Error or Expected value. Set the checked flag now:; // we don't want the user to have to check the unused result if this; // operation fails.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:18,Integrability,wrap,wrapper,18,"/// Call an async wrapper function.; /// Caller should be callable as; /// void Fn(unique_function<void(WrapperFunctionResult)> SendResult,; /// WrapperFunctionResult ArgBuffer);",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:104,Integrability,Wrap,WrapperFunctionResult,104,"/// Call an async wrapper function.; /// Caller should be callable as; /// void Fn(unique_function<void(WrapperFunctionResult)> SendResult,; /// WrapperFunctionResult ArgBuffer);",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:145,Integrability,Wrap,WrapperFunctionResult,145,"/// Call an async wrapper function.; /// Caller should be callable as; /// void Fn(unique_function<void(WrapperFunctionResult)> SendResult,; /// WrapperFunctionResult ArgBuffer);",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:23,Integrability,wrap,wrapper,23,/// Handle a call to a wrapper function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:30,Integrability,wrap,wrapper,30,/// Handle a call to an async wrapper function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:267,Integrability,wrap,wrappers,267,"/// A function object that takes an ExecutorAddr as its first argument,; /// casts that address to a ClassT*, then calls the given method on that; /// pointer passing in the remaining function arguments. This utility; /// removes some of the boilerplate from writing wrappers for method calls.; ///; /// @code{.cpp}; /// class MyClass {; /// public:; /// void myMethod(uint32_t, bool) { ... }; /// };; ///; /// // SPS Method signature -- note MyClass object address as first argument.; /// using SPSMyMethodWrapperSignature =; /// SPSTuple<SPSExecutorAddr, uint32_t, bool>;; ///; /// WrapperFunctionResult; /// myMethodCallWrapper(const char *ArgData, size_t ArgSize) {; /// return WrapperFunction<SPSMyMethodWrapperSignature>::handle(; /// ArgData, ArgSize, makeMethodWrapperHandler(&MyClass::myMethod));; /// }; /// @endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:584,Integrability,Wrap,WrapperFunctionResult,584,"/// A function object that takes an ExecutorAddr as its first argument,; /// casts that address to a ClassT*, then calls the given method on that; /// pointer passing in the remaining function arguments. This utility; /// removes some of the boilerplate from writing wrappers for method calls.; ///; /// @code{.cpp}; /// class MyClass {; /// public:; /// void myMethod(uint32_t, bool) { ... }; /// };; ///; /// // SPS Method signature -- note MyClass object address as first argument.; /// using SPSMyMethodWrapperSignature =; /// SPSTuple<SPSExecutorAddr, uint32_t, bool>;; ///; /// WrapperFunctionResult; /// myMethodCallWrapper(const char *ArgData, size_t ArgSize) {; /// return WrapperFunction<SPSMyMethodWrapperSignature>::handle(; /// ArgData, ArgSize, makeMethodWrapperHandler(&MyClass::myMethod));; /// }; /// @endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:682,Integrability,Wrap,WrapperFunction,682,"/// A function object that takes an ExecutorAddr as its first argument,; /// casts that address to a ClassT*, then calls the given method on that; /// pointer passing in the remaining function arguments. This utility; /// removes some of the boilerplate from writing wrappers for method calls.; ///; /// @code{.cpp}; /// class MyClass {; /// public:; /// void myMethod(uint32_t, bool) { ... }; /// };; ///; /// // SPS Method signature -- note MyClass object address as first argument.; /// using SPSMyMethodWrapperSignature =; /// SPSTuple<SPSExecutorAddr, uint32_t, bool>;; ///; /// WrapperFunctionResult; /// myMethodCallWrapper(const char *ArgData, size_t ArgSize) {; /// return WrapperFunction<SPSMyMethodWrapperSignature>::handle(; /// ArgData, ArgSize, makeMethodWrapperHandler(&MyClass::myMethod));; /// }; /// @endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:28,Integrability,wrap,wrapper,28,"/// Represents a serialized wrapper function call.; /// Serializing calls themselves allows us to batch them: We can make one; /// ""run-wrapper-functions"" utility and send it a list of calls to run.; ///; /// The motivating use-case for this API is JITLink allocation actions, where; /// we want to run multiple functions to finalize linked memory without having; /// to make separate IPC calls for each one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:136,Integrability,wrap,wrapper-functions,136,"/// Represents a serialized wrapper function call.; /// Serializing calls themselves allows us to batch them: We can make one; /// ""run-wrapper-functions"" utility and send it a list of calls to run.; ///; /// The motivating use-case for this API is JITLink allocation actions, where; /// we want to run multiple functions to finalize linked memory without having; /// to make separate IPC calls for each one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:13,Integrability,Wrap,WrapperFunctionCall,13,/// Create a WrapperFunctionCall using the given SPS serializer to serialize; /// the arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:13,Integrability,Wrap,WrapperFunctionCall,13,/// Create a WrapperFunctionCall from a target function and arg buffer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:4,Integrability,Wrap,WrapperFunctionCalls,4,/// WrapperFunctionCalls convert to true if the callee is non-null.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:27,Integrability,Wrap,WrapperFunctionResult,27,/// Run call returning raw WrapperFunctionResult.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:91,Availability,failure,failures,91,/// Run call and deserialize an SPSError result. SPSError returns and; /// deserialization failures are merged into the returned error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:129,Availability,error,error,129,/// Run call and deserialize an SPSError result. SPSError returns and; /// deserialization failures are merged into the returned error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderGDB.h:53,Integrability,interface,interface,53,"//===- JITLoaderGDB.h - Register objects via GDB JIT interface -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Register objects for access by debuggers via the GDB JIT interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderGDB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderGDB.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderGDB.h:439,Integrability,interface,interface,439,"//===- JITLoaderGDB.h - Register objects via GDB JIT interface -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Register objects for access by debuggers via the GDB JIT interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderGDB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderGDB.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderGDB.h:403,Security,access,access,403,"//===- JITLoaderGDB.h - Register objects via GDB JIT interface -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Register objects for access by debuggers via the GDB JIT interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderGDB.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderGDB.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderPerf.h:441,Integrability,interface,interface,441,"//===------- JITLoaderPerf.h --- Register profiler objects ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Register objects for access by profilers via the perf JIT interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderPerf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderPerf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderPerf.h:404,Security,access,access,404,"//===------- JITLoaderPerf.h --- Register profiler objects ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Register objects for access by profilers via the perf JIT interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderPerf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderPerf.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h:461,Performance,load,loaded,461,"//===--------------- SimpleExecutorDylibManager.h ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A simple dynamic library management class. Allows dynamic libraries to be; // loaded and searched.; //; // FIXME: The functionality in this file should be moved to the ORC runtime.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h:21,Usability,Simpl,SimpleExecutorDylibManager,21,"//===--------------- SimpleExecutorDylibManager.h ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A simple dynamic library management class. Allows dynamic libraries to be; // loaded and searched.; //; // FIXME: The functionality in this file should be moved to the ORC runtime.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h:385,Usability,simpl,simple,385,"//===--------------- SimpleExecutorDylibManager.h ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A simple dynamic library management class. Allows dynamic libraries to be; // loaded and searched.; //; // FIXME: The functionality in this file should be moved to the ORC runtime.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h:4,Usability,Simpl,Simple,4,/// Simple page-based allocator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorMemoryManager.h:22,Usability,Simpl,SimpleExecutorMemoryManager,22,"//===---------------- SimpleExecutorMemoryManager.h -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A simple allocator class suitable for basic remote-JIT use.; //; // FIXME: The functionality in this file should be moved to the ORC runtime.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorMemoryManager.h:385,Usability,simpl,simple,385,"//===---------------- SimpleExecutorMemoryManager.h -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A simple allocator class suitable for basic remote-JIT use.; //; // FIXME: The functionality in this file should be moved to the ORC runtime.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorMemoryManager.h:4,Usability,Simpl,Simple,4,/// Simple page-based allocator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorMemoryManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorMemoryManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h:10,Usability,Simpl,SimpleRemoteEPCServer,10,"//===---- SimpleRemoteEPCServer.h - EPC over abstract channel ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // EPC over simple abstract channel.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h:392,Usability,simpl,simple,392,"//===---- SimpleRemoteEPCServer.h - EPC over abstract channel ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // EPC over simple abstract channel.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h:6,Usability,simpl,simple,6,/// A simple EPC server implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h:11,Availability,error,error,11,/// Set an error reporter for this server.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h:189,Availability,error,error,189,"/// Call to handle an incoming message.; ///; /// Returns 'Disconnect' if the message is a 'detach' message from the remote; /// otherwise returns 'Continue'. If the server has moved to an error state,; /// returns an error, which should be reported and treated as a 'Disconnect'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h:218,Availability,error,error,218,"/// Call to handle an incoming message.; ///; /// Returns 'Disconnect' if the message is a 'detach' message from the remote; /// otherwise returns 'Continue'. If the server has moved to an error state,; /// returns an error, which should be reported and treated as a 'Disconnect'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h:31,Integrability,message,message,31,"/// Call to handle an incoming message.; ///; /// Returns 'Disconnect' if the message is a 'detach' message from the remote; /// otherwise returns 'Continue'. If the server has moved to an error state,; /// returns an error, which should be reported and treated as a 'Disconnect'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h:78,Integrability,message,message,78,"/// Call to handle an incoming message.; ///; /// Returns 'Disconnect' if the message is a 'detach' message from the remote; /// otherwise returns 'Continue'. If the server has moved to an error state,; /// returns an error, which should be reported and treated as a 'Disconnect'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h:100,Integrability,message,message,100,"/// Call to handle an incoming message.; ///; /// Returns 'Disconnect' if the message is a 'detach' message from the remote; /// otherwise returns 'Continue'. If the server has moved to an error state,; /// returns an error, which should be reported and treated as a 'Disconnect'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h:26,Performance,perform,perform,26,/// Modifies directive to perform literal match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h:593,Availability,failure,failure,593,"/// What type of match result does this diagnostic describe?; ///; /// A directive's supplied pattern is said to be either expected or excluded; /// depending on whether the pattern must have or must not have a match in; /// order for the directive to succeed. For example, a CHECK directive's; /// pattern is expected, and a CHECK-NOT directive's pattern is excluded.; ///; /// There might be more than one match result for a single pattern. For; /// example, there might be several discarded matches; /// (MatchFoundButDiscarded) before either a good match; /// (MatchFoundAndExpected) or a failure to match (MatchNoneButExpected),; /// and there might be a fuzzy match (MatchFuzzy) after the latter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h:149,Integrability,depend,depending,149,"/// What type of match result does this diagnostic describe?; ///; /// A directive's supplied pattern is said to be either expected or excluded; /// depending on whether the pattern must have or must not have a match in; /// order for the directive to succeed. For example, a CHECK directive's; /// pattern is expected, and a CHECK-NOT directive's pattern is excluded.; ///; /// There might be more than one match result for a single pattern. For; /// example, there might be several discarded matches; /// (MatchFoundButDiscarded) before either a good match; /// (MatchFoundAndExpected) or a failure to match (MatchNoneButExpected),; /// and there might be a fuzzy match (MatchFuzzy) after the latter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h:17,Availability,error,error,17,"/// Indicates an error while processing a match after the match was found; /// for an expected or excluded pattern. The error is specified by \c Note,; /// to which it should be appropriate to prepend ""error: "" later. The full; /// match itself should be recorded in a preceding diagnostic of a different; /// \c MatchFound match type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h:120,Availability,error,error,120,"/// Indicates an error while processing a match after the match was found; /// for an expected or excluded pattern. The error is specified by \c Note,; /// to which it should be appropriate to prepend ""error: "" later. The full; /// match itself should be recorded in a preceding diagnostic of a different; /// \c MatchFound match type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h:202,Availability,error,error,202,"/// Indicates an error while processing a match after the match was found; /// for an expected or excluded pattern. The error is specified by \c Note,; /// to which it should be appropriate to prepend ""error: "" later. The full; /// match itself should be recorded in a preceding diagnostic of a different; /// \c MatchFound match type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h:42,Security,expose,exposes,42,/// FileCheck class takes the request and exposes various methods that; /// use information from the request.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h:91,Availability,Error,Errors,91,"/// Reads the check file from \p Buffer and records the expected strings it; /// contains. Errors are reported against \p SM.; ///; /// If \p ImpPatBufferIDRange, then the range (inclusive start, exclusive end); /// of IDs for source buffers added to \p SM for implicit patterns are; /// recorded in it. The range is empty if there are none.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h:168,Availability,Error,Errors,168,/// Checks the input to FileCheck provided in the \p Buffer against the; /// expected strings read from the check file and record diagnostics emitted; /// in \p Diags. Errors are recorded against \p SM.; ///; /// \returns false if the input fails to satisfy the checks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Debug/Options.h:46,Energy Efficiency,reduce,reduce,46,"/// Limit generated debug info for classes to reduce size. This emits class; /// type info only where the constructor is emitted, if it is a class that; /// has a constructor.; /// FIXME: Consider combining this with LimitedDebugInfo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/Debug/Options.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Debug/Options.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Debug/Options.h:34,Energy Efficiency,reduce,reduce,34,/// Limit generated debug info to reduce size (-fno-standalone-debug). This; /// emits forward decls for types that could be replaced with forward decls in; /// the source code. For dynamic C++ classes type info is only emitted into; /// the module that contains the classe's vtable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/Debug/Options.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Debug/Options.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Driver/CodeGenOptions.h:7,Performance,Perform,Performance,7,// Arm Performance Libraries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/Driver/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Driver/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h:4,Integrability,Wrap,Wraps,4,/// Wraps the input device images into the module \p M as global symbols and; /// registers the images with the OpenMP Offloading runtime libomptarget.; /// \param EntryArray Optional pair pointing to the `__start` and `__stop`; /// symbols holding the `__tgt_offload_entry` array.; /// \param Suffix An optional suffix appended to the emitted symbols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h:4,Integrability,Wrap,Wraps,4,/// Wraps the input fatbinary image into the module \p M as global symbols and; /// registers the images with the CUDA runtime.; /// \param EntryArray Optional pair pointing to the `__start` and `__stop`; /// symbols holding the `__tgt_offload_entry` array.; /// \param Suffix An optional suffix appended to the emitted symbols.; /// \param EmitSurfacesAndTextures Whether to emit surface and textures; /// registration code. It defaults to false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h:4,Integrability,Wrap,Wraps,4,/// Wraps the input bundled image into the module \p M as global symbols and; /// registers the images with the HIP runtime.; /// \param EntryArray Optional pair pointing to the `__start` and `__stop`; /// symbols holding the `__tgt_offload_entry` array.; /// \param Suffix An optional suffix appended to the emitted symbols.; /// \param EmitSurfacesAndTextures Whether to emit surface and textures; /// registration code. It defaults to false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h:120,Modifiability,variab,variable,120,/// Mark the entry as a global entry. This indicates the presense of a; /// kernel if the size size field is zero and a variable otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h:39,Modifiability,variab,variable,39,/// Mark the entry as a managed global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h:32,Modifiability,variab,variable,32,/// Mark the entry as a surface variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h:32,Modifiability,variab,variable,32,/// Mark the entry as a texture variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h:135,Modifiability,variab,variable,135,/// Create a constant struct initializer used to register this global at; /// runtime.; /// \return the constant struct and the global variable holding the symbol name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h:108,Modifiability,variab,variables,108,/// Creates a pair of globals used to iterate the array of offloading entries by; /// accessing the section variables provided by the linker.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h:86,Security,access,accessing,86,/// Creates a pair of globals used to iterate the array of offloading entries by; /// accessing the section variables provided by the linker.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:33,Modifiability,Variab,Variables,33,/// IDs for all Internal Control Variables (ICVs).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:79,Deployability,Update,Update,79,"/// \note This needs to be kept in sync with kmp.h enum sched_type.; /// Todo: Update kmp.h to include this file, and remove the enums in kmp.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:38,Energy Efficiency,schedul,schedule,38,"// For typed comparisons, not a valid schedule",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:3,Energy Efficiency,Schedul,Schedule,3,// Schedule algorithms,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:10,Energy Efficiency,schedul,schedules,10,// static schedules algorithims for distribute,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:38,Energy Efficiency,schedul,schedule,38,// Modifier flags to be combined with schedule algorithms,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:3,Availability,Mask,Masks,3,// Masks combining multiple flags,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:9,Energy Efficiency,schedul,schedule,9,"// valid schedule type values, without monotonicity flags",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate memory on the device and move data from host to device.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate memory on the device and move data from device to host.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:11,Performance,perform,perform,11,"/// Always perform the requested mapping action on the element, even; /// if it was already mapped before.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:38,Energy Efficiency,allocate,allocate,38,/// Close is a hint to the runtime to allocate memory close to; /// the target device.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:73,Availability,error,error,73,/// 0x800 is reserved for compatibility with XLC.; /// Produce a runtime error if the data is not already allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:106,Energy Efficiency,allocate,allocated,106,/// 0x800 is reserved for compatibility with XLC.; /// Produce a runtime error if the data is not already allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:182,Deployability,update,update,182,/// Signal that the runtime library should use args as an array of; /// descriptor_dim pointers and use args_size as dims. Used when we have; /// non-contiguous list items in target update directive,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:89,Modifiability,variab,variables,89,"/// Device ID if the device was not defined, runtime should get it; /// from environment variables in the spec.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:4,Integrability,Depend,Dependence,4,/// Dependence kind for RTL.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPContext.h:118,Integrability,depend,depends,118,/// Hook for users to check if an ISA trait matches. The trait is described as; /// the string that got parsed and it depends on the target and context if; /// this matches or not.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPContext.h:99,Availability,avail,available,99,"/// Return true if \p VMI is applicable in \p Ctx, that is, all traits required; /// by \p VMI are available in the OpenMP context \p Ctx. If \p DeviceSetOnly is; /// true, only the device selector set, if present, are checked. Note that we; /// still honor extension traits provided by the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h:106,Modifiability,plugin,plugin,106,"/// \brief Defines various target-specific GPU grid values that must be; /// consistent between host RTL (plugin), device RTL, and clang.; /// We can change grid values for a ""fat"" binary so that different; /// passes get the correct values when generating code for a; /// multi-target binary. Both amdgcn and nvptx values are stored in; /// this file. In the future, should there be differences between GPUs; /// of the same architecture, then simply make a different array and; /// use the new array name.; ///; /// Example usage in clang:; /// const unsigned slot_size =; /// ctx.GetTargetInfo().getGridValue().GV_Warp_Size;; ///; /// Example usage in libomptarget/deviceRTLs:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #ifdef __AMDGPU__; /// #define GRIDVAL AMDGPUGridValues; /// #else; /// #define GRIDVAL NVPTXGridValues; /// #endif; /// ... Then use this reference for GV_Warp_Size in the deviceRTL source.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget hsa plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL AMDGPUGridValues; /// ... Then use this reference to access GV_Warp_Size in the hsa plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget cuda plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL NVPTXGridValues; /// ... Then use this reference to access GV_Warp_Size in the cuda plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h:1012,Modifiability,plugin,plugin,1012,"/// \brief Defines various target-specific GPU grid values that must be; /// consistent between host RTL (plugin), device RTL, and clang.; /// We can change grid values for a ""fat"" binary so that different; /// passes get the correct values when generating code for a; /// multi-target binary. Both amdgcn and nvptx values are stored in; /// this file. In the future, should there be differences between GPUs; /// of the same architecture, then simply make a different array and; /// use the new array name.; ///; /// Example usage in clang:; /// const unsigned slot_size =; /// ctx.GetTargetInfo().getGridValue().GV_Warp_Size;; ///; /// Example usage in libomptarget/deviceRTLs:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #ifdef __AMDGPU__; /// #define GRIDVAL AMDGPUGridValues; /// #else; /// #define GRIDVAL NVPTXGridValues; /// #endif; /// ... Then use this reference for GV_Warp_Size in the deviceRTL source.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget hsa plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL AMDGPUGridValues; /// ... Then use this reference to access GV_Warp_Size in the hsa plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget cuda plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL NVPTXGridValues; /// ... Then use this reference to access GV_Warp_Size in the cuda plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h:1178,Modifiability,plugin,plugin,1178,"/// \brief Defines various target-specific GPU grid values that must be; /// consistent between host RTL (plugin), device RTL, and clang.; /// We can change grid values for a ""fat"" binary so that different; /// passes get the correct values when generating code for a; /// multi-target binary. Both amdgcn and nvptx values are stored in; /// this file. In the future, should there be differences between GPUs; /// of the same architecture, then simply make a different array and; /// use the new array name.; ///; /// Example usage in clang:; /// const unsigned slot_size =; /// ctx.GetTargetInfo().getGridValue().GV_Warp_Size;; ///; /// Example usage in libomptarget/deviceRTLs:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #ifdef __AMDGPU__; /// #define GRIDVAL AMDGPUGridValues; /// #else; /// #define GRIDVAL NVPTXGridValues; /// #endif; /// ... Then use this reference for GV_Warp_Size in the deviceRTL source.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget hsa plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL AMDGPUGridValues; /// ... Then use this reference to access GV_Warp_Size in the hsa plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget cuda plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL NVPTXGridValues; /// ... Then use this reference to access GV_Warp_Size in the cuda plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h:1270,Modifiability,plugin,plugin,1270,"/// \brief Defines various target-specific GPU grid values that must be; /// consistent between host RTL (plugin), device RTL, and clang.; /// We can change grid values for a ""fat"" binary so that different; /// passes get the correct values when generating code for a; /// multi-target binary. Both amdgcn and nvptx values are stored in; /// this file. In the future, should there be differences between GPUs; /// of the same architecture, then simply make a different array and; /// use the new array name.; ///; /// Example usage in clang:; /// const unsigned slot_size =; /// ctx.GetTargetInfo().getGridValue().GV_Warp_Size;; ///; /// Example usage in libomptarget/deviceRTLs:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #ifdef __AMDGPU__; /// #define GRIDVAL AMDGPUGridValues; /// #else; /// #define GRIDVAL NVPTXGridValues; /// #endif; /// ... Then use this reference for GV_Warp_Size in the deviceRTL source.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget hsa plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL AMDGPUGridValues; /// ... Then use this reference to access GV_Warp_Size in the hsa plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget cuda plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL NVPTXGridValues; /// ... Then use this reference to access GV_Warp_Size in the cuda plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h:1436,Modifiability,plugin,plugin,1436,"/// \brief Defines various target-specific GPU grid values that must be; /// consistent between host RTL (plugin), device RTL, and clang.; /// We can change grid values for a ""fat"" binary so that different; /// passes get the correct values when generating code for a; /// multi-target binary. Both amdgcn and nvptx values are stored in; /// this file. In the future, should there be differences between GPUs; /// of the same architecture, then simply make a different array and; /// use the new array name.; ///; /// Example usage in clang:; /// const unsigned slot_size =; /// ctx.GetTargetInfo().getGridValue().GV_Warp_Size;; ///; /// Example usage in libomptarget/deviceRTLs:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #ifdef __AMDGPU__; /// #define GRIDVAL AMDGPUGridValues; /// #else; /// #define GRIDVAL NVPTXGridValues; /// #endif; /// ... Then use this reference for GV_Warp_Size in the deviceRTL source.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget hsa plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL AMDGPUGridValues; /// ... Then use this reference to access GV_Warp_Size in the hsa plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget cuda plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL NVPTXGridValues; /// ... Then use this reference to access GV_Warp_Size in the cuda plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h:1147,Security,access,access,1147,"/// \brief Defines various target-specific GPU grid values that must be; /// consistent between host RTL (plugin), device RTL, and clang.; /// We can change grid values for a ""fat"" binary so that different; /// passes get the correct values when generating code for a; /// multi-target binary. Both amdgcn and nvptx values are stored in; /// this file. In the future, should there be differences between GPUs; /// of the same architecture, then simply make a different array and; /// use the new array name.; ///; /// Example usage in clang:; /// const unsigned slot_size =; /// ctx.GetTargetInfo().getGridValue().GV_Warp_Size;; ///; /// Example usage in libomptarget/deviceRTLs:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #ifdef __AMDGPU__; /// #define GRIDVAL AMDGPUGridValues; /// #else; /// #define GRIDVAL NVPTXGridValues; /// #endif; /// ... Then use this reference for GV_Warp_Size in the deviceRTL source.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget hsa plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL AMDGPUGridValues; /// ... Then use this reference to access GV_Warp_Size in the hsa plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget cuda plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL NVPTXGridValues; /// ... Then use this reference to access GV_Warp_Size in the cuda plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h:1404,Security,access,access,1404,"/// \brief Defines various target-specific GPU grid values that must be; /// consistent between host RTL (plugin), device RTL, and clang.; /// We can change grid values for a ""fat"" binary so that different; /// passes get the correct values when generating code for a; /// multi-target binary. Both amdgcn and nvptx values are stored in; /// this file. In the future, should there be differences between GPUs; /// of the same architecture, then simply make a different array and; /// use the new array name.; ///; /// Example usage in clang:; /// const unsigned slot_size =; /// ctx.GetTargetInfo().getGridValue().GV_Warp_Size;; ///; /// Example usage in libomptarget/deviceRTLs:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #ifdef __AMDGPU__; /// #define GRIDVAL AMDGPUGridValues; /// #else; /// #define GRIDVAL NVPTXGridValues; /// #endif; /// ... Then use this reference for GV_Warp_Size in the deviceRTL source.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget hsa plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL AMDGPUGridValues; /// ... Then use this reference to access GV_Warp_Size in the hsa plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget cuda plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL NVPTXGridValues; /// ... Then use this reference to access GV_Warp_Size in the cuda plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h:445,Usability,simpl,simply,445,"/// \brief Defines various target-specific GPU grid values that must be; /// consistent between host RTL (plugin), device RTL, and clang.; /// We can change grid values for a ""fat"" binary so that different; /// passes get the correct values when generating code for a; /// multi-target binary. Both amdgcn and nvptx values are stored in; /// this file. In the future, should there be differences between GPUs; /// of the same architecture, then simply make a different array and; /// use the new array name.; ///; /// Example usage in clang:; /// const unsigned slot_size =; /// ctx.GetTargetInfo().getGridValue().GV_Warp_Size;; ///; /// Example usage in libomptarget/deviceRTLs:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #ifdef __AMDGPU__; /// #define GRIDVAL AMDGPUGridValues; /// #else; /// #define GRIDVAL NVPTXGridValues; /// #endif; /// ... Then use this reference for GV_Warp_Size in the deviceRTL source.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget hsa plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL AMDGPUGridValues; /// ... Then use this reference to access GV_Warp_Size in the hsa plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget cuda plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL NVPTXGridValues; /// ... Then use this reference to access GV_Warp_Size in the cuda plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:206,Deployability,configurat,configuration,206,"/// Captures attributes that affect generating LLVM-IR using the; /// OpenMPIRBuilder and related classes. Note that not all attributes are; /// required for all classes or functions. In some use cases the configuration; /// is not necessary at all, because because the only functions that are called; /// are ones that are not dependent on the configuration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:345,Deployability,configurat,configuration,345,"/// Captures attributes that affect generating LLVM-IR using the; /// OpenMPIRBuilder and related classes. Note that not all attributes are; /// required for all classes or functions. In some use cases the configuration; /// is not necessary at all, because because the only functions that are called; /// are ones that are not dependent on the configuration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:328,Integrability,depend,dependent,328,"/// Captures attributes that affect generating LLVM-IR using the; /// OpenMPIRBuilder and related classes. Note that not all attributes are; /// required for all classes or functions. In some use cases the configuration; /// is not necessary at all, because because the only functions that are called; /// are ones that are not dependent on the configuration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:206,Modifiability,config,configuration,206,"/// Captures attributes that affect generating LLVM-IR using the; /// OpenMPIRBuilder and related classes. Note that not all attributes are; /// required for all classes or functions. In some use cases the configuration; /// is not necessary at all, because because the only functions that are called; /// are ones that are not dependent on the configuration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:345,Modifiability,config,configuration,345,"/// Captures attributes that affect generating LLVM-IR using the; /// OpenMPIRBuilder and related classes. Note that not all attributes are; /// required for all classes or functions. In some use cases the configuration; /// is not necessary at all, because because the only functions that are called; /// are ones that are not dependent on the configuration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:26,Testability,assert,assert,26,// Getters functions that assert if the required values are not present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:78,Integrability,depend,depending,78,"// Returns the FirstSeparator if set, otherwise use the default separator; // depending on isGPU",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:69,Integrability,depend,depending,69,"// Returns the Separator if set, otherwise use the default separator depending; // on isGPU",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:30,Modifiability,variab,variable,30,/// Entry is a declare target variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:56,Availability,avail,available,56,// Return the Name based on \a EntryInfo using the next available Count.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:21,Modifiability,variab,variable,21,//; // Device global variable entries related.; //; /// Kind of the global variable entry..,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:75,Modifiability,variab,variable,75,//; // Device global variable entries related.; //; /// Kind of the global variable entry..,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:167,Integrability,interface,interface,167,/// Kind of device clause for declare target variables; /// and functions; /// NOTE: Currently not used as a part of a variable entry; /// used for Flang and Clang to interface with the variable; /// related registration functions,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:45,Modifiability,variab,variables,45,/// Kind of device clause for declare target variables; /// and functions; /// NOTE: Currently not used as a part of a variable entry; /// used for Flang and Clang to interface with the variable; /// related registration functions,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:119,Modifiability,variab,variable,119,/// Kind of device clause for declare target variables; /// and functions; /// NOTE: Currently not used as a part of a variable entry; /// used for Flang and Clang to interface with the variable; /// related registration functions,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:186,Modifiability,variab,variable,186,/// Kind of device clause for declare target variables; /// and functions; /// NOTE: Currently not used as a part of a variable entry; /// used for Flang and Clang to interface with the variable; /// related registration functions,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:18,Modifiability,variab,variable,18,/// Device global variable entries info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:23,Modifiability,variab,variable,23,/// Type of the global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:29,Modifiability,variab,variable,29,/// Initialize device global variable entry.; /// This is ONLY used for DEVICE compilation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:27,Modifiability,variab,variable,27,/// Register device global variable entry.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:18,Modifiability,variab,variable,18,/// Checks if the variable with the given name has been registered already.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:4,Deployability,Update,Update,4,/// Update the count of entries at a particular source location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:30,Modifiability,variab,variable,30,/// Storage for device global variable entries kind. The storage is to be; /// indexed by mangled name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:7,Integrability,interface,interface,7,/// An interface to create LLVM-IR for OpenMP directives.; ///; /// Each OpenMP directive has a corresponding public generator method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:22,Modifiability,variab,variable,22,"/// Callback type for variable finalization (think destructors).; ///; /// \param CodeGenIP is the insertion point at which the finalization code; /// should be placed.; ///; /// A finalize callback knows about all objects that need finalization, e.g.; /// destruction, when the scope of the currently generated construct is left; /// at the time, and location, the callback is invoked.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:353,Modifiability,variab,variable,353,/// Callback type for loop body code generation.; ///; /// \param CodeGenIP is the insertion point where the loop's body code must be; /// placed. This will be a dedicated BasicBlock with a; /// conditional branch from the loop condition check and; /// terminated with an unconditional branch to the loop; /// latch.; /// \param IndVar is the induction variable usable at the insertion point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:362,Usability,usab,usable,362,/// Callback type for loop body code generation.; ///; /// \param CodeGenIP is the insertion point where the loop's body code must be; /// placed. This will be a dedicated BasicBlock with a; /// conditional branch from the loop condition check and; /// terminated with an unconditional branch to the loop; /// latch.; /// \param IndVar is the induction variable usable at the insertion point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:22,Modifiability,variab,variable,22,"/// Callback type for variable privatization (think copy & default; /// constructor).; ///; /// \param AllocaIP is the insertion point at which new alloca instructions; /// should be placed.; /// \param CodeGenIP is the insertion point at which the privatization code; /// should be placed.; /// \param Original The value being copied/created, should not be used in the; /// generated IR.; /// \param Inner The equivalent of \p Original that should be used in the; /// generated IR; this is equal to \p Original if the value is; /// a pointer and can thus be passed directly, otherwise it is; /// an equivalent but different value.; /// \param ReplVal The replacement value, thus a copy or new created version; /// of \p Inner.; ///; /// \returns The new insertion point where code generation continues and; /// \p ReplVal the replacement value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:273,Usability,simpl,simple,273,/// Emitter methods for OpenMP directives.; ///; ///{; /// Generator for '#omp barrier'; ///; /// \param Loc The location where the barrier directive was encountered.; /// \param DK The kind of directive that caused the barrier.; /// \param ForceSimpleCall Flag to force a simple (=non-cancellation) barrier.; /// \param CheckCancelFlag Flag to indicate a cancel barrier return value; /// should be checked and acted upon.; ///; /// \returns The insertion point after the barrier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:288,Modifiability,variab,variable,288,"/// Generator for '#omp parallel'; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion points to be used for alloca instructions.; /// \param BodyGenCB Callback that will generate the region code.; /// \param PrivCB Callback to copy a given variable (think copy constructor).; /// \param FiniCB Callback to finalize variable copies.; /// \param IfCondition The evaluated 'if' clause expression, if any.; /// \param NumThreads The evaluated 'num_threads' clause expression, if any.; /// \param ProcBind The value of the 'proc_bind' clause (see ProcBindKind).; /// \param IsCancellable Flag to indicate a cancellable parallel region.; ///; /// \returns The insertion position *after* the parallel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:363,Modifiability,variab,variable,363,"/// Generator for '#omp parallel'; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion points to be used for alloca instructions.; /// \param BodyGenCB Callback that will generate the region code.; /// \param PrivCB Callback to copy a given variable (think copy constructor).; /// \param FiniCB Callback to finalize variable copies.; /// \param IfCondition The evaluated 'if' clause expression, if any.; /// \param NumThreads The evaluated 'num_threads' clause expression, if any.; /// \param ProcBind The value of the 'proc_bind' clause (see ProcBindKind).; /// \param IsCancellable Flag to indicate a cancellable parallel region.; ///; /// \returns The insertion position *after* the parallel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:340,Modifiability,variab,variable,340,"/// Generator for the control flow structure of an OpenMP canonical loop.; ///; /// This generator operates on the logical iteration space of the loop, i.e.; /// the caller only has to provide a loop trip count of the loop as defined by; /// base language semantics. The trip count is interpreted as an unsigned; /// integer. The induction variable passed to \p BodyGenCB will be of the same; /// type and run from 0 to \p TripCount - 1. It is up to the callback to; /// convert the logical iteration variable to the loop counter variable in the; /// loop body.; ///; /// \param Loc The insert and source location description. The insert; /// location can be between two instructions or the end of a; /// degenerate block (e.g. a BB under construction).; /// \param BodyGenCB Callback that will generate the loop body code.; /// \param TripCount Number of iterations the loop body is executed.; /// \param Name Base name used to derive BB and instruction names.; ///; /// \returns An object representing the created control flow structure which; /// can be used for loop-associated directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:501,Modifiability,variab,variable,501,"/// Generator for the control flow structure of an OpenMP canonical loop.; ///; /// This generator operates on the logical iteration space of the loop, i.e.; /// the caller only has to provide a loop trip count of the loop as defined by; /// base language semantics. The trip count is interpreted as an unsigned; /// integer. The induction variable passed to \p BodyGenCB will be of the same; /// type and run from 0 to \p TripCount - 1. It is up to the callback to; /// convert the logical iteration variable to the loop counter variable in the; /// loop body.; ///; /// \param Loc The insert and source location description. The insert; /// location can be between two instructions or the end of a; /// degenerate block (e.g. a BB under construction).; /// \param BodyGenCB Callback that will generate the loop body code.; /// \param TripCount Number of iterations the loop body is executed.; /// \param Name Base name used to derive BB and instruction names.; ///; /// \returns An object representing the created control flow structure which; /// can be used for loop-associated directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:530,Modifiability,variab,variable,530,"/// Generator for the control flow structure of an OpenMP canonical loop.; ///; /// This generator operates on the logical iteration space of the loop, i.e.; /// the caller only has to provide a loop trip count of the loop as defined by; /// base language semantics. The trip count is interpreted as an unsigned; /// integer. The induction variable passed to \p BodyGenCB will be of the same; /// type and run from 0 to \p TripCount - 1. It is up to the callback to; /// convert the logical iteration variable to the loop counter variable in the; /// loop body.; ///; /// \param Loc The insert and source location description. The insert; /// location can be between two instructions or the end of a; /// degenerate block (e.g. a BB under construction).; /// \param BodyGenCB Callback that will generate the loop body code.; /// \param TripCount Number of iterations the loop body is executed.; /// \param Name Base name used to derive BB and instruction names.; ///; /// \returns An object representing the created control flow structure which; /// can be used for loop-associated directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:115,Testability,log,logical,115,"/// Generator for the control flow structure of an OpenMP canonical loop.; ///; /// This generator operates on the logical iteration space of the loop, i.e.; /// the caller only has to provide a loop trip count of the loop as defined by; /// base language semantics. The trip count is interpreted as an unsigned; /// integer. The induction variable passed to \p BodyGenCB will be of the same; /// type and run from 0 to \p TripCount - 1. It is up to the callback to; /// convert the logical iteration variable to the loop counter variable in the; /// loop body.; ///; /// \param Loc The insert and source location description. The insert; /// location can be between two instructions or the end of a; /// degenerate block (e.g. a BB under construction).; /// \param BodyGenCB Callback that will generate the loop body code.; /// \param TripCount Number of iterations the loop body is executed.; /// \param Name Base name used to derive BB and instruction names.; ///; /// \returns An object representing the created control flow structure which; /// can be used for loop-associated directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:483,Testability,log,logical,483,"/// Generator for the control flow structure of an OpenMP canonical loop.; ///; /// This generator operates on the logical iteration space of the loop, i.e.; /// the caller only has to provide a loop trip count of the loop as defined by; /// base language semantics. The trip count is interpreted as an unsigned; /// integer. The induction variable passed to \p BodyGenCB will be of the same; /// type and run from 0 to \p TripCount - 1. It is up to the callback to; /// convert the logical iteration variable to the loop counter variable in the; /// loop body.; ///; /// \param Loc The insert and source location description. The insert; /// location can be between two instructions or the end of a; /// degenerate block (e.g. a BB under construction).; /// \param BodyGenCB Callback that will generate the loop body code.; /// \param TripCount Number of iterations the loop body is executed.; /// \param Name Base name used to derive BB and instruction names.; ///; /// \returns An object representing the created control flow structure which; /// can be used for loop-associated directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:276,Availability,down,downwards,276,"/// Generator for the control flow structure of an OpenMP canonical loop.; ///; /// Instead of a logical iteration space, this allows specifying user-defined; /// loop counter values using increment, upper- and lower bounds. To; /// disambiguate the terminology when counting downwards, instead of lower; /// bounds we use \p Start for the loop counter value in the first body; /// iteration.; ///; /// Consider the following limitations:; ///; /// * A loop counter space over all integer values of its bit-width cannot be; /// represented. E.g using uint8_t, its loop trip count of 256 cannot be; /// stored into an 8 bit integer):; ///; /// DO I = 0, 255, 1; ///; /// * Unsigned wrapping is only supported when wrapping only ""once""; E.g.; /// effectively counting downwards:; ///; /// for (uint8_t i = 100u; i > 0; i += 127u); ///; ///; /// TODO: May need to add additional parameters to represent:; ///; /// * Allow representing downcounting with unsigned integers.; ///; /// * Sign of the step and the comparison operator might disagree:; ///; /// for (int i = 0; i < 42; i -= 1u); ///; //; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the loop body code.; /// \param Start Value of the loop counter for the first iterations.; /// \param Stop Loop counter values past this will stop the loop.; /// \param Step Loop counter increment after each iteration; negative; /// means counting down.; /// \param IsSigned Whether Start, Stop and Step are signed integers.; /// \param InclusiveStop Whether \p Stop itself is a valid value for the loop; /// counter.; /// \param ComputeIP Insertion point for instructions computing the trip; /// count. Can be used to ensure the trip count is available; /// at the outermost loop of a loop nest. If not set,; /// defaults to the preheader of the generated loop.; /// \param Name Base name used to derive BB and instruction names.; ///; /// \returns An object representing the created control flow",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:766,Availability,down,downwards,766,"/// Generator for the control flow structure of an OpenMP canonical loop.; ///; /// Instead of a logical iteration space, this allows specifying user-defined; /// loop counter values using increment, upper- and lower bounds. To; /// disambiguate the terminology when counting downwards, instead of lower; /// bounds we use \p Start for the loop counter value in the first body; /// iteration.; ///; /// Consider the following limitations:; ///; /// * A loop counter space over all integer values of its bit-width cannot be; /// represented. E.g using uint8_t, its loop trip count of 256 cannot be; /// stored into an 8 bit integer):; ///; /// DO I = 0, 255, 1; ///; /// * Unsigned wrapping is only supported when wrapping only ""once""; E.g.; /// effectively counting downwards:; ///; /// for (uint8_t i = 100u; i > 0; i += 127u); ///; ///; /// TODO: May need to add additional parameters to represent:; ///; /// * Allow representing downcounting with unsigned integers.; ///; /// * Sign of the step and the comparison operator might disagree:; ///; /// for (int i = 0; i < 42; i -= 1u); ///; //; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the loop body code.; /// \param Start Value of the loop counter for the first iterations.; /// \param Stop Loop counter values past this will stop the loop.; /// \param Step Loop counter increment after each iteration; negative; /// means counting down.; /// \param IsSigned Whether Start, Stop and Step are signed integers.; /// \param InclusiveStop Whether \p Stop itself is a valid value for the loop; /// counter.; /// \param ComputeIP Insertion point for instructions computing the trip; /// count. Can be used to ensure the trip count is available; /// at the outermost loop of a loop nest. If not set,; /// defaults to the preheader of the generated loop.; /// \param Name Base name used to derive BB and instruction names.; ///; /// \returns An object representing the created control flow",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:932,Availability,down,downcounting,932,"/// Generator for the control flow structure of an OpenMP canonical loop.; ///; /// Instead of a logical iteration space, this allows specifying user-defined; /// loop counter values using increment, upper- and lower bounds. To; /// disambiguate the terminology when counting downwards, instead of lower; /// bounds we use \p Start for the loop counter value in the first body; /// iteration.; ///; /// Consider the following limitations:; ///; /// * A loop counter space over all integer values of its bit-width cannot be; /// represented. E.g using uint8_t, its loop trip count of 256 cannot be; /// stored into an 8 bit integer):; ///; /// DO I = 0, 255, 1; ///; /// * Unsigned wrapping is only supported when wrapping only ""once""; E.g.; /// effectively counting downwards:; ///; /// for (uint8_t i = 100u; i > 0; i += 127u); ///; ///; /// TODO: May need to add additional parameters to represent:; ///; /// * Allow representing downcounting with unsigned integers.; ///; /// * Sign of the step and the comparison operator might disagree:; ///; /// for (int i = 0; i < 42; i -= 1u); ///; //; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the loop body code.; /// \param Start Value of the loop counter for the first iterations.; /// \param Stop Loop counter values past this will stop the loop.; /// \param Step Loop counter increment after each iteration; negative; /// means counting down.; /// \param IsSigned Whether Start, Stop and Step are signed integers.; /// \param InclusiveStop Whether \p Stop itself is a valid value for the loop; /// counter.; /// \param ComputeIP Insertion point for instructions computing the trip; /// count. Can be used to ensure the trip count is available; /// at the outermost loop of a loop nest. If not set,; /// defaults to the preheader of the generated loop.; /// \param Name Base name used to derive BB and instruction names.; ///; /// \returns An object representing the created control flow",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1452,Availability,down,down,1452,"l loop.; ///; /// Instead of a logical iteration space, this allows specifying user-defined; /// loop counter values using increment, upper- and lower bounds. To; /// disambiguate the terminology when counting downwards, instead of lower; /// bounds we use \p Start for the loop counter value in the first body; /// iteration.; ///; /// Consider the following limitations:; ///; /// * A loop counter space over all integer values of its bit-width cannot be; /// represented. E.g using uint8_t, its loop trip count of 256 cannot be; /// stored into an 8 bit integer):; ///; /// DO I = 0, 255, 1; ///; /// * Unsigned wrapping is only supported when wrapping only ""once""; E.g.; /// effectively counting downwards:; ///; /// for (uint8_t i = 100u; i > 0; i += 127u); ///; ///; /// TODO: May need to add additional parameters to represent:; ///; /// * Allow representing downcounting with unsigned integers.; ///; /// * Sign of the step and the comparison operator might disagree:; ///; /// for (int i = 0; i < 42; i -= 1u); ///; //; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the loop body code.; /// \param Start Value of the loop counter for the first iterations.; /// \param Stop Loop counter values past this will stop the loop.; /// \param Step Loop counter increment after each iteration; negative; /// means counting down.; /// \param IsSigned Whether Start, Stop and Step are signed integers.; /// \param InclusiveStop Whether \p Stop itself is a valid value for the loop; /// counter.; /// \param ComputeIP Insertion point for instructions computing the trip; /// count. Can be used to ensure the trip count is available; /// at the outermost loop of a loop nest. If not set,; /// defaults to the preheader of the generated loop.; /// \param Name Base name used to derive BB and instruction names.; ///; /// \returns An object representing the created control flow structure which; /// can be used for loop-associated directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1748,Availability,avail,available,1748,"l loop.; ///; /// Instead of a logical iteration space, this allows specifying user-defined; /// loop counter values using increment, upper- and lower bounds. To; /// disambiguate the terminology when counting downwards, instead of lower; /// bounds we use \p Start for the loop counter value in the first body; /// iteration.; ///; /// Consider the following limitations:; ///; /// * A loop counter space over all integer values of its bit-width cannot be; /// represented. E.g using uint8_t, its loop trip count of 256 cannot be; /// stored into an 8 bit integer):; ///; /// DO I = 0, 255, 1; ///; /// * Unsigned wrapping is only supported when wrapping only ""once""; E.g.; /// effectively counting downwards:; ///; /// for (uint8_t i = 100u; i > 0; i += 127u); ///; ///; /// TODO: May need to add additional parameters to represent:; ///; /// * Allow representing downcounting with unsigned integers.; ///; /// * Sign of the step and the comparison operator might disagree:; ///; /// for (int i = 0; i < 42; i -= 1u); ///; //; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the loop body code.; /// \param Start Value of the loop counter for the first iterations.; /// \param Stop Loop counter values past this will stop the loop.; /// \param Step Loop counter increment after each iteration; negative; /// means counting down.; /// \param IsSigned Whether Start, Stop and Step are signed integers.; /// \param InclusiveStop Whether \p Stop itself is a valid value for the loop; /// counter.; /// \param ComputeIP Insertion point for instructions computing the trip; /// count. Can be used to ensure the trip count is available; /// at the outermost loop of a loop nest. If not set,; /// defaults to the preheader of the generated loop.; /// \param Name Base name used to derive BB and instruction names.; ///; /// \returns An object representing the created control flow structure which; /// can be used for loop-associated directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:681,Integrability,wrap,wrapping,681,"/// Generator for the control flow structure of an OpenMP canonical loop.; ///; /// Instead of a logical iteration space, this allows specifying user-defined; /// loop counter values using increment, upper- and lower bounds. To; /// disambiguate the terminology when counting downwards, instead of lower; /// bounds we use \p Start for the loop counter value in the first body; /// iteration.; ///; /// Consider the following limitations:; ///; /// * A loop counter space over all integer values of its bit-width cannot be; /// represented. E.g using uint8_t, its loop trip count of 256 cannot be; /// stored into an 8 bit integer):; ///; /// DO I = 0, 255, 1; ///; /// * Unsigned wrapping is only supported when wrapping only ""once""; E.g.; /// effectively counting downwards:; ///; /// for (uint8_t i = 100u; i > 0; i += 127u); ///; ///; /// TODO: May need to add additional parameters to represent:; ///; /// * Allow representing downcounting with unsigned integers.; ///; /// * Sign of the step and the comparison operator might disagree:; ///; /// for (int i = 0; i < 42; i -= 1u); ///; //; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the loop body code.; /// \param Start Value of the loop counter for the first iterations.; /// \param Stop Loop counter values past this will stop the loop.; /// \param Step Loop counter increment after each iteration; negative; /// means counting down.; /// \param IsSigned Whether Start, Stop and Step are signed integers.; /// \param InclusiveStop Whether \p Stop itself is a valid value for the loop; /// counter.; /// \param ComputeIP Insertion point for instructions computing the trip; /// count. Can be used to ensure the trip count is available; /// at the outermost loop of a loop nest. If not set,; /// defaults to the preheader of the generated loop.; /// \param Name Base name used to derive BB and instruction names.; ///; /// \returns An object representing the created control flow",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:713,Integrability,wrap,wrapping,713,"/// Generator for the control flow structure of an OpenMP canonical loop.; ///; /// Instead of a logical iteration space, this allows specifying user-defined; /// loop counter values using increment, upper- and lower bounds. To; /// disambiguate the terminology when counting downwards, instead of lower; /// bounds we use \p Start for the loop counter value in the first body; /// iteration.; ///; /// Consider the following limitations:; ///; /// * A loop counter space over all integer values of its bit-width cannot be; /// represented. E.g using uint8_t, its loop trip count of 256 cannot be; /// stored into an 8 bit integer):; ///; /// DO I = 0, 255, 1; ///; /// * Unsigned wrapping is only supported when wrapping only ""once""; E.g.; /// effectively counting downwards:; ///; /// for (uint8_t i = 100u; i > 0; i += 127u); ///; ///; /// TODO: May need to add additional parameters to represent:; ///; /// * Allow representing downcounting with unsigned integers.; ///; /// * Sign of the step and the comparison operator might disagree:; ///; /// for (int i = 0; i < 42; i -= 1u); ///; //; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the loop body code.; /// \param Start Value of the loop counter for the first iterations.; /// \param Stop Loop counter values past this will stop the loop.; /// \param Step Loop counter increment after each iteration; negative; /// means counting down.; /// \param IsSigned Whether Start, Stop and Step are signed integers.; /// \param InclusiveStop Whether \p Stop itself is a valid value for the loop; /// counter.; /// \param ComputeIP Insertion point for instructions computing the trip; /// count. Can be used to ensure the trip count is available; /// at the outermost loop of a loop nest. If not set,; /// defaults to the preheader of the generated loop.; /// \param Name Base name used to derive BB and instruction names.; ///; /// \returns An object representing the created control flow",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:97,Testability,log,logical,97,"/// Generator for the control flow structure of an OpenMP canonical loop.; ///; /// Instead of a logical iteration space, this allows specifying user-defined; /// loop counter values using increment, upper- and lower bounds. To; /// disambiguate the terminology when counting downwards, instead of lower; /// bounds we use \p Start for the loop counter value in the first body; /// iteration.; ///; /// Consider the following limitations:; ///; /// * A loop counter space over all integer values of its bit-width cannot be; /// represented. E.g using uint8_t, its loop trip count of 256 cannot be; /// stored into an 8 bit integer):; ///; /// DO I = 0, 255, 1; ///; /// * Unsigned wrapping is only supported when wrapping only ""once""; E.g.; /// effectively counting downwards:; ///; /// for (uint8_t i = 100u; i > 0; i += 127u); ///; ///; /// TODO: May need to add additional parameters to represent:; ///; /// * Allow representing downcounting with unsigned integers.; ///; /// * Sign of the step and the comparison operator might disagree:; ///; /// for (int i = 0; i < 42; i -= 1u); ///; //; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the loop body code.; /// \param Start Value of the loop counter for the first iterations.; /// \param Stop Loop counter values past this will stop the loop.; /// \param Step Loop counter increment after each iteration; negative; /// means counting down.; /// \param IsSigned Whether Start, Stop and Step are signed integers.; /// \param InclusiveStop Whether \p Stop itself is a valid value for the loop; /// counter.; /// \param ComputeIP Insertion point for instructions computing the trip; /// count. Can be used to ensure the trip count is available; /// at the outermost loop of a loop nest. If not set,; /// defaults to the preheader of the generated loop.; /// \param Name Base name used to derive BB and instruction names.; ///; /// \returns An object representing the created control flow",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1832,Availability,avail,available,1832,"\code; /// for (int i = 0; i < 7; ++i) // Canonical loop ""i""; /// for (int j = 0; j < 9; ++j) // Canonical loop ""j""; /// body(i, j);; /// \endcode; ///; /// After collapsing with Loops={i,j}, the loop is changed to; /// \code; /// for (int ij = 0; ij < 63; ++ij) {; /// int i = ij / 9;; /// int j = ij % 9;; /// body(i, j);; /// }; /// \endcode; ///; /// In the current implementation, the following limitations apply:; ///; /// * All input loops have an induction variable of the same type.; ///; /// * The collapsed loop will have the same trip count integer type as the; /// input loops. Therefore it is possible that the collapsed loop cannot; /// represent all iterations of the input loops. For instance, assuming a; /// 32 bit integer type, and two input loops both iterating 2^16 times, the; /// theoretical trip count of the collapsed loop would be 2^32 iteration,; /// which cannot be represented in an 32-bit integer. Behavior is undefined; /// in this case.; ///; /// * The trip counts of every input loop must be available at \p ComputeIP.; /// Non-rectangular loops are not yet supported.; ///; /// * At each nest level, code between a surrounding loop and its nested loop; /// is hoisted into the loop body, and such code will be executed more; /// often than before collapsing (or not at all if any inner loop iteration; /// has a trip count of 0). This is permitted by the OpenMP specification.; ///; /// \param DL Debug location for instructions added for collapsing,; /// such as instructions to compute/derive the input loop's; /// induction variables.; /// \param Loops Loops in the loop nest to collapse. Loops are specified; /// from outermost-to-innermost and every control flow of a; /// loop's body must pass through its directly nested loop.; /// \param ComputeIP Where additional instruction that compute the collapsed; /// trip count. If not set, defaults to before the generated; /// loop.; ///; /// \returns The CanonicalLoopInfo object representing the collapsed loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:717,Energy Efficiency,schedul,schedule-clause,717,"/// Collapse a loop nest into a single loop.; ///; /// Merges loops of a loop nest into a single CanonicalLoopNest representation; /// that has the same number of innermost loop iterations as the origin loop; /// nest. The induction variables of the input loops are derived from the; /// collapsed loop's induction variable. This is intended to be used to; /// implement OpenMP's collapse clause. Before applying a directive,; /// collapseLoops normalizes a loop nest to contain only a single loop and the; /// directive's implementation does not need to handle multiple loops itself.; /// This does not remove the need to handle all loop nest handling by; /// directives, such as the ordered(<n>) clause or the simd schedule-clause; /// modifier of the worksharing-loop directive.; ///; /// Example:; /// \code; /// for (int i = 0; i < 7; ++i) // Canonical loop ""i""; /// for (int j = 0; j < 9; ++j) // Canonical loop ""j""; /// body(i, j);; /// \endcode; ///; /// After collapsing with Loops={i,j}, the loop is changed to; /// \code; /// for (int ij = 0; ij < 63; ++ij) {; /// int i = ij / 9;; /// int j = ij % 9;; /// body(i, j);; /// }; /// \endcode; ///; /// In the current implementation, the following limitations apply:; ///; /// * All input loops have an induction variable of the same type.; ///; /// * The collapsed loop will have the same trip count integer type as the; /// input loops. Therefore it is possible that the collapsed loop cannot; /// represent all iterations of the input loops. For instance, assuming a; /// 32 bit integer type, and two input loops both iterating 2^16 times, the; /// theoretical trip count of the collapsed loop would be 2^32 iteration,; /// which cannot be represented in an 32-bit integer. Behavior is undefined; /// in this case.; ///; /// * The trip counts of every input loop must be available at \p ComputeIP.; /// Non-rectangular loops are not yet supported.; ///; /// * At each nest level, code between a surrounding loop and its nested loop; /// is ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:233,Modifiability,variab,variables,233,"/// Collapse a loop nest into a single loop.; ///; /// Merges loops of a loop nest into a single CanonicalLoopNest representation; /// that has the same number of innermost loop iterations as the origin loop; /// nest. The induction variables of the input loops are derived from the; /// collapsed loop's induction variable. This is intended to be used to; /// implement OpenMP's collapse clause. Before applying a directive,; /// collapseLoops normalizes a loop nest to contain only a single loop and the; /// directive's implementation does not need to handle multiple loops itself.; /// This does not remove the need to handle all loop nest handling by; /// directives, such as the ordered(<n>) clause or the simd schedule-clause; /// modifier of the worksharing-loop directive.; ///; /// Example:; /// \code; /// for (int i = 0; i < 7; ++i) // Canonical loop ""i""; /// for (int j = 0; j < 9; ++j) // Canonical loop ""j""; /// body(i, j);; /// \endcode; ///; /// After collapsing with Loops={i,j}, the loop is changed to; /// \code; /// for (int ij = 0; ij < 63; ++ij) {; /// int i = ij / 9;; /// int j = ij % 9;; /// body(i, j);; /// }; /// \endcode; ///; /// In the current implementation, the following limitations apply:; ///; /// * All input loops have an induction variable of the same type.; ///; /// * The collapsed loop will have the same trip count integer type as the; /// input loops. Therefore it is possible that the collapsed loop cannot; /// represent all iterations of the input loops. For instance, assuming a; /// 32 bit integer type, and two input loops both iterating 2^16 times, the; /// theoretical trip count of the collapsed loop would be 2^32 iteration,; /// which cannot be represented in an 32-bit integer. Behavior is undefined; /// in this case.; ///; /// * The trip counts of every input loop must be available at \p ComputeIP.; /// Non-rectangular loops are not yet supported.; ///; /// * At each nest level, code between a surrounding loop and its nested loop; /// is ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:315,Modifiability,variab,variable,315,"/// Collapse a loop nest into a single loop.; ///; /// Merges loops of a loop nest into a single CanonicalLoopNest representation; /// that has the same number of innermost loop iterations as the origin loop; /// nest. The induction variables of the input loops are derived from the; /// collapsed loop's induction variable. This is intended to be used to; /// implement OpenMP's collapse clause. Before applying a directive,; /// collapseLoops normalizes a loop nest to contain only a single loop and the; /// directive's implementation does not need to handle multiple loops itself.; /// This does not remove the need to handle all loop nest handling by; /// directives, such as the ordered(<n>) clause or the simd schedule-clause; /// modifier of the worksharing-loop directive.; ///; /// Example:; /// \code; /// for (int i = 0; i < 7; ++i) // Canonical loop ""i""; /// for (int j = 0; j < 9; ++j) // Canonical loop ""j""; /// body(i, j);; /// \endcode; ///; /// After collapsing with Loops={i,j}, the loop is changed to; /// \code; /// for (int ij = 0; ij < 63; ++ij) {; /// int i = ij / 9;; /// int j = ij % 9;; /// body(i, j);; /// }; /// \endcode; ///; /// In the current implementation, the following limitations apply:; ///; /// * All input loops have an induction variable of the same type.; ///; /// * The collapsed loop will have the same trip count integer type as the; /// input loops. Therefore it is possible that the collapsed loop cannot; /// represent all iterations of the input loops. For instance, assuming a; /// 32 bit integer type, and two input loops both iterating 2^16 times, the; /// theoretical trip count of the collapsed loop would be 2^32 iteration,; /// which cannot be represented in an 32-bit integer. Behavior is undefined; /// in this case.; ///; /// * The trip counts of every input loop must be available at \p ComputeIP.; /// Non-rectangular loops are not yet supported.; ///; /// * At each nest level, code between a surrounding loop and its nested loop; /// is ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1271,Modifiability,variab,variable,1271,"loop.; ///; /// Merges loops of a loop nest into a single CanonicalLoopNest representation; /// that has the same number of innermost loop iterations as the origin loop; /// nest. The induction variables of the input loops are derived from the; /// collapsed loop's induction variable. This is intended to be used to; /// implement OpenMP's collapse clause. Before applying a directive,; /// collapseLoops normalizes a loop nest to contain only a single loop and the; /// directive's implementation does not need to handle multiple loops itself.; /// This does not remove the need to handle all loop nest handling by; /// directives, such as the ordered(<n>) clause or the simd schedule-clause; /// modifier of the worksharing-loop directive.; ///; /// Example:; /// \code; /// for (int i = 0; i < 7; ++i) // Canonical loop ""i""; /// for (int j = 0; j < 9; ++j) // Canonical loop ""j""; /// body(i, j);; /// \endcode; ///; /// After collapsing with Loops={i,j}, the loop is changed to; /// \code; /// for (int ij = 0; ij < 63; ++ij) {; /// int i = ij / 9;; /// int j = ij % 9;; /// body(i, j);; /// }; /// \endcode; ///; /// In the current implementation, the following limitations apply:; ///; /// * All input loops have an induction variable of the same type.; ///; /// * The collapsed loop will have the same trip count integer type as the; /// input loops. Therefore it is possible that the collapsed loop cannot; /// represent all iterations of the input loops. For instance, assuming a; /// 32 bit integer type, and two input loops both iterating 2^16 times, the; /// theoretical trip count of the collapsed loop would be 2^32 iteration,; /// which cannot be represented in an 32-bit integer. Behavior is undefined; /// in this case.; ///; /// * The trip counts of every input loop must be available at \p ComputeIP.; /// Non-rectangular loops are not yet supported.; ///; /// * At each nest level, code between a surrounding loop and its nested loop; /// is hoisted into the loop body, and such c",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:2368,Modifiability,variab,variables,2368,"\code; /// for (int i = 0; i < 7; ++i) // Canonical loop ""i""; /// for (int j = 0; j < 9; ++j) // Canonical loop ""j""; /// body(i, j);; /// \endcode; ///; /// After collapsing with Loops={i,j}, the loop is changed to; /// \code; /// for (int ij = 0; ij < 63; ++ij) {; /// int i = ij / 9;; /// int j = ij % 9;; /// body(i, j);; /// }; /// \endcode; ///; /// In the current implementation, the following limitations apply:; ///; /// * All input loops have an induction variable of the same type.; ///; /// * The collapsed loop will have the same trip count integer type as the; /// input loops. Therefore it is possible that the collapsed loop cannot; /// represent all iterations of the input loops. For instance, assuming a; /// 32 bit integer type, and two input loops both iterating 2^16 times, the; /// theoretical trip count of the collapsed loop would be 2^32 iteration,; /// which cannot be represented in an 32-bit integer. Behavior is undefined; /// in this case.; ///; /// * The trip counts of every input loop must be available at \p ComputeIP.; /// Non-rectangular loops are not yet supported.; ///; /// * At each nest level, code between a surrounding loop and its nested loop; /// is hoisted into the loop body, and such code will be executed more; /// often than before collapsing (or not at all if any inner loop iteration; /// has a trip count of 0). This is permitted by the OpenMP specification.; ///; /// \param DL Debug location for instructions added for collapsing,; /// such as instructions to compute/derive the input loop's; /// induction variables.; /// \param Loops Loops in the loop nest to collapse. Loops are specified; /// from outermost-to-innermost and every control flow of a; /// loop's body must pass through its directly nested loop.; /// \param ComputeIP Where additional instruction that compute the collapsed; /// trip count. If not set, defaults to before the generated; /// loop.; ///; /// \returns The CanonicalLoopInfo object representing the collapsed loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:78,Modifiability,variab,variable,78,"/// Retrieve (or create if non-existent) the address of a declare; /// target variable, used in conjunction with registerTargetGlobalVariable; /// to create declare target global variables.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable invoked from getAddrOfDeclareTargetVar,; /// these are required by Clang for book keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:179,Modifiability,variab,variables,179,"/// Retrieve (or create if non-existent) the address of a declare; /// target variable, used in conjunction with registerTargetGlobalVariable; /// to create declare target global variables.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable invoked from getAddrOfDeclareTargetVar,; /// these are required by Clang for book keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:311,Modifiability,variab,variable,311,"/// Retrieve (or create if non-existent) the address of a declare; /// target variable, used in conjunction with registerTargetGlobalVariable; /// to create declare target global variables.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable invoked from getAddrOfDeclareTargetVar,; /// these are required by Clang for book keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:476,Modifiability,variab,variable,476,"/// Retrieve (or create if non-existent) the address of a declare; /// target variable, used in conjunction with registerTargetGlobalVariable; /// to create declare target global variables.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable invoked from getAddrOfDeclareTargetVar,; /// these are required by Clang for book keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:578,Modifiability,variab,variable,578,"/// Retrieve (or create if non-existent) the address of a declare; /// target variable, used in conjunction with registerTargetGlobalVariable; /// to create declare target global variables.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable invoked from getAddrOfDeclareTargetVar,; /// these are required by Clang for book keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:709,Modifiability,variab,variable,709,"/// Retrieve (or create if non-existent) the address of a declare; /// target variable, used in conjunction with registerTargetGlobalVariable; /// to create declare target global variables.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable invoked from getAddrOfDeclareTargetVar,; /// these are required by Clang for book keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:924,Modifiability,variab,variable,924,"/// Retrieve (or create if non-existent) the address of a declare; /// target variable, used in conjunction with registerTargetGlobalVariable; /// to create declare target global variables.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable invoked from getAddrOfDeclareTargetVar,; /// these are required by Clang for book keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:983,Modifiability,variab,variable,983,"/// Retrieve (or create if non-existent) the address of a declare; /// target variable, used in conjunction with registerTargetGlobalVariable; /// to create declare target global variables.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable invoked from getAddrOfDeclareTargetVar,; /// these are required by Clang for book keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1392,Modifiability,variab,variable,1392,"/// Retrieve (or create if non-existent) the address of a declare; /// target variable, used in conjunction with registerTargetGlobalVariable; /// to create declare target global variables.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable invoked from getAddrOfDeclareTargetVar,; /// these are required by Clang for book keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1582,Modifiability,variab,variable,1582,"/// Retrieve (or create if non-existent) the address of a declare; /// target variable, used in conjunction with registerTargetGlobalVariable; /// to create declare target global variables.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable invoked from getAddrOfDeclareTargetVar,; /// these are required by Clang for book keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1685,Modifiability,variab,variable,1685,"/// Retrieve (or create if non-existent) the address of a declare; /// target variable, used in conjunction with registerTargetGlobalVariable; /// to create declare target global variables.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable invoked from getAddrOfDeclareTargetVar,; /// these are required by Clang for book keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1743,Modifiability,Variab,VariableLinkage,1743,"/// Retrieve (or create if non-existent) the address of a declare; /// target variable, used in conjunction with registerTargetGlobalVariable; /// to create declare target global variables.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable invoked from getAddrOfDeclareTargetVar,; /// these are required by Clang for book keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1797,Modifiability,variab,variables,1797,"/// Retrieve (or create if non-existent) the address of a declare; /// target variable, used in conjunction with registerTargetGlobalVariable; /// to create declare target global variables.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable invoked from getAddrOfDeclareTargetVar,; /// these are required by Clang for book keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1936,Modifiability,variab,variable,1936,"/// Retrieve (or create if non-existent) the address of a declare; /// target variable, used in conjunction with registerTargetGlobalVariable; /// to create declare target global variables.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable invoked from getAddrOfDeclareTargetVar,; /// these are required by Clang for book keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:23,Modifiability,variab,variable,23,"/// Registers a target variable for device or host.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable these are required by Clang for book; /// keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param Addr - the original llvm value (addr) of the variable to be; /// registered",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:173,Modifiability,variab,variable,173,"/// Registers a target variable for device or host.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable these are required by Clang for book; /// keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param Addr - the original llvm value (addr) of the variable to be; /// registered",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:338,Modifiability,variab,variable,338,"/// Registers a target variable for device or host.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable these are required by Clang for book; /// keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param Addr - the original llvm value (addr) of the variable to be; /// registered",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:440,Modifiability,variab,variable,440,"/// Registers a target variable for device or host.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable these are required by Clang for book; /// keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param Addr - the original llvm value (addr) of the variable to be; /// registered",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:571,Modifiability,variab,variable,571,"/// Registers a target variable for device or host.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable these are required by Clang for book; /// keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param Addr - the original llvm value (addr) of the variable to be; /// registered",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:786,Modifiability,variab,variable,786,"/// Registers a target variable for device or host.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable these are required by Clang for book; /// keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param Addr - the original llvm value (addr) of the variable to be; /// registered",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:845,Modifiability,variab,variable,845,"/// Registers a target variable for device or host.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable these are required by Clang for book; /// keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param Addr - the original llvm value (addr) of the variable to be; /// registered",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1303,Modifiability,variab,variable,1303,"/// Registers a target variable for device or host.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable these are required by Clang for book; /// keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param Addr - the original llvm value (addr) of the variable to be; /// registered",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1406,Modifiability,variab,variable,1406,"/// Registers a target variable for device or host.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable these are required by Clang for book; /// keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param Addr - the original llvm value (addr) of the variable to be; /// registered",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1464,Modifiability,Variab,VariableLinkage,1464,"/// Registers a target variable for device or host.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable these are required by Clang for book; /// keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param Addr - the original llvm value (addr) of the variable to be; /// registered",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1518,Modifiability,variab,variables,1518,"/// Registers a target variable for device or host.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable these are required by Clang for book; /// keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param Addr - the original llvm value (addr) of the variable to be; /// registered",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1657,Modifiability,variab,variable,1657,"/// Registers a target variable for device or host.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable these are required by Clang for book; /// keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param Addr - the original llvm value (addr) of the variable to be; /// registered",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1730,Modifiability,variab,variable,1730,"/// Registers a target variable for device or host.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable these are required by Clang for book; /// keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param Addr - the original llvm value (addr) of the variable to be; /// registered",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1848,Modifiability,variab,variable,1848,"/// Registers a target variable for device or host.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable these are required by Clang for book; /// keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param Addr - the original llvm value (addr) of the variable to be; /// registered",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:166,Integrability,depend,dependent,166,"/// Given an initial flag set, this function modifies it to contain; /// the passed in MemberOfFlag generated from the getMemberOfFlag; /// function. The results are dependent on the existing flag bits; /// set in the original flag set.; /// \param Flags - The original set of flags to be modified with the; /// passed in MemberOfFlag.; /// \param MemberOfFlag - A modified OMP_MAP_MEMBER_OF flag, adjusted; /// slightly based on the getMemberOfFlag which adjusts the flag bits; /// based on the members position in its parent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:51,Energy Efficiency,schedul,scheduled,51,"/// Modifies the canonical loop to be a statically-scheduled workshare loop; /// which is executed on the device; ///; /// This takes a \p CLI representing a canonical loop, such as the one; /// created by \see createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to call OpenMP device rtl function; /// which handles worksharing of loop body interations.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param LoopType Information about type of loop worksharing.; /// It corresponds to type of loop workshare OpenMP pragma.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:705,Usability,usab,usable,705,"/// Modifies the canonical loop to be a statically-scheduled workshare loop; /// which is executed on the device; ///; /// This takes a \p CLI representing a canonical loop, such as the one; /// created by \see createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to call OpenMP device rtl function; /// which handles worksharing of loop body interations.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param LoopType Information about type of loop worksharing.; /// It corresponds to type of loop workshare OpenMP pragma.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:412,Deployability,update,updates,412,"/// Modifies the canonical loop to be a statically-scheduled workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain the loop bounds to be used in; /// the current thread, updates the relevant instructions in the canonical; /// loop and calls to an OpenMP runtime finalization function after the loop.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param NeedsBarrier Indicates whether a barrier must be inserted after; /// the loop.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:51,Energy Efficiency,schedul,scheduled,51,"/// Modifies the canonical loop to be a statically-scheduled workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain the loop bounds to be used in; /// the current thread, updates the relevant instructions in the canonical; /// loop and calls to an OpenMP runtime finalization function after the loop.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param NeedsBarrier Indicates whether a barrier must be inserted after; /// the loop.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:775,Usability,usab,usable,775,"/// Modifies the canonical loop to be a statically-scheduled workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain the loop bounds to be used in; /// the current thread, updates the relevant instructions in the canonical; /// loop and calls to an OpenMP runtime finalization function after the loop.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param NeedsBarrier Indicates whether a barrier must be inserted after; /// the loop.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:45,Energy Efficiency,schedul,scheduled,45,/// Modifies the canonical loop a statically-scheduled workshare loop with a; /// user-specified chunk size.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in; /// the preheader of the loop.; /// \param NeedsBarrier Indicates whether a barrier must be inserted after the; /// loop.; /// \param ChunkSize The user-specified chunk size.; ///; /// \returns Point where to insert code after the workshare construct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:342,Usability,usab,usable,342,/// Modifies the canonical loop a statically-scheduled workshare loop with a; /// user-specified chunk size.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in; /// the preheader of the loop.; /// \param NeedsBarrier Indicates whether a barrier must be inserted after the; /// loop.; /// \param ChunkSize The user-specified chunk size.; ///; /// \returns Point where to insert code after the workshare construct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:394,Deployability,update,update,394,"/// Modifies the canonical loop to be a dynamically-scheduled workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain, and then in each iteration; /// to update the loop counter.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param SchedType Type of scheduling to be passed to the init function.; /// \param NeedsBarrier Indicates whether a barrier must be insterted after; /// the loop.; /// \param Chunk The size of loop chunk considered as a unit when; /// scheduling. If \p nullptr, defaults to 1.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:52,Energy Efficiency,schedul,scheduled,52,"/// Modifies the canonical loop to be a dynamically-scheduled workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain, and then in each iteration; /// to update the loop counter.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param SchedType Type of scheduling to be passed to the init function.; /// \param NeedsBarrier Indicates whether a barrier must be insterted after; /// the loop.; /// \param Chunk The size of loop chunk considered as a unit when; /// scheduling. If \p nullptr, defaults to 1.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:724,Energy Efficiency,schedul,scheduling,724,"/// Modifies the canonical loop to be a dynamically-scheduled workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain, and then in each iteration; /// to update the loop counter.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param SchedType Type of scheduling to be passed to the init function.; /// \param NeedsBarrier Indicates whether a barrier must be insterted after; /// the loop.; /// \param Chunk The size of loop chunk considered as a unit when; /// scheduling. If \p nullptr, defaults to 1.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:934,Energy Efficiency,schedul,scheduling,934,"/// Modifies the canonical loop to be a dynamically-scheduled workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain, and then in each iteration; /// to update the loop counter.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param SchedType Type of scheduling to be passed to the init function.; /// \param NeedsBarrier Indicates whether a barrier must be insterted after; /// the loop.; /// \param Chunk The size of loop chunk considered as a unit when; /// scheduling. If \p nullptr, defaults to 1.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:652,Usability,usab,usable,652,"/// Modifies the canonical loop to be a dynamically-scheduled workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain, and then in each iteration; /// to update the loop counter.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param SchedType Type of scheduling to be passed to the init function.; /// \param NeedsBarrier Indicates whether a barrier must be insterted after; /// the loop.; /// \param Chunk The size of loop chunk considered as a unit when; /// scheduling. If \p nullptr, defaults to 1.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:391,Deployability,update,updates,391,"/// Modifies the canonical loop to be a workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain the loop bounds to be used in; /// the current thread, updates the relevant instructions in the canonical; /// loop and calls to an OpenMP runtime finalization function after the loop.; ///; /// The concrete transformation is done by applyStaticWorkshareLoop,; /// applyStaticChunkedWorkshareLoop, or applyDynamicWorkshareLoop, depending; /// on the value of \p SchedKind and \p ChunkSize.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param NeedsBarrier Indicates whether a barrier must be insterted after; /// the loop.; /// \param SchedKind Scheduling algorithm to use.; /// \param ChunkSize The chunk size for the inner loop.; /// \param HasSimdModifier Whether the simd modifier is present in the; /// schedule clause.; /// \param HasMonotonicModifier Whether the monotonic modifier is present in; /// the schedule clause.; /// \param HasNonmonotonicModifier Whether the nonmonotonic modifier is; /// present in the schedule clause.; /// \param HasOrderedClause Whether the (parameterless) ordered clause is; /// present.; /// \param LoopType Information about type of loop worksharing.; /// It corresponds to type of loop workshare OpenMP pragma.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1115,Energy Efficiency,Schedul,Scheduling,1115,"/// Modifies the canonical loop to be a workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain the loop bounds to be used in; /// the current thread, updates the relevant instructions in the canonical; /// loop and calls to an OpenMP runtime finalization function after the loop.; ///; /// The concrete transformation is done by applyStaticWorkshareLoop,; /// applyStaticChunkedWorkshareLoop, or applyDynamicWorkshareLoop, depending; /// on the value of \p SchedKind and \p ChunkSize.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param NeedsBarrier Indicates whether a barrier must be insterted after; /// the loop.; /// \param SchedKind Scheduling algorithm to use.; /// \param ChunkSize The chunk size for the inner loop.; /// \param HasSimdModifier Whether the simd modifier is present in the; /// schedule clause.; /// \param HasMonotonicModifier Whether the monotonic modifier is present in; /// the schedule clause.; /// \param HasNonmonotonicModifier Whether the nonmonotonic modifier is; /// present in the schedule clause.; /// \param HasOrderedClause Whether the (parameterless) ordered clause is; /// present.; /// \param LoopType Information about type of loop worksharing.; /// It corresponds to type of loop workshare OpenMP pragma.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1278,Energy Efficiency,schedul,schedule,1278,"/// Modifies the canonical loop to be a workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain the loop bounds to be used in; /// the current thread, updates the relevant instructions in the canonical; /// loop and calls to an OpenMP runtime finalization function after the loop.; ///; /// The concrete transformation is done by applyStaticWorkshareLoop,; /// applyStaticChunkedWorkshareLoop, or applyDynamicWorkshareLoop, depending; /// on the value of \p SchedKind and \p ChunkSize.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param NeedsBarrier Indicates whether a barrier must be insterted after; /// the loop.; /// \param SchedKind Scheduling algorithm to use.; /// \param ChunkSize The chunk size for the inner loop.; /// \param HasSimdModifier Whether the simd modifier is present in the; /// schedule clause.; /// \param HasMonotonicModifier Whether the monotonic modifier is present in; /// the schedule clause.; /// \param HasNonmonotonicModifier Whether the nonmonotonic modifier is; /// present in the schedule clause.; /// \param HasOrderedClause Whether the (parameterless) ordered clause is; /// present.; /// \param LoopType Information about type of loop worksharing.; /// It corresponds to type of loop workshare OpenMP pragma.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1382,Energy Efficiency,schedul,schedule,1382,"/// Modifies the canonical loop to be a workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain the loop bounds to be used in; /// the current thread, updates the relevant instructions in the canonical; /// loop and calls to an OpenMP runtime finalization function after the loop.; ///; /// The concrete transformation is done by applyStaticWorkshareLoop,; /// applyStaticChunkedWorkshareLoop, or applyDynamicWorkshareLoop, depending; /// on the value of \p SchedKind and \p ChunkSize.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param NeedsBarrier Indicates whether a barrier must be insterted after; /// the loop.; /// \param SchedKind Scheduling algorithm to use.; /// \param ChunkSize The chunk size for the inner loop.; /// \param HasSimdModifier Whether the simd modifier is present in the; /// schedule clause.; /// \param HasMonotonicModifier Whether the monotonic modifier is present in; /// the schedule clause.; /// \param HasNonmonotonicModifier Whether the nonmonotonic modifier is; /// present in the schedule clause.; /// \param HasOrderedClause Whether the (parameterless) ordered clause is; /// present.; /// \param LoopType Information about type of loop worksharing.; /// It corresponds to type of loop workshare OpenMP pragma.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1492,Energy Efficiency,schedul,schedule,1492,"/// Modifies the canonical loop to be a workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain the loop bounds to be used in; /// the current thread, updates the relevant instructions in the canonical; /// loop and calls to an OpenMP runtime finalization function after the loop.; ///; /// The concrete transformation is done by applyStaticWorkshareLoop,; /// applyStaticChunkedWorkshareLoop, or applyDynamicWorkshareLoop, depending; /// on the value of \p SchedKind and \p ChunkSize.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param NeedsBarrier Indicates whether a barrier must be insterted after; /// the loop.; /// \param SchedKind Scheduling algorithm to use.; /// \param ChunkSize The chunk size for the inner loop.; /// \param HasSimdModifier Whether the simd modifier is present in the; /// schedule clause.; /// \param HasMonotonicModifier Whether the monotonic modifier is present in; /// the schedule clause.; /// \param HasNonmonotonicModifier Whether the nonmonotonic modifier is; /// present in the schedule clause.; /// \param HasOrderedClause Whether the (parameterless) ordered clause is; /// present.; /// \param LoopType Information about type of loop worksharing.; /// It corresponds to type of loop workshare OpenMP pragma.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:664,Integrability,depend,depending,664,"/// Modifies the canonical loop to be a workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain the loop bounds to be used in; /// the current thread, updates the relevant instructions in the canonical; /// loop and calls to an OpenMP runtime finalization function after the loop.; ///; /// The concrete transformation is done by applyStaticWorkshareLoop,; /// applyStaticChunkedWorkshareLoop, or applyDynamicWorkshareLoop, depending; /// on the value of \p SchedKind and \p ChunkSize.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param NeedsBarrier Indicates whether a barrier must be insterted after; /// the loop.; /// \param SchedKind Scheduling algorithm to use.; /// \param ChunkSize The chunk size for the inner loop.; /// \param HasSimdModifier Whether the simd modifier is present in the; /// schedule clause.; /// \param HasMonotonicModifier Whether the monotonic modifier is present in; /// the schedule clause.; /// \param HasNonmonotonicModifier Whether the nonmonotonic modifier is; /// present in the schedule clause.; /// \param HasOrderedClause Whether the (parameterless) ordered clause is; /// present.; /// \param LoopType Information about type of loop worksharing.; /// It corresponds to type of loop workshare OpenMP pragma.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:959,Usability,usab,usable,959,"/// Modifies the canonical loop to be a workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain the loop bounds to be used in; /// the current thread, updates the relevant instructions in the canonical; /// loop and calls to an OpenMP runtime finalization function after the loop.; ///; /// The concrete transformation is done by applyStaticWorkshareLoop,; /// applyStaticChunkedWorkshareLoop, or applyDynamicWorkshareLoop, depending; /// on the value of \p SchedKind and \p ChunkSize.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param NeedsBarrier Indicates whether a barrier must be insterted after; /// the loop.; /// \param SchedKind Scheduling algorithm to use.; /// \param ChunkSize The chunk size for the inner loop.; /// \param HasSimdModifier Whether the simd modifier is present in the; /// schedule clause.; /// \param HasMonotonicModifier Whether the monotonic modifier is present in; /// the schedule clause.; /// \param HasNonmonotonicModifier Whether the nonmonotonic modifier is; /// present in the schedule clause.; /// \param HasOrderedClause Whether the (parameterless) ordered clause is; /// present.; /// \param LoopType Information about type of loop worksharing.; /// It corresponds to type of loop workshare OpenMP pragma.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:302,Usability,usab,usable,302,"/// Tile a loop nest.; ///; /// Tiles the loops of \p Loops by the tile sizes in \p TileSizes. Loops in; /// \p/ Loops must be perfectly nested, from outermost to innermost loop; /// (i.e. Loops.front() is the outermost loop). The trip count llvm::Value; /// of every loop and every tile sizes must be usable in the outermost; /// loop's preheader. This implies that the loop nest is rectangular.; ///; /// Example:; /// \code; /// for (int i = 0; i < 15; ++i) // Canonical loop ""i""; /// for (int j = 0; j < 14; ++j) // Canonical loop ""j""; /// body(i, j);; /// \endcode; ///; /// After tiling with Loops={i,j} and TileSizes={5,7}, the loop is changed to; /// \code; /// for (int i1 = 0; i1 < 3; ++i1); /// for (int j1 = 0; j1 < 2; ++j1); /// for (int i2 = 0; i2 < 5; ++i2); /// for (int j2 = 0; j2 < 7; ++j2); /// body(i1*3+i2, j1*3+j2);; /// \endcode; ///; /// The returned vector are the loops {i1,j1,i2,j2}. The loops i1 and j1 are; /// referred to the floor, and the loops i2 and j2 are the tiles. Tiling also; /// handles non-constant trip counts, non-constant tile sizes and trip counts; /// that are not multiples of the tile size. In the latter case the tile loop; /// of the last floor-loop iteration will have fewer iterations than specified; /// as its tile size.; ///; ///; /// @param DL Debug location for instructions added by tiling, for; /// instance the floor- and tile trip count computation.; /// @param Loops Loops to tile. The CanonicalLoopInfo objects are; /// invalidated by this method, i.e. should not used after; /// tiling.; /// @param TileSizes For each loop in \p Loops, the tile size for that; /// dimensions.; ///; /// \returns A list of generated loops. Contains twice as many loops as the; /// input loop nest; the first half are the floor loops and the; /// second half are the tile loops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:224,Energy Efficiency,efficient,efficient,224,"/// Partially unroll a loop.; ///; /// The CanonicalLoopInfo of the unrolled loop for use with chained; /// loop-associated directive can be requested using \p UnrolledCLI. Not; /// needing the CanonicalLoopInfo allows more efficient code generation by; /// deferring the actual unrolling to the LoopUnrollPass using loop metadata.; /// A loop-associated directive applied to the unrolled loop needs to know the; /// new trip count which means that if using a heuristically determined unroll; /// factor (\p Factor == 0), that factor must be computed immediately. We are; /// using the same logic as the LoopUnrollPass to derived the unroll factor,; /// but which assumes that some canonicalization has taken place (e.g.; /// Mem2Reg, LICM, GVN, Inlining, etc.). That is, the heuristic will perform; /// better when the unrolled loop's CanonicalLoopInfo is not needed.; ///; /// \param DL Debug location for instructions added by unrolling.; /// \param Loop The loop to unroll. The loop will be invalidated.; /// \param Factor The factor to unroll the loop by. A factor of 0; /// indicates that a heuristic should be used to determine; /// the unroll-factor.; /// \param UnrolledCLI If non-null, receives the CanonicalLoopInfo of the; /// partially unrolled loop. Otherwise, uses loop metadata; /// to defer unrolling to the LoopUnrollPass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:791,Performance,perform,perform,791,"/// Partially unroll a loop.; ///; /// The CanonicalLoopInfo of the unrolled loop for use with chained; /// loop-associated directive can be requested using \p UnrolledCLI. Not; /// needing the CanonicalLoopInfo allows more efficient code generation by; /// deferring the actual unrolling to the LoopUnrollPass using loop metadata.; /// A loop-associated directive applied to the unrolled loop needs to know the; /// new trip count which means that if using a heuristically determined unroll; /// factor (\p Factor == 0), that factor must be computed immediately. We are; /// using the same logic as the LoopUnrollPass to derived the unroll factor,; /// but which assumes that some canonicalization has taken place (e.g.; /// Mem2Reg, LICM, GVN, Inlining, etc.). That is, the heuristic will perform; /// better when the unrolled loop's CanonicalLoopInfo is not needed.; ///; /// \param DL Debug location for instructions added by unrolling.; /// \param Loop The loop to unroll. The loop will be invalidated.; /// \param Factor The factor to unroll the loop by. A factor of 0; /// indicates that a heuristic should be used to determine; /// the unroll-factor.; /// \param UnrolledCLI If non-null, receives the CanonicalLoopInfo of the; /// partially unrolled loop. Otherwise, uses loop metadata; /// to defer unrolling to the LoopUnrollPass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:591,Testability,log,logic,591,"/// Partially unroll a loop.; ///; /// The CanonicalLoopInfo of the unrolled loop for use with chained; /// loop-associated directive can be requested using \p UnrolledCLI. Not; /// needing the CanonicalLoopInfo allows more efficient code generation by; /// deferring the actual unrolling to the LoopUnrollPass using loop metadata.; /// A loop-associated directive applied to the unrolled loop needs to know the; /// new trip count which means that if using a heuristically determined unroll; /// factor (\p Factor == 0), that factor must be computed immediately. We are; /// using the same logic as the LoopUnrollPass to derived the unroll factor,; /// but which assumes that some canonicalization has taken place (e.g.; /// Mem2Reg, LICM, GVN, Inlining, etc.). That is, the heuristic will perform; /// better when the unrolled loop's CanonicalLoopInfo is not needed.; ///; /// \param DL Debug location for instructions added by unrolling.; /// \param Loop The loop to unroll. The loop will be invalidated.; /// \param Factor The factor to unroll the loop by. A factor of 0; /// indicates that a heuristic should be used to determine; /// the unroll-factor.; /// \param UnrolledCLI If non-null, receives the CanonicalLoopInfo of the; /// partially unrolled loop. Otherwise, uses loop metadata; /// to defer unrolling to the LoopUnrollPass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:592,Safety,Safe,Safelen,592,"/// Add metadata to simd-ize a loop. If IfCond is not nullptr, the loop; /// is cloned. The metadata which prevents vectorization is added to; /// to the cloned loop. The cloned loop is executed when ifCond is evaluated; /// to false.; ///; /// \param Loop The loop to simd-ize.; /// \param AlignedVars The map which containts pairs of the pointer; /// and its corresponding alignment.; /// \param IfCond The value which corresponds to the if clause; /// condition.; /// \param Order The enum to map order clause.; /// \param Simdlen The Simdlen length to apply to the simd loop.; /// \param Safelen The Safelen length to apply to the simd loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:604,Safety,Safe,Safelen,604,"/// Add metadata to simd-ize a loop. If IfCond is not nullptr, the loop; /// is cloned. The metadata which prevents vectorization is added to; /// to the cloned loop. The cloned loop is executed when ifCond is evaluated; /// to false.; ///; /// \param Loop The loop to simd-ize.; /// \param AlignedVars The map which containts pairs of the pointer; /// and its corresponding alignment.; /// \param IfCond The value which corresponds to the if clause; /// condition.; /// \param Order The enum to map order clause.; /// \param Simdlen The Simdlen length to apply to the simd loop.; /// \param Safelen The Safelen length to apply to the simd loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:60,Integrability,depend,depend,60,/// A struct to pack the relevant information for an OpenMP depend clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:632,Usability,resume,resumed,632,"/// Generator for `#omp task`; ///; /// \param Loc The location where the task construct was encountered.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param BodyGenCB Callback that will generate the region code.; /// \param Tied True if the task is tied, false if the task is untied.; /// \param Final i1 value which is `true` if the task is final, `false` if the; /// task is not final.; /// \param IfCondition i1 value. If it evaluates to `false`, an undeferred; /// task is generated, and the encountering thread must; /// suspend the current task region, for which execution; /// cannot be resumed until execution of the structured; /// block that is associated with the generated task is; /// completed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:178,Deployability,update,updated,178,"/// Functions used to generate reductions. Such functions take two Values; /// representing LHS and RHS of the reduction, respectively, and a reference; /// to the value that is updated to refer to the reduction result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:230,Deployability,update,update,230,"/// Functions used to generate atomic reductions. Such functions take two; /// Values representing pointers to LHS and RHS of the reduction, as well as; /// the element type of these pointers. They are expected to atomically; /// update the LHS to the reduced value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:252,Energy Efficiency,reduce,reduced,252,"/// Functions used to generate atomic reductions. Such functions take two; /// Values representing pointers to LHS and RHS of the reduction, as well as; /// the element type of these pointers. They are expected to atomically; /// update the LHS to the reduced value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:55,Modifiability,variab,variable,55,"/// Reduction element type, must match pointee type of variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:14,Modifiability,variab,variable,14,/// Reduction variable of pointer type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:37,Modifiability,variab,variable,37,/// Thread-private partial reduction variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:124,Safety,safe,safe,124,"/// Callback for generating the reduction body. The IR produced by this will; /// be used to combine two values in a thread-safe context, e.g., under; /// lock or within the same thread, and therefore need not be atomic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:258,Integrability,synchroniz,synchronization,258,"/// Callback for generating the atomic reduction body, may be null. The IR; /// produced by this will be used to atomically combine two values during; /// reduction. If null, the implementation will use the non-atomic version; /// along with the appropriate synchronization mechanisms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:276,Modifiability,variab,variables,276,"// TODO: provide atomic and non-atomic reduction generators for reduction; // operators defined by the OpenMP specification.; /// Generator for '#omp reduction'.; ///; /// Emits the IR instructing the runtime to perform the specific kind of; /// reductions. Expects reduction variables to have been privatized and; /// initialized to reduction-neutral values separately. Emits the calls to; /// runtime functions as well as the reduction function and the basic blocks; /// performing the reduction atomically and non-atomically.; ///; /// The code emitted for the following:; ///; /// \code; /// type var_1;; /// type var_2;; /// #pragma omp <directive> reduction(reduction-op:var_1,var_2); /// /* body */;; /// \endcode; ///; /// corresponds to the following sketch.; ///; /// \code; /// void _outlined_par() {; /// // N is the number of different reductions.; /// void *red_array[] = {privatized_var_1, privatized_var_2, ...};; /// switch(__kmpc_reduce(..., N, /*size of data in red array*/, red_array,; /// _omp_reduction_func,; /// _gomp_critical_user.reduction.var)) {; /// case 1: {; /// var_1 = var_1 <reduction-op> privatized_var_1;; /// var_2 = var_2 <reduction-op> privatized_var_2;; /// // ...; /// __kmpc_end_reduce(...);; /// break;; /// }; /// case 2: {; /// _Atomic<ReductionOp>(var_1, privatized_var_1);; /// _Atomic<ReductionOp>(var_2, privatized_var_2);; /// // ...; /// break;; /// }; /// default: break;; /// }; /// }; ///; /// void _omp_reduction_func(void **lhs, void **rhs) {; /// *(type *)lhs[0] = *(type *)lhs[0] <reduction-op> *(type *)rhs[0];; /// *(type *)lhs[1] = *(type *)lhs[1] <reduction-op> *(type *)rhs[1];; /// // ...; /// }; /// \endcode; ///; /// \param Loc The location where the reduction was; /// encountered. Must be within the associate; /// directive and after the last local access to the; /// reduction variables.; /// \param AllocaIP An insertion point suitable for allocas usable; /// in reductions.; /// \param ReductionInfos A list of info on each redu",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1848,Modifiability,variab,variables,1848,"s defined by the OpenMP specification.; /// Generator for '#omp reduction'.; ///; /// Emits the IR instructing the runtime to perform the specific kind of; /// reductions. Expects reduction variables to have been privatized and; /// initialized to reduction-neutral values separately. Emits the calls to; /// runtime functions as well as the reduction function and the basic blocks; /// performing the reduction atomically and non-atomically.; ///; /// The code emitted for the following:; ///; /// \code; /// type var_1;; /// type var_2;; /// #pragma omp <directive> reduction(reduction-op:var_1,var_2); /// /* body */;; /// \endcode; ///; /// corresponds to the following sketch.; ///; /// \code; /// void _outlined_par() {; /// // N is the number of different reductions.; /// void *red_array[] = {privatized_var_1, privatized_var_2, ...};; /// switch(__kmpc_reduce(..., N, /*size of data in red array*/, red_array,; /// _omp_reduction_func,; /// _gomp_critical_user.reduction.var)) {; /// case 1: {; /// var_1 = var_1 <reduction-op> privatized_var_1;; /// var_2 = var_2 <reduction-op> privatized_var_2;; /// // ...; /// __kmpc_end_reduce(...);; /// break;; /// }; /// case 2: {; /// _Atomic<ReductionOp>(var_1, privatized_var_1);; /// _Atomic<ReductionOp>(var_2, privatized_var_2);; /// // ...; /// break;; /// }; /// default: break;; /// }; /// }; ///; /// void _omp_reduction_func(void **lhs, void **rhs) {; /// *(type *)lhs[0] = *(type *)lhs[0] <reduction-op> *(type *)rhs[0];; /// *(type *)lhs[1] = *(type *)lhs[1] <reduction-op> *(type *)rhs[1];; /// // ...; /// }; /// \endcode; ///; /// \param Loc The location where the reduction was; /// encountered. Must be within the associate; /// directive and after the last local access to the; /// reduction variables.; /// \param AllocaIP An insertion point suitable for allocas usable; /// in reductions.; /// \param ReductionInfos A list of info on each reduction variable.; /// \param IsNoWait A flag set if the reduction is marked as nowait.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:2007,Modifiability,variab,variable,2007,"s defined by the OpenMP specification.; /// Generator for '#omp reduction'.; ///; /// Emits the IR instructing the runtime to perform the specific kind of; /// reductions. Expects reduction variables to have been privatized and; /// initialized to reduction-neutral values separately. Emits the calls to; /// runtime functions as well as the reduction function and the basic blocks; /// performing the reduction atomically and non-atomically.; ///; /// The code emitted for the following:; ///; /// \code; /// type var_1;; /// type var_2;; /// #pragma omp <directive> reduction(reduction-op:var_1,var_2); /// /* body */;; /// \endcode; ///; /// corresponds to the following sketch.; ///; /// \code; /// void _outlined_par() {; /// // N is the number of different reductions.; /// void *red_array[] = {privatized_var_1, privatized_var_2, ...};; /// switch(__kmpc_reduce(..., N, /*size of data in red array*/, red_array,; /// _omp_reduction_func,; /// _gomp_critical_user.reduction.var)) {; /// case 1: {; /// var_1 = var_1 <reduction-op> privatized_var_1;; /// var_2 = var_2 <reduction-op> privatized_var_2;; /// // ...; /// __kmpc_end_reduce(...);; /// break;; /// }; /// case 2: {; /// _Atomic<ReductionOp>(var_1, privatized_var_1);; /// _Atomic<ReductionOp>(var_2, privatized_var_2);; /// // ...; /// break;; /// }; /// default: break;; /// }; /// }; ///; /// void _omp_reduction_func(void **lhs, void **rhs) {; /// *(type *)lhs[0] = *(type *)lhs[0] <reduction-op> *(type *)rhs[0];; /// *(type *)lhs[1] = *(type *)lhs[1] <reduction-op> *(type *)rhs[1];; /// // ...; /// }; /// \endcode; ///; /// \param Loc The location where the reduction was; /// encountered. Must be within the associate; /// directive and after the last local access to the; /// reduction variables.; /// \param AllocaIP An insertion point suitable for allocas usable; /// in reductions.; /// \param ReductionInfos A list of info on each reduction variable.; /// \param IsNoWait A flag set if the reduction is marked as nowait.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:212,Performance,perform,perform,212,"// TODO: provide atomic and non-atomic reduction generators for reduction; // operators defined by the OpenMP specification.; /// Generator for '#omp reduction'.; ///; /// Emits the IR instructing the runtime to perform the specific kind of; /// reductions. Expects reduction variables to have been privatized and; /// initialized to reduction-neutral values separately. Emits the calls to; /// runtime functions as well as the reduction function and the basic blocks; /// performing the reduction atomically and non-atomically.; ///; /// The code emitted for the following:; ///; /// \code; /// type var_1;; /// type var_2;; /// #pragma omp <directive> reduction(reduction-op:var_1,var_2); /// /* body */;; /// \endcode; ///; /// corresponds to the following sketch.; ///; /// \code; /// void _outlined_par() {; /// // N is the number of different reductions.; /// void *red_array[] = {privatized_var_1, privatized_var_2, ...};; /// switch(__kmpc_reduce(..., N, /*size of data in red array*/, red_array,; /// _omp_reduction_func,; /// _gomp_critical_user.reduction.var)) {; /// case 1: {; /// var_1 = var_1 <reduction-op> privatized_var_1;; /// var_2 = var_2 <reduction-op> privatized_var_2;; /// // ...; /// __kmpc_end_reduce(...);; /// break;; /// }; /// case 2: {; /// _Atomic<ReductionOp>(var_1, privatized_var_1);; /// _Atomic<ReductionOp>(var_2, privatized_var_2);; /// // ...; /// break;; /// }; /// default: break;; /// }; /// }; ///; /// void _omp_reduction_func(void **lhs, void **rhs) {; /// *(type *)lhs[0] = *(type *)lhs[0] <reduction-op> *(type *)rhs[0];; /// *(type *)lhs[1] = *(type *)lhs[1] <reduction-op> *(type *)rhs[1];; /// // ...; /// }; /// \endcode; ///; /// \param Loc The location where the reduction was; /// encountered. Must be within the associate; /// directive and after the last local access to the; /// reduction variables.; /// \param AllocaIP An insertion point suitable for allocas usable; /// in reductions.; /// \param ReductionInfos A list of info on each redu",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:473,Performance,perform,performing,473,"// TODO: provide atomic and non-atomic reduction generators for reduction; // operators defined by the OpenMP specification.; /// Generator for '#omp reduction'.; ///; /// Emits the IR instructing the runtime to perform the specific kind of; /// reductions. Expects reduction variables to have been privatized and; /// initialized to reduction-neutral values separately. Emits the calls to; /// runtime functions as well as the reduction function and the basic blocks; /// performing the reduction atomically and non-atomically.; ///; /// The code emitted for the following:; ///; /// \code; /// type var_1;; /// type var_2;; /// #pragma omp <directive> reduction(reduction-op:var_1,var_2); /// /* body */;; /// \endcode; ///; /// corresponds to the following sketch.; ///; /// \code; /// void _outlined_par() {; /// // N is the number of different reductions.; /// void *red_array[] = {privatized_var_1, privatized_var_2, ...};; /// switch(__kmpc_reduce(..., N, /*size of data in red array*/, red_array,; /// _omp_reduction_func,; /// _gomp_critical_user.reduction.var)) {; /// case 1: {; /// var_1 = var_1 <reduction-op> privatized_var_1;; /// var_2 = var_2 <reduction-op> privatized_var_2;; /// // ...; /// __kmpc_end_reduce(...);; /// break;; /// }; /// case 2: {; /// _Atomic<ReductionOp>(var_1, privatized_var_1);; /// _Atomic<ReductionOp>(var_2, privatized_var_2);; /// // ...; /// break;; /// }; /// default: break;; /// }; /// }; ///; /// void _omp_reduction_func(void **lhs, void **rhs) {; /// *(type *)lhs[0] = *(type *)lhs[0] <reduction-op> *(type *)rhs[0];; /// *(type *)lhs[1] = *(type *)lhs[1] <reduction-op> *(type *)rhs[1];; /// // ...; /// }; /// \endcode; ///; /// \param Loc The location where the reduction was; /// encountered. Must be within the associate; /// directive and after the last local access to the; /// reduction variables.; /// \param AllocaIP An insertion point suitable for allocas usable; /// in reductions.; /// \param ReductionInfos A list of info on each redu",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1819,Security,access,access,1819,"s defined by the OpenMP specification.; /// Generator for '#omp reduction'.; ///; /// Emits the IR instructing the runtime to perform the specific kind of; /// reductions. Expects reduction variables to have been privatized and; /// initialized to reduction-neutral values separately. Emits the calls to; /// runtime functions as well as the reduction function and the basic blocks; /// performing the reduction atomically and non-atomically.; ///; /// The code emitted for the following:; ///; /// \code; /// type var_1;; /// type var_2;; /// #pragma omp <directive> reduction(reduction-op:var_1,var_2); /// /* body */;; /// \endcode; ///; /// corresponds to the following sketch.; ///; /// \code; /// void _outlined_par() {; /// // N is the number of different reductions.; /// void *red_array[] = {privatized_var_1, privatized_var_2, ...};; /// switch(__kmpc_reduce(..., N, /*size of data in red array*/, red_array,; /// _omp_reduction_func,; /// _gomp_critical_user.reduction.var)) {; /// case 1: {; /// var_1 = var_1 <reduction-op> privatized_var_1;; /// var_2 = var_2 <reduction-op> privatized_var_2;; /// // ...; /// __kmpc_end_reduce(...);; /// break;; /// }; /// case 2: {; /// _Atomic<ReductionOp>(var_1, privatized_var_1);; /// _Atomic<ReductionOp>(var_2, privatized_var_2);; /// // ...; /// break;; /// }; /// default: break;; /// }; /// }; ///; /// void _omp_reduction_func(void **lhs, void **rhs) {; /// *(type *)lhs[0] = *(type *)lhs[0] <reduction-op> *(type *)rhs[0];; /// *(type *)lhs[1] = *(type *)lhs[1] <reduction-op> *(type *)rhs[1];; /// // ...; /// }; /// \endcode; ///; /// \param Loc The location where the reduction was; /// encountered. Must be within the associate; /// directive and after the last local access to the; /// reduction variables.; /// \param AllocaIP An insertion point suitable for allocas usable; /// in reductions.; /// \param ReductionInfos A list of info on each reduction variable.; /// \param IsNoWait A flag set if the reduction is marked as nowait.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1920,Usability,usab,usable,1920,"s defined by the OpenMP specification.; /// Generator for '#omp reduction'.; ///; /// Emits the IR instructing the runtime to perform the specific kind of; /// reductions. Expects reduction variables to have been privatized and; /// initialized to reduction-neutral values separately. Emits the calls to; /// runtime functions as well as the reduction function and the basic blocks; /// performing the reduction atomically and non-atomically.; ///; /// The code emitted for the following:; ///; /// \code; /// type var_1;; /// type var_2;; /// #pragma omp <directive> reduction(reduction-op:var_1,var_2); /// /* body */;; /// \endcode; ///; /// corresponds to the following sketch.; ///; /// \code; /// void _outlined_par() {; /// // N is the number of different reductions.; /// void *red_array[] = {privatized_var_1, privatized_var_2, ...};; /// switch(__kmpc_reduce(..., N, /*size of data in red array*/, red_array,; /// _omp_reduction_func,; /// _gomp_critical_user.reduction.var)) {; /// case 1: {; /// var_1 = var_1 <reduction-op> privatized_var_1;; /// var_2 = var_2 <reduction-op> privatized_var_2;; /// // ...; /// __kmpc_end_reduce(...);; /// break;; /// }; /// case 2: {; /// _Atomic<ReductionOp>(var_1, privatized_var_1);; /// _Atomic<ReductionOp>(var_2, privatized_var_2);; /// // ...; /// break;; /// }; /// default: break;; /// }; /// }; ///; /// void _omp_reduction_func(void **lhs, void **rhs) {; /// *(type *)lhs[0] = *(type *)lhs[0] <reduction-op> *(type *)rhs[0];; /// *(type *)lhs[1] = *(type *)lhs[1] <reduction-op> *(type *)rhs[1];; /// // ...; /// }; /// \endcode; ///; /// \param Loc The location where the reduction was; /// encountered. Must be within the associate; /// directive and after the last local access to the; /// reduction variables.; /// \param AllocaIP An insertion point suitable for allocas usable; /// in reductions.; /// \param ReductionInfos A list of info on each reduction variable.; /// \param IsNoWait A flag set if the reduction is marked as nowait.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:4,Deployability,Update,Update,4,/// Update the internal location to \p Loc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:123,Performance,perform,performed,123,/// Generate control flow and cleanup for cancellation.; ///; /// \param CancelFlag Flag indicating if the cancellation is performed.; /// \param CanceledDirective The kind of directive that is cancled.; /// \param ExitCB Extra code to be generated in the exit block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:219,Usability,simpl,simple,219,/// Generate a barrier runtime call.; ///; /// \param Loc The location at which the request originated and is fulfilled.; /// \param DK The directive which caused the barrier; /// \param ForceSimpleCall Flag to force a simple (=non-cancellation) barrier.; /// \param CheckCancelFlag Flag to indicate a cancel barrier return value; /// should be checked and acted upon.; ///; /// \returns The insertion point after the barrier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:83,Integrability,wrap,wrapped,83,"/// The finalization stack made up of finalize callbacks currently in-flight,; /// wrapped into FinalizationInfo objects that reference also the finalization; /// target block and the kind of cancellable directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:24,Deployability,Configurat,Configuration,24,/// The OpenMPIRBuilder Configuration,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:24,Modifiability,Config,Configuration,24,/// The OpenMPIRBuilder Configuration,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:37,Modifiability,variab,variables,37,"/// An ordered map of auto-generated variables to their unique names.; /// It stores variables with the following names: 1) "".gomp_critical_user_"" +; /// <critical_section_name> + "".var"" for ""omp critical"" directives; 2); /// <mangled_name_for_global_var> + "".cache."" for cache for threadprivate; /// variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:85,Modifiability,variab,variables,85,"/// An ordered map of auto-generated variables to their unique names.; /// It stores variables with the following names: 1) "".gomp_critical_user_"" +; /// <critical_section_name> + "".var"" for ""omp critical"" directives; 2); /// <mangled_name_for_global_var> + "".cache."" for cache for threadprivate; /// variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:301,Modifiability,variab,variables,301,"/// An ordered map of auto-generated variables to their unique names.; /// It stores variables with the following names: 1) "".gomp_critical_user_"" +; /// <critical_section_name> + "".var"" for ""omp critical"" directives; 2); /// <mangled_name_for_global_var> + "".cache."" for cache for threadprivate; /// variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:260,Performance,cache,cache,260,"/// An ordered map of auto-generated variables to their unique names.; /// It stores variables with the following names: 1) "".gomp_critical_user_"" +; /// <critical_section_name> + "".var"" for ""omp critical"" directives; 2); /// <mangled_name_for_global_var> + "".cache."" for cache for threadprivate; /// variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:272,Performance,cache,cache,272,"/// An ordered map of auto-generated variables to their unique names.; /// It stores variables with the following names: 1) "".gomp_critical_user_"" +; /// <critical_section_name> + "".var"" for ""omp critical"" directives; 2); /// <mangled_name_for_global_var> + "".cache."" for cache for threadprivate; /// variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:92,Testability,log,logic,92,/// Emits code for OpenMP 'if' clause using specified \a BodyGenCallbackTy; /// Here is the logic:; /// if (Cond) {; /// ThenGen();; /// } else {; /// ElseGen();; /// },MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:22,Modifiability,variab,variable,22,/// Create the global variable holding the offload mappings information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:22,Modifiability,variab,variable,22,/// Create the global variable holding the offload names information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:4,Usability,Clear,Clear,4,/// Clear information about the data arrays.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:16,Availability,error,errors,16,/// The kind of errors that can occur when emitting the offload entries and; /// metadata.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:279,Modifiability,variab,variable,279,"/// Generator for __kmpc_copyprivate; ///; /// \param Loc The source location description.; /// \param BufSize Number of elements in the buffer.; /// \param CpyBuf List of pointers to data to be copied.; /// \param CpyFn function to call for copying data.; /// \param DidIt flag variable; 1 for 'single' thread, 0 otherwise.; ///; /// \return The insertion position *after* the CopyPrivate call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:193,Modifiability,variab,variable,193,"/// Generator for '#omp single'; ///; /// \param Loc The source location description.; /// \param BodyGenCB Callback that will generate the region code.; /// \param FiniCB Callback to finalize variable copies.; /// \param IsNowait If false, a barrier is emitted.; /// \param DidIt Local variable used as a flag to indicate 'single' thread; ///; /// \returns The insertion position *after* the single call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:287,Modifiability,variab,variable,287,"/// Generator for '#omp single'; ///; /// \param Loc The source location description.; /// \param BodyGenCB Callback that will generate the region code.; /// \param FiniCB Callback to finalize variable copies.; /// \param IsNowait If false, a barrier is emitted.; /// \param DidIt Local variable used as a flag to indicate 'single' thread; ///; /// \returns The insertion position *after* the single call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:204,Modifiability,variab,variable,204,/// Generator for '#omp master'; ///; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the region code.; /// \param FiniCB Callback to finalize variable copies.; ///; /// \returns The insertion position *after* the master.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:24,Availability,mask,masked,24,/// Generator for '#omp masked'; ///; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the region code.; /// \param FiniCB Callback to finialize variable copies.; ///; /// \returns The insertion position *after* the masked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:276,Availability,mask,masked,276,/// Generator for '#omp masked'; ///; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the region code.; /// \param FiniCB Callback to finialize variable copies.; ///; /// \returns The insertion position *after* the masked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:205,Modifiability,variab,variable,205,/// Generator for '#omp masked'; ///; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the region code.; /// \param FiniCB Callback to finialize variable copies.; ///; /// \returns The insertion position *after* the masked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:211,Modifiability,variab,variable,211,/// Generator for '#omp critical'; ///; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the region body code.; /// \param FiniCB Callback to finalize variable copies.; /// \param CriticalName name of the lock used by the critical directive; /// \param HintInst Hint Instruction for hint clause associated with critical; ///; /// \returns The insertion position *after* the critical.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:32,Integrability,depend,depend,32,"/// Generator for '#omp ordered depend (source | sink)'; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param NumLoops The number of loops in depend clause.; /// \param StoreValues The value will be stored in vector address.; /// \param Name The name of alloca instruction.; /// \param IsDependSource If true, depend source; otherwise, depend sink.; ///; /// \return The insertion position *after* the ordered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:242,Integrability,depend,depend,242,"/// Generator for '#omp ordered depend (source | sink)'; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param NumLoops The number of loops in depend clause.; /// \param StoreValues The value will be stored in vector address.; /// \param Name The name of alloca instruction.; /// \param IsDependSource If true, depend source; otherwise, depend sink.; ///; /// \return The insertion position *after* the ordered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:410,Integrability,depend,depend,410,"/// Generator for '#omp ordered depend (source | sink)'; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param NumLoops The number of loops in depend clause.; /// \param StoreValues The value will be stored in vector address.; /// \param Name The name of alloca instruction.; /// \param IsDependSource If true, depend source; otherwise, depend sink.; ///; /// \return The insertion position *after* the ordered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:436,Integrability,depend,depend,436,"/// Generator for '#omp ordered depend (source | sink)'; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param NumLoops The number of loops in depend clause.; /// \param StoreValues The value will be stored in vector address.; /// \param Name The name of alloca instruction.; /// \param IsDependSource If true, depend source; otherwise, depend sink.; ///; /// \return The insertion position *after* the ordered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:222,Modifiability,variab,variable,222,"/// Generator for '#omp ordered [threads | simd]'; ///; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the region code.; /// \param FiniCB Callback to finalize variable copies.; /// \param IsThreads If true, with threads clause or without clause;; /// otherwise, with simd clause;; ///; /// \returns The insertion position *after* the ordered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:295,Modifiability,variab,variable,295,"/// Generator for '#omp sections'; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion points to be used for alloca instructions.; /// \param SectionCBs Callbacks that will generate body of each section.; /// \param PrivCB Callback to copy a given variable (think copy constructor).; /// \param FiniCB Callback to finalize variable copies.; /// \param IsCancellable Flag to indicate a cancellable parallel region.; /// \param IsNowait If true, barrier - to ensure all sections are executed; /// before moving forward will not be generated.; /// \returns The insertion position *after* the sections.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:370,Modifiability,variab,variable,370,"/// Generator for '#omp sections'; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion points to be used for alloca instructions.; /// \param SectionCBs Callbacks that will generate body of each section.; /// \param PrivCB Callback to copy a given variable (think copy constructor).; /// \param FiniCB Callback to finalize variable copies.; /// \param IsCancellable Flag to indicate a cancellable parallel region.; /// \param IsNowait If true, barrier - to ensure all sections are executed; /// before moving forward will not be generated.; /// \returns The insertion position *after* the sections.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:210,Modifiability,variab,variable,210,/// Generator for '#omp section'; ///; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the region body code.; /// \param FiniCB Callback to finalize variable copies.; /// \returns The insertion position *after* the section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:110,Modifiability,variab,variables,110,/// Generate conditional branch and relevant BasicBlocks through which private; /// threads copy the 'copyin' variables from Master copy to threadprivate; /// copies.; ///; /// \param IP insertion block for copyin conditional; /// \param MasterVarPtr a pointer to the master variable; /// \param PrivateVarPtr a pointer to the threadprivate variable; /// \param IntPtrTy Pointer size type; /// \param BranchtoEnd Create a branch between the copyin.not.master blocks; //				 and copy.in.end block; ///; /// \returns The insertion point where copying operation to be emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:275,Modifiability,variab,variable,275,/// Generate conditional branch and relevant BasicBlocks through which private; /// threads copy the 'copyin' variables from Master copy to threadprivate; /// copies.; ///; /// \param IP insertion block for copyin conditional; /// \param MasterVarPtr a pointer to the master variable; /// \param PrivateVarPtr a pointer to the threadprivate variable; /// \param IntPtrTy Pointer size type; /// \param BranchtoEnd Create a branch between the copyin.not.master blocks; //				 and copy.in.end block; ///; /// \returns The insertion point where copying operation to be emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:341,Modifiability,variab,variable,341,/// Generate conditional branch and relevant BasicBlocks through which private; /// threads copy the 'copyin' variables from Master copy to threadprivate; /// copies.; ///; /// \param IP insertion block for copyin conditional; /// \param MasterVarPtr a pointer to the master variable; /// \param PrivateVarPtr a pointer to the threadprivate variable; /// \param IntPtrTy Pointer size type; /// \param BranchtoEnd Create a branch between the copyin.not.master blocks; //				 and copy.in.end block; ///; /// \returns The insertion point where copying operation to be emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:131,Energy Efficiency,allocate,allocated,131,/// Create a runtime call for kmpc_Alloc; ///; /// \param Loc The insert and source location description.; /// \param Size Size of allocated memory space; /// \param Allocator Allocator information instruction; /// \param Name Name of call Instruction for OMP_alloc; ///; /// \returns CallInst to the OMP_Alloc call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:163,Performance,cache,cached,163,/// Create a runtime call for kmpc_threadprivate_cached; ///; /// \param Loc The insert and source location description.; /// \param Pointer pointer to data to be cached; /// \param Size size of data to be cached; /// \param Name Name of call Instruction for callinst; ///; /// \returns CallInst to the thread private cache call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:206,Performance,cache,cached,206,/// Create a runtime call for kmpc_threadprivate_cached; ///; /// \param Loc The insert and source location description.; /// \param Pointer pointer to data to be cached; /// \param Size size of data to be cached; /// \param Name Name of call Instruction for callinst; ///; /// \returns CallInst to the thread private cache call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:318,Performance,cache,cache,318,/// Create a runtime call for kmpc_threadprivate_cached; ///; /// \param Loc The insert and source location description.; /// \param Pointer pointer to data to be cached; /// \param Size size of data to be cached; /// \param Name Name of call Instruction for callinst; ///; /// \returns CallInst to the thread private cache call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:152,Energy Efficiency,allocate,allocated,152,/// Create a runtime call for __tgt_interop_init; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param InteropType type of interop operation; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_init call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:306,Integrability,depend,dependence,306,/// Create a runtime call for __tgt_interop_init; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param InteropType type of interop operation; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_init call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:339,Integrability,Depend,DependenceAddress,339,/// Create a runtime call for __tgt_interop_init; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param InteropType type of interop operation; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_init call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:368,Integrability,depend,dependence,368,/// Create a runtime call for __tgt_interop_init; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param InteropType type of interop operation; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_init call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:137,Modifiability,variab,variable,137,/// Create a runtime call for __tgt_interop_init; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param InteropType type of interop operation; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_init call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:317,Modifiability,variab,variables,317,/// Create a runtime call for __tgt_interop_init; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param InteropType type of interop operation; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_init call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:379,Modifiability,variab,variables,379,/// Create a runtime call for __tgt_interop_init; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param InteropType type of interop operation; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_init call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:155,Energy Efficiency,allocate,allocated,155,/// Create a runtime call for __tgt_interop_destroy; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_destroy call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:259,Integrability,depend,dependence,259,/// Create a runtime call for __tgt_interop_destroy; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_destroy call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:292,Integrability,Depend,DependenceAddress,292,/// Create a runtime call for __tgt_interop_destroy; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_destroy call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:321,Integrability,depend,dependence,321,/// Create a runtime call for __tgt_interop_destroy; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_destroy call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:140,Modifiability,variab,variable,140,/// Create a runtime call for __tgt_interop_destroy; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_destroy call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:270,Modifiability,variab,variables,270,/// Create a runtime call for __tgt_interop_destroy; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_destroy call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:332,Modifiability,variab,variables,332,/// Create a runtime call for __tgt_interop_destroy; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_destroy call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:151,Energy Efficiency,allocate,allocated,151,/// Create a runtime call for __tgt_interop_use; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_use call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:255,Integrability,depend,dependence,255,/// Create a runtime call for __tgt_interop_use; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_use call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:288,Integrability,Depend,DependenceAddress,288,/// Create a runtime call for __tgt_interop_use; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_use call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:317,Integrability,depend,dependence,317,/// Create a runtime call for __tgt_interop_use; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_use call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:136,Modifiability,variab,variable,136,/// Create a runtime call for __tgt_interop_use; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_use call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:266,Modifiability,variab,variables,266,/// Create a runtime call for __tgt_interop_use; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_use call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:328,Modifiability,variab,variables,328,/// Create a runtime call for __tgt_interop_use; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_use call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:21,Integrability,interface,interface,21,"/// The `omp target` interface; ///; /// For more information about the usage of this interface,; /// \see openmp/libomptarget/deviceRTLs/common/include/target.h; ///; ///{; /// Create a runtime call for kmpc_target_init; ///; /// \param Loc The insert and source location description.; /// \param IsSPMD Flag to indicate if the kernel is an SPMD kernel or not.; /// \param MinThreads Minimal number of threads, or 0.; /// \param MaxThreads Maximal number of threads, or 0.; /// \param MinTeams Minimal number of teams, or 0.; /// \param MaxTeams Maximal number of teams, or 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:86,Integrability,interface,interface,86,"/// The `omp target` interface; ///; /// For more information about the usage of this interface,; /// \see openmp/libomptarget/deviceRTLs/common/include/target.h; ///; ///{; /// Create a runtime call for kmpc_target_init; ///; /// \param Loc The insert and source location description.; /// \param IsSPMD Flag to indicate if the kernel is an SPMD kernel or not.; /// \param MinThreads Minimal number of threads, or 0.; /// \param MaxThreads Maximal number of threads, or 0.; /// \param MinTeams Minimal number of teams, or 0.; /// \param MaxTeams Maximal number of teams, or 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1147,Performance,optimiz,optimization,1147,"/// Create a unique name for the entry function using the source location; /// information of the current target region. The name will be something like:; ///; /// __omp_offloading_DD_FFFF_PP_lBB[_CC]; ///; /// where DD_FFFF is an ID unique to the file (device and file IDs), PP is the; /// mangled name of the function that encloses the target region and BB is the; /// line number of the target region. CC is a count added when more than one; /// region is located at the same location.; ///; /// If this target outline function is not an offload entry, we don't need to; /// register it. This may happen if it is guarded by an if clause that is; /// false at compile time, or no target archs have been specified.; ///; /// The created target region ID is used by the runtime library to identify; /// the current target region, so it only has to be unique and not; /// necessarily point to anything. It could be the pointer to the outlined; /// function that implements the target region, but we aren't using that so; /// that the compiler doesn't need to keep that, and could therefore inline; /// the host function if proven worthwhile during optimization. In the other; /// hand, if emitting code for the device, the ID has to be the function; /// address so that it can retrieved from the offloading entry and launched; /// by the runtime library. We also mark the outlined function to have; /// external linkage in case we are emitting code for the device, because; /// these functions will be entry points to the device.; ///; /// \param InfoManager The info manager keeping track of the offload entries; /// \param EntryInfo The entry information about the function; /// \param GenerateFunctionCallback The callback function to generate the code; /// \param OutlinedFunction Pointer to the outlined function; /// \param EntryFnIDName Name of the ID o be created",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:507,Safety,avoid,avoids,507,"/// Type of BodyGen to use for region codegen; ///; /// Priv: If device pointer privatization is required, emit the body of the; /// region here. It will have to be duplicated: with and without; /// privatization.; /// DupNoPriv: If we need device pointer privatization, we need; /// to emit the body of the region with no privatization in the 'else' branch; /// of the conditional.; /// NoPriv: If we don't require privatization of device; /// pointers, we emit the body in between the runtime calls. This avoids; /// duplicating the body code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:661,Security,access,accessors,661,/// Generator for '#omp target'; ///; /// \param Loc where the target data construct was encountered.; /// \param CodeGenIP The insertion point where the call to the outlined; /// function should be emitted.; /// \param EntryInfo The entry information about the function.; /// \param NumTeams Number of teams specified in the num_teams clause.; /// \param NumThreads Number of teams specified in the thread_limit clause.; /// \param Inputs The input values to the region that will be passed.; /// as arguments to the outlined function.; /// \param BodyGenCB Callback that will generate the region code.; /// \param ArgAccessorFuncCB Callback that will generate accessors; /// instructions for passed in target arguments where neccessary,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:36,Usability,simpl,simple,36,"/// Declarations for LLVM-IR types (simple, array, function and structure) are; /// generated below. Their names are defined and used in OpenMPKinds.def. Here; /// we provide the declarations, the initializeTypes function will provide the; /// values.; ///; ///{",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:39,Security,expose,exposed,39,/// Create all simple and struct types exposed by the runtime and remember; /// the llvm::PointerTypes of them for easy access later.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:120,Security,access,access,120,/// Create all simple and struct types exposed by the runtime and remember; /// the llvm::PointerTypes of them for easy access later.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:15,Usability,simpl,simple,15,/// Create all simple and struct types exposed by the runtime and remember; /// the llvm::PointerTypes of them for easy access later.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:11,Integrability,interface,interface,11,"/// Common interface for generating entry calls for OMP Directives.; /// if the directive has a region/body, It will set the insertion; /// point to the body; ///; /// \param OMPD Directive to generate entry blocks for; /// \param EntryCall Call to the entry OMP Runtime Function; /// \param ExitBB block where the region ends.; /// \param Conditional indicate if the entry call result will be used; /// to evaluate a conditional of whether a thread will execute; /// body code or not.; ///; /// \return The insertion position in exit block",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:11,Integrability,interface,interface,11,/// Common interface to finalize the region; ///; /// \param OMPD Directive to generate exiting code for; /// \param FinIP Insertion point for emitting Finalization code and exit call; /// \param ExitCall Call to the ending OMP Runtime Function; /// \param HasFinalize indicate if the directive will require finalization; /// and has a finalization callback in the stack that; /// should be called.; ///; /// \return The insertion position in exit block,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:11,Integrability,Interface,Interface,11,"/// Common Interface to generate OMP inlined regions; ///; /// \param OMPD Directive to generate inlined region for; /// \param EntryCall Call to the entry OMP Runtime Function; /// \param ExitCall Call to the ending OMP Runtime Function; /// \param BodyGenCB Body code generation callback.; /// \param FiniCB Finalization Callback. Will be called when finalizing region; /// \param Conditional indicate if the entry call result will be used; /// to evaluate a conditional of whether a thread will execute; /// body code or not.; /// \param HasFinalize indicate if the directive will require finalization; /// and has a finalization callback in the stack that; /// should be called.; /// \param IsCancellable if HasFinalize is set to true, indicate if the; /// the directive should be cancellable.; /// \return The insertion point after the region",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:40,Deployability,update,update,40,/// Callback type for Atomic Expression update; /// ex:; /// \code{.cpp}; /// unsigned x = 0;; /// #pragma omp atomic update; /// x = Expr(x_old); //Expr() is any legal operation; /// \endcode; ///; /// \param XOld the value of the atomic memory address to use for update; /// \param IRB reference to the IRBuilder to use; ///; /// \returns Value to update X to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:118,Deployability,update,update,118,/// Callback type for Atomic Expression update; /// ex:; /// \code{.cpp}; /// unsigned x = 0;; /// #pragma omp atomic update; /// x = Expr(x_old); //Expr() is any legal operation; /// \endcode; ///; /// \param XOld the value of the atomic memory address to use for update; /// \param IRB reference to the IRBuilder to use; ///; /// \returns Value to update X to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:265,Deployability,update,update,265,/// Callback type for Atomic Expression update; /// ex:; /// \code{.cpp}; /// unsigned x = 0;; /// #pragma omp atomic update; /// x = Expr(x_old); //Expr() is any legal operation; /// \endcode; ///; /// \param XOld the value of the atomic memory address to use for update; /// \param IRB reference to the IRBuilder to use; ///; /// \returns Value to update X to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:350,Deployability,update,update,350,/// Callback type for Atomic Expression update; /// ex:; /// \code{.cpp}; /// unsigned x = 0;; /// #pragma omp atomic update; /// x = Expr(x_old); //Expr() is any legal operation; /// \endcode; ///; /// \param XOld the value of the atomic memory address to use for update; /// \param IRB reference to the IRBuilder to use; ///; /// \returns Value to update X to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:16,Deployability,update,update,16,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param AllocaIP	 The insertion point to be used for alloca; /// instructions.; /// \param X			 The target atomic pointer to be updated; /// \param XElemTy The element type of the atomic pointer.; /// \param Expr		 The value to update X with.; /// \param AO			 Atomic ordering of the generated atomic; /// instructions.; /// \param RMWOp		 The binary operation used for update. If; /// operation is not supported by atomicRMW,; /// or belong to {FADD, FSUB, BAD_BINOP}.; /// Then a `cmpExch` based	atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param VolatileX	 true if \a X volatile?; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); ///; /// \returns A pair of the old value of X before the update, and the value; /// used for the update.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:110,Deployability,Update,UpdateOp,110,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param AllocaIP	 The insertion point to be used for alloca; /// instructions.; /// \param X			 The target atomic pointer to be updated; /// \param XElemTy The element type of the atomic pointer.; /// \param Expr		 The value to update X with.; /// \param AO			 Atomic ordering of the generated atomic; /// instructions.; /// \param RMWOp		 The binary operation used for update. If; /// operation is not supported by atomicRMW,; /// or belong to {FADD, FSUB, BAD_BINOP}.; /// Then a `cmpExch` based	atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param VolatileX	 true if \a X volatile?; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); ///; /// \returns A pair of the old value of X before the update, and the value; /// used for the update.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:143,Deployability,Update,UpdateOp,143,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param AllocaIP	 The insertion point to be used for alloca; /// instructions.; /// \param X			 The target atomic pointer to be updated; /// \param XElemTy The element type of the atomic pointer.; /// \param Expr		 The value to update X with.; /// \param AO			 Atomic ordering of the generated atomic; /// instructions.; /// \param RMWOp		 The binary operation used for update. If; /// operation is not supported by atomicRMW,; /// or belong to {FADD, FSUB, BAD_BINOP}.; /// Then a `cmpExch` based	atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param VolatileX	 true if \a X volatile?; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); ///; /// \returns A pair of the old value of X before the update, and the value; /// used for the update.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:321,Deployability,update,updated,321,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param AllocaIP	 The insertion point to be used for alloca; /// instructions.; /// \param X			 The target atomic pointer to be updated; /// \param XElemTy The element type of the atomic pointer.; /// \param Expr		 The value to update X with.; /// \param AO			 Atomic ordering of the generated atomic; /// instructions.; /// \param RMWOp		 The binary operation used for update. If; /// operation is not supported by atomicRMW,; /// or belong to {FADD, FSUB, BAD_BINOP}.; /// Then a `cmpExch` based	atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param VolatileX	 true if \a X volatile?; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); ///; /// \returns A pair of the old value of X before the update, and the value; /// used for the update.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:421,Deployability,update,update,421,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param AllocaIP	 The insertion point to be used for alloca; /// instructions.; /// \param X			 The target atomic pointer to be updated; /// \param XElemTy The element type of the atomic pointer.; /// \param Expr		 The value to update X with.; /// \param AO			 Atomic ordering of the generated atomic; /// instructions.; /// \param RMWOp		 The binary operation used for update. If; /// operation is not supported by atomicRMW,; /// or belong to {FADD, FSUB, BAD_BINOP}.; /// Then a `cmpExch` based	atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param VolatileX	 true if \a X volatile?; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); ///; /// \returns A pair of the old value of X before the update, and the value; /// used for the update.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:563,Deployability,update,update,563,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param AllocaIP	 The insertion point to be used for alloca; /// instructions.; /// \param X			 The target atomic pointer to be updated; /// \param XElemTy The element type of the atomic pointer.; /// \param Expr		 The value to update X with.; /// \param AO			 Atomic ordering of the generated atomic; /// instructions.; /// \param RMWOp		 The binary operation used for update. If; /// operation is not supported by atomicRMW,; /// or belong to {FADD, FSUB, BAD_BINOP}.; /// Then a `cmpExch` based	atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param VolatileX	 true if \a X volatile?; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); ///; /// \returns A pair of the old value of X before the update, and the value; /// used for the update.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:729,Deployability,Update,UpdateOp,729,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param AllocaIP	 The insertion point to be used for alloca; /// instructions.; /// \param X			 The target atomic pointer to be updated; /// \param XElemTy The element type of the atomic pointer.; /// \param Expr		 The value to update X with.; /// \param AO			 Atomic ordering of the generated atomic; /// instructions.; /// \param RMWOp		 The binary operation used for update. If; /// operation is not supported by atomicRMW,; /// or belong to {FADD, FSUB, BAD_BINOP}.; /// Then a `cmpExch` based	atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param VolatileX	 true if \a X volatile?; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); ///; /// \returns A pair of the old value of X before the update, and the value; /// used for the update.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:967,Deployability,update,update,967,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param AllocaIP	 The insertion point to be used for alloca; /// instructions.; /// \param X			 The target atomic pointer to be updated; /// \param XElemTy The element type of the atomic pointer.; /// \param Expr		 The value to update X with.; /// \param AO			 Atomic ordering of the generated atomic; /// instructions.; /// \param RMWOp		 The binary operation used for update. If; /// operation is not supported by atomicRMW,; /// or belong to {FADD, FSUB, BAD_BINOP}.; /// Then a `cmpExch` based	atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param VolatileX	 true if \a X volatile?; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); ///; /// \returns A pair of the old value of X before the update, and the value; /// used for the update.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1100,Deployability,update,update,1100,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param AllocaIP	 The insertion point to be used for alloca; /// instructions.; /// \param X			 The target atomic pointer to be updated; /// \param XElemTy The element type of the atomic pointer.; /// \param Expr		 The value to update X with.; /// \param AO			 Atomic ordering of the generated atomic; /// instructions.; /// \param RMWOp		 The binary operation used for update. If; /// operation is not supported by atomicRMW,; /// or belong to {FADD, FSUB, BAD_BINOP}.; /// Then a `cmpExch` based	atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param VolatileX	 true if \a X volatile?; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); ///; /// \returns A pair of the old value of X before the update, and the value; /// used for the update.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1140,Deployability,update,update,1140,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param AllocaIP	 The insertion point to be used for alloca; /// instructions.; /// \param X			 The target atomic pointer to be updated; /// \param XElemTy The element type of the atomic pointer.; /// \param Expr		 The value to update X with.; /// \param AO			 Atomic ordering of the generated atomic; /// instructions.; /// \param RMWOp		 The binary operation used for update. If; /// operation is not supported by atomicRMW,; /// or belong to {FADD, FSUB, BAD_BINOP}.; /// Then a `cmpExch` based	atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param VolatileX	 true if \a X volatile?; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); ///; /// \returns A pair of the old value of X before the update, and the value; /// used for the update.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:16,Deployability,update,update,16,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param RMWOp The binary operation used for update. If operation; /// is	not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a `cmpExch` based; /// atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; ///	 (e.g. true for X = X BinOp Expr); ///; /// \return Insertion point after generated atomic update IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:110,Deployability,Update,UpdateOp,110,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param RMWOp The binary operation used for update. If operation; /// is	not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a `cmpExch` based; /// atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; ///	 (e.g. true for X = X BinOp Expr); ///; /// \return Insertion point after generated atomic update IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:143,Deployability,Update,UpdateOp,143,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param RMWOp The binary operation used for update. If operation; /// is	not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a `cmpExch` based; /// atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; ///	 (e.g. true for X = X BinOp Expr); ///; /// \return Insertion point after generated atomic update IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:372,Deployability,update,updated,372,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param RMWOp The binary operation used for update. If operation; /// is	not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a `cmpExch` based; /// atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; ///	 (e.g. true for X = X BinOp Expr); ///; /// \return Insertion point after generated atomic update IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:410,Deployability,update,update,410,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param RMWOp The binary operation used for update. If operation; /// is	not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a `cmpExch` based; /// atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; ///	 (e.g. true for X = X BinOp Expr); ///; /// \return Insertion point after generated atomic update IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:542,Deployability,update,update,542,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param RMWOp The binary operation used for update. If operation; /// is	not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a `cmpExch` based; /// atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; ///	 (e.g. true for X = X BinOp Expr); ///; /// \return Insertion point after generated atomic update IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:709,Deployability,Update,UpdateOp,709,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param RMWOp The binary operation used for update. If operation; /// is	not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a `cmpExch` based; /// atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; ///	 (e.g. true for X = X BinOp Expr); ///; /// \return Insertion point after generated atomic update IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:901,Deployability,update,update,901,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param RMWOp The binary operation used for update. If operation; /// is	not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a `cmpExch` based; /// atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; ///	 (e.g. true for X = X BinOp Expr); ///; /// \return Insertion point after generated atomic update IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1033,Deployability,update,update,1033,"/// Emit atomic update for constructs: X = X BinOp Expr ,or X = Expr BinOp X; /// For complex Operations: X = UpdateOp(X) => CmpExch X, old_X, UpdateOp(X); /// Only Scalar data types.; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param RMWOp The binary operation used for update. If operation; /// is	not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a `cmpExch` based; /// atomic will be generated.; /// \param UpdateOp 	Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param IsXBinopExpr true if \a X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; ///	 (e.g. true for X = X BinOp Expr); ///; /// \return Insertion point after generated atomic update IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:16,Deployability,update,update,16,"/// Emit atomic update for constructs: --- Only Scalar data types; /// V = X; X = X BinOp Expr ,; /// X = X BinOp Expr; V = X,; /// V = X; X = Expr BinOp X,; /// X = Expr BinOp X; V = X,; /// V = X; X = UpdateOp(X),; /// X = UpdateOp(X); V = X,; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param V Memory address where to store captured value; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions; /// \param RMWOp The binary operation used for update. If; /// operation is not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a cmpExch based; /// atomic will be generated.; /// \param UpdateOp Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param UpdateExpr true if X is an in place update of the form; /// X = X BinOp Expr or X = Expr BinOp X; /// \param IsXBinopExpr true if X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); /// \param IsPostfixUpdate true if original value of 'x' must be stored in; /// 'v', not an updated one.; ///; /// \return Insertion point after generated atomic capture IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:203,Deployability,Update,UpdateOp,203,"/// Emit atomic update for constructs: --- Only Scalar data types; /// V = X; X = X BinOp Expr ,; /// X = X BinOp Expr; V = X,; /// V = X; X = Expr BinOp X,; /// X = Expr BinOp X; V = X,; /// V = X; X = UpdateOp(X),; /// X = UpdateOp(X); V = X,; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param V Memory address where to store captured value; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions; /// \param RMWOp The binary operation used for update. If; /// operation is not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a cmpExch based; /// atomic will be generated.; /// \param UpdateOp Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param UpdateExpr true if X is an in place update of the form; /// X = X BinOp Expr or X = Expr BinOp X; /// \param IsXBinopExpr true if X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); /// \param IsPostfixUpdate true if original value of 'x' must be stored in; /// 'v', not an updated one.; ///; /// \return Insertion point after generated atomic capture IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:225,Deployability,Update,UpdateOp,225,"/// Emit atomic update for constructs: --- Only Scalar data types; /// V = X; X = X BinOp Expr ,; /// X = X BinOp Expr; V = X,; /// V = X; X = Expr BinOp X,; /// X = Expr BinOp X; V = X,; /// V = X; X = UpdateOp(X),; /// X = UpdateOp(X); V = X,; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param V Memory address where to store captured value; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions; /// \param RMWOp The binary operation used for update. If; /// operation is not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a cmpExch based; /// atomic will be generated.; /// \param UpdateOp Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param UpdateExpr true if X is an in place update of the form; /// X = X BinOp Expr or X = Expr BinOp X; /// \param IsXBinopExpr true if X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); /// \param IsPostfixUpdate true if original value of 'x' must be stored in; /// 'v', not an updated one.; ///; /// \return Insertion point after generated atomic capture IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:433,Deployability,update,updated,433,"/// Emit atomic update for constructs: --- Only Scalar data types; /// V = X; X = X BinOp Expr ,; /// X = X BinOp Expr; V = X,; /// V = X; X = Expr BinOp X,; /// X = Expr BinOp X; V = X,; /// V = X; X = UpdateOp(X),; /// X = UpdateOp(X); V = X,; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param V Memory address where to store captured value; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions; /// \param RMWOp The binary operation used for update. If; /// operation is not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a cmpExch based; /// atomic will be generated.; /// \param UpdateOp Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param UpdateExpr true if X is an in place update of the form; /// X = X BinOp Expr or X = Expr BinOp X; /// \param IsXBinopExpr true if X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); /// \param IsPostfixUpdate true if original value of 'x' must be stored in; /// 'v', not an updated one.; ///; /// \return Insertion point after generated atomic capture IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:530,Deployability,update,update,530,"/// Emit atomic update for constructs: --- Only Scalar data types; /// V = X; X = X BinOp Expr ,; /// X = X BinOp Expr; V = X,; /// V = X; X = Expr BinOp X,; /// X = Expr BinOp X; V = X,; /// V = X; X = UpdateOp(X),; /// X = UpdateOp(X); V = X,; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param V Memory address where to store captured value; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions; /// \param RMWOp The binary operation used for update. If; /// operation is not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a cmpExch based; /// atomic will be generated.; /// \param UpdateOp Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param UpdateExpr true if X is an in place update of the form; /// X = X BinOp Expr or X = Expr BinOp X; /// \param IsXBinopExpr true if X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); /// \param IsPostfixUpdate true if original value of 'x' must be stored in; /// 'v', not an updated one.; ///; /// \return Insertion point after generated atomic capture IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:661,Deployability,update,update,661,"/// Emit atomic update for constructs: --- Only Scalar data types; /// V = X; X = X BinOp Expr ,; /// X = X BinOp Expr; V = X,; /// V = X; X = Expr BinOp X,; /// X = Expr BinOp X; V = X,; /// V = X; X = UpdateOp(X),; /// X = UpdateOp(X); V = X,; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param V Memory address where to store captured value; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions; /// \param RMWOp The binary operation used for update. If; /// operation is not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a cmpExch based; /// atomic will be generated.; /// \param UpdateOp Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param UpdateExpr true if X is an in place update of the form; /// X = X BinOp Expr or X = Expr BinOp X; /// \param IsXBinopExpr true if X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); /// \param IsPostfixUpdate true if original value of 'x' must be stored in; /// 'v', not an updated one.; ///; /// \return Insertion point after generated atomic capture IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:826,Deployability,Update,UpdateOp,826,"/// Emit atomic update for constructs: --- Only Scalar data types; /// V = X; X = X BinOp Expr ,; /// X = X BinOp Expr; V = X,; /// V = X; X = Expr BinOp X,; /// X = Expr BinOp X; V = X,; /// V = X; X = UpdateOp(X),; /// X = UpdateOp(X); V = X,; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param V Memory address where to store captured value; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions; /// \param RMWOp The binary operation used for update. If; /// operation is not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a cmpExch based; /// atomic will be generated.; /// \param UpdateOp Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param UpdateExpr true if X is an in place update of the form; /// X = X BinOp Expr or X = Expr BinOp X; /// \param IsXBinopExpr true if X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); /// \param IsPostfixUpdate true if original value of 'x' must be stored in; /// 'v', not an updated one.; ///; /// \return Insertion point after generated atomic capture IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:947,Deployability,Update,UpdateExpr,947,"/// Emit atomic update for constructs: --- Only Scalar data types; /// V = X; X = X BinOp Expr ,; /// X = X BinOp Expr; V = X,; /// V = X; X = Expr BinOp X,; /// X = Expr BinOp X; V = X,; /// V = X; X = UpdateOp(X),; /// X = UpdateOp(X); V = X,; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param V Memory address where to store captured value; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions; /// \param RMWOp The binary operation used for update. If; /// operation is not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a cmpExch based; /// atomic will be generated.; /// \param UpdateOp Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param UpdateExpr true if X is an in place update of the form; /// X = X BinOp Expr or X = Expr BinOp X; /// \param IsXBinopExpr true if X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); /// \param IsPostfixUpdate true if original value of 'x' must be stored in; /// 'v', not an updated one.; ///; /// \return Insertion point after generated atomic capture IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:983,Deployability,update,update,983,"/// Emit atomic update for constructs: --- Only Scalar data types; /// V = X; X = X BinOp Expr ,; /// X = X BinOp Expr; V = X,; /// V = X; X = Expr BinOp X,; /// X = Expr BinOp X; V = X,; /// V = X; X = UpdateOp(X),; /// X = UpdateOp(X); V = X,; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param V Memory address where to store captured value; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions; /// \param RMWOp The binary operation used for update. If; /// operation is not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a cmpExch based; /// atomic will be generated.; /// \param UpdateOp Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param UpdateExpr true if X is an in place update of the form; /// X = X BinOp Expr or X = Expr BinOp X; /// \param IsXBinopExpr true if X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); /// \param IsPostfixUpdate true if original value of 'x' must be stored in; /// 'v', not an updated one.; ///; /// \return Insertion point after generated atomic capture IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1123,Deployability,update,update,1123,"/// Emit atomic update for constructs: --- Only Scalar data types; /// V = X; X = X BinOp Expr ,; /// X = X BinOp Expr; V = X,; /// V = X; X = Expr BinOp X,; /// X = Expr BinOp X; V = X,; /// V = X; X = UpdateOp(X),; /// X = UpdateOp(X); V = X,; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param V Memory address where to store captured value; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions; /// \param RMWOp The binary operation used for update. If; /// operation is not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a cmpExch based; /// atomic will be generated.; /// \param UpdateOp Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param UpdateExpr true if X is an in place update of the form; /// X = X BinOp Expr or X = Expr BinOp X; /// \param IsXBinopExpr true if X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); /// \param IsPostfixUpdate true if original value of 'x' must be stored in; /// 'v', not an updated one.; ///; /// \return Insertion point after generated atomic capture IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1290,Deployability,update,updated,1290,"/// Emit atomic update for constructs: --- Only Scalar data types; /// V = X; X = X BinOp Expr ,; /// X = X BinOp Expr; V = X,; /// V = X; X = Expr BinOp X,; /// X = Expr BinOp X; V = X,; /// V = X; X = UpdateOp(X),; /// X = UpdateOp(X); V = X,; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param X The target atomic pointer to be updated; /// \param V Memory address where to store captured value; /// \param Expr The value to update X with.; /// \param AO Atomic ordering of the generated atomic instructions; /// \param RMWOp The binary operation used for update. If; /// operation is not supported by atomicRMW, or belong to; ///	 {FADD, FSUB, BAD_BINOP}. Then a cmpExch based; /// atomic will be generated.; /// \param UpdateOp Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \param UpdateExpr true if X is an in place update of the form; /// X = X BinOp Expr or X = Expr BinOp X; /// \param IsXBinopExpr true if X is Left H.S. in Right H.S. part of the; /// update expression, false otherwise.; /// (e.g. true for X = X BinOp Expr); /// \param IsPostfixUpdate true if original value of 'x' must be stored in; /// 'v', not an updated one.; ///; /// \return Insertion point after generated atomic capture IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:246,Deployability,update,update-stmt,246,"/// Emit atomic compare for constructs: --- Only scalar data types; /// cond-expr-stmt:; /// x = x ordop expr ? expr : x;; /// x = expr ordop x ? expr : x;; /// x = x == e ? d : x;; /// x = e == x ? d : x; (this one is not in the spec); /// cond-update-stmt:; /// if (x ordop expr) { x = expr; }; /// if (expr ordop x) { x = expr; }; /// if (x == e) { x = d; }; /// if (e == x) { x = d; } (this one is not in the spec); /// conditional-update-capture-atomic:; /// v = x; cond-update-stmt; (IsPostfixUpdate=true, IsFailOnly=false); /// cond-update-stmt; v = x; (IsPostfixUpdate=false, IsFailOnly=false); /// if (x == e) { x = d; } else { v = x; } (IsPostfixUpdate=false,; /// IsFailOnly=true); /// r = x == e; if (r) { x = d; } (IsPostfixUpdate=false, IsFailOnly=false); /// r = x == e; if (r) { x = d; } else { v = x; } (IsPostfixUpdate=false,; /// IsFailOnly=true); ///; /// \param Loc The insert and source location description.; /// \param X The target atomic pointer to be updated.; /// \param V Memory address where to store captured value (for; /// compare capture only).; /// \param R Memory address where to store comparison result; /// (for compare capture with '==' only).; /// \param E The expected value ('e') for forms that use an; /// equality comparison or an expression ('expr') for; /// forms that use 'ordop' (logically an atomic maximum or; /// minimum).; /// \param D The desired value for forms that use an equality; /// comparison. If forms that use 'ordop', it should be; /// \p nullptr.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param Op Atomic compare operation. It can only be ==, <, or >.; /// \param IsXBinopExpr True if the conditional statement is in the form where; /// x is on LHS. It only matters for < or >.; /// \param IsPostfixUpdate True if original value of 'x' must be stored in; /// 'v', not an updated one (for compare capture; /// only).; /// \param IsFailOnly True if the original value of 'x' is stored to 'v'; /// only when",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:436,Deployability,update,update-capture-atomic,436,"/// Emit atomic compare for constructs: --- Only scalar data types; /// cond-expr-stmt:; /// x = x ordop expr ? expr : x;; /// x = expr ordop x ? expr : x;; /// x = x == e ? d : x;; /// x = e == x ? d : x; (this one is not in the spec); /// cond-update-stmt:; /// if (x ordop expr) { x = expr; }; /// if (expr ordop x) { x = expr; }; /// if (x == e) { x = d; }; /// if (e == x) { x = d; } (this one is not in the spec); /// conditional-update-capture-atomic:; /// v = x; cond-update-stmt; (IsPostfixUpdate=true, IsFailOnly=false); /// cond-update-stmt; v = x; (IsPostfixUpdate=false, IsFailOnly=false); /// if (x == e) { x = d; } else { v = x; } (IsPostfixUpdate=false,; /// IsFailOnly=true); /// r = x == e; if (r) { x = d; } (IsPostfixUpdate=false, IsFailOnly=false); /// r = x == e; if (r) { x = d; } else { v = x; } (IsPostfixUpdate=false,; /// IsFailOnly=true); ///; /// \param Loc The insert and source location description.; /// \param X The target atomic pointer to be updated.; /// \param V Memory address where to store captured value (for; /// compare capture only).; /// \param R Memory address where to store comparison result; /// (for compare capture with '==' only).; /// \param E The expected value ('e') for forms that use an; /// equality comparison or an expression ('expr') for; /// forms that use 'ordop' (logically an atomic maximum or; /// minimum).; /// \param D The desired value for forms that use an equality; /// comparison. If forms that use 'ordop', it should be; /// \p nullptr.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param Op Atomic compare operation. It can only be ==, <, or >.; /// \param IsXBinopExpr True if the conditional statement is in the form where; /// x is on LHS. It only matters for < or >.; /// \param IsPostfixUpdate True if original value of 'x' must be stored in; /// 'v', not an updated one (for compare capture; /// only).; /// \param IsFailOnly True if the original value of 'x' is stored to 'v'; /// only when",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:476,Deployability,update,update-stmt,476,"/// Emit atomic compare for constructs: --- Only scalar data types; /// cond-expr-stmt:; /// x = x ordop expr ? expr : x;; /// x = expr ordop x ? expr : x;; /// x = x == e ? d : x;; /// x = e == x ? d : x; (this one is not in the spec); /// cond-update-stmt:; /// if (x ordop expr) { x = expr; }; /// if (expr ordop x) { x = expr; }; /// if (x == e) { x = d; }; /// if (e == x) { x = d; } (this one is not in the spec); /// conditional-update-capture-atomic:; /// v = x; cond-update-stmt; (IsPostfixUpdate=true, IsFailOnly=false); /// cond-update-stmt; v = x; (IsPostfixUpdate=false, IsFailOnly=false); /// if (x == e) { x = d; } else { v = x; } (IsPostfixUpdate=false,; /// IsFailOnly=true); /// r = x == e; if (r) { x = d; } (IsPostfixUpdate=false, IsFailOnly=false); /// r = x == e; if (r) { x = d; } else { v = x; } (IsPostfixUpdate=false,; /// IsFailOnly=true); ///; /// \param Loc The insert and source location description.; /// \param X The target atomic pointer to be updated.; /// \param V Memory address where to store captured value (for; /// compare capture only).; /// \param R Memory address where to store comparison result; /// (for compare capture with '==' only).; /// \param E The expected value ('e') for forms that use an; /// equality comparison or an expression ('expr') for; /// forms that use 'ordop' (logically an atomic maximum or; /// minimum).; /// \param D The desired value for forms that use an equality; /// comparison. If forms that use 'ordop', it should be; /// \p nullptr.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param Op Atomic compare operation. It can only be ==, <, or >.; /// \param IsXBinopExpr True if the conditional statement is in the form where; /// x is on LHS. It only matters for < or >.; /// \param IsPostfixUpdate True if original value of 'x' must be stored in; /// 'v', not an updated one (for compare capture; /// only).; /// \param IsFailOnly True if the original value of 'x' is stored to 'v'; /// only when",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:540,Deployability,update,update-stmt,540,"/// Emit atomic compare for constructs: --- Only scalar data types; /// cond-expr-stmt:; /// x = x ordop expr ? expr : x;; /// x = expr ordop x ? expr : x;; /// x = x == e ? d : x;; /// x = e == x ? d : x; (this one is not in the spec); /// cond-update-stmt:; /// if (x ordop expr) { x = expr; }; /// if (expr ordop x) { x = expr; }; /// if (x == e) { x = d; }; /// if (e == x) { x = d; } (this one is not in the spec); /// conditional-update-capture-atomic:; /// v = x; cond-update-stmt; (IsPostfixUpdate=true, IsFailOnly=false); /// cond-update-stmt; v = x; (IsPostfixUpdate=false, IsFailOnly=false); /// if (x == e) { x = d; } else { v = x; } (IsPostfixUpdate=false,; /// IsFailOnly=true); /// r = x == e; if (r) { x = d; } (IsPostfixUpdate=false, IsFailOnly=false); /// r = x == e; if (r) { x = d; } else { v = x; } (IsPostfixUpdate=false,; /// IsFailOnly=true); ///; /// \param Loc The insert and source location description.; /// \param X The target atomic pointer to be updated.; /// \param V Memory address where to store captured value (for; /// compare capture only).; /// \param R Memory address where to store comparison result; /// (for compare capture with '==' only).; /// \param E The expected value ('e') for forms that use an; /// equality comparison or an expression ('expr') for; /// forms that use 'ordop' (logically an atomic maximum or; /// minimum).; /// \param D The desired value for forms that use an equality; /// comparison. If forms that use 'ordop', it should be; /// \p nullptr.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param Op Atomic compare operation. It can only be ==, <, or >.; /// \param IsXBinopExpr True if the conditional statement is in the form where; /// x is on LHS. It only matters for < or >.; /// \param IsPostfixUpdate True if original value of 'x' must be stored in; /// 'v', not an updated one (for compare capture; /// only).; /// \param IsFailOnly True if the original value of 'x' is stored to 'v'; /// only when",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:977,Deployability,update,updated,977,"/// Emit atomic compare for constructs: --- Only scalar data types; /// cond-expr-stmt:; /// x = x ordop expr ? expr : x;; /// x = expr ordop x ? expr : x;; /// x = x == e ? d : x;; /// x = e == x ? d : x; (this one is not in the spec); /// cond-update-stmt:; /// if (x ordop expr) { x = expr; }; /// if (expr ordop x) { x = expr; }; /// if (x == e) { x = d; }; /// if (e == x) { x = d; } (this one is not in the spec); /// conditional-update-capture-atomic:; /// v = x; cond-update-stmt; (IsPostfixUpdate=true, IsFailOnly=false); /// cond-update-stmt; v = x; (IsPostfixUpdate=false, IsFailOnly=false); /// if (x == e) { x = d; } else { v = x; } (IsPostfixUpdate=false,; /// IsFailOnly=true); /// r = x == e; if (r) { x = d; } (IsPostfixUpdate=false, IsFailOnly=false); /// r = x == e; if (r) { x = d; } else { v = x; } (IsPostfixUpdate=false,; /// IsFailOnly=true); ///; /// \param Loc The insert and source location description.; /// \param X The target atomic pointer to be updated.; /// \param V Memory address where to store captured value (for; /// compare capture only).; /// \param R Memory address where to store comparison result; /// (for compare capture with '==' only).; /// \param E The expected value ('e') for forms that use an; /// equality comparison or an expression ('expr') for; /// forms that use 'ordop' (logically an atomic maximum or; /// minimum).; /// \param D The desired value for forms that use an equality; /// comparison. If forms that use 'ordop', it should be; /// \p nullptr.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param Op Atomic compare operation. It can only be ==, <, or >.; /// \param IsXBinopExpr True if the conditional statement is in the form where; /// x is on LHS. It only matters for < or >.; /// \param IsPostfixUpdate True if original value of 'x' must be stored in; /// 'v', not an updated one (for compare capture; /// only).; /// \param IsFailOnly True if the original value of 'x' is stored to 'v'; /// only when",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1868,Deployability,update,updated,1868,"x;; /// x = x == e ? d : x;; /// x = e == x ? d : x; (this one is not in the spec); /// cond-update-stmt:; /// if (x ordop expr) { x = expr; }; /// if (expr ordop x) { x = expr; }; /// if (x == e) { x = d; }; /// if (e == x) { x = d; } (this one is not in the spec); /// conditional-update-capture-atomic:; /// v = x; cond-update-stmt; (IsPostfixUpdate=true, IsFailOnly=false); /// cond-update-stmt; v = x; (IsPostfixUpdate=false, IsFailOnly=false); /// if (x == e) { x = d; } else { v = x; } (IsPostfixUpdate=false,; /// IsFailOnly=true); /// r = x == e; if (r) { x = d; } (IsPostfixUpdate=false, IsFailOnly=false); /// r = x == e; if (r) { x = d; } else { v = x; } (IsPostfixUpdate=false,; /// IsFailOnly=true); ///; /// \param Loc The insert and source location description.; /// \param X The target atomic pointer to be updated.; /// \param V Memory address where to store captured value (for; /// compare capture only).; /// \param R Memory address where to store comparison result; /// (for compare capture with '==' only).; /// \param E The expected value ('e') for forms that use an; /// equality comparison or an expression ('expr') for; /// forms that use 'ordop' (logically an atomic maximum or; /// minimum).; /// \param D The desired value for forms that use an equality; /// comparison. If forms that use 'ordop', it should be; /// \p nullptr.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param Op Atomic compare operation. It can only be ==, <, or >.; /// \param IsXBinopExpr True if the conditional statement is in the form where; /// x is on LHS. It only matters for < or >.; /// \param IsPostfixUpdate True if original value of 'x' must be stored in; /// 'v', not an updated one (for compare capture; /// only).; /// \param IsFailOnly True if the original value of 'x' is stored to 'v'; /// only when the comparison fails. This is only valid for; /// the case the comparison is '=='.; ///; /// \return Insertion point after generated atomic capture IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1328,Testability,log,logically,1328,"x;; /// x = x == e ? d : x;; /// x = e == x ? d : x; (this one is not in the spec); /// cond-update-stmt:; /// if (x ordop expr) { x = expr; }; /// if (expr ordop x) { x = expr; }; /// if (x == e) { x = d; }; /// if (e == x) { x = d; } (this one is not in the spec); /// conditional-update-capture-atomic:; /// v = x; cond-update-stmt; (IsPostfixUpdate=true, IsFailOnly=false); /// cond-update-stmt; v = x; (IsPostfixUpdate=false, IsFailOnly=false); /// if (x == e) { x = d; } else { v = x; } (IsPostfixUpdate=false,; /// IsFailOnly=true); /// r = x == e; if (r) { x = d; } (IsPostfixUpdate=false, IsFailOnly=false); /// r = x == e; if (r) { x = d; } else { v = x; } (IsPostfixUpdate=false,; /// IsFailOnly=true); ///; /// \param Loc The insert and source location description.; /// \param X The target atomic pointer to be updated.; /// \param V Memory address where to store captured value (for; /// compare capture only).; /// \param R Memory address where to store comparison result; /// (for compare capture with '==' only).; /// \param E The expected value ('e') for forms that use an; /// equality comparison or an expression ('expr') for; /// forms that use 'ordop' (logically an atomic maximum or; /// minimum).; /// \param D The desired value for forms that use an equality; /// comparison. If forms that use 'ordop', it should be; /// \p nullptr.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param Op Atomic compare operation. It can only be ==, <, or >.; /// \param IsXBinopExpr True if the conditional statement is in the form where; /// x is on LHS. It only matters for < or >.; /// \param IsPostfixUpdate True if original value of 'x' must be stored in; /// 'v', not an updated one (for compare capture; /// only).; /// \param IsFailOnly True if the original value of 'x' is stored to 'v'; /// only when the comparison fails. This is only valid for; /// the case the comparison is '=='.; ///; /// \return Insertion point after generated atomic capture IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:4,Performance,Load,Loads,4,"/// Loads all the offload entries information from the host IR; /// metadata. This function is only meant to be used with device code; /// generation.; ///; /// \param M Module to load Metadata info from. Module passed maybe; /// loaded from bitcode file, i.e, different from OpenMPIRBuilder::M module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:180,Performance,load,load,180,"/// Loads all the offload entries information from the host IR; /// metadata. This function is only meant to be used with device code; /// generation.; ///; /// \param M Module to load Metadata info from. Module passed maybe; /// loaded from bitcode file, i.e, different from OpenMPIRBuilder::M module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:230,Performance,load,loaded,230,"/// Loads all the offload entries information from the host IR; /// metadata. This function is only meant to be used with device code; /// generation.; ///; /// \param M Module to load Metadata info from. Module passed maybe; /// loaded from bitcode file, i.e, different from OpenMPIRBuilder::M module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:4,Performance,Load,Loads,4,"/// Loads all the offload entries information from the host IR; /// metadata read from the file passed in as the HostFilePath argument. This; /// function is only meant to be used with device code generation.; ///; /// \param HostFilePath The path to the host IR file,; /// used to load in offload metadata for the device, allowing host and device; /// to maintain the same metadata mapping.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:282,Performance,load,load,282,"/// Loads all the offload entries information from the host IR; /// metadata read from the file passed in as the HostFilePath argument. This; /// function is only meant to be used with device code generation.; ///; /// \param HostFilePath The path to the host IR file,; /// used to load in offload metadata for the device, allowing host and device; /// to maintain the same metadata mapping.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:13,Modifiability,variab,variable,13,/// Gets (if variable with the given name already exist) or creates; /// internal global variable with the specified Name. The created variable has; /// linkage CommonLinkage by default and is initialized by null value.; /// \param Ty Type of the global variable. If it is exist already the type; /// must be the same.; /// \param Name Name of the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:89,Modifiability,variab,variable,89,/// Gets (if variable with the given name already exist) or creates; /// internal global variable with the specified Name. The created variable has; /// linkage CommonLinkage by default and is initialized by null value.; /// \param Ty Type of the global variable. If it is exist already the type; /// must be the same.; /// \param Name Name of the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:135,Modifiability,variab,variable,135,/// Gets (if variable with the given name already exist) or creates; /// internal global variable with the specified Name. The created variable has; /// linkage CommonLinkage by default and is initialized by null value.; /// \param Ty Type of the global variable. If it is exist already the type; /// must be the same.; /// \param Name Name of the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:254,Modifiability,variab,variable,254,/// Gets (if variable with the given name already exist) or creates; /// internal global variable with the specified Name. The created variable has; /// linkage CommonLinkage by default and is initialized by null value.; /// \param Ty Type of the global variable. If it is exist already the type; /// must be the same.; /// \param Name Name of the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:348,Modifiability,variab,variable,348,/// Gets (if variable with the given name already exist) or creates; /// internal global variable with the specified Name. The created variable has; /// linkage CommonLinkage by default and is initialized by null value.; /// \param Ty Type of the global variable. If it is exist already the type; /// must be the same.; /// \param Name Name of the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:104,Modifiability,Config,Config,104,"/// Create a global function to register OpenMP requires flags into the; /// runtime, according to the `Config`.; ///; /// This function should be added to the list of constructors of the; /// compilation unit in order to be called before other OpenMP runtime; /// functions.; ///; /// \param Name Name of the created function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:143,Energy Efficiency,consumption,consumption,143,"/// Class to represented the control flow structure of an OpenMP canonical loop.; ///; /// The control-flow structure is standardized for easy consumption by; /// directives associated with loops. For instance, the worksharing-loop; /// construct may change this control flow such that each loop iteration is; /// executed on only one thread. The constraints of a canonical loop in brief; /// are:; ///; /// * The number of loop iterations must have been computed before entering the; /// loop.; ///; /// * Has an (unsigned) logical induction variable that starts at zero and; /// increments by one.; ///; /// * The loop's CFG itself has no side-effects. The OpenMP specification; /// itself allows side-effects, but the order in which they happen, including; /// how often or whether at all, is unspecified. We expect that the frontend; /// will emit those side-effect instructions somewhere (e.g. before the loop); /// such that the CanonicalLoopInfo itself can be side-effect free.; ///; /// Keep in mind that CanonicalLoopInfo is meant to only describe a repeated; /// execution of a loop body that satifies these constraints. It does NOT; /// represent arbitrary SESE regions that happen to contain a loop. Do not use; /// CanonicalLoopInfo for such purposes.; ///; /// The control flow can be described as follows:; ///; /// Preheader; /// |; /// /-> Header; /// | |; /// | Cond---\; /// | | |; /// | Body |; /// | | | |; /// | <...> |; /// | | | |; /// \--Latch |; /// |; /// Exit; /// |; /// After; ///; /// The loop is thought to start at PreheaderIP (at the Preheader's terminator,; /// including) and end at AfterIP (at the After's first instruction, excluding).; /// That is, instructions in the Preheader and After blocks (except the; /// Preheader's terminator) are out of CanonicalLoopInfo's control and may have; /// side-effects. Typically, the Preheader is used to compute the loop's trip; /// count. The instructions from BodyIP (at the Body block's first instruction,; /// excludin",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:2771,Integrability,depend,dependencies,2771,"minator) are out of CanonicalLoopInfo's control and may have; /// side-effects. Typically, the Preheader is used to compute the loop's trip; /// count. The instructions from BodyIP (at the Body block's first instruction,; /// excluding) until the Latch are also considered outside CanonicalLoopInfo's; /// control and thus can have side-effects. The body block is the single entry; /// point into the loop body, which may contain arbitrary control flow as long; /// as all control paths eventually branch to the Latch block.; ///; /// TODO: Consider adding another standardized BasicBlock between Body CFG and; /// Latch to guarantee that there is only a single edge to the latch. It would; /// make loop transformations easier to not needing to consider multiple; /// predecessors of the latch (See redirectAllPredecessorsTo) and would give us; /// an equivalant to PreheaderIP, AfterIP and BodyIP for inserting code that; /// executes after each body iteration.; ///; /// There must be no loop-carried dependencies through llvm::Values. This is; /// equivalant to that the Latch has no PHINode and the Header's only PHINode is; /// for the induction variable.; ///; /// All code in Header, Cond, Latch and Exit (plus the terminator of the; /// Preheader) are CanonicalLoopInfo's responsibility and their build-up checked; /// by assertOK(). They are expected to not be modified unless explicitly; /// modifying the CanonicalLoopInfo through a methods that applies a OpenMP; /// loop-associated construct such as applyWorkshareLoop, tileLoops, unrollLoop,; /// etc. These methods usually invalidate the CanonicalLoopInfo and re-use its; /// basic blocks. After invalidation, the CanonicalLoopInfo must not be used; /// anymore as its underlying control flow may not exist anymore.; /// Loop-transformation methods such as tileLoops, collapseLoops and unrollLoop; /// may also return a new CanonicalLoopInfo that can be passed to other; /// loop-associated construct implementing methods. These loop-t",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:543,Modifiability,variab,variable,543,"/// Class to represented the control flow structure of an OpenMP canonical loop.; ///; /// The control-flow structure is standardized for easy consumption by; /// directives associated with loops. For instance, the worksharing-loop; /// construct may change this control flow such that each loop iteration is; /// executed on only one thread. The constraints of a canonical loop in brief; /// are:; ///; /// * The number of loop iterations must have been computed before entering the; /// loop.; ///; /// * Has an (unsigned) logical induction variable that starts at zero and; /// increments by one.; ///; /// * The loop's CFG itself has no side-effects. The OpenMP specification; /// itself allows side-effects, but the order in which they happen, including; /// how often or whether at all, is unspecified. We expect that the frontend; /// will emit those side-effect instructions somewhere (e.g. before the loop); /// such that the CanonicalLoopInfo itself can be side-effect free.; ///; /// Keep in mind that CanonicalLoopInfo is meant to only describe a repeated; /// execution of a loop body that satifies these constraints. It does NOT; /// represent arbitrary SESE regions that happen to contain a loop. Do not use; /// CanonicalLoopInfo for such purposes.; ///; /// The control flow can be described as follows:; ///; /// Preheader; /// |; /// /-> Header; /// | |; /// | Cond---\; /// | | |; /// | Body |; /// | | | |; /// | <...> |; /// | | | |; /// \--Latch |; /// |; /// Exit; /// |; /// After; ///; /// The loop is thought to start at PreheaderIP (at the Preheader's terminator,; /// including) and end at AfterIP (at the After's first instruction, excluding).; /// That is, instructions in the Preheader and After blocks (except the; /// Preheader's terminator) are out of CanonicalLoopInfo's control and may have; /// side-effects. Typically, the Preheader is used to compute the loop's trip; /// count. The instructions from BodyIP (at the Body block's first instruction,; /// excludin",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:2919,Modifiability,variab,variable,2919,"eader is used to compute the loop's trip; /// count. The instructions from BodyIP (at the Body block's first instruction,; /// excluding) until the Latch are also considered outside CanonicalLoopInfo's; /// control and thus can have side-effects. The body block is the single entry; /// point into the loop body, which may contain arbitrary control flow as long; /// as all control paths eventually branch to the Latch block.; ///; /// TODO: Consider adding another standardized BasicBlock between Body CFG and; /// Latch to guarantee that there is only a single edge to the latch. It would; /// make loop transformations easier to not needing to consider multiple; /// predecessors of the latch (See redirectAllPredecessorsTo) and would give us; /// an equivalant to PreheaderIP, AfterIP and BodyIP for inserting code that; /// executes after each body iteration.; ///; /// There must be no loop-carried dependencies through llvm::Values. This is; /// equivalant to that the Latch has no PHINode and the Header's only PHINode is; /// for the induction variable.; ///; /// All code in Header, Cond, Latch and Exit (plus the terminator of the; /// Preheader) are CanonicalLoopInfo's responsibility and their build-up checked; /// by assertOK(). They are expected to not be modified unless explicitly; /// modifying the CanonicalLoopInfo through a methods that applies a OpenMP; /// loop-associated construct such as applyWorkshareLoop, tileLoops, unrollLoop,; /// etc. These methods usually invalidate the CanonicalLoopInfo and re-use its; /// basic blocks. After invalidation, the CanonicalLoopInfo must not be used; /// anymore as its underlying control flow may not exist anymore.; /// Loop-transformation methods such as tileLoops, collapseLoops and unrollLoop; /// may also return a new CanonicalLoopInfo that can be passed to other; /// loop-associated construct implementing methods. These loop-transforming; /// methods may either create a new CanonicalLoopInfo usually using; /// createLoopSke",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:5149,Safety,avoid,avoid,5149,"fo through a methods that applies a OpenMP; /// loop-associated construct such as applyWorkshareLoop, tileLoops, unrollLoop,; /// etc. These methods usually invalidate the CanonicalLoopInfo and re-use its; /// basic blocks. After invalidation, the CanonicalLoopInfo must not be used; /// anymore as its underlying control flow may not exist anymore.; /// Loop-transformation methods such as tileLoops, collapseLoops and unrollLoop; /// may also return a new CanonicalLoopInfo that can be passed to other; /// loop-associated construct implementing methods. These loop-transforming; /// methods may either create a new CanonicalLoopInfo usually using; /// createLoopSkeleton and invalidate the input CanonicalLoopInfo, or reuse and; /// modify one of the input CanonicalLoopInfo and return it as representing the; /// modified loop. What is done is an implementation detail of; /// transformation-implementing method and callers should always assume that the; /// CanonicalLoopInfo passed to it is invalidated and a new object is returned.; /// Returned CanonicalLoopInfo have the same structure and guarantees as the one; /// created by createCanonicalLoop, such that transforming methods do not have; /// to special case where the CanonicalLoopInfo originated from.; ///; /// Generally, methods consuming CanonicalLoopInfo do not need an; /// OpenMPIRBuilder::InsertPointTy as argument, but use the locations of the; /// CanonicalLoopInfo to insert new or modify existing instructions. Unless; /// documented otherwise, methods consuming CanonicalLoopInfo do not invalidate; /// any InsertPoint that is outside CanonicalLoopInfo's control. Specifically,; /// any InsertPoint in the Preheader, After or Block can still be used after; /// calling such a method.; ///; /// TODO: Provide mechanisms for exception handling and cancellation points.; ///; /// Defined outside OpenMPIRBuilder because nested classes cannot be; /// forward-declared, e.g. to avoid having to include the entire OMPIRBuilder.h.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:525,Testability,log,logical,525,"/// Class to represented the control flow structure of an OpenMP canonical loop.; ///; /// The control-flow structure is standardized for easy consumption by; /// directives associated with loops. For instance, the worksharing-loop; /// construct may change this control flow such that each loop iteration is; /// executed on only one thread. The constraints of a canonical loop in brief; /// are:; ///; /// * The number of loop iterations must have been computed before entering the; /// loop.; ///; /// * Has an (unsigned) logical induction variable that starts at zero and; /// increments by one.; ///; /// * The loop's CFG itself has no side-effects. The OpenMP specification; /// itself allows side-effects, but the order in which they happen, including; /// how often or whether at all, is unspecified. We expect that the frontend; /// will emit those side-effect instructions somewhere (e.g. before the loop); /// such that the CanonicalLoopInfo itself can be side-effect free.; ///; /// Keep in mind that CanonicalLoopInfo is meant to only describe a repeated; /// execution of a loop body that satifies these constraints. It does NOT; /// represent arbitrary SESE regions that happen to contain a loop. Do not use; /// CanonicalLoopInfo for such purposes.; ///; /// The control flow can be described as follows:; ///; /// Preheader; /// |; /// /-> Header; /// | |; /// | Cond---\; /// | | |; /// | Body |; /// | | | |; /// | <...> |; /// | | | |; /// \--Latch |; /// |; /// Exit; /// |; /// After; ///; /// The loop is thought to start at PreheaderIP (at the Preheader's terminator,; /// including) and end at AfterIP (at the After's first instruction, excluding).; /// That is, instructions in the Preheader and After blocks (except the; /// Preheader's terminator) are out of CanonicalLoopInfo's control and may have; /// side-effects. Typically, the Preheader is used to compute the loop's trip; /// count. The instructions from BodyIP (at the Body block's first instruction,; /// excludin",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:3098,Testability,assert,assertOK,3098,"h are also considered outside CanonicalLoopInfo's; /// control and thus can have side-effects. The body block is the single entry; /// point into the loop body, which may contain arbitrary control flow as long; /// as all control paths eventually branch to the Latch block.; ///; /// TODO: Consider adding another standardized BasicBlock between Body CFG and; /// Latch to guarantee that there is only a single edge to the latch. It would; /// make loop transformations easier to not needing to consider multiple; /// predecessors of the latch (See redirectAllPredecessorsTo) and would give us; /// an equivalant to PreheaderIP, AfterIP and BodyIP for inserting code that; /// executes after each body iteration.; ///; /// There must be no loop-carried dependencies through llvm::Values. This is; /// equivalant to that the Latch has no PHINode and the Header's only PHINode is; /// for the induction variable.; ///; /// All code in Header, Cond, Latch and Exit (plus the terminator of the; /// Preheader) are CanonicalLoopInfo's responsibility and their build-up checked; /// by assertOK(). They are expected to not be modified unless explicitly; /// modifying the CanonicalLoopInfo through a methods that applies a OpenMP; /// loop-associated construct such as applyWorkshareLoop, tileLoops, unrollLoop,; /// etc. These methods usually invalidate the CanonicalLoopInfo and re-use its; /// basic blocks. After invalidation, the CanonicalLoopInfo must not be used; /// anymore as its underlying control flow may not exist anymore.; /// Loop-transformation methods such as tileLoops, collapseLoops and unrollLoop; /// may also return a new CanonicalLoopInfo that can be passed to other; /// loop-associated construct implementing methods. These loop-transforming; /// methods may either create a new CanonicalLoopInfo usually using; /// createLoopSkeleton and invalidate the input CanonicalLoopInfo, or reuse and; /// modify one of the input CanonicalLoopInfo and return it as representing the; /// mod",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:133,Deployability,update,update,133,"/// Replace all uses of the canonical induction variable in the loop body with; /// a new one.; ///; /// The intended use case is to update the induction variable for an updated; /// iteration space such that it can stay normalized in the 0...tripcount-1; /// range.; ///; /// The \p Updater is called with the (presumable updated) current normalized; /// induction variable and is expected to return the value that uses of the; /// pre-updated induction values should use instead, typically dependent on; /// the new induction variable. This is a lambda (instead of e.g. just passing; /// the new value) to be able to distinguish the uses of the pre-updated; /// induction variable and uses of the induction varible to compute the; /// updated induction variable value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:170,Deployability,update,updated,170,"/// Replace all uses of the canonical induction variable in the loop body with; /// a new one.; ///; /// The intended use case is to update the induction variable for an updated; /// iteration space such that it can stay normalized in the 0...tripcount-1; /// range.; ///; /// The \p Updater is called with the (presumable updated) current normalized; /// induction variable and is expected to return the value that uses of the; /// pre-updated induction values should use instead, typically dependent on; /// the new induction variable. This is a lambda (instead of e.g. just passing; /// the new value) to be able to distinguish the uses of the pre-updated; /// induction variable and uses of the induction varible to compute the; /// updated induction variable value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:284,Deployability,Update,Updater,284,"/// Replace all uses of the canonical induction variable in the loop body with; /// a new one.; ///; /// The intended use case is to update the induction variable for an updated; /// iteration space such that it can stay normalized in the 0...tripcount-1; /// range.; ///; /// The \p Updater is called with the (presumable updated) current normalized; /// induction variable and is expected to return the value that uses of the; /// pre-updated induction values should use instead, typically dependent on; /// the new induction variable. This is a lambda (instead of e.g. just passing; /// the new value) to be able to distinguish the uses of the pre-updated; /// induction variable and uses of the induction varible to compute the; /// updated induction variable value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:323,Deployability,update,updated,323,"/// Replace all uses of the canonical induction variable in the loop body with; /// a new one.; ///; /// The intended use case is to update the induction variable for an updated; /// iteration space such that it can stay normalized in the 0...tripcount-1; /// range.; ///; /// The \p Updater is called with the (presumable updated) current normalized; /// induction variable and is expected to return the value that uses of the; /// pre-updated induction values should use instead, typically dependent on; /// the new induction variable. This is a lambda (instead of e.g. just passing; /// the new value) to be able to distinguish the uses of the pre-updated; /// induction variable and uses of the induction varible to compute the; /// updated induction variable value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:437,Deployability,update,updated,437,"/// Replace all uses of the canonical induction variable in the loop body with; /// a new one.; ///; /// The intended use case is to update the induction variable for an updated; /// iteration space such that it can stay normalized in the 0...tripcount-1; /// range.; ///; /// The \p Updater is called with the (presumable updated) current normalized; /// induction variable and is expected to return the value that uses of the; /// pre-updated induction values should use instead, typically dependent on; /// the new induction variable. This is a lambda (instead of e.g. just passing; /// the new value) to be able to distinguish the uses of the pre-updated; /// induction variable and uses of the induction varible to compute the; /// updated induction variable value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:651,Deployability,update,updated,651,"/// Replace all uses of the canonical induction variable in the loop body with; /// a new one.; ///; /// The intended use case is to update the induction variable for an updated; /// iteration space such that it can stay normalized in the 0...tripcount-1; /// range.; ///; /// The \p Updater is called with the (presumable updated) current normalized; /// induction variable and is expected to return the value that uses of the; /// pre-updated induction values should use instead, typically dependent on; /// the new induction variable. This is a lambda (instead of e.g. just passing; /// the new value) to be able to distinguish the uses of the pre-updated; /// induction variable and uses of the induction varible to compute the; /// updated induction variable value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:737,Deployability,update,updated,737,"/// Replace all uses of the canonical induction variable in the loop body with; /// a new one.; ///; /// The intended use case is to update the induction variable for an updated; /// iteration space such that it can stay normalized in the 0...tripcount-1; /// range.; ///; /// The \p Updater is called with the (presumable updated) current normalized; /// induction variable and is expected to return the value that uses of the; /// pre-updated induction values should use instead, typically dependent on; /// the new induction variable. This is a lambda (instead of e.g. just passing; /// the new value) to be able to distinguish the uses of the pre-updated; /// induction variable and uses of the induction varible to compute the; /// updated induction variable value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:492,Integrability,depend,dependent,492,"/// Replace all uses of the canonical induction variable in the loop body with; /// a new one.; ///; /// The intended use case is to update the induction variable for an updated; /// iteration space such that it can stay normalized in the 0...tripcount-1; /// range.; ///; /// The \p Updater is called with the (presumable updated) current normalized; /// induction variable and is expected to return the value that uses of the; /// pre-updated induction values should use instead, typically dependent on; /// the new induction variable. This is a lambda (instead of e.g. just passing; /// the new value) to be able to distinguish the uses of the pre-updated; /// induction variable and uses of the induction varible to compute the; /// updated induction variable value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:48,Modifiability,variab,variable,48,"/// Replace all uses of the canonical induction variable in the loop body with; /// a new one.; ///; /// The intended use case is to update the induction variable for an updated; /// iteration space such that it can stay normalized in the 0...tripcount-1; /// range.; ///; /// The \p Updater is called with the (presumable updated) current normalized; /// induction variable and is expected to return the value that uses of the; /// pre-updated induction values should use instead, typically dependent on; /// the new induction variable. This is a lambda (instead of e.g. just passing; /// the new value) to be able to distinguish the uses of the pre-updated; /// induction variable and uses of the induction varible to compute the; /// updated induction variable value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:154,Modifiability,variab,variable,154,"/// Replace all uses of the canonical induction variable in the loop body with; /// a new one.; ///; /// The intended use case is to update the induction variable for an updated; /// iteration space such that it can stay normalized in the 0...tripcount-1; /// range.; ///; /// The \p Updater is called with the (presumable updated) current normalized; /// induction variable and is expected to return the value that uses of the; /// pre-updated induction values should use instead, typically dependent on; /// the new induction variable. This is a lambda (instead of e.g. just passing; /// the new value) to be able to distinguish the uses of the pre-updated; /// induction variable and uses of the induction varible to compute the; /// updated induction variable value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:366,Modifiability,variab,variable,366,"/// Replace all uses of the canonical induction variable in the loop body with; /// a new one.; ///; /// The intended use case is to update the induction variable for an updated; /// iteration space such that it can stay normalized in the 0...tripcount-1; /// range.; ///; /// The \p Updater is called with the (presumable updated) current normalized; /// induction variable and is expected to return the value that uses of the; /// pre-updated induction values should use instead, typically dependent on; /// the new induction variable. This is a lambda (instead of e.g. just passing; /// the new value) to be able to distinguish the uses of the pre-updated; /// induction variable and uses of the induction varible to compute the; /// updated induction variable value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:528,Modifiability,variab,variable,528,"/// Replace all uses of the canonical induction variable in the loop body with; /// a new one.; ///; /// The intended use case is to update the induction variable for an updated; /// iteration space such that it can stay normalized in the 0...tripcount-1; /// range.; ///; /// The \p Updater is called with the (presumable updated) current normalized; /// induction variable and is expected to return the value that uses of the; /// pre-updated induction values should use instead, typically dependent on; /// the new induction variable. This is a lambda (instead of e.g. just passing; /// the new value) to be able to distinguish the uses of the pre-updated; /// induction variable and uses of the induction varible to compute the; /// updated induction variable value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:674,Modifiability,variab,variable,674,"/// Replace all uses of the canonical induction variable in the loop body with; /// a new one.; ///; /// The intended use case is to update the induction variable for an updated; /// iteration space such that it can stay normalized in the 0...tripcount-1; /// range.; ///; /// The \p Updater is called with the (presumable updated) current normalized; /// induction variable and is expected to return the value that uses of the; /// pre-updated induction values should use instead, typically dependent on; /// the new induction variable. This is a lambda (instead of e.g. just passing; /// the new value) to be able to distinguish the uses of the pre-updated; /// induction variable and uses of the induction varible to compute the; /// updated induction variable value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:755,Modifiability,variab,variable,755,"/// Replace all uses of the canonical induction variable in the loop body with; /// a new one.; ///; /// The intended use case is to update the induction variable for an updated; /// iteration space such that it can stay normalized in the 0...tripcount-1; /// range.; ///; /// The \p Updater is called with the (presumable updated) current normalized; /// induction variable and is expected to return the value that uses of the; /// pre-updated induction values should use instead, typically dependent on; /// the new induction variable. This is a lambda (instead of e.g. just passing; /// the new value) to be able to distinguish the uses of the pre-updated; /// induction variable and uses of the induction varible to compute the; /// updated induction variable value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:131,Modifiability,variab,variable,131,"/// The header is the entry for each iteration. In the canonical control flow,; /// it only contains the PHINode for the induction variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:153,Modifiability,variab,variable,153,"/// Reaching the latch indicates the end of the loop body code. In the; /// canonical control flow, it only contains the increment of the induction; /// variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:76,Modifiability,variab,variable,76,"/// Returns the instruction representing the current logical induction; /// variable. Always unsigned, always starting at 0 with an increment of one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:53,Testability,log,logical,53,"/// Returns the instruction representing the current logical induction; /// variable. Always unsigned, always starting at 0 with an increment of one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:37,Modifiability,variab,variable,37,/// Return the type of the induction variable (and the trip count).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h:29,Testability,log,logic,29,"//===-- FuzzerCLI.h - Common logic for CLIs of fuzzers ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Common logic needed to implement LLVM's fuzz targets' CLIs - including LLVM; // concepts like cl::opt and libFuzzer concepts like -ignore_remaining_args=1.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h:390,Testability,log,logic,390,"//===-- FuzzerCLI.h - Common logic for CLIs of fuzzers ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Common logic needed to implement LLVM's fuzz targets' CLIs - including LLVM; // concepts like cl::opt and libFuzzer concepts like -ignore_remaining_args=1.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h:11,Performance,optimiz,optimizer,11,/// Handle optimizer options which are encoded in the executable name.; /// Same semantics as in 'handleExecNameEncodedBEOpts'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h:89,Testability,test,testing,89,/// Runs a fuzz target on the inputs specified on the command line.; ///; /// Useful for testing fuzz targets without linking to libFuzzer. Finds inputs; /// in the argument list in a libFuzzer compatible way.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/FuzzerCLI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:457,Modifiability,config,configurable,457,"//===-- IRMutator.h - Mutation engine for fuzzing IR ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Provides the IRMutator class, which drives mutations on IR based on a; // configurable set of strategies. Some common strategies are also included; // here.; //; // Fuzzer-friendly (de)serialization functions are also provided, as these; // are usually needed when mutating IR.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:20,Modifiability,config,configuring,20,/// Entry point for configuring and running IR mutations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:18,Integrability,inject,injects,18,/// Strategy that injects operations into the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:18,Security,inject,injects,18,/// Strategy that injects operations into the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:98,Integrability,depend,dependency,98,/// Strategy to select a random instruction and add a new sink (user) to it to; /// increate data dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:95,Integrability,depend,dependency,95,/// Strategy to randomly select a block and shuffle the operations without; /// affecting data dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:202,Availability,error,error,202,/// Fuzzer friendly interface for the llvm bitcode parser.; ///; /// \param Data Bitcode we are going to parse; /// \param Size Size of the 'Data' in bytes; /// \return New module or nullptr in case of error,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:20,Integrability,interface,interface,20,/// Fuzzer friendly interface for the llvm bitcode parser.; ///; /// \param Data Bitcode we are going to parse; /// \param Size Size of the 'Data' in bytes; /// \return New module or nullptr in case of error,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:20,Integrability,interface,interface,20,/// Fuzzer friendly interface for the llvm bitcode printer.; ///; /// \param M Module to print; /// \param Dest Location to store serialized module; /// \param MaxSize Size of the destination buffer; /// \return Number of bytes that were written. When module size exceeds MaxSize; /// returns 0 and leaves Dest unchanged.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:63,Availability,error,errors,63,/// Try to parse module and verify it. May output verification errors to the; /// errs().; /// \return New module or nullptr in case of error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:136,Availability,error,error,136,/// Try to parse module and verify it. May output verification errors to the; /// errs().; /// \return New module or nullptr in case of error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/RandomIRBuilder.h:28,Modifiability,variab,variable,28,/// Find or create a global variable. It will be initialized by random; /// constants that satisfies \c Pred. It will also report whether this global; /// variable found or created.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/RandomIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/RandomIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/RandomIRBuilder.h:155,Modifiability,variab,variable,155,/// Find or create a global variable. It will be initialized by random; /// constants that satisfies \c Pred. It will also report whether this global; /// variable found or created.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/RandomIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/RandomIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/ELFObjHandler.h:34,Testability,stub,stub,34,/// Attempt to write a binary ELF stub.; /// This function determines appropriate ELFType using the passed ELFTarget and; /// then writes a binary ELF stub to a specified file path.; ///; /// @param FilePath File path for writing the ELF binary.; /// @param Stub Source ELFStub to generate a binary ELF stub from.; /// @param WriteIfChanged Whether or not to preserve timestamp if; /// the output stays the same.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/ELFObjHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/ELFObjHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/ELFObjHandler.h:151,Testability,stub,stub,151,/// Attempt to write a binary ELF stub.; /// This function determines appropriate ELFType using the passed ELFTarget and; /// then writes a binary ELF stub to a specified file path.; ///; /// @param FilePath File path for writing the ELF binary.; /// @param Stub Source ELFStub to generate a binary ELF stub from.; /// @param WriteIfChanged Whether or not to preserve timestamp if; /// the output stays the same.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/ELFObjHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/ELFObjHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/ELFObjHandler.h:258,Testability,Stub,Stub,258,/// Attempt to write a binary ELF stub.; /// This function determines appropriate ELFType using the passed ELFTarget and; /// then writes a binary ELF stub to a specified file path.; ///; /// @param FilePath File path for writing the ELF binary.; /// @param Stub Source ELFStub to generate a binary ELF stub from.; /// @param WriteIfChanged Whether or not to preserve timestamp if; /// the output stays the same.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/ELFObjHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/ELFObjHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/ELFObjHandler.h:303,Testability,stub,stub,303,/// Attempt to write a binary ELF stub.; /// This function determines appropriate ELFType using the passed ELFTarget and; /// then writes a binary ELF stub to a specified file path.; ///; /// @param FilePath File path for writing the ELF binary.; /// @param Stub Source ELFStub to generate a binary ELF stub from.; /// @param WriteIfChanged Whether or not to preserve timestamp if; /// the output stays the same.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/ELFObjHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/ELFObjHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h:418,Integrability,interface,interface,418,"//===- IFSHandler.h ---------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// \file; /// This file declares an interface for reading and writing .ifs (text-based; /// InterFace Stub) files.; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h:474,Integrability,InterFace,InterFace,474,"//===- IFSHandler.h ---------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// \file; /// This file declares an interface for reading and writing .ifs (text-based; /// InterFace Stub) files.; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h:484,Testability,Stub,Stub,484,"//===- IFSHandler.h ---------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// \file; /// This file declares an interface for reading and writing .ifs (text-based; /// InterFace Stub) files.; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h:28,Integrability,interface,interface,28,/// Attempts to read an IFS interface file from a StringRef buffer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h:29,Integrability,interface,interface,29,/// Attempts to write an IFS interface file to a raw_ostream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h:56,Testability,stub,stub,56,/// Override the target platform inforation in the text stub.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h:4,Security,Validat,Validate,4,/// Validate the target platform inforation in the text stub.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h:56,Testability,stub,stub,56,/// Validate the target platform inforation in the text stub.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h:53,Testability,stub,stub,53,/// Strips target platform information from the text stub.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h:447,Integrability,InterFace,InterFace,447,"//===- IFSStub.h ------------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// \file; /// This file defines an internal representation of an InterFace Stub.; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h:457,Testability,Stub,Stub,457,"//===- IFSStub.h ------------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// \file; /// This file defines an internal representation of an InterFace Stub.; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h:40,Safety,safe,safely,40,"// Type information is 4 bits, so 16 is safely out of range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h:38,Safety,safe,safely,38,"// Endianness info is 1 bytes, 256 is safely out of range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h:37,Safety,safe,safely,37,"// Bit width info is 1 bytes, 256 is safely out of range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h:34,Integrability,InterFace,InterFace,34,// A cumulative representation of InterFace stubs.; // Both textual and binary stubs will read into and write from this object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h:44,Testability,stub,stubs,44,// A cumulative representation of InterFace stubs.; // Both textual and binary stubs will read into and write from this object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h:79,Testability,stub,stubs,79,// A cumulative representation of InterFace stubs.; // Both textual and binary stubs will read into and write from this object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AbstractCallSite.h:445,Integrability,wrap,wrapper,445,"//===- AbstractCallSite.h - Abstract call sites -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the AbstractCallSite class, which is a is a wrapper that; // allows treating direct, indirect, and callback calls the same.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AbstractCallSite.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AbstractCallSite.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AbstractCallSite.h:243,Availability,down,down,243,"/// AbstractCallSite; ///; /// An abstract call site is a wrapper that allows to treat direct,; /// indirect, and callback calls the same. If an abstract call site; /// represents a direct or indirect call site it behaves like a stripped; /// down version of a normal call site object. The abstract call site can; /// also represent a callback call, thus the fact that the initially; /// called function (=broker) may invoke a third one (=callback callee).; /// In this case, the abstract call site hides the middle man, hence the; /// broker function. The result is a representation of the callback call,; /// inside the broker, but in the context of the original call to the broker.; ///; /// There are up to three functions involved when we talk about callback call; /// sites. The caller (1), which invokes the broker function. The broker; /// function (2), that will invoke the callee zero or more times. And finally; /// the callee (3), which is the target of the callback call.; ///; /// The abstract call site will handle the mapping from parameters to arguments; /// depending on the semantic of the broker function. However, it is important; /// to note that the mapping is often partial. Thus, some arguments of the; /// call/invoke instruction are mapped to parameters of the callee while others; /// are not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AbstractCallSite.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AbstractCallSite.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AbstractCallSite.h:58,Integrability,wrap,wrapper,58,"/// AbstractCallSite; ///; /// An abstract call site is a wrapper that allows to treat direct,; /// indirect, and callback calls the same. If an abstract call site; /// represents a direct or indirect call site it behaves like a stripped; /// down version of a normal call site object. The abstract call site can; /// also represent a callback call, thus the fact that the initially; /// called function (=broker) may invoke a third one (=callback callee).; /// In this case, the abstract call site hides the middle man, hence the; /// broker function. The result is a representation of the callback call,; /// inside the broker, but in the context of the original call to the broker.; ///; /// There are up to three functions involved when we talk about callback call; /// sites. The caller (1), which invokes the broker function. The broker; /// function (2), that will invoke the callee zero or more times. And finally; /// the callee (3), which is the target of the callback call.; ///; /// The abstract call site will handle the mapping from parameters to arguments; /// depending on the semantic of the broker function. However, it is important; /// to note that the mapping is often partial. Thus, some arguments of the; /// call/invoke instruction are mapped to parameters of the callee while others; /// are not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AbstractCallSite.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AbstractCallSite.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AbstractCallSite.h:1076,Integrability,depend,depending,1076,"/// AbstractCallSite; ///; /// An abstract call site is a wrapper that allows to treat direct,; /// indirect, and callback calls the same. If an abstract call site; /// represents a direct or indirect call site it behaves like a stripped; /// down version of a normal call site object. The abstract call site can; /// also represent a callback call, thus the fact that the initially; /// called function (=broker) may invoke a third one (=callback callee).; /// In this case, the abstract call site hides the middle man, hence the; /// broker function. The result is a representation of the callback call,; /// inside the broker, but in the context of the original call to the broker.; ///; /// There are up to three functions involved when we talk about callback call; /// sites. The caller (1), which invokes the broker function. The broker; /// function (2), that will invoke the callee zero or more times. And finally; /// the callee (3), which is the target of the callback call.; ///; /// The abstract call site will handle the mapping from parameters to arguments; /// depending on the semantic of the broker function. However, it is important; /// to note that the mapping is often partial. Thus, some arguments of the; /// call/invoke instruction are mapped to parameters of the callee while others; /// are not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AbstractCallSite.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AbstractCallSite.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Argument.h:57,Availability,mask,mask,57,"/// If this argument has nofpclass attribute, return the mask representing; /// disallowed floating-point values. Otherwise, fcNone is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Argument.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Argument.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AssemblyAnnotationWriter.h:427,Integrability,interface,interface,427,"//===-- AssemblyAnnotationWriter.h - Annotation .ll files -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Clients of the assembly writer can use this interface to add their own; // special-purpose annotations to LLVM assembly language printouts. Note that; // the assembly parser won't be able to parse these, in general, so; // implementations are advised to print stuff as LLVM comments.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AssemblyAnnotationWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AssemblyAnnotationWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Assumptions.h:420,Performance,optimiz,optimization,420,"//===--- Assumptions.h - Assumption handling and organization ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // String assumptions that are known to optimization passes should be placed in; // the KnownAssumptionStrings set. This can be done in various ways, i.a.,; // via a static KnownAssumptionString object.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Assumptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Assumptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h:30,Availability,Mask,Mask,30,"//===- llvm/AttributeMask.h - Mask for Attributes ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; // This file declares the AttributeMask class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h:138,Energy Efficiency,efficient,efficiently,138,"//===----------------------------------------------------------------------===//; /// \class; /// This class stores enough information to efficiently remove some attributes; /// from an existing AttrBuilder, AttributeSet or AttributeList.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h:28,Availability,mask,mask,28,/// Add an attribute to the mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h:19,Integrability,depend,dependent,19,/// Add the target-dependent attribute to the builder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h:56,Integrability,depend,dependent,56,/// Return true if the builder has the specified target-dependent; /// attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h:23,Availability,mask,mask,23,/// Return true if the mask contains the specified attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:418,Usability,simpl,simple,418,"//===- llvm/Attributes.h - Container for Attributes -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file contains the simple types necessary to represent the; /// attributes associated with functions and their calls.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:214,Performance,optimiz,optimizations,214,"//===----------------------------------------------------------------------===//; /// \class; /// Functions, function parameters, and return types can have attributes; /// to indicate how they should be treated by optimizations and code; /// generation. This class represents one of those attributes. It's light-weight; /// and should be passed around by-value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:93,Security,Access,Accessors,93,//===--------------------------------------------------------------------===//; // Attribute Accessors; //===--------------------------------------------------------------------===//; /// Return true if the attribute is an Attribute::AttrKind type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:53,Integrability,depend,dependent,53,/// Return true if the attribute is a string (target-dependent); /// attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:30,Integrability,depend,dependent,30,/// Return true if the target-dependent attribute is present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:17,Availability,Avail,AvailableAttrs,17,// TODO: Extract AvailableAttrs from AttributeSetNode and store them here.; // This will allow an efficient implementation of addAttribute and; // removeAttribute for enum attrs.; /// Private implementation pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:98,Energy Efficiency,efficient,efficient,98,// TODO: Extract AvailableAttrs from AttributeSetNode and store them here.; // This will allow an efficient implementation of addAttribute and; // removeAttribute for enum attrs.; /// Private implementation pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:17,Integrability,depend,dependent,17,/// Add a target-dependent attribute. Returns a new set because attribute sets; /// are immutable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:22,Integrability,depend,dependent,22,/// Return the target-dependent attribute object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:193,Security,access,access,193,"//===----------------------------------------------------------------------===//; /// \class; /// This class holds the attributes for a function, its return value, and; /// its parameters. You access the attributes for each of them via an index into; /// the AttributeList object. The function attributes are at index; /// `AttributeList::FunctionIndex', the return value is at index; /// `AttributeList::ReturnIndex', and the attributes for the parameters start at; /// index `AttributeList::FirstArgIndex'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:97,Security,Access,Accessors,97,//===--------------------------------------------------------------------===//; // AttributeList Accessors; //===--------------------------------------------------------------------===//; /// The attributes for the specified index are returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:56,Integrability,wrap,wrap,56,// Implementation of indexes(). Produces iterators that wrap an index. Mostly; // to hide the awkwardness of unsigned wrapping when iterating over valid; // indexes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:118,Integrability,wrap,wrapping,118,// Implementation of indexes(). Produces iterators that wrap an index. Mostly; // to hide the awkwardness of unsigned wrapping when iterating over valid; // indexes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:40,Integrability,wrap,wrapping,40,// This is expected to undergo unsigned wrapping since FunctionIndex is; // ~0 and that's where we start.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:313,Testability,test,test,313,"//===----------------------------------------------------------------------===//; /// \class; /// This class is used in conjunction with the Attribute::get method to; /// create an Attribute object. The object itself is uniquified. The Builder's; /// value, however, is not. So this can be used as a quick way to test for; /// equality, presence of attributes, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:19,Integrability,depend,dependent,19,/// Add the target-dependent attribute to the builder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:22,Integrability,depend,dependent,22,/// Remove the target-dependent attribute from the builder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:22,Integrability,depend,dependent,22,/// Remove the target-dependent attribute from the builder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:56,Integrability,depend,dependent,56,/// Return true if the builder has the specified target-dependent; /// attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:49,Energy Efficiency,power,power,49,"/// This turns an int alignment (which must be a power of 2) into the; /// form used internally in Attribute.; /// This call has no effect if Align is 0.; /// Deprecated, use the version using a MaybeAlign.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:55,Energy Efficiency,power,power,55,"/// This turns an int stack alignment (which must be a power of 2) into; /// the form used internally in Attribute.; /// This call has no effect if Align is 0.; /// Deprecated, use the version using a MaybeAlign.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:169,Availability,mask,mask,169,"/// Which attributes cannot be applied to a type. The argument \p ASK indicates,; /// if only attributes that are known to be safely droppable are contained in; /// the mask; only attributes that might be unsafe to drop (e.g., ABI-related; /// attributes) are in the mask; or both.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:267,Availability,mask,mask,267,"/// Which attributes cannot be applied to a type. The argument \p ASK indicates,; /// if only attributes that are known to be safely droppable are contained in; /// the mask; only attributes that might be unsafe to drop (e.g., ABI-related; /// attributes) are in the mask; or both.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:126,Safety,safe,safely,126,"/// Which attributes cannot be applied to a type. The argument \p ASK indicates,; /// if only attributes that are known to be safely droppable are contained in; /// the mask; only attributes that might be unsafe to drop (e.g., ABI-related; /// attributes) are in the mask; or both.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:205,Safety,unsafe,unsafe,205,"/// Which attributes cannot be applied to a type. The argument \p ASK indicates,; /// if only attributes that are known to be safely droppable are contained in; /// the mask; only attributes that might be unsafe to drop (e.g., ABI-related; /// attributes) are in the mask; or both.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:4,Deployability,Update,Update,4,/// Update min-legal-vector-width if it is in Attribute and less than Width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:42,Usability,simpl,simply,42,"/// This is a more granular function that simply checks an intrinsic function; /// for upgrading, and returns true if it requires upgrading. It may return; /// null in NewFn if the all calls to the original intrinsic function; /// should be transformed to non-function-call instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:8,Deployability,upgrade,upgrades,8,// This upgrades the comment for objc retain release markers in inline asm; // calls,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:45,Deployability,release,release,45,// This upgrades the comment for objc retain release markers in inline asm; // calls,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:20,Deployability,upgrade,upgrade,20,/// This is an auto-upgrade hook for any old intrinsic function syntaxes; /// which need to have both the function updated as well as all calls updated; /// to the new function. This should only be run in a post-processing fashion; /// so that it can update all calls to the old function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:115,Deployability,update,updated,115,/// This is an auto-upgrade hook for any old intrinsic function syntaxes; /// which need to have both the function updated as well as all calls updated; /// to the new function. This should only be run in a post-processing fashion; /// so that it can update all calls to the old function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:144,Deployability,update,updated,144,/// This is an auto-upgrade hook for any old intrinsic function syntaxes; /// which need to have both the function updated as well as all calls updated; /// to the new function. This should only be run in a post-processing fashion; /// so that it can update all calls to the old function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:251,Deployability,update,update,251,/// This is an auto-upgrade hook for any old intrinsic function syntaxes; /// which need to have both the function updated as well as all calls updated; /// to the new function. This should only be run in a post-processing fashion; /// so that it can update all calls to the old function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:53,Deployability,upgrade,upgraded,53,"/// This checks for global variables which should be upgraded. If it requires; /// upgrading, returns a pointer to the upgraded variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:119,Deployability,upgrade,upgraded,119,"/// This checks for global variables which should be upgraded. If it requires; /// upgrading, returns a pointer to the upgraded variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:27,Modifiability,variab,variables,27,"/// This checks for global variables which should be upgraded. If it requires; /// upgrading, returns a pointer to the upgraded variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:128,Modifiability,variab,variable,128,"/// This checks for global variables which should be upgraded. If it requires; /// upgrading, returns a pointer to the upgraded variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:49,Deployability,upgrade,upgraded,49,/// This checks for module flags which should be upgraded. It returns true if; /// module is modified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:66,Deployability,upgrade,upgrade,66,/// Convert calls to ARC runtime functions to intrinsic calls and upgrade the; /// old retain release marker to new module flag format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:94,Deployability,release,release,94,/// Convert calls to ARC runtime functions to intrinsic calls and upgrade the; /// old retain release marker to new module flag format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:99,Deployability,upgrade,upgrade,99,"/// If the given TBAA tag uses the scalar TBAA format, create a new node; /// corresponding to the upgrade to the struct-path aware TBAA format.; /// Otherwise return the \p TBAANode itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:20,Deployability,upgrade,upgrade,20,/// This is an auto-upgrade for bitcast between pointers with different; /// address spaces: the instruction is replaced by a pair ptrtoint+inttoptr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:20,Deployability,upgrade,upgrade,20,/// This is an auto-upgrade for bitcast constant expression between pointers; /// with different address spaces: the instruction is replaced by a pair; /// ptrtoint+inttoptr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:4,Deployability,Upgrade,Upgrade,4,/// Upgrade the loop attachment metadata node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:4,Deployability,Upgrade,Upgrade,4,/// Upgrade the datalayout string by adding a section for address space; /// pointers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:4,Deployability,Upgrade,Upgrade,4,/// Upgrade attributes that changed format or kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:4,Deployability,Upgrade,Upgrade,4,/// Upgrade operand bundles (without knowing about their user instruction).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:109,Usability,simpl,simply,109,"/// LLVM Basic Block Representation; ///; /// This represents a single basic block in LLVM. A basic block is simply a; /// container of instructions that execute sequentially. Basic blocks are Values; /// because they are referenced by instructions such as branches and switch; /// tables. The type of a BasicBlock is ""Type::LabelTy"" because the basic block; /// represents a label to which a branch can jump.; ///; /// A well formed basic block is formed of a list of non-terminating; /// instructions followed by a single terminator instruction. Terminator; /// instructions may not occur in the middle of basic blocks, and must terminate; /// the blocks. The BasicBlock class allows malformed basic blocks to occur; /// because it may be useful in the intermediate stage of constructing or; /// modifying a program. However, the verifier will ensure that basic blocks are; /// ""well formed"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:12,Modifiability,variab,variable,12,/// Convert variable location debugging information stored in dbg.value; /// intrinsics into DPMarker / DPValue records. Deletes all dbg.values in; /// the process and sets IsNewDbgInfoFormat = true. Only takes effect if; /// the UseNewDbgInfoFormat LLVM command line option is given.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:12,Modifiability,variab,variable,12,/// Convert variable location debugging information stored in DPMarkers and; /// DPValues into the dbg.value intrinsic representation. Sets; /// IsNewDbgInfoFormat = false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:324,Availability,error,errors,324,"/// Validate any DPMarkers / DPValues attached to instructions in this block,; /// and block-level stored data too (TrailingDPValues).; /// \p Assert Should this method fire an assertion if a problem is found?; /// \p Msg Should this method print a message to errs() if a problem is found?; /// \p OS Output stream to write errors to.; /// \returns True if a problem is found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:249,Integrability,message,message,249,"/// Validate any DPMarkers / DPValues attached to instructions in this block,; /// and block-level stored data too (TrailingDPValues).; /// \p Assert Should this method fire an assertion if a problem is found?; /// \p Msg Should this method print a message to errs() if a problem is found?; /// \p OS Output stream to write errors to.; /// \returns True if a problem is found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:4,Security,Validat,Validate,4,"/// Validate any DPMarkers / DPValues attached to instructions in this block,; /// and block-level stored data too (TrailingDPValues).; /// \p Assert Should this method fire an assertion if a problem is found?; /// \p Msg Should this method print a message to errs() if a problem is found?; /// \p OS Output stream to write errors to.; /// \returns True if a problem is found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:143,Testability,Assert,Assert,143,"/// Validate any DPMarkers / DPValues attached to instructions in this block,; /// and block-level stored data too (TrailingDPValues).; /// \p Assert Should this method fire an assertion if a problem is found?; /// \p Msg Should this method print a message to errs() if a problem is found?; /// \p OS Output stream to write errors to.; /// \returns True if a problem is found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:177,Testability,assert,assertion,177,"/// Validate any DPMarkers / DPValues attached to instructions in this block,; /// and block-level stored data too (TrailingDPValues).; /// \p Assert Should this method fire an assertion if a problem is found?; /// \p Msg Should this method print a message to errs() if a problem is found?; /// \p OS Output stream to write errors to.; /// \returns True if a problem is found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:207,Deployability,patch,patching-up,207,"/// In rare circumstances instructions can be speculatively removed from; /// blocks, and then be re-inserted back into that position later. When this; /// happens in RemoveDIs debug-info mode, some special patching-up needs to; /// occur: inserting into the middle of a sequence of dbg.value intrinsics; /// does not have an equivalent with DPValues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:36,Security,access,access,36,// These functions and classes need access to the instruction list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:51,Availability,mainten,maintenence,51,// Friendly methods that need to access us for the maintenence of; // debug-info attachments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:33,Security,access,access,33,// Friendly methods that need to access us for the maintenence of; // debug-info attachments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:47,Deployability,Install,Installed,47,/// Iterator returning form of getFirstNonPHI. Installed as a placeholder for; /// the RemoveDIs project that will eventually remove debug intrinsics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:41,Availability,fault,faulty,41,/// Returns the first potential AsynchEH faulty instruction; /// currently it checks for loads/stores (which may dereference a null; /// pointer) and calls/invokes (which may propagate exceptions),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:89,Performance,load,loads,89,/// Returns the first potential AsynchEH faulty instruction; /// currently it checks for loads/stores (which may dereference a null; /// pointer) and calls/invokes (which may propagate exceptions),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:39,Modifiability,variab,variables,39,"// Allow default construction to build variables, but this doesn't build; // a useful iterator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:36,Availability,mainten,maintenence,36,"/// Perform any debug-info specific maintenence for the given splice; /// activity. In the DPValue debug-info representation, debug-info is not; /// in instructions, and so it does not automatically move from one block; /// to another.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:4,Performance,Perform,Perform,4,"/// Perform any debug-info specific maintenence for the given splice; /// activity. In the DPValue debug-info representation, debug-info is not; /// in instructions, and so it does not automatically move from one block; /// to another.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:4,Deployability,Update,Update,4,"/// Update PHI nodes in this BasicBlock before removal of predecessor \p Pred.; /// Note that this function does not actually remove the predecessor.; ///; /// If \p KeepOneInputPHIs is true then don't remove PHIs that are left with; /// zero or one incoming values, and don't simplify PHIs with all incoming; /// values the same.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:277,Usability,simpl,simplify,277,"/// Update PHI nodes in this BasicBlock before removal of predecessor \p Pred.; /// Note that this function does not actually remove the predecessor.; ///; /// If \p KeepOneInputPHIs is true then don't remove PHIs that are left with; /// zero or one incoming values, and don't simplify PHIs with all incoming; /// values the same.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:4,Deployability,Update,Update,4,/// Update all phi nodes in this basic block to refer to basic block \p New; /// instead of basic block \p Old.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:4,Deployability,Update,Update,4,/// Update all phi nodes in this basic block's successors to refer to basic; /// block \p New instead of basic block \p Old.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:4,Deployability,Update,Update,4,/// Update all phi nodes in this basic block's successors to refer to basic; /// block \p New instead of to it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:425,Security,validat,validated,425,"/// Asserts that instruction order numbers are marked invalid, or that they; /// are in ascending order. This is constant time if the ordering is invalid,; /// and linear in the number of instructions if the ordering is valid. Callers; /// should be careful not to call this in ways that make common operations; /// O(n^2). For example, it takes O(n) time to assign order numbers to; /// instructions, so the order should be validated no more than once after; /// each ordering to ensure that transforms have the same algorithmic; /// complexity when asserts are enabled as when they are disabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:4,Testability,Assert,Asserts,4,"/// Asserts that instruction order numbers are marked invalid, or that they; /// are in ascending order. This is constant time if the ordering is invalid,; /// and linear in the number of instructions if the ordering is valid. Callers; /// should be careful not to call this in ways that make common operations; /// O(n^2). For example, it takes O(n) time to assign order numbers to; /// instructions, so the order should be validated no more than once after; /// each ordering to ensure that transforms have the same algorithmic; /// complexity when asserts are enabled as when they are disabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:551,Testability,assert,asserts,551,"/// Asserts that instruction order numbers are marked invalid, or that they; /// are in ascending order. This is constant time if the ordering is invalid,; /// and linear in the number of instructions if the ordering is valid. Callers; /// should be careful not to call this in ways that make common operations; /// O(n^2). For example, it takes O(n) time to assign order numbers to; /// instructions, so the order should be validated no more than once after; /// each ordering to ensure that transforms have the same algorithmic; /// complexity when asserts are enabled as when they are disabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:4,Safety,Safe,Safely,4,/// Safely reinterpret the subclass data bits to a more useful form.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:7,Deployability,release,release,7,"/// In release builds, this is a no-op. For !NDEBUG builds, the checks are; /// implemented in the .cpp file to avoid circular header deps.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:112,Safety,avoid,avoid,112,"/// In release builds, this is a no-op. For !NDEBUG builds, the checks are; /// implemented in the .cpp file to avoid circular header deps.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BuiltinGCs.h:121,Modifiability,plugin,plugins,121,/// FIXME: Collector instances are not useful on their own. These no longer; /// serve any purpose except to link in the plugins.; /// Ensure the definition of the builtin GCs gets linked in,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/BuiltinGCs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BuiltinGCs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:196,Availability,toler,tolerate,196,"/// The default llvm calling convention, compatible with C. This convention; /// is the only one that supports varargs calls. As with typical C calling; /// conventions, the callee/caller have to tolerate certain amounts of; /// prototype mismatch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:43,Energy Efficiency,efficient,efficient,43,"/// Attempts to make code in the caller as efficient as possible under the; /// assumption that the call is not commonly executed. As such, these calls; /// often preserve all registers so that the call does not break any live; /// ranges in the caller side.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:21,Performance,Perform,Performance,21,/// Used by the High-Performance Erlang Compiler (HiPE).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:136,Deployability,patch,patchpoint,136,"/// OBSOLETED - Used for stack based JavaScript calls; // WebKit_JS = 12,; /// Used for dynamic register based calls (e.g. stackmap and patchpoint; /// intrinsics).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:13,Security,access,access,13,/// Used for access functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:85,Performance,optimiz,optimization,85,/// Attemps to make calls as fast as possible while guaranteeing that tail; /// call optimization can always be performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:112,Performance,perform,performed,112,/// Attemps to make calls as fast as possible while guaranteeing that tail; /// call optimization can always be performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:30,Integrability,rout,routines,30,/// Used for MSP430 interrupt routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:286,Modifiability,Variab,Variable,286,"/// Used for SPIR non-kernel device functions. No lowering or expansion of; /// arguments. Structures are passed as a pointer to a struct with the; /// byval attribute. Functions can only call SPIR_FUNC and SPIR_KERNEL; /// functions. Functions can only have zero or one return values. Variable; /// arguments are not allowed, except for printf. How arguments/return; /// values are lowered are not specified. Functions are only visible to the; /// devices.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:36,Modifiability,Inherit,Inherits,36,"/// Used for SPIR kernel functions. Inherits the restrictions of SPIR_FUNC,; /// except it cannot have non-void return values, it cannot have variable; /// arguments, it can also be called by the host or it is externally; /// visible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:142,Modifiability,variab,variable,142,"/// Used for SPIR kernel functions. Inherits the restrictions of SPIR_FUNC,; /// except it cannot have non-void return values, it cannot have variable; /// arguments, it can also be called by the host or it is externally; /// visible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:178,Availability,error,error,178,"/// x86 hardware interrupt context. Callee may take one or two parameters,; /// where the 1st represents a pointer to hardware context frame and the 2nd; /// represents hardware error code, the presence of the later depends on the; /// interrupt vector taken. Valid for both 32- and 64-bit subtargets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:216,Integrability,depend,depends,216,"/// x86 hardware interrupt context. Callee may take one or two parameters,; /// where the 1st represents a pointer to hardware context frame and the 2nd; /// represents hardware error code, the presence of the later depends on the; /// interrupt vector taken. Valid for both 32- and 64-bit subtargets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:27,Integrability,rout,routines,27,/// Used for AVR interrupt routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:24,Integrability,rout,routines,24,/// Used for AVR signal routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:56,Performance,optimiz,optimized,56,"/// Used for special AVR rtlib functions which have an ""optimized""; /// convention to preserve registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:61,Performance,optimiz,optimization,61,/// Register calling convention used for parameters transfer optimization,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:59,Performance,optimiz,optimized,59,"/// Used for special MSP430 rtlib functions which have an ""optimized""; /// convention using additional registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:28,Integrability,rout,routines,28,/// Used for M68k interrupt routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CFG.h:32,Security,access,access,32,/// Proxy object to allow write access in operator[],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CFG.h:20,Integrability,interface,interface,20,/// This is used to interface between code that wants to; /// operate on terminator instructions directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/CFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Comdat.h:25,Performance,perform,performed,25,///< No deduplication is performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Comdat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Comdat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Comdat.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Comdat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Comdat.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h:266,Modifiability,variab,variables,266,"/// This is an important base class in LLVM. It provides the common facilities; /// of all constant values in an LLVM program. A constant is a value that is; /// immutable at runtime. Functions are constants because their address is; /// immutable. Same with global variables.; ///; /// All constants share the capabilities provided in this class. All constants; /// can have a null value. They can have an operand list. Constants can be; /// simple (integer and floating point values), complex (arrays and structures),; /// or expression based (computations yielding a constant value composed of; /// only certain operators and other constant values).; ///; /// Note that Constants are immutable (once created they never change); /// and are fully shared by structural equivalence. This means that two; /// structurally equivalent constants will always have the same address.; /// Constants are created on demand as needed and never deleted: thus clients; /// don't have to worry about the lifetime of the objects.; /// LLVM Constant Representation",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h:443,Usability,simpl,simple,443,"/// This is an important base class in LLVM. It provides the common facilities; /// of all constant values in an LLVM program. A constant is a value that is; /// immutable at runtime. Functions are constants because their address is; /// immutable. Same with global variables.; ///; /// All constants share the capabilities provided in this class. All constants; /// can have a null value. They can have an operand list. Constants can be; /// simple (integer and floating point values), complex (arrays and structures),; /// or expression based (computations yielding a constant value composed of; /// only certain operators and other constant values).; ///; /// Note that Constants are immutable (once created they never change); /// and are fully shared by structural equivalence. This means that two; /// structurally equivalent constants will always have the same address.; /// Constants are created on demand as needed and never deleted: thus clients; /// don't have to worry about the lifetime of the objects.; /// LLVM Constant Representation",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h:130,Performance,scalab,scalable,130,"/// Return true if this is a vector constant that includes any undef or; /// poison elements. Since it is impossible to inspect a scalable vector; /// element- wise at compile time, this function returns true only if the; /// entire vector is undef or poison.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h:32,Integrability,depend,dependent,32,/// Return true if the value is dependent on a dllimport variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h:57,Modifiability,variab,variable,57,/// Return true if the value is dependent on a dllimport variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h:287,Availability,avail,available,287,/// Called if some element of this constant is no longer valid.; /// At this point only other constants may be on the use_list for this; /// constant. Any constants on our Use list must also be destroy'd. The; /// implementation must be sure to remove the constant from the list of; /// available cached constants. Implementations should implement; /// destroyConstantImpl to remove constants from any pools/maps they are; /// contained it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h:297,Performance,cache,cached,297,/// Called if some element of this constant is no longer valid.; /// At this point only other constants may be on the use_list for this; /// constant. Any constants on our Use list must also be destroy'd. The; /// implementation must be sure to remove the constant from the list of; /// available cached constants. Implementations should implement; /// destroyConstantImpl to remove constants from any pools/maps they are; /// contained it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h:61,Usability,simpl,simple,61,"/// This constant requires no relocations. That is, it holds simple; /// constants (like integrals).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantFold.h:56,Integrability,Interface,Interface,56,"//==-- ConstantFold.h - DL-independent Constant Folding Interface -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the DataLayout-independent constant folding interface.; // When possible, the DataLayout-aware constant folding interface in; // Analysis/ConstantFolding.h should be preferred.; //; // These interfaces are used by the ConstantExpr::get* methods to automatically; // fold constants when possible.; //; // These operators may return a null object if they don't know how to perform; // the specified operation on the specified constant types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantFold.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantFold.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantFold.h:445,Integrability,interface,interface,445,"//==-- ConstantFold.h - DL-independent Constant Folding Interface -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the DataLayout-independent constant folding interface.; // When possible, the DataLayout-aware constant folding interface in; // Analysis/ConstantFolding.h should be preferred.; //; // These interfaces are used by the ConstantExpr::get* methods to automatically; // fold constants when possible.; //; // These operators may return a null object if they don't know how to perform; // the specified operation on the specified constant types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantFold.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantFold.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantFold.h:513,Integrability,interface,interface,513,"//==-- ConstantFold.h - DL-independent Constant Folding Interface -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the DataLayout-independent constant folding interface.; // When possible, the DataLayout-aware constant folding interface in; // Analysis/ConstantFolding.h should be preferred.; //; // These interfaces are used by the ConstantExpr::get* methods to automatically; // fold constants when possible.; //; // These operators may return a null object if they don't know how to perform; // the specified operation on the specified constant types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantFold.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantFold.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantFold.h:592,Integrability,interface,interfaces,592,"//==-- ConstantFold.h - DL-independent Constant Folding Interface -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the DataLayout-independent constant folding interface.; // When possible, the DataLayout-aware constant folding interface in; // Analysis/ConstantFolding.h should be preferred.; //; // These interfaces are used by the ConstantExpr::get* methods to automatically; // fold constants when possible.; //; // These operators may return a null object if they don't know how to perform; // the specified operation on the specified constant types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantFold.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantFold.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantFold.h:772,Performance,perform,perform,772,"//==-- ConstantFold.h - DL-independent Constant Folding Interface -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the DataLayout-independent constant folding interface.; // When possible, the DataLayout-aware constant folding interface in; // Analysis/ConstantFolding.h should be preferred.; //; // These interfaces are used by the ConstantExpr::get* methods to automatically; // fold constants when possible.; //; // These operators may return a null object if they don't know how to perform; // the specified operation on the specified constant types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantFold.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantFold.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantFolder.h:620,Integrability,rout,routines,620,"//===- ConstantFolder.h - Constant folding helper ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ConstantFolder class, a helper for IRBuilder.; // It provides IRBuilder with a set of methods for creating constants; // with minimal folding. For general constant creation and folding,; // use ConstantExpr and the routines in llvm/Analysis/ConstantFolding.h.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantFolder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantFolder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantFolder.h:175,Usability,simpl,simplified,175,//===--------------------------------------------------------------------===//; // Value-based folders.; //; // Return an existing value or a constant if the operation can be simplified.; // Otherwise return nullptr.; //===--------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantFolder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantFolder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:562,Integrability,wrap,wrap,562,"//===- ConstantRange.h - Represent a range ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Represent a range of possible values that may occur when the program is run; // for an integral value. This keeps track of a lower and upper bound for the; // constant, which MAY wrap around the end of the numeric range. To do this, it; // keeps track of a [lower, upper) bound, which specifies an interval just like; // STL iterators. When used with boolean values, the following are important; // ranges: :; //; // [F, F) = {} = Empty set; // [T, F) = {T}; // [F, T) = {F}; // [T, T) = {F, T} = Full set; //; // The other integral ranges use min/max values for special range values. For; // example, for 8-bit types, it uses:; // [0, 0) = {} = Empty set; // [255, 255) = {0..255} = Full Set; //; // Note that ConstantRange can be used to represent either signed or; // unsigned ranges.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:55,Testability,assert,assert,55,/// Initialize a range of values explicitly. This will assert out if; /// Lower==Upper and Lower != Min or Max value for its type. It will also; /// assert out if the two APInt's are not the same bit width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:149,Testability,assert,assert,149,/// Initialize a range of values explicitly. This will assert out if; /// Lower==Upper and Lower != Min or Max value for its type. It will also; /// assert out if the two APInt's are not the same bit width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:128,Integrability,wrap,wrap,128,/// Initialize a range based on a known bits constraint. The IsSigned flag; /// indicates whether the constant range should not wrap in the signed or; /// unsigned domain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:76,Integrability,depend,depend,76,/// Return true iff CR1 ult CR2 is equivalent to CR1 slt CR2.; /// Does not depend on strictness/direction of the predicate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:76,Integrability,depend,depend,76,/// Return true iff CR1 ult CR2 is equivalent to CR1 sge CR2.; /// Does not depend on strictness/direction of the predicate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:95,Integrability,wrap,wrap,95,"/// Produce the largest range containing all X such that ""X BinOp Y"" is; /// guaranteed not to wrap (overflow) for *all* Y in Other. However, there may; /// be *some* Y in Other for which additional X not contained in the result; /// also do not overflow.; ///; /// NoWrapKind must be one of OBO::NoUnsignedWrap or OBO::NoSignedWrap.; ///; /// Examples:; /// typedef OverflowingBinaryOperator OBO;; /// #define MGNR makeGuaranteedNoWrapRegion; /// MGNR(Add, [i8 1, 2), OBO::NoSignedWrap) == [-128, 127); /// MGNR(Add, [i8 1, 2), OBO::NoUnsignedWrap) == [0, -1); /// MGNR(Add, [i8 0, 1), OBO::NoUnsignedWrap) == Full Set; /// MGNR(Add, [i8 -1, 6), OBO::NoSignedWrap) == [INT_MIN+1, INT_MAX-4); /// MGNR(Sub, [i8 1, 2), OBO::NoSignedWrap) == [-127, 128); /// MGNR(Sub, [i8 1, 2), OBO::NoUnsignedWrap) == [1, 0)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:83,Integrability,wrap,wrap,83,"/// Produce the range that contains X if and only if ""X BinOp Other"" does; /// not wrap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:28,Integrability,wrap,wraps,28,"/// Return true if this set wraps around the unsigned domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, 0) == [X, Max]: Not wrapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:99,Integrability,wrap,wrapped,99,"/// Return true if this set wraps around the unsigned domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, 0) == [X, Max]: Not wrapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:129,Integrability,wrap,wrapped,129,"/// Return true if this set wraps around the unsigned domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, 0) == [X, Max]: Not wrapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:169,Integrability,wrap,wrapped,169,"/// Return true if this set wraps around the unsigned domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, 0) == [X, Max]: Not wrapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:45,Integrability,wrap,wraps,45,"/// Return true if the exclusive upper bound wraps around the unsigned; /// domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, 0): Wrapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:121,Integrability,wrap,wrapped,121,"/// Return true if the exclusive upper bound wraps around the unsigned; /// domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, 0): Wrapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:151,Integrability,wrap,wrapped,151,"/// Return true if the exclusive upper bound wraps around the unsigned; /// domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, 0): Wrapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:175,Integrability,Wrap,Wrapped,175,"/// Return true if the exclusive upper bound wraps around the unsigned; /// domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, 0): Wrapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:28,Integrability,wrap,wraps,28,"/// Return true if this set wraps around the signed domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, SignedMin) == [X, SignedMax]: Not wrapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:97,Integrability,wrap,wrapped,97,"/// Return true if this set wraps around the signed domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, SignedMin) == [X, SignedMax]: Not wrapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:127,Integrability,wrap,wrapped,127,"/// Return true if this set wraps around the signed domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, SignedMin) == [X, SignedMax]: Not wrapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:181,Integrability,wrap,wrapped,181,"/// Return true if this set wraps around the signed domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, SignedMin) == [X, SignedMax]: Not wrapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:47,Integrability,wrap,wraps,47,"/// Return true if the (exclusive) upper bound wraps around the signed; /// domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, SignedMin): Wrapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:121,Integrability,wrap,wrapped,121,"/// Return true if the (exclusive) upper bound wraps around the signed; /// domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, SignedMin): Wrapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:151,Integrability,wrap,wrapped,151,"/// Return true if the (exclusive) upper bound wraps around the signed; /// domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, SignedMin): Wrapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:183,Integrability,Wrap,Wrapped,183,"/// Return true if the (exclusive) upper bound wraps around the signed; /// domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, SignedMin): Wrapped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:271,Integrability,depend,depending,271,"/// If represented precisely, the result of some range operations may consist; /// of multiple disjoint ranges. As only a single range may be returned, any; /// range covering these disjoint ranges constitutes a valid result, but some; /// may be more useful than others depending on context. The preferred range; /// type specifies whether a range that is non-wrapping in the unsigned or; /// signed domain, or has the smallest size, is preferred. If a signedness is; /// preferred but all ranges are non-wrapping or all wrapping, then the; /// smallest set size is preferred. If there are multiple smallest sets, any; /// one of them may be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:361,Integrability,wrap,wrapping,361,"/// If represented precisely, the result of some range operations may consist; /// of multiple disjoint ranges. As only a single range may be returned, any; /// range covering these disjoint ranges constitutes a valid result, but some; /// may be more useful than others depending on context. The preferred range; /// type specifies whether a range that is non-wrapping in the unsigned or; /// signed domain, or has the smallest size, is preferred. If a signedness is; /// preferred but all ranges are non-wrapping or all wrapping, then the; /// smallest set size is preferred. If there are multiple smallest sets, any; /// one of them may be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:506,Integrability,wrap,wrapping,506,"/// If represented precisely, the result of some range operations may consist; /// of multiple disjoint ranges. As only a single range may be returned, any; /// range covering these disjoint ranges constitutes a valid result, but some; /// may be more useful than others depending on context. The preferred range; /// type specifies whether a range that is non-wrapping in the unsigned or; /// signed domain, or has the smallest size, is preferred. If a signedness is; /// preferred but all ranges are non-wrapping or all wrapping, then the; /// smallest set size is preferred. If there are multiple smallest sets, any; /// one of them may be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:522,Integrability,wrap,wrapping,522,"/// If represented precisely, the result of some range operations may consist; /// of multiple disjoint ranges. As only a single range may be returned, any; /// range covering these disjoint ranges constitutes a valid result, but some; /// may be more useful than others depending on context. The preferred range; /// type specifies whether a range that is non-wrapping in the unsigned or; /// signed domain, or has the smallest size, is preferred. If a signedness is; /// preferred but all ranges are non-wrapping or all wrapping, then the; /// smallest set size is preferred. If there are multiple smallest sets, any; /// one of them may be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:223,Modifiability,extend,extended,223,"/// Return a new range in the specified integer type, which must; /// be strictly larger than the current type. The returned range will; /// correspond to the possible range of values if the source range had been; /// zero extended to BitWidth.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:223,Modifiability,extend,extended,223,"/// Return a new range in the specified integer type, which must; /// be strictly larger than the current type. The returned range will; /// correspond to the possible range of values if the source range had been; /// sign extended to BitWidth.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:84,Modifiability,extend,extended,84,"/// Make this range have the bit width given by \p BitWidth. The; /// value is zero extended, truncated, or left alone to make it that width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:84,Modifiability,extend,extended,84,"/// Make this range have the bit width given by \p BitWidth. The; /// value is sign extended, truncated, or left alone to make it that width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:257,Integrability,wrap,wrapping,257,/// Return a new range representing the possible values resulting; /// from an application of the specified overflowing binary operator to a; /// left hand side of this range and a right hand side of \p Other given; /// the provided knowledge about lack of wrapping \p NoWrapKind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:93,Integrability,wrap,wrap,93,"/// Return a new range representing the possible values resulting; /// from an addition with wrap type \p NoWrapKind of a value in this; /// range and a value in \p Other.; /// If the result range is disjoint, the preferred range is determined by the; /// \p PreferredRangeType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:96,Integrability,wrap,wrap,96,"/// Return a new range representing the possible values resulting; /// from an subtraction with wrap type \p NoWrapKind of a value in this; /// range and a value in \p Other.; /// If the result range is disjoint, the preferred range is determined by the; /// \p PreferredRangeType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:78,Testability,log,logical,78,/// Return a new range representing the possible values resulting from a; /// logical right shift of a value in this range and a value in \p Other.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:4,Performance,Perform,Perform,4,/// Perform an unsigned saturating addition of two constant ranges.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:4,Performance,Perform,Perform,4,/// Perform a signed saturating addition of two constant ranges.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:4,Performance,Perform,Perform,4,/// Perform an unsigned saturating subtraction of two constant ranges.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:4,Performance,Perform,Perform,4,/// Perform a signed saturating subtraction of two constant ranges.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:4,Performance,Perform,Perform,4,/// Perform an unsigned saturating multiplication of two constant ranges.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:4,Performance,Perform,Perform,4,/// Perform a signed saturating multiplication of two constant ranges.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:4,Performance,Perform,Perform,4,/// Perform an unsigned saturating left shift of this constant range by a; /// value in \p Other.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:4,Performance,Perform,Perform,4,/// Perform a signed saturating left shift of this constant range by a; /// value in \p Other.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:35,Testability,log,logical,35,/// Return a new range that is the logical not of the current set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:145,Modifiability,extend,extended,145,"/// Return a ConstantInt with the specified integer value for the specified; /// type. If the type is wider than 64 bits, the value will be zero-extended; /// to fit the type, unless IsSigned is true, in which case the value will; /// be interpreted as a 64-bit signed integer and sign-extended to fit; /// the type.; /// Get a ConstantInt for a specific value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:286,Modifiability,extend,extended,286,"/// Return a ConstantInt with the specified integer value for the specified; /// type. If the type is wider than 64 bits, the value will be zero-extended; /// to fit the type, unless IsSigned is true, in which case the value will; /// be interpreted as a 64-bit signed integer and sign-extended to fit; /// the type.; /// Get a ConstantInt for a specific value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:137,Security,Access,Accessing,137,/// Return a ConstantInt with the specified value for the specified type. The; /// value V will be canonicalized to a an unsigned APInt. Accessing it with; /// either getSExtValue() or getZExtValue() will yield a correctly sized and; /// signed value for the type Ty.; /// Get a ConstantInt for a specific signed value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:87,Modifiability,extend,extended,87,/// Return the constant as a 64-bit unsigned integer value after it; /// has been zero extended as appropriate for the type of this constant. Note; /// that this method can assert if the value does not fit in 64 bits.; /// Return the zero extended value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:239,Modifiability,extend,extended,239,/// Return the constant as a 64-bit unsigned integer value after it; /// has been zero extended as appropriate for the type of this constant. Note; /// that this method can assert if the value does not fit in 64 bits.; /// Return the zero extended value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:173,Testability,assert,assert,173,/// Return the constant as a 64-bit unsigned integer value after it; /// has been zero extended as appropriate for the type of this constant. Note; /// that this method can assert if the value does not fit in 64 bits.; /// Return the zero extended value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:78,Modifiability,extend,extended,78,/// Return the constant as a 64-bit integer value after it has been sign; /// extended as appropriate for the type of this constant. Note that; /// this method can assert if the value does not fit in 64 bits.; /// Return the sign extended value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:230,Modifiability,extend,extended,230,/// Return the constant as a 64-bit integer value after it has been sign; /// extended as appropriate for the type of this constant. Note that; /// this method can assert if the value does not fit in 64 bits.; /// Return the sign extended value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:164,Testability,assert,assert,164,/// Return the constant as a 64-bit integer value after it has been sign; /// extended as appropriate for the type of this constant. Note that; /// this method can assert if the value does not fit in 64 bits.; /// Return the sign extended value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:140,Energy Efficiency,power,power,140,/// Return the constant as an llvm::MaybeAlign.; /// Note that this method can assert if the value does not fit in 64 bits or; /// is not a power of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:79,Testability,assert,assert,79,/// Return the constant as an llvm::MaybeAlign.; /// Note that this method can assert if the value does not fit in 64 bits or; /// is not a power of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:167,Energy Efficiency,power,power,167,"/// Return the constant as an llvm::Align, interpreting `0` as `Align(1)`.; /// Note that this method can assert if the value does not fit in 64 bits or; /// is not a power of two.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:106,Testability,assert,assert,106,"/// Return the constant as an llvm::Align, interpreting `0` as `Align(1)`.; /// Note that this method can assert if the value does not fit in 64 bits or; /// is not a power of two.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:80,Energy Efficiency,reduce,reduces,80,"/// Variant of the getType() method to always return an IntegerType, which; /// reduces the amount of casting needed in parts of the compiler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:116,Safety,avoid,avoid,116,"/// This static method returns true if the type Ty is big enough to; /// represent the value V. This can be used to avoid having the get method; /// assert when V is larger than Ty can represent. Note that there are two; /// versions of this method, one for unsigned and one for signed integers.; /// Although ConstantInt canonicalizes everything to an unsigned integer,; /// the signed version avoids callers having to convert a signed quantity; /// to the appropriate unsigned type before calling the method.; /// @returns true if V is a valid value for type Ty; /// Determine if the value is in range for the given type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:395,Safety,avoid,avoids,395,"/// This static method returns true if the type Ty is big enough to; /// represent the value V. This can be used to avoid having the get method; /// assert when V is larger than Ty can represent. Note that there are two; /// versions of this method, one for unsigned and one for signed integers.; /// Although ConstantInt canonicalizes everything to an unsigned integer,; /// the signed version avoids callers having to convert a signed quantity; /// to the appropriate unsigned type before calling the method.; /// @returns true if V is a valid value for type Ty; /// Determine if the value is in range for the given type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:149,Testability,assert,assert,149,"/// This static method returns true if the type Ty is big enough to; /// represent the value V. This can be used to avoid having the get method; /// assert when V is larger than Ty can represent. Note that there are two; /// versions of this method, one for unsigned and one for signed integers.; /// Although ConstantInt canonicalizes everything to an unsigned integer,; /// the signed version avoids callers having to convert a signed quantity; /// to the appropriate unsigned type before calling the method.; /// @returns true if V is a valid value for type Ty; /// Determine if the value is in range for the given type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:108,Performance,perform,performs,108,/// This is just a convenience method to make client code smaller for a; /// common code. It also correctly performs the comparison without the; /// potential for an assertion from getZExtValue().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:166,Testability,assert,assertion,166,/// This is just a convenience method to make client code smaller for a; /// common code. It also correctly performs the comparison without the; /// potential for an assertion from getZExtValue().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:108,Performance,perform,performs,108,/// This is just a convenience method to make client code smaller for a; /// common case. It also correctly performs the comparison without the; /// potential for an assertion from getZExtValue().; /// Determine if the value is one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:166,Testability,assert,assertion,166,/// This is just a convenience method to make client code smaller for a; /// common case. It also correctly performs the comparison without the; /// potential for an assertion from getZExtValue().; /// Determine if the value is one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:165,Usability,simpl,simple,165,"/// This returns a ConstantFP, or a vector containing a splat of a ConstantFP,; /// for the specified value in the specified type. This should only be used; /// for simple constant values like 2.0/1.0 etc, that are known-valid both as; /// host double and as the target format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:102,Usability,clear,clearly,102,"/// We don't rely on operator== working on double values, as it returns true; /// for things that are clearly not equal, like -0.0 and 0.0.; /// As such, this method can be used to do an exact bit-for-bit comparison of; /// two floating point values. The version with a double operand is retained; /// because it's so convenient to write isExactlyValue(2.0), but please use; /// it only for simple constants.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:391,Usability,simpl,simple,391,"/// We don't rely on operator== working on double values, as it returns true; /// for things that are clearly not equal, like -0.0 and 0.0.; /// As such, this method can be used to do an exact bit-for-bit comparison of; /// two floating point values. The version with a double operand is retained; /// because it's so convenient to write isExactlyValue(2.0), but please use; /// it only for simple constants.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:31,Energy Efficiency,efficient,efficient,31,/// Transparently provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:17,Security,access,accessors,17,// ConstantArray accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:78,Energy Efficiency,reduce,reduces,78,"/// Specialize the getType() method to always return an ArrayType,; /// which reduces the amount of casting needed in parts of the compiler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:18,Security,access,accessors,18,// ConstantStruct accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:21,Energy Efficiency,reduce,reduce,21,/// Specialization - reduce amount of casting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:18,Security,access,accessors,18,// ConstantVector accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:83,Energy Efficiency,reduce,reduces,83,"/// Specialize the getType() method to always return a FixedVectorType,; /// which reduces the amount of casting needed in parts of the compiler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:80,Energy Efficiency,reduce,reduces,80,"/// Specialize the getType() method to always return an PointerType,; /// which reduces the amount of casting needed in parts of the compiler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:167,Usability,simpl,simple,167,"//===----------------------------------------------------------------------===//; /// ConstantDataSequential - A vector or array constant whose element type is a; /// simple 1/2/4/8-byte integer or half/bfloat/float/double, and whose elements; /// are just simple data values (i.e. ConstantInt/ConstantFP). This Constant; /// node has no operands because it stores all of the elements of the constant; /// as densely packed data, instead of as Value*'s.; ///; /// This is the common base class of ConstantDataArray and ConstantDataVector.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:257,Usability,simpl,simple,257,"//===----------------------------------------------------------------------===//; /// ConstantDataSequential - A vector or array constant whose element type is a; /// simple 1/2/4/8-byte integer or half/bfloat/float/double, and whose elements; /// are just simple data values (i.e. ConstantInt/ConstantFP). This Constant; /// node has no operands because it stores all of the elements of the constant; /// as densely packed data, instead of as Value*'s.; ///; /// This is the common base class of ConstantDataArray and ConstantDataVector.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:136,Energy Efficiency,efficient,efficient,136,"/// Return a Constant for a specified index's element.; /// Note that this has to compute a new constant to return, so it isn't as; /// efficient as getElementAsInteger/Float/Double.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:103,Testability,assert,asserts,103,"/// If this array is isString(), then this method returns the array as a; /// StringRef. Otherwise, it asserts out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:137,Testability,assert,asserts,137,"/// If this array is isCString(), then this method returns the array (without; /// the trailing null byte) as a StringRef. Otherwise, it asserts out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:121,Security,expose,exposes,121,"/// Return the raw, underlying, bytes of this data. Note that this is an; /// extremely tricky thing to work with, as it exposes the host endianness of; /// the data elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:128,Usability,simpl,simple,128,"//===----------------------------------------------------------------------===//; /// An array constant whose element type is a simple 1/2/4/8-byte integer or; /// float/double, and whose elements are just simple data values; /// (i.e. ConstantInt/ConstantFP). This Constant node has no operands because it; /// stores all of the elements of the constant as densely packed data, instead; /// of as Value*'s.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:206,Usability,simpl,simple,206,"//===----------------------------------------------------------------------===//; /// An array constant whose element type is a simple 1/2/4/8-byte integer or; /// float/double, and whose elements are just simple data values; /// (i.e. ConstantInt/ConstantFP). This Constant node has no operands because it; /// stores all of the elements of the constant as densely packed data, instead; /// of as Value*'s.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:78,Energy Efficiency,reduce,reduces,78,"/// Specialize the getType() method to always return an ArrayType,; /// which reduces the amount of casting needed in parts of the compiler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:128,Usability,simpl,simple,128,"//===----------------------------------------------------------------------===//; /// A vector constant whose element type is a simple 1/2/4/8-byte integer or; /// float/double, and whose elements are just simple data values; /// (i.e. ConstantInt/ConstantFP). This Constant node has no operands because it; /// stores all of the elements of the constant as densely packed data, instead; /// of as Value*'s.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:206,Usability,simpl,simple,206,"//===----------------------------------------------------------------------===//; /// A vector constant whose element type is a simple 1/2/4/8-byte integer or; /// float/double, and whose elements are just simple data values; /// (i.e. ConstantInt/ConstantFP). This Constant node has no operands because it; /// stores all of the elements of the constant as densely packed data, instead; /// of as Value*'s.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:3,Performance,Cache,Cache,3,// Cache whether or not the constant is a splat.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:83,Energy Efficiency,reduce,reduces,83,"/// Specialize the getType() method to always return a FixedVectorType,; /// which reduces the amount of casting needed in parts of the compiler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:82,Energy Efficiency,reduce,reduces,82,"/// Specialize the getType() method to always return an TargetExtType,; /// which reduces the amount of casting needed in parts of the compiler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:31,Energy Efficiency,efficient,efficient,31,/// Transparently provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:4,Integrability,Wrap,Wrapper,4,"/// Wrapper for a function that represents a value that; /// functionally represents the original function. This can be a function,; /// global alias to a function, or an ifunc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:31,Energy Efficiency,efficient,efficient,31,/// Transparently provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for a value that won't be replaced with a CFI jump table; /// pointer in LowerTypeTestsModule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:31,Energy Efficiency,efficient,efficient,31,/// Transparently provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:246,Usability,simpl,simpler,246,"// Static methods to construct a ConstantExpr of different kinds. Note that; // these methods may return a object that is not an instance of the; // ConstantExpr class, because they will attempt to fold the constant; // expression into something simpler if possible.; /// getAlignOf constant expr - computes the alignment of a type in a target; /// independent way (Note: the return type is an i64).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:49,Energy Efficiency,power,powers,49,"/// If C is a scalar/fixed width vector of known powers of 2, then this; /// function returns a new scalar/fixed width vector obtained from logBase2; /// of C. Undef vector elements are set to zero.; /// Return a null pointer otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:31,Energy Efficiency,efficient,efficient,31,/// Transparently provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:57,Integrability,depend,depending,57,/// Create a BitCast or AddrSpaceCast for a pointer type depending on; /// the address space.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:44,Safety,avoid,avoid,44,// This form of the function only exists to avoid ambiguous overload; // warnings about whether to convert Idx to ArrayRef<Constant *> or; // ArrayRef<Value *>.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:44,Safety,avoid,avoid,44,// This form of the function only exists to avoid ambiguous overload; // warnings about whether to convert Idx to ArrayRef<Constant *> or; // ArrayRef<Value *>.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:45,Testability,Assert,Assert,45,/// Return the ICMP or FCMP predicate value. Assert if this is not an ICMP or; /// FCMP constant expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:55,Availability,mask,mask,55,/// Assert that this is a shufflevector and return the mask. See class; /// ShuffleVectorInst for a description of the mask representation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:119,Availability,mask,mask,119,/// Assert that this is a shufflevector and return the mask. See class; /// ShuffleVectorInst for a description of the mask representation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:4,Testability,Assert,Assert,4,/// Assert that this is a shufflevector and return the mask. See class; /// ShuffleVectorInst for a description of the mask representation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:55,Availability,mask,mask,55,/// Assert that this is a shufflevector and return the mask.; ///; /// TODO: This is a temporary hack until we update the bitcode format for; /// shufflevector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:111,Deployability,update,update,111,/// Assert that this is a shufflevector and return the mask.; ///; /// TODO: This is a temporary hack until we update the bitcode format for; /// shufflevector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:4,Testability,Assert,Assert,4,/// Assert that this is a shufflevector and return the mask.; ///; /// TODO: This is a temporary hack until we update the bitcode format for; /// shufflevector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:213,Modifiability,variab,variable,213,"//===----------------------------------------------------------------------===//; /// 'undef' values are things that do not have specified contents.; /// These are used for a variety of purposes, including global variable; /// initializers and operands to instructions. 'undef' values can occur with; /// any first-class type.; ///; /// Undef values aren't exactly constants; if they have multiple uses, they; /// can appear to have different bit patterns at each use. See; /// LangRef.html#undefvalues for details.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:506,Performance,cache,cache,506,"//===- llvm/DataLayout.h - Data size & alignment info -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines layout properties related to datatype size/offset/alignment; // information. It uses lazy annotations to cache information about how; // structure types are laid out and used.; //; // This structure should be created once, filled in if the defaults are not; // correct and then passed around by const&. None of the members functions; // require modification to the object.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:49,Safety,avoid,avoid,49,"// This needs to be outside of the namespace, to avoid conflict with llvm-c; // decl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:156,Availability,down,down,156,"// FIXME: Currently the DataLayout string carries a ""preferred alignment""; // for types. As the DataLayout is module/global, this should likely be; // sunk down to an FTTI element that is queried rather than a global; // preference.; /// Layout alignment element.; ///; /// Stores the alignment data associated with a given type bit width.; ///; /// \note The unusual order of elements in the structure attempts to reduce; /// padding and make the structure slightly more cache friendly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:415,Energy Efficiency,reduce,reduce,415,"// FIXME: Currently the DataLayout string carries a ""preferred alignment""; // for types. As the DataLayout is module/global, this should likely be; // sunk down to an FTTI element that is queried rather than a global; // preference.; /// Layout alignment element.; ///; /// Stores the alignment data associated with a given type bit width.; ///; /// \note The unusual order of elements in the structure attempts to reduce; /// padding and make the structure slightly more cache friendly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:472,Performance,cache,cache,472,"// FIXME: Currently the DataLayout string carries a ""preferred alignment""; // for types. As the DataLayout is module/global, this should likely be; // sunk down to an FTTI element that is queried rather than a global; // preference.; /// Layout alignment element.; ///; /// Stores the alignment data associated with a given type bit width.; ///; /// \note The unusual order of elements in the structure attempts to reduce; /// padding and make the structure slightly more cache friendly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:200,Energy Efficiency,reduce,reduce,200,/// Layout pointer alignment element.; ///; /// Stores the alignment data associated with a given pointer and address space.; ///; /// \note The unusual order of elements in the structure attempts to reduce; /// padding and make the structure slightly more cache friendly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:257,Performance,cache,cache,257,/// Layout pointer alignment element.; ///; /// Stores the alignment data associated with a given pointer and address space.; ///; /// \note The unusual order of elements in the structure attempts to reduce; /// padding and make the structure slightly more cache friendly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:64,Availability,error,error,64,/// Attempts to set the alignment of the given type. Returns an error; /// description on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:90,Availability,failure,failure,90,/// Attempts to set the alignment of the given type. Returns an error; /// description on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:91,Availability,error,error,91,/// Attempts to set the alignment of a pointer in the given address space.; /// Returns an error description on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:112,Availability,failure,failure,112,/// Attempts to set the alignment of a pointer in the given address space.; /// Returns an error description on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:72,Availability,error,error,72,/// Attempts to parse a target data specification string and reports an error; /// if the string is malformed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:64,Availability,error,error,64,/// Parse a data layout string and return the layout. Return an error; /// description on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:90,Availability,failure,failure,90,/// Parse a data layout string and return the layout. Return an error; /// description on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:4,Testability,Test,Test,4,/// Test if the DataLayout was constructed from an empty string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:141,Deployability,update,updated,141,/// Return target's alignment for stack-based pointers; /// FIXME: The defaults need to be removed once all of; /// the backends/clients are updated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:164,Deployability,update,updated,164,"/// Layout pointer size in bytes, rounded up to a whole; /// number of bytes.; /// FIXME: The defaults need to be removed once all of; /// the backends/clients are updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:119,Deployability,update,updated,119,"/// Layout pointer size, in bits; /// FIXME: The defaults need to be removed once all of; /// the backends/clients are updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:334,Integrability,depend,depends,334,"/// Size examples:; ///; /// Type SizeInBits StoreSizeInBits AllocSizeInBits[*]; /// ---- ---------- --------------- ---------------; /// i1 1 8 8; /// i8 8 8 8; /// i19 19 24 32; /// i32 32 32 32; /// i100 100 104 128; /// i128 128 128 128; /// Float 32 32 32; /// Double 64 64 64; /// X86_FP80 80 80 96; ///; /// [*] The alloc size depends on the alignment, and thus on the target.; /// These values are for x86-32 linux.; /// Returns the number of bits necessary to hold the specified type.; ///; /// If Ty is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// For example, returns 36 for i36 and 80 for x86_fp80. The type passed must; /// have a size (Type::isSized() must return true).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:515,Performance,scalab,scalable,515,"/// Size examples:; ///; /// Type SizeInBits StoreSizeInBits AllocSizeInBits[*]; /// ---- ---------- --------------- ---------------; /// i1 1 8 8; /// i8 8 8 8; /// i19 19 24 32; /// i32 32 32 32; /// i100 100 104 128; /// i128 128 128 128; /// Float 32 32 32; /// Double 64 64 64; /// X86_FP80 80 80 96; ///; /// [*] The alloc size depends on the alignment, and thus on the target.; /// These values are for x86-32 linux.; /// Returns the number of bits necessary to hold the specified type.; ///; /// If Ty is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// For example, returns 36 for i36 and 80 for x86_fp80. The type passed must; /// have a size (Type::isSized() must return true).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:541,Performance,scalab,scalable,541,"/// Size examples:; ///; /// Type SizeInBits StoreSizeInBits AllocSizeInBits[*]; /// ---- ---------- --------------- ---------------; /// i1 1 8 8; /// i8 8 8 8; /// i19 19 24 32; /// i32 32 32 32; /// i100 100 104 128; /// i128 128 128 128; /// Float 32 32 32; /// Double 64 64 64; /// X86_FP80 80 80 96; ///; /// [*] The alloc size depends on the alignment, and thus on the target.; /// These values are for x86-32 linux.; /// Returns the number of bits necessary to hold the specified type.; ///; /// If Ty is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// For example, returns 36 for i36 and 80 for x86_fp80. The type passed must; /// have a size (Type::isSized() must return true).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:121,Performance,scalab,scalable,121,"/// Returns the maximum number of bytes that may be overwritten by; /// storing the specified type.; ///; /// If Ty is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// For example, returns 5 for i36 and 10 for x86_fp80.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:147,Performance,scalab,scalable,147,"/// Returns the maximum number of bytes that may be overwritten by; /// storing the specified type.; ///; /// If Ty is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// For example, returns 5 for i36 and 10 for x86_fp80.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:144,Performance,scalab,scalable,144,"/// Returns the maximum number of bits that may be overwritten by; /// storing the specified type; always a multiple of 8.; ///; /// If Ty is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// For example, returns 40 for i36 and 80 for x86_fp80.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:170,Performance,scalab,scalable,170,"/// Returns the maximum number of bits that may be overwritten by; /// storing the specified type; always a multiple of 8.; ///; /// If Ty is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// For example, returns 40 for i36 and 80 for x86_fp80.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:387,Integrability,depend,depending,387,"/// Returns the offset in bytes between successive objects of the; /// specified type, including alignment padding.; ///; /// If Ty is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// This is the amount that alloca reserves for this type. For example,; /// returns 12 or 16 for x86_fp80, depending on alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:137,Performance,scalab,scalable,137,"/// Returns the offset in bytes between successive objects of the; /// specified type, including alignment padding.; ///; /// If Ty is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// This is the amount that alloca reserves for this type. For example,; /// returns 12 or 16 for x86_fp80, depending on alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:163,Performance,scalab,scalable,163,"/// Returns the offset in bytes between successive objects of the; /// specified type, including alignment padding.; ///; /// If Ty is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// This is the amount that alloca reserves for this type. For example,; /// returns 12 or 16 for x86_fp80, depending on alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:411,Integrability,depend,depending,411,"/// Returns the offset in bits between successive objects of the; /// specified type, including alignment padding; always a multiple of 8.; ///; /// If Ty is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// This is the amount that alloca reserves for this type. For example,; /// returns 96 or 128 for x86_fp80, depending on alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:160,Performance,scalab,scalable,160,"/// Returns the offset in bits between successive objects of the; /// specified type, including alignment padding; always a multiple of 8.; ///; /// If Ty is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// This is the amount that alloca reserves for this type. For example,; /// returns 96 or 128 for x86_fp80, depending on alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:186,Performance,scalab,scalable,186,"/// Returns the offset in bits between successive objects of the; /// specified type, including alignment padding; always a multiple of 8.; ///; /// If Ty is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// This is the amount that alloca reserves for this type. For example,; /// returns 96 or 128 for x86_fp80, depending on alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:62,Deployability,update,updated,62,/// Get GEP indices to access Offset inside ElemTy. ElemTy is updated to be; /// the result element type and Offset to be the residual offset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:23,Security,access,access,23,/// Get GEP indices to access Offset inside ElemTy. ElemTy is updated to be; /// the result element type and Offset to be the residual offset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:170,Deployability,update,updated,170,"/// Get single GEP index to access Offset inside ElemTy. Returns std::nullopt; /// if index cannot be computed, e.g. because the type is not an aggregate.; /// ElemTy is updated to be the result element type and Offset to be the; /// residual offset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:28,Security,access,access,28,"/// Get single GEP index to access Offset inside ElemTy. Returns std::nullopt; /// if index cannot be computed, e.g. because the type is not an aggregate.; /// ElemTy is updated to be the result element type and Offset to be the; /// residual offset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:168,Performance,cache,cached,168,"/// Returns a StructLayout object, indicating the alignment of the; /// struct, its size, and the offsets of its fields.; ///; /// Note that this information is lazily cached.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:520,Integrability,wrap,wrappers,520,"//===- DebugInfo.h - Debug Information Helpers ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a bunch of datatypes that are useful for creating and; // walking debug info in LLVM IR form. They essentially provide wrappers around; // the information in the global variables that's needed when constructing the; // DWARF information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:570,Modifiability,variab,variables,570,"//===- DebugInfo.h - Debug Information Helpers ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a bunch of datatypes that are useful for creating and; // walking debug info in LLVM IR form. They essentially provide wrappers around; // the information in the global variables that's needed when constructing the; // DWARF information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:49,Modifiability,variab,variables,49,/// Finds dbg.declare intrinsics declaring local variables as living in the; /// memory that 'V' points to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:4,Availability,Down,Downgrade,4,"/// Downgrade the debug info in a module to contain only line table information.; ///; /// In order to convert debug info to what -gline-tables-only would have; /// created, this does the following:; /// 1) Delete all debug intrinsics.; /// 2) Delete all non-CU named metadata debug info nodes.; /// 3) Create new DebugLocs for each instruction.; /// 4) Create a new CU debug info, and similarly for every metadata node; /// that's reachable from the CU debug info.; /// All debug type metadata nodes are unreachable and garbage collected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:4,Deployability,Update,Update,4,"/// Update the debug locations contained within the MD_loop metadata attached; /// to the instruction \p I, if one exists. \p Updater is applied to Metadata; /// operand in the MD_loop metadata: the returned value is included in the; /// updated loop metadata node if it is non-null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:126,Deployability,Update,Updater,126,"/// Update the debug locations contained within the MD_loop metadata attached; /// to the instruction \p I, if one exists. \p Updater is applied to Metadata; /// operand in the MD_loop metadata: the returned value is included in the; /// updated loop metadata node if it is non-null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:238,Deployability,update,updated,238,"/// Update the debug locations contained within the MD_loop metadata attached; /// to the instruction \p I, if one exists. \p Updater is applied to Metadata; /// operand in the MD_loop metadata: the returned value is included in the; /// updated loop metadata node if it is non-null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:4,Usability,Clear,Clear,4,/// Clear all lists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:61,Performance,perform,perform,61,/// Return a range of instructions (typically just one) that perform the; /// assignment that \p DAI encodes.; /// Iterators invalidated by adding or removing DIAssignID metadata to/from any; /// instruction (including by deleting or cloning instructions).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:194,Integrability,wrap,wrapper,194,//; // Utilities for enumerating llvm.dbg.assign intrinsic from an assignment ID.; //; /// High level: this is an iterator for llvm.dbg.assign intrinsics.; /// Implementation details: this is a wrapper around Value's User iterator that; /// dereferences to a DbgAssignIntrinsic ptr rather than a User ptr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:62,Performance,perform,performs,62,/// Return a range of dbg.assign intrinsics for which \p Inst performs the; /// assignment they encode.; /// Iterators invalidated by deleting an intrinsic contained in this range.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:34,Modifiability,variab,variable,34,/// Calculate the fragment of the variable in \p DAI covered; /// from (Dest + SliceOffsetInBits) to; /// to (Dest + SliceOffsetInBits + SliceSizeInBits); ///; /// Return false if it can't be calculated for any reason.; /// Result is set to nullopt if the intersect equals the variable fragment (or; /// variable size) in DAI.; ///; /// Result contains a zero-sized fragment if there's no intersect.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:277,Modifiability,variab,variable,277,/// Calculate the fragment of the variable in \p DAI covered; /// from (Dest + SliceOffsetInBits) to; /// to (Dest + SliceOffsetInBits + SliceSizeInBits); ///; /// Return false if it can't be calculated for any reason.; /// Result is set to nullopt if the intersect equals the variable fragment (or; /// variable size) in DAI.; ///; /// Result contains a zero-sized fragment if there's no intersect.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:304,Modifiability,variab,variable,304,/// Calculate the fragment of the variable in \p DAI covered; /// from (Dest + SliceOffsetInBits) to; /// to (Dest + SliceOffsetInBits + SliceSizeInBits); ///; /// Return false if it can't be calculated for any reason.; /// Result is set to nullopt if the intersect equals the variable fragment (or; /// variable size) in DAI.; ///; /// Result contains a zero-sized fragment if there's no intersect.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:161,Modifiability,variab,variables,161,"/// Helper struct for trackAssignments, below. We don't use the similar; /// DebugVariable class because trackAssignments doesn't (yet?) understand; /// partial variables (fragment info) as input and want to make that clear and; /// explicit using types. In addition, eventually we will want to understand; /// expressions that modify the base address too, which a DebugVariable doesn't; /// capture.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:218,Usability,clear,clear,218,"/// Helper struct for trackAssignments, below. We don't use the similar; /// DebugVariable class because trackAssignments doesn't (yet?) understand; /// partial variables (fragment info) as input and want to make that clear and; /// explicit using types. In addition, eventually we will want to understand; /// expressions that modify the base address too, which a DebugVariable doesn't; /// capture.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:182,Energy Efficiency,allocate,allocated,182,/// Map of backing storage to a set of variables that are stored to it.; /// TODO: Backing storage shouldn't be limited to allocas only. Some local; /// variables have their storage allocated by the calling function (addresses; /// passed in with sret & byval parameters).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:39,Modifiability,variab,variables,39,/// Map of backing storage to a set of variables that are stored to it.; /// TODO: Backing storage shouldn't be limited to allocas only. Some local; /// variables have their storage allocated by the calling function (addresses; /// passed in with sret & byval parameters).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:153,Modifiability,variab,variables,153,/// Map of backing storage to a set of variables that are stored to it.; /// TODO: Backing storage shouldn't be limited to allocas only. Some local; /// variables have their storage allocated by the calling function (addresses; /// passed in with sret & byval parameters).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:183,Modifiability,variab,variable,183,// end namespace at; /// Convert @llvm.dbg.declare intrinsics into sets of @llvm.dbg.assign; /// intrinsics by treating stores to the dbg.declare'd address as assignments; /// to the variable. Not all kinds of variables are supported yet; those will; /// be left with their dbg.declare intrinsics.; /// The pass sets the debug-info-assignment-tracking module flag to true to; /// indicate assignment tracking has been enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:210,Modifiability,variab,variables,210,// end namespace at; /// Convert @llvm.dbg.declare intrinsics into sets of @llvm.dbg.assign; /// intrinsics by treating stores to the dbg.declare'd address as assignments; /// to the variable. Not all kinds of variables are supported yet; those will; /// be left with their dbg.declare intrinsics.; /// The pass sets the debug-info-assignment-tracking module flag to true to; /// indicate assignment tracking has been enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:42,Security,access,accessibility,42,/// Debug info flags.; ///; /// The three accessibility flags are mutually exclusive and rolled together; /// in the first two bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:33,Security,checksum,checksum,33,/// Which algorithm (e.g. MD5) a checksum was generated with.; ///; /// The encoding is explicit because it is used directly in Bitcode. The; /// value 0 is reserved to indicate the absence of a checksum in Bitcode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:195,Security,checksum,checksum,195,/// Which algorithm (e.g. MD5) a checksum was generated with.; ///; /// The encoding is explicit because it is used directly in Bitcode. The; /// value 0 is reserved to indicate the absence of a checksum in Bitcode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:125,Integrability,wrap,wrapping,125,"// The first variant was originally CSK_None, encoded as 0. The new; // internal representation removes the need for this by wrapping the; // ChecksumInfo in an Optional, but to preserve Bitcode compatibility the 0; // encoding is reserved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:142,Security,Checksum,ChecksumInfo,142,"// The first variant was originally CSK_None, encoded as 0. The new; // internal representation removes the need for this by wrapping the; // ChecksumInfo in an Optional, but to preserve Bitcode compatibility the 0; // encoding is reserved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:13,Security,checksum,checksum,13,"/// A single checksum, represented by a \a Kind and a \a Value (a string).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:16,Security,checksum,checksum,16,/// The kind of checksum which \a Value encodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:28,Security,checksum,checksum,28,/// The string value of the checksum.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:40,Deployability,update,updated,40,/// Returns a new temporary DIType with updated Flags,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:113,Security,access,accessors,113,"/// Basic type, like 'int' or 'float'.; ///; /// TODO: Split out DW_TAG_unspecified_type.; /// TODO: Drop unused accessors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:160,Modifiability,inherit,inheritance,160,"/// Derived types.; ///; /// This includes qualified types, pointers, references, friends, typedefs, and; /// class members.; ///; /// TODO: Split out members (inheritance, fields, methods, etc.).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:157,Integrability,wrap,wrapper,157,"/// Get extra data associated with this derived type.; ///; /// Class type for pointer-to-members, objective-c property node for ivars,; /// global constant wrapper for static members, or virtual base pointer offset; /// for inheritance.; ///; /// TODO: Separate out types that need this extra operand: pointer-to-member; /// types and member fields (static members and ivars).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:225,Modifiability,inherit,inheritance,225,"/// Get extra data associated with this derived type.; ///; /// Class type for pointer-to-members, objective-c property node for ivars,; /// global constant wrapper for static members, or virtual base pointer offset; /// for inheritance.; ///; /// TODO: Separate out types that need this extra operand: pointer-to-member; /// types and member fields (static members and ivars).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:49,Deployability,update,updated,49,// Returns a new temporary DISubroutineType with updated CC,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:74,Modifiability,variab,variables,74,"/// A scope for locals.; ///; /// A legal scope for lexical blocks, local variables, and debug info; /// locations. Subclasses are \a DISubprogram, \a DILexicalBlock, and \a; /// DILexicalBlockFile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:46,Deployability,update,updated,46,/// Returns a new temporary DISubprogram with updated Flags,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:17,Integrability,rout,routine,17,// Check if this routine is a compiler-generated thunk.; //; // Returns true if this subprogram is a thunk generated by the compiler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:466,Availability,down,down,466,"/// Get the DWARF discriminator.; ///; /// DWARF discriminators distinguish identical file locations between; /// instructions that are on different basic blocks.; ///; /// There are 3 components stored in discriminator, from lower bits:; ///; /// Base discriminator: assigned by AddDiscriminators pass to identify IRs; /// that are defined by the same source line, but; /// different basic blocks.; /// Duplication factor: assigned by optimizations that will scale down; /// the execution frequency of the original IR.; /// Copy Identifier: assigned by optimizations that clones the IR.; /// Each copy of the IR will be assigned an identifier.; ///; /// Encoding:; ///; /// The above 3 components are encoded into a 32bit unsigned integer in; /// order. If the lowest bit is 1, the current component is empty, and the; /// next component will start in the next bit. Otherwise, the current; /// component is non-empty, and its content starts in the next bit. The; /// value of each components is either 5 bit or 12 bit: if the 7th bit; /// is 0, the bit 2~6 (5 bits) are used to represent the component; if the; /// 7th bit is 1, the bit 2~6 (5 bits) and 8~14 (7 bits) are combined to; /// represent the component. Thus, the number of bits used for a component; /// is either 0 (if it and all the next components are empty); 1 - if it is; /// empty; 7 - if its value is up to and including 0x1f (lsb and msb are both; /// 0); or 14, if its value is up to and including 0x1ff. Note that the last; /// component is also capped at 0x1ff, even in the case when both first; /// components are 0, and we'd technically have 29 bits available.; ///; /// For precise control over the data being encoded in the discriminator,; /// use encodeDiscriminator/decodeDiscriminator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:1625,Availability,avail,available,1625,"/// Get the DWARF discriminator.; ///; /// DWARF discriminators distinguish identical file locations between; /// instructions that are on different basic blocks.; ///; /// There are 3 components stored in discriminator, from lower bits:; ///; /// Base discriminator: assigned by AddDiscriminators pass to identify IRs; /// that are defined by the same source line, but; /// different basic blocks.; /// Duplication factor: assigned by optimizations that will scale down; /// the execution frequency of the original IR.; /// Copy Identifier: assigned by optimizations that clones the IR.; /// Each copy of the IR will be assigned an identifier.; ///; /// Encoding:; ///; /// The above 3 components are encoded into a 32bit unsigned integer in; /// order. If the lowest bit is 1, the current component is empty, and the; /// next component will start in the next bit. Otherwise, the current; /// component is non-empty, and its content starts in the next bit. The; /// value of each components is either 5 bit or 12 bit: if the 7th bit; /// is 0, the bit 2~6 (5 bits) are used to represent the component; if the; /// 7th bit is 1, the bit 2~6 (5 bits) and 8~14 (7 bits) are combined to; /// represent the component. Thus, the number of bits used for a component; /// is either 0 (if it and all the next components are empty); 1 - if it is; /// empty; 7 - if its value is up to and including 0x1f (lsb and msb are both; /// 0); or 14, if its value is up to and including 0x1ff. Note that the last; /// component is also capped at 0x1ff, even in the case when both first; /// components are 0, and we'd technically have 29 bits available.; ///; /// For precise control over the data being encoded in the discriminator,; /// use encodeDiscriminator/decodeDiscriminator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:436,Performance,optimiz,optimizations,436,"/// Get the DWARF discriminator.; ///; /// DWARF discriminators distinguish identical file locations between; /// instructions that are on different basic blocks.; ///; /// There are 3 components stored in discriminator, from lower bits:; ///; /// Base discriminator: assigned by AddDiscriminators pass to identify IRs; /// that are defined by the same source line, but; /// different basic blocks.; /// Duplication factor: assigned by optimizations that will scale down; /// the execution frequency of the original IR.; /// Copy Identifier: assigned by optimizations that clones the IR.; /// Each copy of the IR will be assigned an identifier.; ///; /// Encoding:; ///; /// The above 3 components are encoded into a 32bit unsigned integer in; /// order. If the lowest bit is 1, the current component is empty, and the; /// next component will start in the next bit. Otherwise, the current; /// component is non-empty, and its content starts in the next bit. The; /// value of each components is either 5 bit or 12 bit: if the 7th bit; /// is 0, the bit 2~6 (5 bits) are used to represent the component; if the; /// 7th bit is 1, the bit 2~6 (5 bits) and 8~14 (7 bits) are combined to; /// represent the component. Thus, the number of bits used for a component; /// is either 0 (if it and all the next components are empty); 1 - if it is; /// empty; 7 - if its value is up to and including 0x1f (lsb and msb are both; /// 0); or 14, if its value is up to and including 0x1ff. Note that the last; /// component is also capped at 0x1ff, even in the case when both first; /// components are 0, and we'd technically have 29 bits available.; ///; /// For precise control over the data being encoded in the discriminator,; /// use encodeDiscriminator/decodeDiscriminator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:554,Performance,optimiz,optimizations,554,"/// Get the DWARF discriminator.; ///; /// DWARF discriminators distinguish identical file locations between; /// instructions that are on different basic blocks.; ///; /// There are 3 components stored in discriminator, from lower bits:; ///; /// Base discriminator: assigned by AddDiscriminators pass to identify IRs; /// that are defined by the same source line, but; /// different basic blocks.; /// Duplication factor: assigned by optimizations that will scale down; /// the execution frequency of the original IR.; /// Copy Identifier: assigned by optimizations that clones the IR.; /// Each copy of the IR will be assigned an identifier.; ///; /// Encoding:; ///; /// The above 3 components are encoded into a 32bit unsigned integer in; /// order. If the lowest bit is 1, the current component is empty, and the; /// next component will start in the next bit. Otherwise, the current; /// component is non-empty, and its content starts in the next bit. The; /// value of each components is either 5 bit or 12 bit: if the 7th bit; /// is 0, the bit 2~6 (5 bits) are used to represent the component; if the; /// 7th bit is 1, the bit 2~6 (5 bits) and 8~14 (7 bits) are combined to; /// represent the component. Thus, the number of bits used for a component; /// is either 0 (if it and all the next components are empty); 1 - if it is; /// empty; 7 - if its value is up to and including 0x1f (lsb and msb are both; /// 0); or 14, if its value is up to and including 0x1ff. Note that the last; /// component is also capped at 0x1ff, even in the case when both first; /// components are 0, and we'd technically have 29 bits available.; ///; /// For precise control over the data being encoded in the discriminator,; /// use encodeDiscriminator/decodeDiscriminator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:34,Deployability,update,updated,34,/// Returns a new DILocation with updated \p Discriminator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:34,Deployability,update,updated,34,"/// Returns a new DILocation with updated base discriminator \p BD. Only the; /// base discriminator is set in the new DILocation, the other encoded values; /// are elided.; /// If the discriminator cannot be encoded, the function returns std::nullopt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:15,Availability,mask,masked,15,"/// Return the masked discriminator value for an input discrimnator value D; /// (i.e. zero out the (B+1)-th and above bits for D (B is 0-base).; // Example: an input of (0x1FF, 7) returns 0xFF.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:19,Modifiability,variab,variables,19,/// Base class for variables.; ///; /// Uses the SubclassData32 Metadata slot.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:31,Modifiability,variab,variable,31,/// Determines the size of the variable's type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:34,Modifiability,variab,variable,34,"/// Return the signedness of this variable's type, or std::nullopt if this; /// type is neither signed nor unsigned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:254,Energy Efficiency,allocate,allocate,254,"/// DWARF expression.; ///; /// This is (almost) a DWARF expression that modifies the location of a; /// variable, or the location of a single piece of a variable, or (when using; /// DW_OP_stack_value) is the constant variable value.; ///; /// TODO: Co-allocate the expression elements.; /// TODO: Separate from MDNode, or otherwise drop Distinct and Temporary; /// storage types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:105,Modifiability,variab,variable,105,"/// DWARF expression.; ///; /// This is (almost) a DWARF expression that modifies the location of a; /// variable, or the location of a single piece of a variable, or (when using; /// DW_OP_stack_value) is the constant variable value.; ///; /// TODO: Co-allocate the expression elements.; /// TODO: Separate from MDNode, or otherwise drop Distinct and Temporary; /// storage types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:154,Modifiability,variab,variable,154,"/// DWARF expression.; ///; /// This is (almost) a DWARF expression that modifies the location of a; /// variable, or the location of a single piece of a variable, or (when using; /// DW_OP_stack_value) is the constant variable value.; ///; /// TODO: Co-allocate the expression elements.; /// TODO: Separate from MDNode, or otherwise drop Distinct and Temporary; /// storage types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:219,Modifiability,variab,variable,219,"/// DWARF expression.; ///; /// This is (almost) a DWARF expression that modifies the location of a; /// variable, or the location of a single piece of a variable, or (when using; /// DW_OP_stack_value) is the constant variable value.; ///; /// TODO: Co-allocate the expression elements.; /// TODO: Separate from MDNode, or otherwise drop Distinct and Temporary; /// storage types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:18,Integrability,wrap,wrapper,18,/// A lightweight wrapper around an expression operand.; ///; /// TODO: Store arguments directly and change \a DIExpression to store a; /// range of these.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:171,Security,access,accessor,171,"/// Get the next iterator.; ///; /// \a std::next() doesn't work because this is technically an; /// input_iterator, but it's a perfectly valid operation. This is an; /// accessor to provide the same functionality.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:39,Integrability,wrap,wrappers,39,/// Visit the elements via ExprOperand wrappers.; ///; /// These range iterators visit elements through \a ExprOperand wrappers.; /// This is not guaranteed to be a valid range unless \a isValid() gives \c; /// true.; ///; /// \pre \a isValid() gives \c true.; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:119,Integrability,wrap,wrappers,119,/// Visit the elements via ExprOperand wrappers.; ///; /// These range iterators visit elements through \a ExprOperand wrappers.; /// This is not guaranteed to be a valid range unless \a isValid() gives \c; /// true.; ///; /// \pre \a isValid() gives \c true.; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:58,Modifiability,variab,variable,58,/// Holds the characteristics of one fragment of a larger variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:51,Modifiability,variab,variable,51,/// Return whether this is a piece of an aggregate variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:97,Usability,simpl,simple,97,"/// Return whether the location is computed on the expression stack, meaning; /// it cannot be a simple register location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:63,Modifiability,variab,variable,63,/// Create a DIExpression to describe one part of an aggregate variable that; /// is fragmented across multiple Values. The DW_OP_LLVM_fragment operation; /// will be appended to the elements of \c Expr. If \c Expr already contains; /// a \c DW_OP_LLVM_fragment \c OffsetInBits is interpreted as an offset; /// into the existing fragment.; ///; /// \param OffsetInBits Offset of the piece in bits.; /// \param SizeInBits Size of the piece in bits.; /// \return Creating a fragment expression may fail if \c Expr; /// contains arithmetic operations that would be; /// truncated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:96,Deployability,configurat,configuration,96,/// Check if the expression consists of exactly one entry value operand.; /// (This is the only configuration of entry values that is supported.),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:96,Modifiability,config,configuration,96,/// Check if the expression consists of exactly one entry value operand.; /// (This is the only configuration of entry values that is supported.),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:170,Availability,failure,failure,170,"/// Try to shorten an expression with an initial constant operand.; /// Returns a new expression and constant on success, or the original; /// expression and constant on failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:11,Modifiability,variab,variables,11,/// Global variables.; ///; /// TODO: Remove DisplayName. It's always equal to Name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:10,Modifiability,variab,variable,10,/// Local variable.; ///; /// TODO: Split up flags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:33,Modifiability,variab,variable,33,/// Get the local scope for this variable.; ///; /// Variables must be defined in a local scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:53,Modifiability,Variab,Variables,53,/// Get the local scope for this variable.; ///; /// Variables must be defined in a local scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:44,Modifiability,variab,variable,44,"/// Check that a location is valid for this variable.; ///; /// Check that \c DL exists, is in the same subprogram, and has the same; /// inlined-at location as \c this. (Otherwise, it's not a valid attachment; /// to a \a DbgInfoIntrinsic.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:38,Modifiability,variab,variable,38,"/// Identifies a unique instance of a variable.; ///; /// Storage for identifying a potentially inlined instance of a variable,; /// or a fragment thereof. This guarantees that exactly one variable instance; /// may be identified by this class, even when that variable is a fragment of; /// an aggregate variable and/or there is another inlined instance of the same; /// source code variable nearby.; /// This class does not necessarily uniquely identify that variable: it is; /// possible that a DebugVariable with different parameters may point to the; /// same variable instance, but not that one DebugVariable points to multiple; /// variable instances.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:118,Modifiability,variab,variable,118,"/// Identifies a unique instance of a variable.; ///; /// Storage for identifying a potentially inlined instance of a variable,; /// or a fragment thereof. This guarantees that exactly one variable instance; /// may be identified by this class, even when that variable is a fragment of; /// an aggregate variable and/or there is another inlined instance of the same; /// source code variable nearby.; /// This class does not necessarily uniquely identify that variable: it is; /// possible that a DebugVariable with different parameters may point to the; /// same variable instance, but not that one DebugVariable points to multiple; /// variable instances.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:189,Modifiability,variab,variable,189,"/// Identifies a unique instance of a variable.; ///; /// Storage for identifying a potentially inlined instance of a variable,; /// or a fragment thereof. This guarantees that exactly one variable instance; /// may be identified by this class, even when that variable is a fragment of; /// an aggregate variable and/or there is another inlined instance of the same; /// source code variable nearby.; /// This class does not necessarily uniquely identify that variable: it is; /// possible that a DebugVariable with different parameters may point to the; /// same variable instance, but not that one DebugVariable points to multiple; /// variable instances.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:260,Modifiability,variab,variable,260,"/// Identifies a unique instance of a variable.; ///; /// Storage for identifying a potentially inlined instance of a variable,; /// or a fragment thereof. This guarantees that exactly one variable instance; /// may be identified by this class, even when that variable is a fragment of; /// an aggregate variable and/or there is another inlined instance of the same; /// source code variable nearby.; /// This class does not necessarily uniquely identify that variable: it is; /// possible that a DebugVariable with different parameters may point to the; /// same variable instance, but not that one DebugVariable points to multiple; /// variable instances.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:304,Modifiability,variab,variable,304,"/// Identifies a unique instance of a variable.; ///; /// Storage for identifying a potentially inlined instance of a variable,; /// or a fragment thereof. This guarantees that exactly one variable instance; /// may be identified by this class, even when that variable is a fragment of; /// an aggregate variable and/or there is another inlined instance of the same; /// source code variable nearby.; /// This class does not necessarily uniquely identify that variable: it is; /// possible that a DebugVariable with different parameters may point to the; /// same variable instance, but not that one DebugVariable points to multiple; /// variable instances.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:383,Modifiability,variab,variable,383,"/// Identifies a unique instance of a variable.; ///; /// Storage for identifying a potentially inlined instance of a variable,; /// or a fragment thereof. This guarantees that exactly one variable instance; /// may be identified by this class, even when that variable is a fragment of; /// an aggregate variable and/or there is another inlined instance of the same; /// source code variable nearby.; /// This class does not necessarily uniquely identify that variable: it is; /// possible that a DebugVariable with different parameters may point to the; /// same variable instance, but not that one DebugVariable points to multiple; /// variable instances.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:460,Modifiability,variab,variable,460,"/// Identifies a unique instance of a variable.; ///; /// Storage for identifying a potentially inlined instance of a variable,; /// or a fragment thereof. This guarantees that exactly one variable instance; /// may be identified by this class, even when that variable is a fragment of; /// an aggregate variable and/or there is another inlined instance of the same; /// source code variable nearby.; /// This class does not necessarily uniquely identify that variable: it is; /// possible that a DebugVariable with different parameters may point to the; /// same variable instance, but not that one DebugVariable points to multiple; /// variable instances.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:564,Modifiability,variab,variable,564,"/// Identifies a unique instance of a variable.; ///; /// Storage for identifying a potentially inlined instance of a variable,; /// or a fragment thereof. This guarantees that exactly one variable instance; /// may be identified by this class, even when that variable is a fragment of; /// an aggregate variable and/or there is another inlined instance of the same; /// source code variable nearby.; /// This class does not necessarily uniquely identify that variable: it is; /// possible that a DebugVariable with different parameters may point to the; /// same variable instance, but not that one DebugVariable points to multiple; /// variable instances.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:638,Modifiability,variab,variable,638,"/// Identifies a unique instance of a variable.; ///; /// Storage for identifying a potentially inlined instance of a variable,; /// or a fragment thereof. This guarantees that exactly one variable instance; /// may be identified by this class, even when that variable is a fragment of; /// an aggregate variable and/or there is another inlined instance of the same; /// source code variable nearby.; /// This class does not necessarily uniquely identify that variable: it is; /// possible that a DebugVariable with different parameters may point to the; /// same variable instance, but not that one DebugVariable points to multiple; /// variable instances.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:44,Modifiability,variab,variable,44,/// Identifies a unique instance of a whole variable (discards/ignores fragment; /// information).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugLoc.h:53,Integrability,wrap,wrapper,53,"/// A debug info location.; ///; /// This class is a wrapper around a tracking reference to an \a DILocation; /// pointer.; ///; /// To avoid extra includes, \a DebugLoc doubles the \a DILocation API with a; /// one based on relatively opaque \a MDNode pointers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugLoc.h:136,Safety,avoid,avoid,136,"/// A debug info location.; ///; /// This class is a wrapper around a tracking reference to an \a DILocation; /// pointer.; ///; /// To avoid extra includes, \a DebugLoc doubles the \a DILocation API with a; /// one based on relatively opaque \a MDNode pointers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugLoc.h:119,Security,access,accessors,119,"/// Construct from an \a MDNode.; ///; /// Note: if \c N is not an \a DILocation, a verifier check will fail, and; /// accessors will crash. However, construction from other nodes is; /// supported in order to handle forward references when reading textual; /// IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugLoc.h:70,Safety,safe,safe,70,"/// @}; /// Check for null.; ///; /// Check for null in a way that is safe with broken debug info. Unlike; /// the conversion to \c DILocation, this doesn't require that \c Loc is of; /// the right type. Important for cases like \a llvm::StripDebugInfo() and; /// \a Instruction::hasMetadata().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:415,Modifiability,variab,variable,415,"//===-- llvm/DebugProgramInstruction.h - Stream of debug info -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Data structures for storing variable assignment information in LLVM. In the; // dbg.value design, a dbg.value intrinsic specifies the position in a block; // a source variable take on an LLVM Value:; //; // %foo = add i32 1, %0; // dbg.value(metadata i32 %foo, ...); // %bar = void call @ext(%foo);; //; // and all information is stored in the Value / Metadata hierachy defined; // elsewhere in LLVM. In the ""DPValue"" design, each instruction /may/ have a; // connection with a DPMarker, which identifies a position immediately before the; // instruction, and each DPMarker /may/ then have connections to DPValues which; // record the variable assignment information. To illustrate:; //; // %foo = add i32 1, %0; // ; foo->DbgMarker == nullptr; // ;; There are no variable assignments / debug records ""in front"" of; // ;; the instruction for %foo, therefore it has no DbgMarker.; // %bar = void call @ext(%foo); // ; bar->DbgMarker = {; // ; StoredDPValues = {; // ; DPValue(metadata i32 %foo, ...); // ; }; // ; }; // ;; There is a debug-info record in front of the %bar instruction,; // ;; thus it points at a DPMarker object. That DPMarker contains a; // ;; DPValue in it's ilist, storing the equivalent information to the; // ;; dbg.value above: the Value, DILocalVariable, etc.; //; // This structure separates the two concerns of the position of the debug-info; // in the function, and the Value that it refers to. It also creates a new; // ""place"" in-between the Value / Metadata hierachy where we can customise; // storage and allocation techniques to better suite debug-info workloads.; // NB: as of the i",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:554,Modifiability,variab,variable,554,"//===-- llvm/DebugProgramInstruction.h - Stream of debug info -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Data structures for storing variable assignment information in LLVM. In the; // dbg.value design, a dbg.value intrinsic specifies the position in a block; // a source variable take on an LLVM Value:; //; // %foo = add i32 1, %0; // dbg.value(metadata i32 %foo, ...); // %bar = void call @ext(%foo);; //; // and all information is stored in the Value / Metadata hierachy defined; // elsewhere in LLVM. In the ""DPValue"" design, each instruction /may/ have a; // connection with a DPMarker, which identifies a position immediately before the; // instruction, and each DPMarker /may/ then have connections to DPValues which; // record the variable assignment information. To illustrate:; //; // %foo = add i32 1, %0; // ; foo->DbgMarker == nullptr; // ;; There are no variable assignments / debug records ""in front"" of; // ;; the instruction for %foo, therefore it has no DbgMarker.; // %bar = void call @ext(%foo); // ; bar->DbgMarker = {; // ; StoredDPValues = {; // ; DPValue(metadata i32 %foo, ...); // ; }; // ; }; // ;; There is a debug-info record in front of the %bar instruction,; // ;; thus it points at a DPMarker object. That DPMarker contains a; // ;; DPValue in it's ilist, storing the equivalent information to the; // ;; dbg.value above: the Value, DILocalVariable, etc.; //; // This structure separates the two concerns of the position of the debug-info; // in the function, and the Value that it refers to. It also creates a new; // ""place"" in-between the Value / Metadata hierachy where we can customise; // storage and allocation techniques to better suite debug-info workloads.; // NB: as of the i",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:1022,Modifiability,variab,variable,1022,"//===-- llvm/DebugProgramInstruction.h - Stream of debug info -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Data structures for storing variable assignment information in LLVM. In the; // dbg.value design, a dbg.value intrinsic specifies the position in a block; // a source variable take on an LLVM Value:; //; // %foo = add i32 1, %0; // dbg.value(metadata i32 %foo, ...); // %bar = void call @ext(%foo);; //; // and all information is stored in the Value / Metadata hierachy defined; // elsewhere in LLVM. In the ""DPValue"" design, each instruction /may/ have a; // connection with a DPMarker, which identifies a position immediately before the; // instruction, and each DPMarker /may/ then have connections to DPValues which; // record the variable assignment information. To illustrate:; //; // %foo = add i32 1, %0; // ; foo->DbgMarker == nullptr; // ;; There are no variable assignments / debug records ""in front"" of; // ;; the instruction for %foo, therefore it has no DbgMarker.; // %bar = void call @ext(%foo); // ; bar->DbgMarker = {; // ; StoredDPValues = {; // ; DPValue(metadata i32 %foo, ...); // ; }; // ; }; // ;; There is a debug-info record in front of the %bar instruction,; // ;; thus it points at a DPMarker object. That DPMarker contains a; // ;; DPValue in it's ilist, storing the equivalent information to the; // ;; dbg.value above: the Value, DILocalVariable, etc.; //; // This structure separates the two concerns of the position of the debug-info; // in the function, and the Value that it refers to. It also creates a new; // ""place"" in-between the Value / Metadata hierachy where we can customise; // storage and allocation techniques to better suite debug-info workloads.; // NB: as of the i",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:1151,Modifiability,variab,variable,1151,"LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Data structures for storing variable assignment information in LLVM. In the; // dbg.value design, a dbg.value intrinsic specifies the position in a block; // a source variable take on an LLVM Value:; //; // %foo = add i32 1, %0; // dbg.value(metadata i32 %foo, ...); // %bar = void call @ext(%foo);; //; // and all information is stored in the Value / Metadata hierachy defined; // elsewhere in LLVM. In the ""DPValue"" design, each instruction /may/ have a; // connection with a DPMarker, which identifies a position immediately before the; // instruction, and each DPMarker /may/ then have connections to DPValues which; // record the variable assignment information. To illustrate:; //; // %foo = add i32 1, %0; // ; foo->DbgMarker == nullptr; // ;; There are no variable assignments / debug records ""in front"" of; // ;; the instruction for %foo, therefore it has no DbgMarker.; // %bar = void call @ext(%foo); // ; bar->DbgMarker = {; // ; StoredDPValues = {; // ; DPValue(metadata i32 %foo, ...); // ; }; // ; }; // ;; There is a debug-info record in front of the %bar instruction,; // ;; thus it points at a DPMarker object. That DPMarker contains a; // ;; DPValue in it's ilist, storing the equivalent information to the; // ;; dbg.value above: the Value, DILocalVariable, etc.; //; // This structure separates the two concerns of the position of the debug-info; // in the function, and the Value that it refers to. It also creates a new; // ""place"" in-between the Value / Metadata hierachy where we can customise; // storage and allocation techniques to better suite debug-info workloads.; // NB: as of the initial prototype, none of that has actually been attempted; // yet.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:458,Deployability,update,update,458,"/// Record of a variable value-assignment, aka a non instruction representation; /// of the dbg.value intrinsic. Features various methods copied across from the; /// Instruction class to aid ease-of-use. DPValue objects should always be; /// linked into a DPMarker's StoredDPValues list. The marker connects a DPValue; /// back to it's position in the BasicBlock.; ///; /// This class inherits from DebugValueUser to allow LLVM's metadata facilities; /// to update our references to metadata beneath our feet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:16,Modifiability,variab,variable,16,"/// Record of a variable value-assignment, aka a non instruction representation; /// of the dbg.value intrinsic. Features various methods copied across from the; /// Instruction class to aid ease-of-use. DPValue objects should always be; /// linked into a DPMarker's StoredDPValues list. The marker connects a DPValue; /// back to it's position in the BasicBlock.; ///; /// This class inherits from DebugValueUser to allow LLVM's metadata facilities; /// to update our references to metadata beneath our feet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:385,Modifiability,inherit,inherits,385,"/// Record of a variable value-assignment, aka a non instruction representation; /// of the dbg.value intrinsic. Features various methods copied across from the; /// Instruction class to aid ease-of-use. DPValue objects should always be; /// linked into a DPMarker's StoredDPValues list. The marker connects a DPValue; /// back to it's position in the BasicBlock.; ///; /// This class inherits from DebugValueUser to allow LLVM's metadata facilities; /// to update our references to metadata beneath our feet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:121,Modifiability,variab,variable,121,/// Directly construct a new DPValue representing a dbg.value intrinsic; /// assigning \p Location to the DV / Expr / DI variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:97,Integrability,Depend,Depending,97,"/// Get the locations corresponding to the variable referenced by the debug; /// info intrinsic. Depending on the intrinsic, this could be the; /// variable's value or its address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:43,Modifiability,variab,variable,43,"/// Get the locations corresponding to the variable referenced by the debug; /// info intrinsic. Depending on the intrinsic, this could be the; /// variable's value or its address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:148,Modifiability,variab,variable,148,"/// Get the locations corresponding to the variable referenced by the debug; /// info intrinsic. Depending on the intrinsic, this could be the; /// variable's value or its address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:46,Modifiability,variab,variable,46,"/// Does this describe the address of a local variable. True for dbg.addr; /// and dbg.declare, but not dbg.value, which describes its value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:36,Safety,avoid,avoided,36,"/// Use of this should generally be avoided; instead,; /// replaceVariableLocationOp and addVariableLocationOps should be used where; /// possible to avoid creating invalid state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:150,Safety,avoid,avoid,150,"/// Use of this should generally be avoided; instead,; /// replaceVariableLocationOp and addVariableLocationOps should be used where; /// possible to avoid creating invalid state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:34,Modifiability,variab,variable,34,"/// Get the size (in bits) of the variable, or fragment of the variable that; /// is described.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:63,Modifiability,variab,variable,63,"/// Get the size (in bits) of the variable, or fragment of the variable that; /// is described.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:219,Modifiability,variab,variable,219,"/// Check whether this kills the address component. This doesn't take into; /// account the position of the intrinsic, therefore a returned value of false; /// does not guarentee the address is a valid location for the variable at the; /// intrinsic's position in IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:46,Modifiability,variab,variable,46,"/// List of DPValues, each recording a single variable assignment, the; /// equivalent of a dbg.value intrinsic. There is a one-to-one relationship; /// between each dbg.value in a block and each DPValue once the; /// representation has been converted, and the ordering of DPValues is; /// meaningful in the same was a dbg.values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:130,Energy Efficiency,allocate,allocate,130,"/// We generally act like all llvm Instructions have a range of DPValues; /// attached to them, but in reality sometimes we don't allocate the DPMarker; /// to save time and memory, but still have to return ranges of DPValues. When; /// we need to describe such an unallocated DPValue range, use this static; /// markers range instead. This will bite us if someone tries to insert a; /// DPValue in that range, but they should be using the Official (TM) API for; /// that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:201,Energy Efficiency,power,power,201,"///< Maximum number of bits that can be specified; ///< Note that bit width is stored in the Type classes SubclassData field; ///< which has 24 bits. SelectionDAG type legalization can require a; ///< power of 2 IntegerType, so limit to the largest representable power; ///< of 2, 8388608.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:263,Energy Efficiency,power,power,263,"///< Maximum number of bits that can be specified; ///< Note that bit width is stored in the Type classes SubclassData field; ///< which has 24 bits. SelectionDAG type legalization can require a; ///< power of 2 IntegerType, so limit to the largest representable power; ///< of 2, 8388608.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:93,Availability,mask,mask,93,"/// For example, this is 0xFF for an 8 bit integer, 0xFFFF for i16, etc.; /// @returns a bit mask with ones set for all the bits of this type.; /// Get a bit mask for this type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:158,Availability,mask,mask,158,"/// For example, this is 0xFF for an 8 bit integer, 0xFFFF for i16, etc.; /// @returns a bit mask with ones set for all the bits of this type.; /// Get a bit mask for this type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:19,Security,access,accessors,19,/// Parameter type accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:189,Security,access,access,189,"/// A handy container for a FunctionType+Callee-pointer pair, which can be; /// passed around as a single entity. This assists in replacing the use of; /// PointerType::getElementType() to access the function's type, since that's; /// slated for removal as part of the [opaque pointer types] project.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:43,Performance,scalab,scalable,43,/// Returns true if this struct contains a scalable vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:53,Performance,scalab,scalable,53,"/// Returns true if this struct contains homogeneous scalable vector types.; /// Note that the definition of homogeneous scalable vector type is not; /// recursive here. That means the following structure will return false; /// when calling this function.; /// {{<vscale x 2 x i32>, <vscale x 4 x i64>},; /// {<vscale x 2 x i32>, <vscale x 4 x i64>}}",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:121,Performance,scalab,scalable,121,"/// Returns true if this struct contains homogeneous scalable vector types.; /// Note that the definition of homogeneous scalable vector type is not; /// recursive here. That means the following structure will return false; /// when calling this function.; /// {{<vscale x 2 x i32>, <vscale x 4 x i64>},; /// {<vscale x 2 x i32>, <vscale x 4 x i64>}}",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:12,Security,access,access,12,// Iterator access to the elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:11,Security,access,access,11,/// Random access to the elements,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:67,Integrability,depend,depends,67,"/// The element quantity of this vector. The meaning of this value depends; /// on the type of vector:; /// - For FixedVectorType = <ElementQuantity x ty>, there are; /// exactly ElementQuantity elements in this vector.; /// - For ScalableVectorType = <vscale x ElementQuantity x ty>,; /// there are vscale * ElementQuantity elements in this vector, where; /// vscale is a runtime-constant integer greater than 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:231,Performance,Scalab,ScalableVectorType,231,"/// The element quantity of this vector. The meaning of this value depends; /// on the type of vector:; /// - For FixedVectorType = <ElementQuantity x ty>, there are; /// exactly ElementQuantity elements in this vector.; /// - For ScalableVectorType = <vscale x ElementQuantity x ty>,; /// there are vscale * ElementQuantity elements in this vector, where; /// vscale is a runtime-constant integer greater than 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:63,Performance,scalab,scalable,63,/// Return an ElementCount instance to represent the (possibly scalable); /// number of elements in the vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:23,Performance,scalab,scalable,23,/// Class to represent scalable SIMD vectors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:26,Performance,load,load,26,/// Return true if we can load or store from a pointer to this type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:278,Integrability,depend,dependent,278,"/// Class to represent target extensions types, which are generally; /// unintrospectable from target-independent optimizations.; ///; /// Target extension types have a string name, and optionally have type and/or; /// integer parameters. The exact meaning of any parameters is dependent on the; /// target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:114,Performance,optimiz,optimizations,114,"/// Class to represent target extensions types, which are generally; /// unintrospectable from target-independent optimizations.; ///; /// Target extension types have a string name, and optionally have type and/or; /// integer parameters. The exact meaning of any parameters is dependent on the; /// target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:56,Modifiability,variab,variable,56,/// This type may be used as the value type of a global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h:93,Modifiability,inherit,inherit,93,"/// Extension point for the Value hierarchy. All classes outside of lib/IR; /// that wish to inherit from User should instead inherit from DerivedUser; /// instead. Inheriting from this class is discouraged.; ///; /// Generally speaking, Value is the base of a closed class hierarchy; /// that can't be extended by code outside of lib/IR. This class creates a; /// loophole that allows classes outside of lib/IR to extend User to leverage; /// its use/def list machinery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h:126,Modifiability,inherit,inherit,126,"/// Extension point for the Value hierarchy. All classes outside of lib/IR; /// that wish to inherit from User should instead inherit from DerivedUser; /// instead. Inheriting from this class is discouraged.; ///; /// Generally speaking, Value is the base of a closed class hierarchy; /// that can't be extended by code outside of lib/IR. This class creates a; /// loophole that allows classes outside of lib/IR to extend User to leverage; /// its use/def list machinery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h:165,Modifiability,Inherit,Inheriting,165,"/// Extension point for the Value hierarchy. All classes outside of lib/IR; /// that wish to inherit from User should instead inherit from DerivedUser; /// instead. Inheriting from this class is discouraged.; ///; /// Generally speaking, Value is the base of a closed class hierarchy; /// that can't be extended by code outside of lib/IR. This class creates a; /// loophole that allows classes outside of lib/IR to extend User to leverage; /// its use/def list machinery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h:303,Modifiability,extend,extended,303,"/// Extension point for the Value hierarchy. All classes outside of lib/IR; /// that wish to inherit from User should instead inherit from DerivedUser; /// instead. Inheriting from this class is discouraged.; ///; /// Generally speaking, Value is the base of a closed class hierarchy; /// that can't be extended by code outside of lib/IR. This class creates a; /// loophole that allows classes outside of lib/IR to extend User to leverage; /// its use/def list machinery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h:415,Modifiability,extend,extend,415,"/// Extension point for the Value hierarchy. All classes outside of lib/IR; /// that wish to inherit from User should instead inherit from DerivedUser; /// instead. Inheriting from this class is discouraged.; ///; /// Generally speaking, Value is the base of a closed class hierarchy; /// that can't be extended by code outside of lib/IR. This class creates a; /// loophole that allows classes outside of lib/IR to extend User to leverage; /// its use/def list machinery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticHandler.h:200,Integrability,message,message,200,/// Override handleDiagnostics to provide custom implementation.; /// Return true if it handles diagnostics reporting properly otherwise; /// return false to make LLVMContext::diagnose() to print the message; /// with a prefix based on the severity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticHandler.h:26,Performance,optimiz,optimization,26,"/// Return true if missed optimization remarks are enabled, override; /// to provide different implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticHandler.h:26,Performance,optimiz,optimization,26,"/// Return true if passed optimization remarks are enabled, override; /// to provide different implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:83,Modifiability,extend,extended,83,/// Defines the different supported kind of a diagnostic.; /// This enum should be extended with a new ID for each added concrete subclass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:17,Availability,avail,available,17,"/// Get the next available kind ID for a plugin diagnostic.; /// Each time this function is called, it returns a different number.; /// Therefore, a plugin that wants to ""identify"" its own classes; /// with a dynamic identifier, just have to use this method to get a new ID; /// and assign it to each of its classes.; /// The returned ID will be greater than or equal to DK_FirstPluginKind.; /// Thus, the plugin identifiers will not conflict with the; /// DiagnosticKind values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:41,Modifiability,plugin,plugin,41,"/// Get the next available kind ID for a plugin diagnostic.; /// Each time this function is called, it returns a different number.; /// Therefore, a plugin that wants to ""identify"" its own classes; /// with a dynamic identifier, just have to use this method to get a new ID; /// and assign it to each of its classes.; /// The returned ID will be greater than or equal to DK_FirstPluginKind.; /// Thus, the plugin identifiers will not conflict with the; /// DiagnosticKind values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:149,Modifiability,plugin,plugin,149,"/// Get the next available kind ID for a plugin diagnostic.; /// Each time this function is called, it returns a different number.; /// Therefore, a plugin that wants to ""identify"" its own classes; /// with a dynamic identifier, just have to use this method to get a new ID; /// and assign it to each of its classes.; /// The returned ID will be greater than or equal to DK_FirstPluginKind.; /// Thus, the plugin identifiers will not conflict with the; /// DiagnosticKind values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:406,Modifiability,plugin,plugin,406,"/// Get the next available kind ID for a plugin diagnostic.; /// Each time this function is called, it returns a different number.; /// Therefore, a plugin that wants to ""identify"" its own classes; /// with a dynamic identifier, just have to use this method to get a new ID; /// and assign it to each of its classes.; /// The returned ID will be greater than or equal to DK_FirstPluginKind.; /// Thus, the plugin identifiers will not conflict with the; /// DiagnosticKind values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:171,Integrability,message,message,171,/// This is the base abstract class for diagnostic reporting in; /// the backend.; /// The print method must be overloaded by the subclasses to print a; /// user-friendly message in the client of the backend (let us call it a; /// frontend).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:157,Usability,user-friendly,user-friendly,157,/// This is the base abstract class for diagnostic reporting in; /// the backend.; /// The print method must be overloaded by the subclasses to print a; /// user-friendly message in the client of the backend (let us call it a; /// frontend).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:48,Integrability,message,message,48,/// Print using the given \p DP a user-friendly message.; /// This is the default message that will be printed to the user.; /// It is used when the frontend does not directly take advantage; /// of the information contained in fields of the subclasses.; /// The printed message must not end with '.' nor start with a severity; /// keyword.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:82,Integrability,message,message,82,/// Print using the given \p DP a user-friendly message.; /// This is the default message that will be printed to the user.; /// It is used when the frontend does not directly take advantage; /// of the information contained in fields of the subclasses.; /// The printed message must not end with '.' nor start with a severity; /// keyword.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:271,Integrability,message,message,271,/// Print using the given \p DP a user-friendly message.; /// This is the default message that will be printed to the user.; /// It is used when the frontend does not directly take advantage; /// of the information contained in fields of the subclasses.; /// The printed message must not end with '.' nor start with a severity; /// keyword.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:34,Usability,user-friendly,user-friendly,34,/// Print using the given \p DP a user-friendly message.; /// This is the default message that will be printed to the user.; /// It is used when the frontend does not directly take advantage; /// of the information contained in fields of the subclasses.; /// The printed message must not end with '.' nor start with a severity; /// keyword.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:78,Integrability,message,message,78,/// Diagnostic information for inline asm reporting.; /// This is basically a message and an optional location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:4,Integrability,Message,Message,4,/// Message to be reported.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:21,Integrability,message,message,21,"/// \p MsgStr is the message to be reported to the frontend.; /// This class does not copy \p MsgStr, therefore the reference must be valid; /// for the whole life time of the Diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:93,Integrability,message,message,93,"/// \p LocCookie if non-zero gives the line number for this report.; /// \p MsgStr gives the message.; /// This class does not copy \p MsgStr, therefore the reference must be valid; /// for the whole life time of the Diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:100,Integrability,message,message,100,"/// \p Instr gives the original instruction that triggered the diagnostic.; /// \p MsgStr gives the message.; /// This class does not copy \p MsgStr, therefore the reference must be valid; /// for the whole life time of the Diagnostic.; /// Same for \p I.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:96,Integrability,message,message,96,"/// Line number where the diagnostic occurred. If 0, no line number will; /// be emitted in the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:4,Integrability,Message,Message,4,/// Message to report.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:4,Integrability,Message,Message,4,/// Message to report.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:43,Availability,avail,available,43,/// Return true if location information is available for this diagnostic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:137,Availability,avail,available,137,"/// Return a string with the location information for this diagnostic; /// in the format ""file:line:col"". If location information is not available,; /// it returns ""<unknown>:0:0"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:49,Performance,optimiz,optimization,49,/// Common features for diagnostics dealing with optimization remarks; /// that are used by both IR and MIR passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:41,Integrability,interface,interface,41,/// Used to set IsVerbose via the stream interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:178,Performance,optimiz,optimization,178,"/// When an instance of this is inserted into the stream, the arguments; /// following will not appear in the remark printed in the compiler output; /// (-Rpass) but only in the optimization record file; /// (-fsave-optimization-record).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:216,Performance,optimiz,optimization-record,216,"/// When an instance of this is inserted into the stream, the arguments; /// following will not appear in the remark printed in the compiler output; /// (-Rpass) but only in the optimization record file; /// (-fsave-optimization-record).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:26,Integrability,interface,interface,26,/// Used in the streaming interface as the general argument type. It; /// internally converts everything into a key-value pair.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:317,Availability,avail,available,317,"/// \p PassName is the name of the pass emitting this diagnostic. \p; /// RemarkName is a textual identifier for the remark (single-word,; /// camel-case). \p Fn is the function where the diagnostic is being emitted.; /// \p Loc is the location information to use in the diagnostic. If line table; /// information is available, the diagnostic will include the source code; /// location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:24,Performance,optimiz,optimization,24,"/// Return true if this optimization remark is enabled by one of; /// of the LLVM command line flags (-pass-remarks, -pass-remarks-missed,; /// or -pass-remarks-analysis). Note that this only handles the LLVM; /// flags. We cannot access Clang flags from here (they are handled; /// in BackendConsumer::OptimizationRemarkHandler).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:303,Performance,Optimiz,OptimizationRemarkHandler,303,"/// Return true if this optimization remark is enabled by one of; /// of the LLVM command line flags (-pass-remarks, -pass-remarks-missed,; /// or -pass-remarks-analysis). Note that this only handles the LLVM; /// flags. We cannot access Clang flags from here (they are handled; /// in BackendConsumer::OptimizationRemarkHandler).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:231,Security,access,access,231,"/// Return true if this optimization remark is enabled by one of; /// of the LLVM command line flags (-pass-remarks, -pass-remarks-missed,; /// or -pass-remarks-analysis). Note that this only handles the LLVM; /// flags. We cannot access Clang flags from here (they are handled; /// in BackendConsumer::OptimizationRemarkHandler).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:128,Performance,optimiz,optimization,128,"/// Textual identifier for the remark (single-word, camel-case). Can be used; /// by external tools reading the output file for optimization remarks to; /// identify the remark.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:30,Availability,avail,available,30,"/// If profile information is available, this is the number of times the; /// corresponding code was executed in a profile instrumentation run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:42,Integrability,interface,interface,42,/// Arguments collected via the streaming interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:78,Performance,optimiz,optimization,78,"/// If positive, the index of the first argument that only appear in; /// the optimization records and not in the remark printed in the compiler; /// output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:190,Performance,Optimiz,OptimizationRemarkAnalysis,190,"/// Allow the insertion operator to return the actual remark type rather than a; /// common base class. This allows returning the result of the insertion; /// directly by value, e.g. return OptimizationRemarkAnalysis(...) << ""blah"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:49,Performance,optimiz,optimization,49,/// Common features for diagnostics dealing with optimization remarks; /// that are used by IR passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:317,Availability,avail,available,317,"/// \p PassName is the name of the pass emitting this diagnostic. \p; /// RemarkName is a textual identifier for the remark (single-word,; /// camel-case). \p Fn is the function where the diagnostic is being emitted.; /// \p Loc is the location information to use in the diagnostic. If line table; /// information is available, the diagnostic will include the source code; /// location. \p CodeRegion is IR value (currently basic block) that the; /// optimization operates on. This is currently used to provide run-time; /// hotness information with PGO.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:451,Performance,optimiz,optimization,451,"/// \p PassName is the name of the pass emitting this diagnostic. \p; /// RemarkName is a textual identifier for the remark (single-word,; /// camel-case). \p Fn is the function where the diagnostic is being emitted.; /// \p Loc is the location information to use in the diagnostic. If line table; /// information is available, the diagnostic will include the source code; /// location. \p CodeRegion is IR value (currently basic block) that the; /// optimization operates on. This is currently used to provide run-time; /// hotness information with PGO.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:340,Integrability,message,message,340,/// This is ctor variant allows a pass to build an optimization remark; /// from an existing remark.; ///; /// This is useful when a transformation pass (e.g LV) wants to emit a remark; /// (\p Orig) generated by one of its analyses (e.g. LAA) as its own analysis; /// remark. The string \p Prepend will be emitted before the original; /// message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:51,Performance,optimiz,optimization,51,/// This is ctor variant allows a pass to build an optimization remark; /// from an existing remark.; ///; /// This is useful when a transformation pass (e.g LV) wants to emit a remark; /// (\p Orig) generated by one of its analyses (e.g. LAA) as its own analysis; /// remark. The string \p Prepend will be emitted before the original; /// message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:255,Availability,avail,available,255,"/// Legacy interface.; /// \p PassName is the name of the pass emitting this diagnostic.; /// \p Fn is the function where the diagnostic is being emitted. \p Loc is; /// the location information to use in the diagnostic. If line table; /// information is available, the diagnostic will include the source code; /// location. \p Msg is the message to show. Note that this class does not; /// copy this message, so this reference must be valid for the whole life time; /// of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:11,Integrability,interface,interface,11,"/// Legacy interface.; /// \p PassName is the name of the pass emitting this diagnostic.; /// \p Fn is the function where the diagnostic is being emitted. \p Loc is; /// the location information to use in the diagnostic. If line table; /// information is available, the diagnostic will include the source code; /// location. \p Msg is the message to show. Note that this class does not; /// copy this message, so this reference must be valid for the whole life time; /// of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:339,Integrability,message,message,339,"/// Legacy interface.; /// \p PassName is the name of the pass emitting this diagnostic.; /// \p Fn is the function where the diagnostic is being emitted. \p Loc is; /// the location information to use in the diagnostic. If line table; /// information is available, the diagnostic will include the source code; /// location. \p Msg is the message to show. Note that this class does not; /// copy this message, so this reference must be valid for the whole life time; /// of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:401,Integrability,message,message,401,"/// Legacy interface.; /// \p PassName is the name of the pass emitting this diagnostic.; /// \p Fn is the function where the diagnostic is being emitted. \p Loc is; /// the location information to use in the diagnostic. If line table; /// information is available, the diagnostic will include the source code; /// location. \p Msg is the message to show. Note that this class does not; /// copy this message, so this reference must be valid for the whole life time; /// of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:50,Performance,optimiz,optimization,50,/// The IR value (currently basic block) that the optimization operates on.; /// This is currently used to provide run-time hotness information with PGO.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:39,Performance,optimiz,optimization,39,/// Diagnostic information for applied optimization remarks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:336,Performance,optimiz,optimization,336,"/// \p PassName is the name of the pass emitting this diagnostic. If this name; /// matches the regular expression given in -Rpass=, then the diagnostic will; /// be emitted. \p RemarkName is a textual identifier for the remark (single-; /// word, camel-case). \p Loc is the debug location and \p CodeRegion is the; /// region that the optimization operates on (currently only block is; /// supported).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:405,Availability,avail,available,405,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass=, then the; /// diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic; /// will include the source code location. \p Msg is the message to show.; /// Note that this class does not copy this message, so this reference; /// must be valid for the whole life time of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:489,Integrability,message,message,489,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass=, then the; /// diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic; /// will include the source code location. \p Msg is the message to show.; /// Note that this class does not copy this message, so this reference; /// must be valid for the whole life time of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:551,Integrability,message,message,551,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass=, then the; /// diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic; /// will include the source code location. \p Msg is the message to show.; /// Note that this class does not copy this message, so this reference; /// must be valid for the whole life time of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:38,Performance,optimiz,optimization,38,/// Diagnostic information for missed-optimization remarks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:342,Performance,optimiz,optimization,342,"/// \p PassName is the name of the pass emitting this diagnostic. If this name; /// matches the regular expression given in -Rpass-missed=, then the; /// diagnostic will be emitted. \p RemarkName is a textual identifier for the; /// remark (single-word, camel-case). \p Loc is the debug location and \p; /// CodeRegion is the region that the optimization operates on (currently only; /// block is supported).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:412,Availability,avail,available,412,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-missed=, then the; /// diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic; /// will include the source code location. \p Msg is the message to show.; /// Note that this class does not copy this message, so this reference; /// must be valid for the whole life time of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:496,Integrability,message,message,496,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-missed=, then the; /// diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic; /// will include the source code location. \p Msg is the message to show.; /// Note that this class does not copy this message, so this reference; /// must be valid for the whole life time of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:558,Integrability,message,message,558,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-missed=, then the; /// diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic; /// will include the source code location. \p Msg is the message to show.; /// Note that this class does not copy this message, so this reference; /// must be valid for the whole life time of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:31,Performance,optimiz,optimization,31,/// Diagnostic information for optimization analysis remarks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:344,Performance,optimiz,optimization,344,"/// \p PassName is the name of the pass emitting this diagnostic. If this name; /// matches the regular expression given in -Rpass-analysis=, then the; /// diagnostic will be emitted. \p RemarkName is a textual identifier for the; /// remark (single-word, camel-case). \p Loc is the debug location and \p; /// CodeRegion is the region that the optimization operates on (currently only; /// block is supported).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:340,Integrability,message,message,340,/// This is ctor variant allows a pass to build an optimization remark; /// from an existing remark.; ///; /// This is useful when a transformation pass (e.g LV) wants to emit a remark; /// (\p Orig) generated by one of its analyses (e.g. LAA) as its own analysis; /// remark. The string \p Prepend will be emitted before the original; /// message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:51,Performance,optimiz,optimization,51,/// This is ctor variant allows a pass to build an optimization remark; /// from an existing remark.; ///; /// This is useful when a transformation pass (e.g LV) wants to emit a remark; /// (\p Orig) generated by one of its analyses (e.g. LAA) as its own analysis; /// remark. The string \p Prepend will be emitted before the original; /// message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:414,Availability,avail,available,414,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-analysis=, then; /// the diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic will; /// include the source code location. \p Msg is the message to show. Note that; /// this class does not copy this message, so this reference must be valid for; /// the whole life time of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:498,Integrability,message,message,498,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-analysis=, then; /// the diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic will; /// include the source code location. \p Msg is the message to show. Note that; /// this class does not copy this message, so this reference must be valid for; /// the whole life time of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:560,Integrability,message,message,560,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-analysis=, then; /// the diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic will; /// include the source code location. \p Msg is the message to show. Note that; /// this class does not copy this message, so this reference must be valid for; /// the whole life time of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:31,Performance,optimiz,optimization,31,/// Diagnostic information for optimization analysis remarks related to; /// floating-point non-commutativity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:445,Integrability,message,message,445,"/// \p PassName is the name of the pass emitting this diagnostic. If this name; /// matches the regular expression given in -Rpass-analysis=, then the; /// diagnostic will be emitted. \p RemarkName is a textual identifier for the; /// remark (single-word, camel-case). \p Loc is the debug location and \p; /// CodeRegion is the region that the optimization operates on (currently only; /// block is supported). The front-end will append its own message related to; /// options that address floating-point non-commutativity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:344,Performance,optimiz,optimization,344,"/// \p PassName is the name of the pass emitting this diagnostic. If this name; /// matches the regular expression given in -Rpass-analysis=, then the; /// diagnostic will be emitted. \p RemarkName is a textual identifier for the; /// remark (single-word, camel-case). \p Loc is the debug location and \p; /// CodeRegion is the region that the optimization operates on (currently only; /// block is supported). The front-end will append its own message related to; /// options that address floating-point non-commutativity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:414,Availability,avail,available,414,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-analysis=, then; /// the diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic will; /// include the source code location. \p Msg is the message to show. The; /// front-end will append its own message related to options that address; /// floating-point non-commutativity. Note that this class does not copy this; /// message, so this reference must be valid for the whole life time of the; /// diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:498,Integrability,message,message,498,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-analysis=, then; /// the diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic will; /// include the source code location. \p Msg is the message to show. The; /// front-end will append its own message related to options that address; /// floating-point non-commutativity. Note that this class does not copy this; /// message, so this reference must be valid for the whole life time of the; /// diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:554,Integrability,message,message,554,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-analysis=, then; /// the diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic will; /// include the source code location. \p Msg is the message to show. The; /// front-end will append its own message related to options that address; /// floating-point non-commutativity. Note that this class does not copy this; /// message, so this reference must be valid for the whole life time of the; /// diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:678,Integrability,message,message,678,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-analysis=, then; /// the diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic will; /// include the source code location. \p Msg is the message to show. The; /// front-end will append its own message related to options that address; /// floating-point non-commutativity. Note that this class does not copy this; /// message, so this reference must be valid for the whole life time of the; /// diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:31,Performance,optimiz,optimization,31,/// Diagnostic information for optimization analysis remarks related to; /// pointer aliasing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:445,Integrability,message,message,445,"/// \p PassName is the name of the pass emitting this diagnostic. If this name; /// matches the regular expression given in -Rpass-analysis=, then the; /// diagnostic will be emitted. \p RemarkName is a textual identifier for the; /// remark (single-word, camel-case). \p Loc is the debug location and \p; /// CodeRegion is the region that the optimization operates on (currently only; /// block is supported). The front-end will append its own message related to; /// options that address pointer aliasing legality.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:344,Performance,optimiz,optimization,344,"/// \p PassName is the name of the pass emitting this diagnostic. If this name; /// matches the regular expression given in -Rpass-analysis=, then the; /// diagnostic will be emitted. \p RemarkName is a textual identifier for the; /// remark (single-word, camel-case). \p Loc is the debug location and \p; /// CodeRegion is the region that the optimization operates on (currently only; /// block is supported). The front-end will append its own message related to; /// options that address pointer aliasing legality.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:414,Availability,avail,available,414,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-analysis=, then; /// the diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic will; /// include the source code location. \p Msg is the message to show. The; /// front-end will append its own message related to options that address; /// pointer aliasing legality. Note that this class does not copy this; /// message, so this reference must be valid for the whole life time of the; /// diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:498,Integrability,message,message,498,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-analysis=, then; /// the diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic will; /// include the source code location. \p Msg is the message to show. The; /// front-end will append its own message related to options that address; /// pointer aliasing legality. Note that this class does not copy this; /// message, so this reference must be valid for the whole life time of the; /// diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:554,Integrability,message,message,554,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-analysis=, then; /// the diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic will; /// include the source code location. \p Msg is the message to show. The; /// front-end will append its own message related to options that address; /// pointer aliasing legality. Note that this class does not copy this; /// message, so this reference must be valid for the whole life time of the; /// diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:671,Integrability,message,message,671,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-analysis=, then; /// the diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic will; /// include the source code location. \p Msg is the message to show. The; /// front-end will append its own message related to options that address; /// pointer aliasing legality. Note that this class does not copy this; /// message, so this reference must be valid for the whole life time of the; /// diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:44,Availability,failure,failures,44,/// Diagnostic information for optimization failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:31,Performance,optimiz,optimization,31,/// Diagnostic information for optimization failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:165,Availability,avail,available,165,"/// \p Fn is the function where the diagnostic is being emitted. \p Loc is; /// the location information to use in the diagnostic. If line table; /// information is available, the diagnostic will include the source code; /// location. \p Msg is the message to show. Note that this class does not; /// copy this message, so this reference must be valid for the whole life time; /// of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:249,Integrability,message,message,249,"/// \p Fn is the function where the diagnostic is being emitted. \p Loc is; /// the location information to use in the diagnostic. If line table; /// information is available, the diagnostic will include the source code; /// location. \p Msg is the message to show. Note that this class does not; /// copy this message, so this reference must be valid for the whole life time; /// of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:311,Integrability,message,message,311,"/// \p Fn is the function where the diagnostic is being emitted. \p Loc is; /// the location information to use in the diagnostic. If line table; /// information is available, the diagnostic will include the source code; /// location. \p Msg is the message to show. Note that this class does not; /// copy this message, so this reference must be valid for the whole life time; /// of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:231,Performance,optimiz,optimization,231,"/// \p PassName is the name of the pass emitting this diagnostic. \p; /// RemarkName is a textual identifier for the remark (single-word,; /// camel-case). \p Loc is the debug location and \p CodeRegion is the; /// region that the optimization operates on (currently basic block is; /// supported).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:165,Availability,avail,available,165,"/// \p Fn is the function where the diagnostic is being emitted. \p Loc is; /// the location information to use in the diagnostic. If line table; /// information is available, the diagnostic will include the source code; /// location. \p Msg is the message to show. Note that this class does not; /// copy this message, so this reference must be valid for the whole life time; /// of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:249,Integrability,message,message,249,"/// \p Fn is the function where the diagnostic is being emitted. \p Loc is; /// the location information to use in the diagnostic. If line table; /// information is available, the diagnostic will include the source code; /// location. \p Msg is the message to show. Note that this class does not; /// copy this message, so this reference must be valid for the whole life time; /// of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:311,Integrability,message,message,311,"/// \p Fn is the function where the diagnostic is being emitted. \p Loc is; /// the location information to use in the diagnostic. If line table; /// information is available, the diagnostic will include the source code; /// location. \p Msg is the message to show. Note that this class does not; /// copy this message, so this reference must be valid for the whole life time; /// of the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:4,Integrability,Message,Message,4,/// Message to report.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h:411,Integrability,interface,interface,411,"//===- llvm/IR/DiagnosticPrinter.h - Diagnostic Printer ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the main interface for printer backend diagnostic.; //; // Clients of the backend diagnostics should overload this interface based; // on their needs.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h:517,Integrability,interface,interface,517,"//===- llvm/IR/DiagnosticPrinter.h - Diagnostic Printer ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the main interface for printer backend diagnostic.; //; // Clients of the backend diagnostics should overload this interface based; // on their needs.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h:4,Integrability,Interface,Interface,4,/// Interface for custom diagnostic printing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h:3,Usability,Simpl,Simple,3,// Simple types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h:3,Usability,Simpl,Simple,3,// Simple types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:45,Deployability,update,updated,45,"/// Track the RetainTypes, since they can be updated later on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:38,Modifiability,variab,variables,38,"/// Each subprogram's preserved local variables, labels and imported; /// entities.; ///; /// Do not use a std::vector. Some versions of libc++ apparently copy; /// instead of move on grow operations, and TrackingMDRef is expensive to; /// copy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:44,Modifiability,variab,variables,44,/// Finalize a specific subprogram - no new variables may be added to this; /// subprogram afterwards.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:410,Performance,optimiz,optimization,410,"/// A CompileUnit provides an anchor for all debugging; /// information generated during this instance of compilation.; /// \param Lang Source programming language, eg. dwarf::DW_LANG_C99; /// \param File File info.; /// \param Producer Identify the producer of debugging information; /// and code. Usually this is a compiler; /// version string.; /// \param isOptimized A boolean flag which indicates whether optimization; /// is enabled or not.; /// \param Flags This string lists command line options. This; /// string is directly embedded in debug info; /// output which may be used by a tool; /// analyzing generated debugging information.; /// \param RV This indicates runtime version for languages like; /// Objective-C.; /// \param SplitName The name of the file that we'll split debug info; /// out into.; /// \param Kind The kind of debug information to generate.; /// \param DWOId The DWOId if this is a split skeleton compile unit.; /// \param SplitDebugInlining Whether to emit inline debug info.; /// \param DebugInfoForProfiling Whether to emit extra debug info for; /// profile collection.; /// \param NameTableKind Whether to emit .debug_gnu_pubnames,; /// .debug_pubnames, or no pubnames at all.; /// \param SysRoot The clang system root (value of -isysroot).; /// \param SDK The SDK name. On Darwin, this is the last component; /// of the sysroot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:148,Security,Checksum,Checksum,148,"/// Create a file descriptor to hold debugging information for a file.; /// \param Filename File name.; /// \param Directory Directory.; /// \param Checksum Optional checksum kind (e.g. CSK_MD5, CSK_SHA1, etc.); /// and value.; /// \param Source Optional source text.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:166,Security,checksum,checksum,166,"/// Create a file descriptor to hold debugging information for a file.; /// \param Filename File name.; /// \param Directory Directory.; /// \param Checksum Optional checksum kind (e.g. CSK_MD5, CSK_SHA1, etc.); /// and value.; /// \param Source Optional source text.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:340,Modifiability,inherit,inheritance,340,"/// Create debugging information entry for a typedef.; /// \param Ty Original type.; /// \param Name Typedef name.; /// \param File File where this type is defined.; /// \param LineNo Line number.; /// \param Context The surrounding context for the typedef.; /// \param AlignInBits Alignment. (optional); /// \param Flags Flags to describe inheritance attribute, e.g. private; /// \param Annotations Annotations. (optional)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:57,Modifiability,inherit,inheritance,57,"/// Create debugging information entry to establish; /// inheritance relationship between two types.; /// \param Ty Original type.; /// \param BaseTy Base type. Ty is inherits from base.; /// \param BaseOffset Base offset.; /// \param VBPtrOffset Virtual base pointer offset.; /// \param Flags Flags to describe inheritance attribute,; /// e.g. private",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:167,Modifiability,inherit,inherits,167,"/// Create debugging information entry to establish; /// inheritance relationship between two types.; /// \param Ty Original type.; /// \param BaseTy Base type. Ty is inherits from base.; /// \param BaseOffset Base offset.; /// \param VBPtrOffset Virtual base pointer offset.; /// \param Flags Flags to describe inheritance attribute,; /// e.g. private",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:312,Modifiability,inherit,inheritance,312,"/// Create debugging information entry to establish; /// inheritance relationship between two types.; /// \param Ty Original type.; /// \param BaseTy Base type. Ty is inherits from base.; /// \param BaseOffset Base offset.; /// \param VBPtrOffset Virtual base pointer offset.; /// \param Flags Flags to describe inheritance attribute,; /// e.g. private",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:69,Modifiability,variab,variable,69,"/// Create debugging information entry for Objective-C; /// instance variable.; /// \param Name Member name.; /// \param File File where this member is defined.; /// \param LineNo Line number.; /// \param SizeInBits Member size.; /// \param AlignInBits Member alignment.; /// \param OffsetInBits Member offset.; /// \param Flags Flags to encode member attribute, e.g. private; /// \param Ty Parent type.; /// \param PropertyNode Property associated with this ivar.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:471,Energy Efficiency,Allocate,Allocated,471,"/// Create debugging information entry for an array.; /// \param Size Array size.; /// \param AlignInBits Alignment.; /// \param Ty Element type.; /// \param Subscripts Subscripts.; /// \param DataLocation The location of the raw data of a descriptor-based; /// Fortran array, either a DIExpression* or; /// a DIVariable*.; /// \param Associated The associated attribute of a descriptor-based; /// Fortran array, either a DIExpression* or; /// a DIVariable*.; /// \param Allocated The allocated attribute of a descriptor-based; /// Fortran array, either a DIExpression* or; /// a DIVariable*.; /// \param Rank The rank attribute of a descriptor-based; /// Fortran array, either a DIExpression* or; /// a DIVariable*.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:485,Energy Efficiency,allocate,allocated,485,"/// Create debugging information entry for an array.; /// \param Size Array size.; /// \param AlignInBits Alignment.; /// \param Ty Element type.; /// \param Subscripts Subscripts.; /// \param DataLocation The location of the raw data of a descriptor-based; /// Fortran array, either a DIExpression* or; /// a DIVariable*.; /// \param Associated The associated attribute of a descriptor-based; /// Fortran array, either a DIExpression* or; /// a DIVariable*.; /// \param Allocated The allocated attribute of a descriptor-based; /// Fortran array, either a DIExpression* or; /// a DIVariable*.; /// \param Rank The rank attribute of a descriptor-based; /// Fortran array, either a DIExpression* or; /// a DIVariable*.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:46,Modifiability,variab,variable,46,/// Create a new descriptor for the specified variable.; /// \param Context Variable scope.; /// \param Name Name of the variable.; /// \param LinkageName Mangled name of the variable.; /// \param File File where this variable is defined.; /// \param LineNo Line number.; /// \param Ty Variable Type.; /// \param IsLocalToUnit Boolean flag indicate whether this variable is; /// externally visible or not.; /// \param Expr The location of the global relative to the attached; /// GlobalVariable.; /// \param Decl Reference to the corresponding declaration.; /// \param AlignInBits Variable alignment(or 0 if no alignment attr was; /// specified),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:76,Modifiability,Variab,Variable,76,/// Create a new descriptor for the specified variable.; /// \param Context Variable scope.; /// \param Name Name of the variable.; /// \param LinkageName Mangled name of the variable.; /// \param File File where this variable is defined.; /// \param LineNo Line number.; /// \param Ty Variable Type.; /// \param IsLocalToUnit Boolean flag indicate whether this variable is; /// externally visible or not.; /// \param Expr The location of the global relative to the attached; /// GlobalVariable.; /// \param Decl Reference to the corresponding declaration.; /// \param AlignInBits Variable alignment(or 0 if no alignment attr was; /// specified),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:121,Modifiability,variab,variable,121,/// Create a new descriptor for the specified variable.; /// \param Context Variable scope.; /// \param Name Name of the variable.; /// \param LinkageName Mangled name of the variable.; /// \param File File where this variable is defined.; /// \param LineNo Line number.; /// \param Ty Variable Type.; /// \param IsLocalToUnit Boolean flag indicate whether this variable is; /// externally visible or not.; /// \param Expr The location of the global relative to the attached; /// GlobalVariable.; /// \param Decl Reference to the corresponding declaration.; /// \param AlignInBits Variable alignment(or 0 if no alignment attr was; /// specified),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:175,Modifiability,variab,variable,175,/// Create a new descriptor for the specified variable.; /// \param Context Variable scope.; /// \param Name Name of the variable.; /// \param LinkageName Mangled name of the variable.; /// \param File File where this variable is defined.; /// \param LineNo Line number.; /// \param Ty Variable Type.; /// \param IsLocalToUnit Boolean flag indicate whether this variable is; /// externally visible or not.; /// \param Expr The location of the global relative to the attached; /// GlobalVariable.; /// \param Decl Reference to the corresponding declaration.; /// \param AlignInBits Variable alignment(or 0 if no alignment attr was; /// specified),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:218,Modifiability,variab,variable,218,/// Create a new descriptor for the specified variable.; /// \param Context Variable scope.; /// \param Name Name of the variable.; /// \param LinkageName Mangled name of the variable.; /// \param File File where this variable is defined.; /// \param LineNo Line number.; /// \param Ty Variable Type.; /// \param IsLocalToUnit Boolean flag indicate whether this variable is; /// externally visible or not.; /// \param Expr The location of the global relative to the attached; /// GlobalVariable.; /// \param Decl Reference to the corresponding declaration.; /// \param AlignInBits Variable alignment(or 0 if no alignment attr was; /// specified),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:286,Modifiability,Variab,Variable,286,/// Create a new descriptor for the specified variable.; /// \param Context Variable scope.; /// \param Name Name of the variable.; /// \param LinkageName Mangled name of the variable.; /// \param File File where this variable is defined.; /// \param LineNo Line number.; /// \param Ty Variable Type.; /// \param IsLocalToUnit Boolean flag indicate whether this variable is; /// externally visible or not.; /// \param Expr The location of the global relative to the attached; /// GlobalVariable.; /// \param Decl Reference to the corresponding declaration.; /// \param AlignInBits Variable alignment(or 0 if no alignment attr was; /// specified),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:362,Modifiability,variab,variable,362,/// Create a new descriptor for the specified variable.; /// \param Context Variable scope.; /// \param Name Name of the variable.; /// \param LinkageName Mangled name of the variable.; /// \param File File where this variable is defined.; /// \param LineNo Line number.; /// \param Ty Variable Type.; /// \param IsLocalToUnit Boolean flag indicate whether this variable is; /// externally visible or not.; /// \param Expr The location of the global relative to the attached; /// GlobalVariable.; /// \param Decl Reference to the corresponding declaration.; /// \param AlignInBits Variable alignment(or 0 if no alignment attr was; /// specified),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:581,Modifiability,Variab,Variable,581,/// Create a new descriptor for the specified variable.; /// \param Context Variable scope.; /// \param Name Name of the variable.; /// \param LinkageName Mangled name of the variable.; /// \param File File where this variable is defined.; /// \param LineNo Line number.; /// \param Ty Variable Type.; /// \param IsLocalToUnit Boolean flag indicate whether this variable is; /// externally visible or not.; /// \param Expr The location of the global relative to the attached; /// GlobalVariable.; /// \param Decl Reference to the corresponding declaration.; /// \param AlignInBits Variable alignment(or 0 if no alignment attr was; /// specified),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:40,Modifiability,variab,variable,40,"/// Create a new descriptor for an auto variable. This is a local variable; /// that is not a subprogram parameter.; ///; /// \c Scope must be a \a DILocalScope, and thus its scope chain eventually; /// leads to a \a DISubprogram.; ///; /// If \c AlwaysPreserve, this variable will be referenced from its; /// containing subprogram, and will survive some optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:66,Modifiability,variab,variable,66,"/// Create a new descriptor for an auto variable. This is a local variable; /// that is not a subprogram parameter.; ///; /// \c Scope must be a \a DILocalScope, and thus its scope chain eventually; /// leads to a \a DISubprogram.; ///; /// If \c AlwaysPreserve, this variable will be referenced from its; /// containing subprogram, and will survive some optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:268,Modifiability,variab,variable,268,"/// Create a new descriptor for an auto variable. This is a local variable; /// that is not a subprogram parameter.; ///; /// \c Scope must be a \a DILocalScope, and thus its scope chain eventually; /// leads to a \a DISubprogram.; ///; /// If \c AlwaysPreserve, this variable will be referenced from its; /// containing subprogram, and will survive some optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:355,Performance,optimiz,optimizations,355,"/// Create a new descriptor for an auto variable. This is a local variable; /// that is not a subprogram parameter.; ///; /// \c Scope must be a \a DILocalScope, and thus its scope chain eventually; /// leads to a \a DISubprogram.; ///; /// If \c AlwaysPreserve, this variable will be referenced from its; /// containing subprogram, and will survive some optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:44,Modifiability,variab,variable,44,"/// Create a new descriptor for a parameter variable.; ///; /// \c Scope must be a \a DILocalScope, and thus its scope chain eventually; /// leads to a \a DISubprogram.; ///; /// \c ArgNo is the index (starting from \c 1) of this variable in the; /// subprogram parameters. \c ArgNo should not conflict with other; /// parameters of the same subprogram.; ///; /// If \c AlwaysPreserve, this variable will be referenced from its; /// containing subprogram, and will survive some optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:230,Modifiability,variab,variable,230,"/// Create a new descriptor for a parameter variable.; ///; /// \c Scope must be a \a DILocalScope, and thus its scope chain eventually; /// leads to a \a DISubprogram.; ///; /// \c ArgNo is the index (starting from \c 1) of this variable in the; /// subprogram parameters. \c ArgNo should not conflict with other; /// parameters of the same subprogram.; ///; /// If \c AlwaysPreserve, this variable will be referenced from its; /// containing subprogram, and will survive some optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:391,Modifiability,variab,variable,391,"/// Create a new descriptor for a parameter variable.; ///; /// \c Scope must be a \a DILocalScope, and thus its scope chain eventually; /// leads to a \a DISubprogram.; ///; /// \c ArgNo is the index (starting from \c 1) of this variable in the; /// subprogram parameters. \c ArgNo should not conflict with other; /// parameters of the same subprogram.; ///; /// If \c AlwaysPreserve, this variable will be referenced from its; /// containing subprogram, and will survive some optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:478,Performance,optimiz,optimizations,478,"/// Create a new descriptor for a parameter variable.; ///; /// \c Scope must be a \a DILocalScope, and thus its scope chain eventually; /// leads to a \a DISubprogram.; ///; /// \c ArgNo is the index (starting from \c 1) of this variable in the; /// subprogram parameters. \c ArgNo should not conflict with other; /// parameters of the same subprogram.; ///; /// If \c AlwaysPreserve, this variable will be referenced from its; /// containing subprogram, and will survive some optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:51,Modifiability,variab,variable,51,/// Create a new descriptor for the specified; /// variable which has a complex address expression for its address.; /// \param Addr An array of complex address operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:31,Modifiability,variab,variable,31,"/// Create an expression for a variable that does not have an address, but; /// does have a constant value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:273,Modifiability,variab,variable,273,/// Create a new descriptor for the specified subprogram.; /// See comments in DISubprogram* for descriptions of these fields.; /// \param Scope Function scope.; /// \param Name Function name.; /// \param LinkageName Mangled function name.; /// \param File File where this variable is defined.; /// \param LineNo Line number.; /// \param Ty Function type.; /// \param ScopeLine Set to the beginning of the scope this starts; /// \param Flags e.g. is this function prototyped or not.; /// These flags are used to emit dwarf attributes.; /// \param SPFlags Additional flags specific to subprograms.; /// \param TParams Function template parameters.; /// \param ThrownTypes Exception types this function may throw.; /// \param Annotations Attribute Annotations.; /// \param TargetFuncName The name of the target function if this is; /// a trampoline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:276,Modifiability,variab,variable,276,"/// Create a new descriptor for the specified C++ method.; /// See comments in \a DISubprogram* for descriptions of these fields.; /// \param Scope Function scope.; /// \param Name Function name.; /// \param LinkageName Mangled function name.; /// \param File File where this variable is defined.; /// \param LineNo Line number.; /// \param Ty Function type.; /// \param VTableIndex Index no of this method in virtual table, or -1u if; /// unrepresentable.; /// \param ThisAdjustment; /// MS ABI-specific adjustment of 'this' that occurs; /// in the prologue.; /// \param VTableHolder Type that holds vtable.; /// \param Flags e.g. is this function prototyped or not.; /// This flags are used to emit dwarf attributes.; /// \param SPFlags Additional flags specific to subprograms.; /// \param TParams Function template parameters.; /// \param ThrownTypes Exception types this function may throw.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:128,Modifiability,variab,variable,128,/// Create common block entry for a Fortran common block.; /// \param Scope Scope of this common block.; /// \param decl Global variable declaration.; /// \param Name The name of this common block.; /// \param File The file this common block is defined.; /// \param LineNo Line number.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:163,Deployability,Configurat,ConfigurationMacros,163,"/// This creates new descriptor for a module with the specified; /// parent scope.; /// \param Scope Parent scope; /// \param Name Name of this module; /// \param ConfigurationMacros; /// A space-separated shell-quoted list of -D macro; /// definitions as they would appear on a command line.; /// \param IncludePath The path to the module map file.; /// \param APINotesFile The path to an API notes file for this module.; /// \param File Source file of the module.; /// Used for Fortran modules.; /// \param LineNo Source line number of the module.; /// Used for Fortran modules.; /// \param IsDecl This is a module declaration; default to false;; /// when set to true, only Scope and Name are required; /// as this entry is just a hint for the debugger to find; /// the corresponding definition in the global scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:163,Modifiability,Config,ConfigurationMacros,163,"/// This creates new descriptor for a module with the specified; /// parent scope.; /// \param Scope Parent scope; /// \param Name Name of this module; /// \param ConfigurationMacros; /// A space-separated shell-quoted list of -D macro; /// definitions as they would appear on a command line.; /// \param IncludePath The path to the module map file.; /// \param APINotesFile The path to an API notes file for this module.; /// \param File Source file of the module.; /// Used for Fortran modules.; /// \param LineNo Source line number of the module.; /// Used for Fortran modules.; /// \param IsDecl This is a module declaration; default to false;; /// when set to true, only Scope and Name are required; /// as this entry is just a hint for the debugger to find; /// the corresponding definition in the global scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:93,Modifiability,extend,extends,93,/// This creates a descriptor for a lexical block with a new file; /// attached. This merely extends the existing; /// lexical block as it crosses a file.; /// \param Scope Lexical block.; /// \param File Source file.; /// \param Discriminator DWARF path discriminator value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:188,Modifiability,variab,variable,188,"/// Create a descriptor for an imported function.; /// \param Context The scope this module is imported into.; /// \param Decl The declaration (or definition) of a function, type, or; /// variable.; /// \param File File where the declaration is located.; /// \param Line Line number of the declaration.; /// \param Elements Renamed elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:89,Modifiability,variab,variable,89,/// Insert a new llvm.dbg.declare intrinsic call.; /// \param Storage llvm::Value of the variable; /// \param VarInfo Variable's debug info descriptor.; /// \param Expr A complex location expression.; /// \param DL Debug info location.; /// \param InsertAtEnd Location for the new intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:118,Modifiability,Variab,Variable,118,/// Insert a new llvm.dbg.declare intrinsic call.; /// \param Storage llvm::Value of the variable; /// \param VarInfo Variable's debug info descriptor.; /// \param Expr A complex location expression.; /// \param DL Debug info location.; /// \param InsertAtEnd Location for the new intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:275,Modifiability,Variab,Variable,275,"/// Insert a new llvm.dbg.assign intrinsic call.; /// \param LinkedInstr Instruction with a DIAssignID to link with the new; /// intrinsic. The intrinsic will be inserted after; /// this instruction.; /// \param Val The value component of this dbg.assign.; /// \param SrcVar Variable's debug info descriptor.; /// \param ValExpr A complex location expression to modify \p Val.; /// \param Addr The address component (store destination).; /// \param AddrExpr A complex location expression to modify \p Addr.; /// NOTE: \p ValExpr carries the FragInfo for the; /// variable.; /// \param DL Debug info location, usually: (line: 0,; /// column: 0, scope: var-decl-scope). See; /// getDebugValueLoc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:563,Modifiability,variab,variable,563,"/// Insert a new llvm.dbg.assign intrinsic call.; /// \param LinkedInstr Instruction with a DIAssignID to link with the new; /// intrinsic. The intrinsic will be inserted after; /// this instruction.; /// \param Val The value component of this dbg.assign.; /// \param SrcVar Variable's debug info descriptor.; /// \param ValExpr A complex location expression to modify \p Val.; /// \param Addr The address component (store destination).; /// \param AddrExpr A complex location expression to modify \p Addr.; /// NOTE: \p ValExpr carries the FragInfo for the; /// variable.; /// \param DL Debug info location, usually: (line: 0,; /// column: 0, scope: var-decl-scope). See; /// getDebugValueLoc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:89,Modifiability,variab,variable,89,/// Insert a new llvm.dbg.declare intrinsic call.; /// \param Storage llvm::Value of the variable; /// \param VarInfo Variable's debug info descriptor.; /// \param Expr A complex location expression.; /// \param DL Debug info location.; /// \param InsertBefore Location for the new intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:118,Modifiability,Variab,Variable,118,/// Insert a new llvm.dbg.declare intrinsic call.; /// \param Storage llvm::Value of the variable; /// \param VarInfo Variable's debug info descriptor.; /// \param Expr A complex location expression.; /// \param DL Debug info location.; /// \param InsertBefore Location for the new intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:83,Modifiability,variab,variable,83,/// Insert a new llvm.dbg.value intrinsic call.; /// \param Val llvm::Value of the variable; /// \param VarInfo Variable's debug info descriptor.; /// \param Expr A complex location expression.; /// \param DL Debug info location.; /// \param InsertAtEnd Location for the new intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:112,Modifiability,Variab,Variable,112,/// Insert a new llvm.dbg.value intrinsic call.; /// \param Val llvm::Value of the variable; /// \param VarInfo Variable's debug info descriptor.; /// \param Expr A complex location expression.; /// \param DL Debug info location.; /// \param InsertAtEnd Location for the new intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:83,Modifiability,variab,variable,83,/// Insert a new llvm.dbg.value intrinsic call.; /// \param Val llvm::Value of the variable; /// \param VarInfo Variable's debug info descriptor.; /// \param Expr A complex location expression.; /// \param DL Debug info location.; /// \param InsertBefore Location for the new intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:112,Modifiability,Variab,Variable,112,/// Insert a new llvm.dbg.value intrinsic call.; /// \param Val llvm::Value of the variable; /// \param VarInfo Variable's debug info descriptor.; /// \param Expr A complex location expression.; /// \param DL Debug info location.; /// \param InsertBefore Location for the new intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h:450,Energy Efficiency,efficient,efficient,450,"//===- Dominators.h - Dominator Info Calculation ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the DominatorTree class, which provides fast and efficient; // dominance queries.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h:974,Deployability,update,updated,974,"/// Concrete subclass of DominatorTreeBase that is used to compute a; /// normal dominator tree.; ///; /// Definition: A block is said to be forward statically reachable if there is; /// a path from the entry of the function to the block. A statically reachable; /// block may become statically unreachable during optimization.; ///; /// A forward unreachable block may appear in the dominator tree, or it may; /// not. If it does, dominance queries will return results as if all reachable; /// blocks dominate it. When asking for a Node corresponding to a potentially; /// unreachable block, calling code must handle the case where the block was; /// unreachable and the result of getNode() is nullptr.; ///; /// Generally, a block known to be unreachable when the dominator tree is; /// constructed will not be in the tree. One which becomes unreachable after; /// the dominator tree is initially constructed may still exist in the tree,; /// even if the tree is properly updated. Calling code should not rely on the; /// preceding statements; this is stated only to assist human understanding.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h:314,Performance,optimiz,optimization,314,"/// Concrete subclass of DominatorTreeBase that is used to compute a; /// normal dominator tree.; ///; /// Definition: A block is said to be forward statically reachable if there is; /// a path from the entry of the function to the block. A statically reachable; /// block may become statically unreachable during optimization.; ///; /// A forward unreachable block may appear in the dominator tree, or it may; /// not. If it does, dominance queries will return results as if all reachable; /// blocks dominate it. When asking for a Node corresponding to a potentially; /// unreachable block, calling code must handle the case where the block was; /// unreachable and the result of getNode() is nullptr.; ///; /// Generally, a block known to be unreachable when the dominator tree is; /// constructed will not be in the tree. One which becomes unreachable after; /// the dominator tree is initially constructed may still exist in the tree,; /// even if the tree is properly updated. Calling code should not rely on the; /// preceding statements; this is stated only to assist human understanding.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h:76,Availability,avail,available,76,"/// Return true if value Def dominates use U, in the sense that Def is; /// available at U, and could be substituted as the used value without; /// violating the SSA dominance requirement.; ///; /// In particular, it is worth noting that:; /// * Non-instruction Defs dominate everything.; /// * Def does not dominate a use in Def itself (outside of degenerate cases; /// like unreachable code or trivial phi cycles).; /// * Invoke Defs only dominate uses in their default destination.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h:174,Safety,avoid,avoid,174,"/// Returns true if Def would dominate a use in any instruction in BB.; /// If Def is an instruction in BB, then Def does not dominate BB.; ///; /// Does not accept Value to avoid ambiguity with dominance checks between; /// two basic blocks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h:124,Availability,avail,available,124,"/// Find the nearest instruction I that dominates both I1 and I2, in the sense; /// that a result produced before I will be available at both I1 and I2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Dominators.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/EHPersonalities.h:43,Safety,safe,safely,43,/// Return true if this personality may be safely removed if there; /// are no invoke instructions remaining in the current function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/EHPersonalities.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/EHPersonalities.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/FixedPointBuilder.h:3,Availability,Down,Downscale,3,// Downscale.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/FixedPointBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/FixedPointBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/FMF.h:91,Deployability,update,updated,91,"// If all 7 bits are set, turn this into -1. If the number of bits grows,; // this must be updated. This is intended to provide some forward binary; // compatibility insurance for the meaning of 'fast' in case bits are added.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/FMF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/FMF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/FPEnv.h:62,Safety,safe,safely,62,/// Returns true if the possibility of a signaling NaN can be safely; /// ignored.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/FPEnv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/FPEnv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:122,Energy Efficiency,allocate,allocated,122,"/// hasLazyArguments/CheckLazyArguments - The argument list of a function is; /// built on demand, so that the list isn't allocated until the first client; /// needs it. The hasLazyArguments predicate returns true if the arg list; /// hasn't been set up yet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:4,Performance,Cache,Cache,4,/// Cache for TLI::getLibFunc() result without prototype validation.; /// UnknownLibFunc if uninitialized. NotLibFunc if definitely not lib func.; /// Otherwise may be libfunc if prototype validation passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:57,Security,validat,validation,57,/// Cache for TLI::getLibFunc() result without prototype validation.; /// UnknownLibFunc if uninitialized. NotLibFunc if definitely not lib func.; /// Otherwise may be libfunc if prototype validation passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:189,Security,validat,validation,189,/// Cache for TLI::getLibFunc() result without prototype validation.; /// UnknownLibFunc if uninitialized. NotLibFunc if definitely not lib func.; /// Otherwise may be libfunc if prototype validation passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:46,Deployability,update,updated,46,// TODO: remove this once all users have been updated to pass an AddrSpace,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:24,Security,access,accessors,24,// Provide fast operand accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:52,Modifiability,variab,variable,52,/// isVarArg - Return true if this function takes a variable number of; /// arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:4,Deployability,Update,Update,4,"/// Update internal caches that depend on the function name (such as the; /// intrinsic ID and libcall cache).; /// Note, this method does not need to be called directly, as it is called; /// from Value::setName() whenever the name of this function changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:32,Integrability,depend,depend,32,"/// Update internal caches that depend on the function name (such as the; /// intrinsic ID and libcall cache).; /// Note, this method does not need to be called directly, as it is called; /// from Value::setName() whenever the name of this function changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:20,Performance,cache,caches,20,"/// Update internal caches that depend on the function name (such as the; /// intrinsic ID and libcall cache).; /// Note, this method does not need to be called directly, as it is called; /// from Value::setName() whenever the name of this function changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:103,Performance,cache,cache,103,"/// Update internal caches that depend on the function name (such as the; /// intrinsic ID and libcall cache).; /// Note, this method does not need to be called directly, as it is called; /// from Value::setName() whenever the name of this function changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:286,Performance,optimiz,optimized,286,"/// Set the entry count for this function.; ///; /// Entry count is the number of times this function was executed based on; /// pgo data. \p Imports points to a set of GUIDs that needs to; /// be imported by the function for sample PGO, to enable the same inlines as; /// the profiled optimized binary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:169,Usability,GUID,GUIDs,169,"/// Set the entry count for this function.; ///; /// Entry count is the number of times this function was executed based on; /// pgo data. \p Imports points to a set of GUIDs that needs to; /// be imported by the function for sample PGO, to enable the same inlines as; /// the profiled optimized binary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:18,Integrability,wrap,wrapper,18,/// A convenience wrapper for setting entry count,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:135,Performance,optimiz,optimized,135,"/// Returns the set of GUIDs that needs to be imported to the function for; /// sample PGO, to enable the same inlines as the profiled optimized binary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:23,Usability,GUID,GUIDs,23,"/// Returns the set of GUIDs that needs to be imported to the function for; /// sample PGO, to enable the same inlines as the profiled optimized binary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:22,Usability,clear,clearGC,22,/// hasGC/getGC/setGC/clearGC - The name of the garbage collection algorithm; /// to use during code generation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:171,Availability,error,error,171,"/// For a string attribute \p Kind, parse attribute as an integer.; ///; /// \returns \p Default if attribute is not present.; ///; /// \returns \p Default if there is an error parsing the attribute integer,; /// and error is emitted to the LLVMContext",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:217,Availability,error,error,217,"/// For a string attribute \p Kind, parse attribute as an integer.; ///; /// \returns \p Default if attribute is not present.; ///; /// \returns \p Default if there is an error parsing the attribute integer,; /// and error is emitted to the LLVMContext",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:39,Security,access,access,39,/// Determine if the function does not access memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:39,Security,access,access,39,/// Determine if the function does not access or only reads memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:39,Security,access,access,39,/// Determine if the function does not access or only writes memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:30,Security,access,access,30,/// Determine if the call can access memmory only using pointers based; /// on its arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:39,Security,access,access,39,/// Determine if the function may only access memory that is; /// inaccessible from the IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:39,Security,access,access,39,/// Determine if the function may only access memory that is; /// either inaccessible from the IR or pointed to by its arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:41,Performance,perform,perform,41,/// Determine if the function should not perform indirect branch tracking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:11,Performance,optimiz,optimize,11,/// Do not optimize this function (-O0).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:4,Performance,Optimiz,Optimize,4,/// Optimize this function for minimum size (-Oz).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:4,Performance,Optimiz,Optimize,4,/// Optimize this function for size (-Os) or minimum size (-Oz).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:14,Security,access,access,14,// These need access to the underlying BB list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:96,Security,Access,Accessing,96,"//===--------------------------------------------------------------------===//; // Symbol Table Accessing functions...; /// getSymbolTable() - Return the symbol table if any, otherwise nullptr.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:262,Integrability,depend,depends,262,"/// viewCFG - This function is meant for use from the debugger. You can just; /// say 'call F->viewCFG()' and a ghostview window should pop up from the; /// program, displaying the CFG of the current function with the code for each; /// basic block inside. This depends on there being a 'dot' and 'gv' program; /// in your path.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:4,Modifiability,Extend,Extended,4,/// Extended form to print edge weights.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:4,Modifiability,Extend,Extended,4,/// Extended form to print edge weights.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:339,Modifiability,variab,variables,339,"/// hasAddressTaken - returns true if there are any uses of this function; /// other than direct calls or invokes to it, or blockaddress expressions.; /// Optionally passes back an offending user for diagnostic purposes,; /// ignores callback uses, assume like pointer annotation calls, references in; /// llvm.used and llvm.compiler.used variables, operand bundle; /// ""clang.arc.attachedcall"", and direct calls with a different call site; /// signature (the function is implicitly casted).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:56,Safety,safe,safe,56,"/// isDefTriviallyDead - Return true if it is trivially safe to remove; /// this function definition from the module (because it isn't externally; /// visible, does not have its address taken, and has no callers). To make; /// this more accurate, call removeDeadConstantUsers first.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:143,Security,access,access,143,/// Check whether null pointer dereferencing is considered undefined behavior; /// for a given function or an address space.; /// Null pointer access in non-zero address space is not considered undefined.; /// Return value: false => null pointer dereference is undefined.; /// Return value: true => null pointer dereference is not undefined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:1482,Energy Efficiency,allocate,allocated,1482,"0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // GCStrategy coordinates code generation algorithms and implements some itself; // in order to generate code compatible with a target code generator as; // specified in a function's 'gc' attribute. Algorithms are enabled by setting; // flags in a subclass's constructor, and some virtual methods can be; // overridden.; //; // GCStrategy is relevant for implementations using either gc.root or; // gc.statepoint based lowering strategies, but is currently focused mostly on; // options for gc.root. This will change over time.; //; // When requested by a subclass of GCStrategy, the gc.root implementation will; // populate GCModuleInfo and GCFunctionInfo with that about each Function in; // the Module that opts in to garbage collection. Specifically:; //; // - Safe points; // Garbage collection is generally only possible at certain points in code.; // GCStrategy can request that the collector insert such points:; //; // - At and after any call to a subroutine; // - Before returning from the current function; // - Before backwards branches (loops); //; // - Roots; // When a reference to a GC-allocated object exists on the stack, it must be; // stored in an alloca registered with llvm.gcoot.; //; // This information can used to emit the metadata tables which are required by; // the target garbage collector runtime.; //; // When used with gc.statepoint, information about safepoint and roots can be; // found in the binary StackMap section after code generation. Safepoint; // placement is currently the responsibility of the frontend, though late; // insertion support is planned.; //; // The read and write barrier support can be used with either implementation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:1145,Safety,Safe,Safe,1145,"0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // GCStrategy coordinates code generation algorithms and implements some itself; // in order to generate code compatible with a target code generator as; // specified in a function's 'gc' attribute. Algorithms are enabled by setting; // flags in a subclass's constructor, and some virtual methods can be; // overridden.; //; // GCStrategy is relevant for implementations using either gc.root or; // gc.statepoint based lowering strategies, but is currently focused mostly on; // options for gc.root. This will change over time.; //; // When requested by a subclass of GCStrategy, the gc.root implementation will; // populate GCModuleInfo and GCFunctionInfo with that about each Function in; // the Module that opts in to garbage collection. Specifically:; //; // - Safe points; // Garbage collection is generally only possible at certain points in code.; // GCStrategy can request that the collector insert such points:; //; // - At and after any call to a subroutine; // - Before returning from the current function; // - Before backwards branches (loops); //; // - Roots; // When a reference to a GC-allocated object exists on the stack, it must be; // stored in an alloca registered with llvm.gcoot.; //; // This information can used to emit the metadata tables which are required by; // the target garbage collector runtime.; //; // When used with gc.statepoint, information about safepoint and roots can be; // found in the binary StackMap section after code generation. Safepoint; // placement is currently the responsibility of the frontend, though late; // insertion support is planned.; //; // The read and write barrier support can be used with either implementation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:1765,Safety,safe,safepoint,1765,"0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // GCStrategy coordinates code generation algorithms and implements some itself; // in order to generate code compatible with a target code generator as; // specified in a function's 'gc' attribute. Algorithms are enabled by setting; // flags in a subclass's constructor, and some virtual methods can be; // overridden.; //; // GCStrategy is relevant for implementations using either gc.root or; // gc.statepoint based lowering strategies, but is currently focused mostly on; // options for gc.root. This will change over time.; //; // When requested by a subclass of GCStrategy, the gc.root implementation will; // populate GCModuleInfo and GCFunctionInfo with that about each Function in; // the Module that opts in to garbage collection. Specifically:; //; // - Safe points; // Garbage collection is generally only possible at certain points in code.; // GCStrategy can request that the collector insert such points:; //; // - At and after any call to a subroutine; // - Before returning from the current function; // - Before backwards branches (loops); //; // - Roots; // When a reference to a GC-allocated object exists on the stack, it must be; // stored in an alloca registered with llvm.gcoot.; //; // This information can used to emit the metadata tables which are required by; // the target garbage collector runtime.; //; // When used with gc.statepoint, information about safepoint and roots can be; // found in the binary StackMap section after code generation. Safepoint; // placement is currently the responsibility of the frontend, though late; // insertion support is planned.; //; // The read and write barrier support can be used with either implementation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:1856,Safety,Safe,Safepoint,1856,"0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // GCStrategy coordinates code generation algorithms and implements some itself; // in order to generate code compatible with a target code generator as; // specified in a function's 'gc' attribute. Algorithms are enabled by setting; // flags in a subclass's constructor, and some virtual methods can be; // overridden.; //; // GCStrategy is relevant for implementations using either gc.root or; // gc.statepoint based lowering strategies, but is currently focused mostly on; // options for gc.root. This will change over time.; //; // When requested by a subclass of GCStrategy, the gc.root implementation will; // populate GCModuleInfo and GCFunctionInfo with that about each Function in; // the Module that opts in to garbage collection. Specifically:; //; // - Safe points; // Garbage collection is generally only possible at certain points in code.; // GCStrategy can request that the collector insert such points:; //; // - At and after any call to a subroutine; // - Before returning from the current function; // - Before backwards branches (loops); //; // - Roots; // When a reference to a GC-allocated object exists on the stack, it must be; // stored in an alloca registered with llvm.gcoot.; //; // This information can used to emit the metadata tables which are required by; // the target garbage collector runtime.; //; // When used with gc.statepoint, information about safepoint and roots can be; // found in the binary StackMap section after code generation. Safepoint; // placement is currently the responsibility of the frontend, though late; // insertion support is planned.; //; // The read and write barrier support can be used with either implementation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:63,Modifiability,Rewrite,RewriteStatepointsForGC,63,"/// If UseStatepoints is set, this determines whether; /// the RewriteStatepointsForGC pass should rewrite; /// this function's calls.; /// This should only be set if UseStatepoints is set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:99,Modifiability,rewrite,rewrite,99,"/// If UseStatepoints is set, this determines whether; /// the RewriteStatepointsForGC pass should rewrite; /// this function's calls.; /// This should only be set if UseStatepoints is set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:38,Safety,safe,safepoints,38,"///< if set, calls are inferred to be safepoints",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:85,Availability,reliab,reliably,85,"/** @name Statepoint Specific Properties */; ///@{; /// If the type specified can be reliably distinguished, returns true for; /// pointers to GC managed locations and false for pointers to non-GC; /// managed locations. Note a GCStrategy can always return 'std::nullopt'; /// (i.e. an empty optional indicating it can't reliably distinguish.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:321,Availability,reliab,reliably,321,"/** @name Statepoint Specific Properties */; ///@{; /// If the type specified can be reliably distinguished, returns true for; /// pointers to GC managed locations and false for pointers to non-GC; /// managed locations. Note a GCStrategy can always return 'std::nullopt'; /// (i.e. an empty optional indicating it can't reliably distinguish.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:24,Modifiability,Rewrite,RewriteStatepointsForGC,24,/// Returns true if the RewriteStatepointsForGC pass should run on functions; /// using this GC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:147,Safety,safe,safe,147,/** @name GCRoot Specific Properties; * These properties and overrides only apply to collector strategies using; * GCRoot.; */; ///@{; /// True if safe points need to be inferred on call sites,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:38,Availability,avail,available,38,"/// Subclasses of GCStrategy are made available for use during compilation by; /// adding them to the global GCRegistry. This can done either within the; /// LLVM source tree or via a loadable plugin. An example registeration; /// would be:; /// static GCRegistry::Add<CustomGC> X(""custom-name"",; /// ""my custom supper fancy gc strategy"");; ///; /// Note that to use a custom GCMetadataPrinter, you must also; /// register your GCMetadataPrinter subclass with the; /// GCMetadataPrinterRegistery as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:193,Modifiability,plugin,plugin,193,"/// Subclasses of GCStrategy are made available for use during compilation by; /// adding them to the global GCRegistry. This can done either within the; /// LLVM source tree or via a loadable plugin. An example registeration; /// would be:; /// static GCRegistry::Add<CustomGC> X(""custom-name"",; /// ""my custom supper fancy gc strategy"");; ///; /// Note that to use a custom GCMetadataPrinter, you must also; /// register your GCMetadataPrinter subclass with the; /// GCMetadataPrinterRegistery as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:184,Performance,load,loadable,184,"/// Subclasses of GCStrategy are made available for use during compilation by; /// adding them to the global GCRegistry. This can done either within the; /// LLVM source tree or via a loadable plugin. An example registeration; /// would be:; /// static GCRegistry::Add<CustomGC> X(""custom-name"",; /// ""my custom supper fancy gc strategy"");; ///; /// Note that to use a custom GCMetadataPrinter, you must also; /// register your GCMetadataPrinter subclass with the; /// GCMetadataPrinterRegistery as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GenericConvergenceVerifierImpl.h:601,Integrability,inject,injected,601,"//===- GenericConvergenceVerifierImpl.h -----------------------*- C++ -*---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; ///; /// A verifier for the static rules of convergence control tokens that works; /// with both LLVM IR and MIR.; ///; /// This template implementation resides in a separate file so that it does not; /// get injected into every .cpp file that includes the generic header.; ///; /// DO NOT INCLUDE THIS FILE WHEN MERELY USING CYCLEINFO.; ///; /// This file should only be included by files that implement a; /// specialization of the relevant templates. Currently these are:; /// - llvm/lib/IR/Verifier.cpp; /// - llvm/lib/CodeGen/MachineVerifier.cpp; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GenericConvergenceVerifierImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GenericConvergenceVerifierImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GenericConvergenceVerifierImpl.h:601,Security,inject,injected,601,"//===- GenericConvergenceVerifierImpl.h -----------------------*- C++ -*---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; ///; /// A verifier for the static rules of convergence control tokens that works; /// with both LLVM IR and MIR.; ///; /// This template implementation resides in a separate file so that it does not; /// get injected into every .cpp file that includes the generic header.; ///; /// DO NOT INCLUDE THIS FILE WHEN MERELY USING CYCLEINFO.; ///; /// This file should only be included by files that implement a; /// specialization of the relevant templates. Currently these are:; /// - llvm/lib/IR/Verifier.cpp; /// - llvm/lib/CodeGen/MachineVerifier.cpp; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GenericConvergenceVerifierImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GenericConvergenceVerifierImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h:61,Deployability,release,release,61,"// FIXME: Make this the iterator's operator*() after the 4.0 release.; // operator*() had a different meaning in earlier releases, so we're; // temporarily not giving this iterator an operator*() to avoid a subtle; // semantics break.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h:121,Deployability,release,releases,121,"// FIXME: Make this the iterator's operator*() after the 4.0 release.; // operator*() had a different meaning in earlier releases, so we're; // temporarily not giving this iterator an operator*() to avoid a subtle; // semantics break.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h:199,Safety,avoid,avoid,199,"// FIXME: Make this the iterator's operator*() after the 4.0 release.; // operator*() had a different meaning in earlier releases, so we're; // temporarily not giving this iterator an operator*() to avoid a subtle; // semantics break.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h:697,Modifiability,variab,variable,697,"// All of the below API is for querying properties of the ""outer type"", i.e.; // the type that contains the indexed type. Most of the time this is just; // the type that was visited immediately prior to the indexed type, but for; // the first element this is an unbounded array of the GEP's source element; // type, for which there is no clearly corresponding IR type (we've; // historically used a pointer type as the outer type in this case, but; // pointers will soon lose their element type).; //; // FIXME: Most current users of this class are just interested in byte; // offsets (a few need to know whether the outer type is a struct because; // they are trying to replace a constant with a variable, which is only; // legal for arrays, e.g. canReplaceOperandWithVariable in SimplifyCFG.cpp);; // we should provide a more minimal API here that exposes not much more than; // that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h:850,Security,expose,exposes,850,"// All of the below API is for querying properties of the ""outer type"", i.e.; // the type that contains the indexed type. Most of the time this is just; // the type that was visited immediately prior to the indexed type, but for; // the first element this is an unbounded array of the GEP's source element; // type, for which there is no clearly corresponding IR type (we've; // historically used a pointer type as the outer type in this case, but; // pointers will soon lose their element type).; //; // FIXME: Most current users of this class are just interested in byte; // offsets (a few need to know whether the outer type is a struct because; // they are trying to replace a constant with a variable, which is only; // legal for arrays, e.g. canReplaceOperandWithVariable in SimplifyCFG.cpp);; // we should provide a more minimal API here that exposes not much more than; // that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h:338,Usability,clear,clearly,338,"// All of the below API is for querying properties of the ""outer type"", i.e.; // the type that contains the indexed type. Most of the time this is just; // the type that was visited immediately prior to the indexed type, but for; // the first element this is an unbounded array of the GEP's source element; // type, for which there is no clearly corresponding IR type (we've; // historically used a pointer type as the outer type in this case, but; // pointers will soon lose their element type).; //; // FIXME: Most current users of this class are just interested in byte; // offsets (a few need to know whether the outer type is a struct because; // they are trying to replace a constant with a variable, which is only; // legal for arrays, e.g. canReplaceOperandWithVariable in SimplifyCFG.cpp);; // we should provide a more minimal API here that exposes not much more than; // that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h:781,Usability,Simpl,SimplifyCFG,781,"// All of the below API is for querying properties of the ""outer type"", i.e.; // the type that contains the indexed type. Most of the time this is just; // the type that was visited immediately prior to the indexed type, but for; // the first element this is an unbounded array of the GEP's source element; // type, for which there is no clearly corresponding IR type (we've; // historically used a pointer type as the outer type in this case, but; // pointers will soon lose their element type).; //; // FIXME: Most current users of this class are just interested in byte; // offsets (a few need to know whether the outer type is a struct because; // they are trying to replace a constant with a variable, which is only; // legal for arrays, e.g. canReplaceOperandWithVariable in SimplifyCFG.cpp);; // we should provide a more minimal API here that exposes not much more than; // that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h:209,Integrability,depend,depends,209,"// For sequential GEP indices (all except those into structs), the index value; // can be translated into a byte offset by multiplying with an element stride.; // This function returns this stride, which both depends on the element type,; // and the containing aggregate type, as vectors always tightly bit-pack their; // elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalAlias.h:486,Modifiability,variab,variable,486,"//===-------- llvm/GlobalAlias.h - GlobalAlias class ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the declaration of the GlobalAlias class, which; // represents a single function or variable alias in the IR.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalAlias.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalAlias.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalAlias.h:3,Energy Efficiency,allocate,allocate,3,// allocate space for exactly one operand,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalAlias.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalAlias.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalAlias.h:25,Security,access,accessors,25,/// Provide fast operand accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalAlias.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalAlias.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalIFunc.h:3,Energy Efficiency,allocate,allocate,3,// allocate space for exactly one operand,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalIFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalIFunc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalIFunc.h:25,Security,access,accessors,25,/// Provide fast operand accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalIFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalIFunc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalObject.h:458,Modifiability,variab,variable,458,"//===-- llvm/GlobalObject.h - Class to represent global objects -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This represents an independent object. That is, a function or a global; // variable, but not an alias.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalObject.h:39,Modifiability,variab,variable,39,"/// Returns the alignment of the given variable or function.; ///; /// Note that for functions this is the alignment of the code, not the; /// alignment of a function pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalObject.h:82,Energy Efficiency,efficient,efficient,82,/// Check if this global has a custom object file section.; ///; /// This is more efficient than calling getSection() and checking for an empty; /// string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:5,Availability,Avail,Available,5,"///< Available for inspection, not emission.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:20,Security,access,accessible,20,///< Function to be accessible from DLL.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:47,Availability,avail,available,47,/// True if this symbol has sanitizer metadata available. Should only happen; /// if sanitizers were enabled when building the translation unit which; /// contains this GV.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:28,Security,sanitiz,sanitizer,28,/// True if this symbol has sanitizer metadata available. Should only happen; /// if sanitizers were enabled when building the translation unit which; /// contains this GV.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:85,Security,sanitiz,sanitizers,85,/// True if this symbol has sanitizer metadata available. Should only happen; /// if sanitizers were enabled when building the translation unit which; /// contains this GV.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:19,Security,access,access,19,// Give subclasses access to what otherwise would be wasted padding.; // (15 + 4 + 2 + 2 + 2 + 3 + 1 + 1 + 1 + 1) == 32.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:88,Performance,optimiz,optimized,88,/// Returns true if the definition of this global may be replaced by a; /// differently optimized variant of the same source level function at link; /// time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:3,Performance,Optimiz,Optimizations,3,"// Optimizations may assume builtin semantics for functions defined as; // nobuiltin due to attributes at call-sites. To avoid applying IPO based; // on nobuiltin semantics, treat such function definitions as maybe; // derefined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:121,Safety,avoid,avoid,121,"// Optimizations may assume builtin semantics for functions defined as; // nobuiltin due to attributes at call-sites. To avoid applying IPO based; // on nobuiltin semantics, treat such function definitions as maybe; // derefined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:280,Performance,optimiz,optimizations,280,"/// Returns true if this value's address is not significant in this module.; /// This attribute is intended to be used only by the code generator and LTO; /// to allow the linker to decide whether the global needs to be in the symbol; /// table. It should probably not be used in optimizations, as the value may; /// have uses outside the module; use hasGlobalUnnamedAddr() instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:104,Modifiability,variab,variables,104,"// ASan, HWASan and Memtag sanitizers have some instrumentation that applies; // specifically to global variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:27,Security,sanitiz,sanitizers,27,"// ASan, HWASan and Memtag sanitizers have some instrumentation that applies; // specifically to global variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:85,Modifiability,variab,variables,85,"// For ASan and HWASan, this instrumentation is implicitly applied to all; // global variables when built with -fsanitize=*. What we need is a way to; // persist the information that a certain global variable should *not* have; // sanitizers applied, which occurs if:; // 1. The global variable is in the sanitizer ignore list, or; // 2. The global variable is created by the sanitizers itself for internal; // usage, or; // 3. The global variable has __attribute__((no_sanitize(""...""))) or; // __attribute__((disable_sanitizer_instrumentation)).; //; // This is important, a some IR passes like GlobalMerge can delete global; // variables and replace them with new ones. If the old variables were; // marked to be unsanitized, then the new ones should also be.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:200,Modifiability,variab,variable,200,"// For ASan and HWASan, this instrumentation is implicitly applied to all; // global variables when built with -fsanitize=*. What we need is a way to; // persist the information that a certain global variable should *not* have; // sanitizers applied, which occurs if:; // 1. The global variable is in the sanitizer ignore list, or; // 2. The global variable is created by the sanitizers itself for internal; // usage, or; // 3. The global variable has __attribute__((no_sanitize(""...""))) or; // __attribute__((disable_sanitizer_instrumentation)).; //; // This is important, a some IR passes like GlobalMerge can delete global; // variables and replace them with new ones. If the old variables were; // marked to be unsanitized, then the new ones should also be.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:286,Modifiability,variab,variable,286,"// For ASan and HWASan, this instrumentation is implicitly applied to all; // global variables when built with -fsanitize=*. What we need is a way to; // persist the information that a certain global variable should *not* have; // sanitizers applied, which occurs if:; // 1. The global variable is in the sanitizer ignore list, or; // 2. The global variable is created by the sanitizers itself for internal; // usage, or; // 3. The global variable has __attribute__((no_sanitize(""...""))) or; // __attribute__((disable_sanitizer_instrumentation)).; //; // This is important, a some IR passes like GlobalMerge can delete global; // variables and replace them with new ones. If the old variables were; // marked to be unsanitized, then the new ones should also be.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:349,Modifiability,variab,variable,349,"// For ASan and HWASan, this instrumentation is implicitly applied to all; // global variables when built with -fsanitize=*. What we need is a way to; // persist the information that a certain global variable should *not* have; // sanitizers applied, which occurs if:; // 1. The global variable is in the sanitizer ignore list, or; // 2. The global variable is created by the sanitizers itself for internal; // usage, or; // 3. The global variable has __attribute__((no_sanitize(""...""))) or; // __attribute__((disable_sanitizer_instrumentation)).; //; // This is important, a some IR passes like GlobalMerge can delete global; // variables and replace them with new ones. If the old variables were; // marked to be unsanitized, then the new ones should also be.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:439,Modifiability,variab,variable,439,"// For ASan and HWASan, this instrumentation is implicitly applied to all; // global variables when built with -fsanitize=*. What we need is a way to; // persist the information that a certain global variable should *not* have; // sanitizers applied, which occurs if:; // 1. The global variable is in the sanitizer ignore list, or; // 2. The global variable is created by the sanitizers itself for internal; // usage, or; // 3. The global variable has __attribute__((no_sanitize(""...""))) or; // __attribute__((disable_sanitizer_instrumentation)).; //; // This is important, a some IR passes like GlobalMerge can delete global; // variables and replace them with new ones. If the old variables were; // marked to be unsanitized, then the new ones should also be.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:630,Modifiability,variab,variables,630,"// For ASan and HWASan, this instrumentation is implicitly applied to all; // global variables when built with -fsanitize=*. What we need is a way to; // persist the information that a certain global variable should *not* have; // sanitizers applied, which occurs if:; // 1. The global variable is in the sanitizer ignore list, or; // 2. The global variable is created by the sanitizers itself for internal; // usage, or; // 3. The global variable has __attribute__((no_sanitize(""...""))) or; // __attribute__((disable_sanitizer_instrumentation)).; //; // This is important, a some IR passes like GlobalMerge can delete global; // variables and replace them with new ones. If the old variables were; // marked to be unsanitized, then the new ones should also be.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:683,Modifiability,variab,variables,683,"// For ASan and HWASan, this instrumentation is implicitly applied to all; // global variables when built with -fsanitize=*. What we need is a way to; // persist the information that a certain global variable should *not* have; // sanitizers applied, which occurs if:; // 1. The global variable is in the sanitizer ignore list, or; // 2. The global variable is created by the sanitizers itself for internal; // usage, or; // 3. The global variable has __attribute__((no_sanitize(""...""))) or; // __attribute__((disable_sanitizer_instrumentation)).; //; // This is important, a some IR passes like GlobalMerge can delete global; // variables and replace them with new ones. If the old variables were; // marked to be unsanitized, then the new ones should also be.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:231,Security,sanitiz,sanitizers,231,"// For ASan and HWASan, this instrumentation is implicitly applied to all; // global variables when built with -fsanitize=*. What we need is a way to; // persist the information that a certain global variable should *not* have; // sanitizers applied, which occurs if:; // 1. The global variable is in the sanitizer ignore list, or; // 2. The global variable is created by the sanitizers itself for internal; // usage, or; // 3. The global variable has __attribute__((no_sanitize(""...""))) or; // __attribute__((disable_sanitizer_instrumentation)).; //; // This is important, a some IR passes like GlobalMerge can delete global; // variables and replace them with new ones. If the old variables were; // marked to be unsanitized, then the new ones should also be.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:305,Security,sanitiz,sanitizer,305,"// For ASan and HWASan, this instrumentation is implicitly applied to all; // global variables when built with -fsanitize=*. What we need is a way to; // persist the information that a certain global variable should *not* have; // sanitizers applied, which occurs if:; // 1. The global variable is in the sanitizer ignore list, or; // 2. The global variable is created by the sanitizers itself for internal; // usage, or; // 3. The global variable has __attribute__((no_sanitize(""...""))) or; // __attribute__((disable_sanitizer_instrumentation)).; //; // This is important, a some IR passes like GlobalMerge can delete global; // variables and replace them with new ones. If the old variables were; // marked to be unsanitized, then the new ones should also be.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:376,Security,sanitiz,sanitizers,376,"// For ASan and HWASan, this instrumentation is implicitly applied to all; // global variables when built with -fsanitize=*. What we need is a way to; // persist the information that a certain global variable should *not* have; // sanitizers applied, which occurs if:; // 1. The global variable is in the sanitizer ignore list, or; // 2. The global variable is created by the sanitizers itself for internal; // usage, or; // 3. The global variable has __attribute__((no_sanitize(""...""))) or; // __attribute__((disable_sanitizer_instrumentation)).; //; // This is important, a some IR passes like GlobalMerge can delete global; // variables and replace them with new ones. If the old variables were; // marked to be unsanitized, then the new ones should also be.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:270,Modifiability,variab,variable,270,"// Memtag sanitization works differently: sanitization is requested by clang; // when `-fsanitize=memtag-globals` is provided, and the request can be; // denied (and the attribute removed) by the AArch64 global tagging pass if; // it can't be fulfilled (e.g. the global variable is a TLS variable).; // Memtag sanitization has to interact with other parts of LLVM (like; // supressing certain optimisations, emitting assembly directives, or; // creating special relocation sections).; //; // Use `GlobalValue::isTagged()` to check whether tagging should be enabled; // for a global variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:288,Modifiability,variab,variable,288,"// Memtag sanitization works differently: sanitization is requested by clang; // when `-fsanitize=memtag-globals` is provided, and the request can be; // denied (and the attribute removed) by the AArch64 global tagging pass if; // it can't be fulfilled (e.g. the global variable is a TLS variable).; // Memtag sanitization has to interact with other parts of LLVM (like; // supressing certain optimisations, emitting assembly directives, or; // creating special relocation sections).; //; // Use `GlobalValue::isTagged()` to check whether tagging should be enabled; // for a global variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:582,Modifiability,variab,variable,582,"// Memtag sanitization works differently: sanitization is requested by clang; // when `-fsanitize=memtag-globals` is provided, and the request can be; // denied (and the attribute removed) by the AArch64 global tagging pass if; // it can't be fulfilled (e.g. the global variable is a TLS variable).; // Memtag sanitization has to interact with other parts of LLVM (like; // supressing certain optimisations, emitting assembly directives, or; // creating special relocation sections).; //; // Use `GlobalValue::isTagged()` to check whether tagging should be enabled; // for a global variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:10,Security,sanitiz,sanitization,10,"// Memtag sanitization works differently: sanitization is requested by clang; // when `-fsanitize=memtag-globals` is provided, and the request can be; // denied (and the attribute removed) by the AArch64 global tagging pass if; // it can't be fulfilled (e.g. the global variable is a TLS variable).; // Memtag sanitization has to interact with other parts of LLVM (like; // supressing certain optimisations, emitting assembly directives, or; // creating special relocation sections).; //; // Use `GlobalValue::isTagged()` to check whether tagging should be enabled; // for a global variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:42,Security,sanitiz,sanitization,42,"// Memtag sanitization works differently: sanitization is requested by clang; // when `-fsanitize=memtag-globals` is provided, and the request can be; // denied (and the attribute removed) by the AArch64 global tagging pass if; // it can't be fulfilled (e.g. the global variable is a TLS variable).; // Memtag sanitization has to interact with other parts of LLVM (like; // supressing certain optimisations, emitting assembly directives, or; // creating special relocation sections).; //; // Use `GlobalValue::isTagged()` to check whether tagging should be enabled; // for a global variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:310,Security,sanitiz,sanitization,310,"// Memtag sanitization works differently: sanitization is requested by clang; // when `-fsanitize=memtag-globals` is provided, and the request can be; // denied (and the attribute removed) by the AArch64 global tagging pass if; // it can't be fulfilled (e.g. the global variable is a TLS variable).; // Memtag sanitization has to interact with other parts of LLVM (like; // supressing certain optimisations, emitting assembly directives, or; // creating special relocation sections).; //; // Use `GlobalValue::isTagged()` to check whether tagging should be enabled; // for a global variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:42,Modifiability,variab,variable,42,"// ASan-specific metadata. Is this global variable dynamically initialized; // (from a C++ language perspective), and should therefore be checked for; // ODR violations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:187,Energy Efficiency,allocate,allocates,187,"// Note: Not byref as it's a POD and otherwise it's too easy to call; // G.setSanitizerMetadata(G2.getSanitizerMetadata()), and the argument becomes; // dangling when the backing storage allocates the metadata for `G`, as the; // storage is shared between `G1` and `G2`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:222,Performance,optimiz,optimized,222,"/// Return true if the currently visible definition of this global (if any) is; /// exactly the definition we will see at runtime.; ///; /// Non-exact linkage types inhibits most non-inlining IPO, since a; /// differently optimized variant of the same function can have different; /// observable or undefined behavior than in the variant currently visible.; /// For instance, we could have started with; ///; /// void foo(int *v) {; /// int t = 5 / v[0];; /// (void) t;; /// }; ///; /// and ""refined"" it to; ///; /// void foo(int *v) { }; ///; /// However, we cannot infer readnone for `foo`, since that would justify; /// DSE'ing a store to `v[0]` across a call to `foo`, which can cause; /// undefined behavior if the linker replaces the actual call destination with; /// the unoptimized `foo`.; ///; /// Inlining is okay across non-exact linkage types as long as they're not; /// interposable (see \c isInterposable), since in such cases the currently; /// visible variant is *a* correct implementation of the original source; /// function; it just isn't the *only* correct implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:115,Performance,load,load,115,"/// Return true if this global's definition can be substituted with an; /// *arbitrary* definition at link time or load time. We cannot do any IPO or; /// inlining across interposable call edges, since the callee can be; /// replaced with something arbitrary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:102,Security,hash,hash,102,/// Declare a type to represent a global unique identifier for a global value.; /// This is a 64 bits hash that is used by PGO and ThinLTO to have a compact; /// unique way to identify a symbol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:130,Energy Efficiency,reduce,reduce,130,"/// @name Materialization; /// Materialization is used to construct functions only as they're needed.; /// This; /// is useful to reduce memory usage in LLVM or parsing work done by the; /// BitcodeReader to load the Module.; /// @{; /// If this function's Module is being lazily streamed in functions from disk; /// or some other source, this method can be used to check to see if the; /// function has been read in yet or not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:208,Performance,load,load,208,"/// @name Materialization; /// Materialization is used to construct functions only as they're needed.; /// This; /// is useful to reduce memory usage in LLVM or parsing work done by the; /// BitcodeReader to load the Module.; /// @{; /// If this function's Module is being lazily streamed in functions from disk; /// or some other source, this method can be used to check to see if the; /// function has been read in yet or not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:187,Performance,optimiz,optimization,187,"/// Returns true if this global's definition will be the one chosen by the; /// linker.; ///; /// NB! Ideally this should not be used at the IR level at all. If you're; /// interested in optimization constraints implied by the linker's ability to; /// choose an implementation, prefer using \c hasExactDefinition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:298,Availability,down,down,298,"/// True if GV can be left out of the object symbol table. This is the case; /// for linkonce_odr values whose address is not significant. While legal, it; /// is not normally profitable to omit them from the .o symbol table. Using; /// this analysis makes sense when the information can be passed down to the; /// linker or we are in LTO.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h:607,Energy Efficiency,allocate,allocated,607,"//===-- llvm/GlobalVariable.h - GlobalVariable class ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the declaration of the GlobalVariable class, which; // represents a single global variable (or constant) in the VM.; //; // Global variables are constant pointers that refer to hunks of space that are; // allocated by either the VM, or by the linker in a static compiler. A global; // variable may have an initial value, which is copied into the executables .data; // area. Global Constants are required to have initializers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h:484,Modifiability,variab,variable,484,"//===-- llvm/GlobalVariable.h - GlobalVariable class ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the declaration of the GlobalVariable class, which; // represents a single global variable (or constant) in the VM.; //; // Global variables are constant pointers that refer to hunks of space that are; // allocated by either the VM, or by the linker in a static compiler. A global; // variable may have an initial value, which is copied into the executables .data; // area. Global Constants are required to have initializers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h:533,Modifiability,variab,variables,533,"//===-- llvm/GlobalVariable.h - GlobalVariable class ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the declaration of the GlobalVariable class, which; // represents a single global variable (or constant) in the VM.; //; // Global variables are constant pointers that refer to hunks of space that are; // allocated by either the VM, or by the linker in a static compiler. A global; // variable may have an initial value, which is copied into the executables .data; // area. Global Constants are required to have initializers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h:687,Modifiability,variab,variable,687,"//===-- llvm/GlobalVariable.h - GlobalVariable class ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the declaration of the GlobalVariable class, which; // represents a single global variable (or constant) in the VM.; //; // Global variables are constant pointers that refer to hunks of space that are; // allocated by either the VM, or by the linker in a static compiler. A global; // variable may have an initial value, which is copied into the executables .data; // area. Global Constants are required to have initializers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h:3,Energy Efficiency,allocate,allocate,3,// allocate space for exactly one operand,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h:25,Security,access,accessors,25,/// Provide fast operand accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h:50,Modifiability,variab,variable,50,"/// hasDefinitiveInitializer - Whether the global variable has an initializer,; /// and any other instances of the global (this can happen due to weak; /// linkage) are guaranteed to have the same initializer.; ///; /// Note that if you want to transform a global, you must use; /// hasUniqueInitializer() instead, because of the *_odr linkage type.; ///; /// Example:; ///; /// @a = global SomeType* null - Initializer is both definitive and unique.; ///; /// @b = global weak SomeType* null - Initializer is neither definitive nor; /// unique.; ///; /// @c = global weak_odr SomeType* null - Initializer is definitive, but not; /// unique.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h:31,Modifiability,variab,variable,31,// The initializer of a global variable may change to something arbitrary; // at link time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h:31,Modifiability,variab,variable,31,// The initializer of a global variable with the externally_initialized; // marker may change at runtime before C++ initializers are evaluated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h:46,Modifiability,variab,variable,46,"/// hasUniqueInitializer - Whether the global variable has an initializer, and; /// any changes made to the initializer will turn up in the final executable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h:51,Modifiability,variab,variables,51,// It is not safe to modify initializers of global variables with the; // external_initializer marker since the value may be changed at runtime; // before C++ initializers are evaluated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h:13,Safety,safe,safe,13,// It is not safe to modify initializers of global variables with the; // external_initializer marker since the value may be changed at runtime; // before C++ initializers are evaluated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h:60,Modifiability,variab,variable,60,"/// getInitializer - Return the initializer for this global variable. It is; /// illegal to call this method if the global is external, because we cannot; /// tell what the value is initialized to!; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h:58,Modifiability,variab,variable,58,"/// setInitializer - Sets the initializer for this global variable, removing; /// any existing initializer if InitVal==NULL. If this GV has type T*, the; /// initializer must have type T.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h:26,Integrability,Interface,Interface,26,"//===- GVMaterializer.h - Interface for GV materializers --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an abstract interface for loading a module from some; // place. This interface allows incremental or random access loading of; // functions from the file. This is useful for applications like JIT compilers; // or interprocedural optimizers that do not need the entire program in memory; // at the same time.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h:414,Integrability,interface,interface,414,"//===- GVMaterializer.h - Interface for GV materializers --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an abstract interface for loading a module from some; // place. This interface allows incremental or random access loading of; // functions from the file. This is useful for applications like JIT compilers; // or interprocedural optimizers that do not need the entire program in memory; // at the same time.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h:471,Integrability,interface,interface,471,"//===- GVMaterializer.h - Interface for GV materializers --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an abstract interface for loading a module from some; // place. This interface allows incremental or random access loading of; // functions from the file. This is useful for applications like JIT compilers; // or interprocedural optimizers that do not need the entire program in memory; // at the same time.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h:428,Performance,load,loading,428,"//===- GVMaterializer.h - Interface for GV materializers --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an abstract interface for loading a module from some; // place. This interface allows incremental or random access loading of; // functions from the file. This is useful for applications like JIT compilers; // or interprocedural optimizers that do not need the entire program in memory; // at the same time.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h:517,Performance,load,loading,517,"//===- GVMaterializer.h - Interface for GV materializers --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an abstract interface for loading a module from some; // place. This interface allows incremental or random access loading of; // functions from the file. This is useful for applications like JIT compilers; // or interprocedural optimizers that do not need the entire program in memory; // at the same time.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h:631,Performance,optimiz,optimizers,631,"//===- GVMaterializer.h - Interface for GV materializers --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an abstract interface for loading a module from some; // place. This interface allows incremental or random access loading of; // functions from the file. This is useful for applications like JIT compilers; // or interprocedural optimizers that do not need the entire program in memory; // at the same time.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h:510,Security,access,access,510,"//===- GVMaterializer.h - Interface for GV materializers --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an abstract interface for loading a module from some; // place. This interface allows incremental or random access loading of; // functions from the file. This is useful for applications like JIT compilers; // or interprocedural optimizers that do not need the entire program in memory; // at the same time.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h:209,Availability,error,error,209,"/// ParseConstraints - Split up the constraint string into the specific; /// constraints and their prefixes. If this returns an empty vector, and if; /// the constraint string itself isn't empty, there was an error parsing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h:178,Security,access,access,178,"// Memory constraint codes.; // Addresses are included here as they need to be treated the same by the; // backend, the only difference is that they are not used to actaully; // access memory by the instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h:1289,Integrability,depend,depending,1289,"// This class is intentionally packed into a 32b value as it is used as a; // MVT::i32 ConstantSDNode SDValue for SelectionDAG and as immediate operands; // on INLINEASM and INLINEASM_BR MachineInstr's.; //; // The encoding of Flag is currently:; // Bits 2-0 - A Kind::* value indicating the kind of the operand.; // (KindField); // Bits 15-3 - The number of SDNode operands associated with this inline; // assembly operand. Once lowered to MIR, this represents the; // number of MachineOperands necessary to refer to a; // MachineOperandType::MO_FrameIndex. (NumOperands); // Bit 31 - Determines if this is a matched operand. (IsMatched); // If bit 31 is set:; // Bits 30-16 - The operand number that this operand must match.; // (MatchedOperandNo); // Else if bits 2-0 are Kind::Mem:; // Bits 30-16 - A ConstraintCode:: value indicating the original; // constraint code. (MemConstraintCode); // Else:; // Bits 29-16 - The register class ID to use for the operand. (RegClass); // Bit 30 - If the register is permitted to be spilled.; // (RegMayBeFolded); // Defaults to false ""r"", may be set for constraints like; // ""rm"" (or ""g"").; //; // As such, MatchedOperandNo, MemConstraintCode, and; // (RegClass+RegMayBeFolded) are views of the same slice of bits, but are; // mutually exclusive depending on the fields IsMatched then KindField.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h:78,Testability,assert,assertion,78,"/// clearMemConstraint - Similar to setMemConstraint(0), but without the; /// assertion checking that the constraint has not been set previously.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h:4,Usability,clear,clearMemConstraint,4,"/// clearMemConstraint - Similar to setMemConstraint(0), but without the; /// assertion checking that the constraint has not been set previously.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstIterator.h:508,Integrability,wrap,wrapper,508,"//===- InstIterator.h - Classes for inst iteration --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains definitions of two iterators for iterating over the; // instructions in a function. This is effectively a wrapper around a two level; // iterator that can probably be genericized later.; //; // Note that this iterator gets invalidated any time that basic blocks or; // instructions are moved around.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstIterator.h:3,Security,Access,Accessors,3,// Accessors to get at the underlying iterators...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:3,Energy Efficiency,allocate,allocate,3,// allocate space for exactly one operand,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:31,Energy Efficiency,efficient,efficient,31,/// Transparently provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:3,Energy Efficiency,allocate,allocate,3,// allocate space for exactly two operands,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:31,Energy Efficiency,efficient,efficient,31,/// Transparently provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:76,Safety,safe,safe,76,"/// Exchange the two operands to this instruction.; /// This instruction is safe to use on any binary instruction and; /// does not modify the semantics of the instruction. If the instruction; /// cannot be reversed (ie, it's a Div), then return true.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:236,Performance,perform,perform,236,//===----------------------------------------------------------------------===//; // CastInst Class; //===----------------------------------------------------------------------===//; /// This is the base class for all instructions that perform data; /// casts. It is simply provided so that instruction category testing; /// can be performed with code like:; ///; /// if (isa<CastInst>(Instr)) { ... }; /// Base class of casting instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:332,Performance,perform,performed,332,//===----------------------------------------------------------------------===//; // CastInst Class; //===----------------------------------------------------------------------===//; /// This is the base class for all instructions that perform data; /// casts. It is simply provided so that instruction category testing; /// can be performed with code like:; ///; /// if (isa<CastInst>(Instr)) { ... }; /// Base class of casting instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:312,Testability,test,testing,312,//===----------------------------------------------------------------------===//; // CastInst Class; //===----------------------------------------------------------------------===//; /// This is the base class for all instructions that perform data; /// casts. It is simply provided so that instruction category testing; /// can be performed with code like:; ///; /// if (isa<CastInst>(Instr)) { ... }; /// Base class of casting instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:267,Usability,simpl,simply,267,//===----------------------------------------------------------------------===//; // CastInst Class; //===----------------------------------------------------------------------===//; /// This is the base class for all instructions that perform data; /// casts. It is simply provided so that instruction category testing; /// can be performed with code like:; ///; /// if (isa<CastInst>(Instr)) { ... }; /// Base class of casting instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:154,Testability,log,logic,154,"/// There are several places where we need to know if a cast instruction; /// only deals with integer source and destination types. To simplify that; /// logic, this method is provided.; /// @returns true iff the cast has only integral typed operand and dest type.; /// Determine if this is an integer-only cast.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:135,Usability,simpl,simplify,135,"/// There are several places where we need to know if a cast instruction; /// only deals with integer source and destination types. To simplify that; /// logic, this method is provided.; /// @returns true iff the cast has only integral typed operand and dest type.; /// Determine if this is an integer-only cast.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:332,Integrability,depend,depend,332,"/// This enumeration lists the possible predicates for CmpInst subclasses.; /// Values in the range 0-31 are reserved for FCmpInst, while values in the; /// range 32-64 are reserved for ICmpInst. This is necessary to ensure the; /// predicate values are not overlapping between the classes.; ///; /// Some passes (e.g. InstCombine) depend on the bit-wise characteristics of; /// FCMP_* values. Changing the bit patterns requires a potential change to; /// those passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:18,Usability,Intuit,Intuitive,18,// Opcode U L G E Intuitive operation,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:3,Energy Efficiency,allocate,allocate,3,// allocate space for exactly two operands,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:74,Availability,avail,available,74,/// This is a static version that you can use without an instruction; /// available.; /// Return the predicate as if the operands were swapped.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:74,Availability,avail,available,74,"/// This is a static version that you can use without an instruction; /// available.; /// @returns true if the comparison predicate is strict, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:74,Availability,avail,available,74,"/// This is a static version that you can use without an instruction; /// available.; /// @returns true if the comparison predicate is non-strict, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:74,Availability,avail,available,74,"/// This is a static version that you can use without an instruction; /// available.; /// @returns the strict version of comparison provided in \p pred.; /// If \p pred is not a strict comparison predicate, returns \p pred.; /// Returns the strict version of non-strict comparisons.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:74,Availability,avail,available,74,"/// This is a static version that you can use without an instruction; /// available.; /// @returns the non-strict version of comparison provided in \p pred.; /// If \p pred is not a strict comparison predicate, returns \p pred.; /// Returns the non-strict version of strict comparisons.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:74,Availability,avail,available,74,/// This is a static version that you can use without an instruction; /// available.; /// Return the flipped strictness of predicate,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:17,Energy Efficiency,efficient,efficient,17,/// Provide more efficient getOperand methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:132,Availability,avail,available,132,/// Determine if this is an equals/not equals predicate.; /// This is a static version that you can use without an instruction; /// available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:69,Testability,assert,assert,69,"/// For example, ULT->SLT, ULE->SLE, UGT->SGT, UGE->SGE, SLT->Failed assert; /// @returns the signed version of the unsigned predicate pred.; /// return the signed version of a predicate",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:69,Testability,assert,assert,69,"/// For example, ULT->SLT, ULE->SLE, UGT->SGT, UGE->SGE, SLT->Failed assert; /// @returns the signed version of the predicate for this instruction (which; /// has to be an unsigned predicate).; /// return the signed version of a predicate",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:69,Testability,assert,assert,69,"/// For example, SLT->ULT, SLE->ULE, SGT->UGT, SGE->UGE, ULT->Failed assert; /// @returns the unsigned version of the signed predicate pred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:69,Testability,assert,assert,69,"/// For example, SLT->ULT, SLE->ULE, SGT->UGT, SGE->UGE, ULT->Failed assert; /// @returns the unsigned version of the predicate for this instruction (which; /// has to be an signed predicate).; /// return the unsigned version of a predicate",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:68,Testability,assert,assert,68,"/// For example, SLT->ULT, ULT->SLT, SLE->ULE, ULE->SLE, EQ->Failed assert; /// @returns the unsigned version of the signed predicate pred or; /// the signed version of the signed predicate pred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:68,Testability,assert,assert,68,"/// For example, SLT->ULT, ULT->SLT, SLE->ULE, ULE->SLE, EQ->Failed assert; /// @returns the unsigned version of the signed predicate pred or; /// the signed version of the signed predicate pred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:20,Availability,redundant,redundant,20,// FIXME: these are redundant if CmpInst < BinaryOperator,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:20,Safety,redund,redundant,20,// FIXME: these are redundant if CmpInst < BinaryOperator,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:18,Security,access,accessor,18,/// A lightweight accessor for an operand bundle meant to be passed; /// around by value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:644,Security,access,access,644,"//===----------------------------------------------------------------------===//; // CallBase Class; //===----------------------------------------------------------------------===//; /// Base class for all callable instructions (InvokeInst and CallInst); /// Holds everything related to calling a function.; ///; /// All call-like instructions are required to use a common operand layout:; /// - Zero or more arguments to the call,; /// - Zero or more operand bundles with zero or more operand inputs each; /// bundle,; /// - Zero or more subclass controlled operands; /// - The called function.; ///; /// This allows this base class to easily access the called function and the; /// start of the arguments without knowing how many other operands a particular; /// subclass requires. Note that accessing the end of the argument list isn't; /// as cheap as most other operations on the base class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:794,Security,access,accessing,794,"//===----------------------------------------------------------------------===//; // CallBase Class; //===----------------------------------------------------------------------===//; /// Base class for all callable instructions (InvokeInst and CallInst); /// Holds everything related to calling a function.; ///; /// All call-like instructions are required to use a common operand layout:; /// - Zero or more arguments to the call,; /// - Zero or more operand bundles with zero or more operand inputs each; /// bundle,; /// - Zero or more subclass controlled operands; /// - The called function.; ///; /// This allows this base class to easily access the called function and the; /// start of the arguments without knowing how many other operands a particular; /// subclass requires. Note that accessing the end of the argument list isn't; /// as cheap as most other operations on the base class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:14,Energy Efficiency,adapt,adapter,14,/// Iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:14,Integrability,adapter,adapter,14,/// Iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:14,Modifiability,adapt,adapter,14,/// Iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:4,Integrability,Wrap,Wrappers,4,/// Wrappers for getting the \c Use of a call argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:46,Performance,optimiz,optimized,46,/// Tests if this call site must be tail call optimized. Only a CallInst can; /// be tail call optimized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:95,Performance,optimiz,optimized,95,/// Tests if this call site must be tail call optimized. Only a CallInst can; /// be tail call optimized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:4,Testability,Test,Tests,4,/// Tests if this call site must be tail call optimized. Only a CallInst can; /// be tail call optimized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:4,Testability,Test,Tests,4,/// Tests if this call site is marked as a tail call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:119,Testability,assert,assert,119,"// This function doesn't mutate the return type, only the function; // type. Seems broken, but I'm just gonna stick an assert in for now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:48,Security,access,access,48,/// \name Attribute API; ///; /// These methods access and modify attributes on this call (including; /// looking through to the attributes on the called function when necessary).; ///@{; /// Return the parameter attributes for this call.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:19,Availability,mask,mask,19,/// Extract a test mask for disallowed floating-point value classes for the; /// return value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:14,Testability,test,test,14,/// Extract a test mask for disallowed floating-point value classes for the; /// return value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:19,Availability,mask,mask,19,/// Extract a test mask for disallowed floating-point value classes for the; /// parameter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:14,Testability,test,test,14,/// Extract a test mask for disallowed floating-point value classes for the; /// parameter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:35,Security,access,access,35,/// Determine if the call does not access memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:35,Security,access,access,35,/// Determine if the call does not access or only reads memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:35,Security,access,access,35,/// Determine if the call does not access or only writes memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:30,Security,access,access,30,/// Determine if the call can access memmory only using pointers based; /// on its arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h
