id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://psicode.org/psi4manual/1.3.2/testsuite.html:39677,Testability,test,test,39677,"molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user nee",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:40058,Testability,test,test,40058,"with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, t",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:40650,Testability,test,test,40650,"hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed wi",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:40781,Testability,test,test,40781,"VDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and bro",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:41751,Testability,benchmark,benchmark,41751," with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:41776,Testability,benchmark,benchmarks,41776," with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:3495,Usability,simpl,simple,3495,"ver cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the c",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/thermo-1.html:3447,Deployability,update,updated,3447,"te that 100000. is the value for IUPAC STP. Type: double; Default: 101325. ROTATIONAL_SYMMETRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. Examples¶; A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function qcdb.vib.thermo(); as is shown in freq-isotope2.; A few summary psivars are set: “ZPVE”, “THERMAL ENERGY CORRECTION”,; “ENTHALPY CORRECTION”, “GIBBS FREE ENERGY CORRECTION”, “ZERO K; ENTHALPHY”, “THERMAL ENERGY”, “ENTHALPY”, “GIBBS FREE ENERGY”.; But additionally, every valid combination of {S, Cv, Cp, ZPE, E, H, G}; with {elec, trans, rot, vib, corr, tot} (e.g., vibrational entropy,; S_vib, and enthalpy correction, H_corr) is returned by dictionary; from the thermo function. See python/vibanalysis; (near the end) for an example. Output¶; The full list of keywords for thermo is provided in Appendix THERMO.; Information on the Psithon function that drives frequency analyses is provided; at frequency(). table of contents. Vibrational and Thermochemical Analysis; Keywords; T; P; ROTATIONAL_SYMMETRY_NUMBER. Examples; Output. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/thermo-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/thermo-1.html
https://psicode.org/psi4manual/1.3.2/thermo-1.html:1056,Energy Efficiency,energy,energy,1056,"nal and Thermochemical Analysis. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. Vibrational and Thermochemical Analysis¶; Code author: Rollin A. King and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, THERMO. Caution; It is important to know that PSI4, like any other; quantum chemistry program, does not compute the usual enthalpies,; entropies, or Gibbs free energies of formation provided by most; reference books. Instead, quantum chemistry programs compute “absolute”; thermodynamic properties relative to infinitely separated nuclei and; electrons, not “formation” values relative to elements in their standard; states. If you are computing thermodynamic differences, like a reaction; enthalpy computed as the enthalpy of the products minus the enthalpy; of the reactants, then these “absolute” enthalpies are perfectly valid; and usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the “thermal energies” reported in kcal/mol are the; finite-temperature corrections to the electronic total energy, and; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords¶. T¶. Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. P¶. Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. ROTATIONAL_SYMMETRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-d",MatchSource.WIKI,psi4manual/1.3.2/thermo-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/thermo-1.html
https://psicode.org/psi4manual/1.3.2/thermo-1.html:1203,Energy Efficiency,energy,energy,1203,"chemical Analysis¶; Code author: Rollin A. King and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, THERMO. Caution; It is important to know that PSI4, like any other; quantum chemistry program, does not compute the usual enthalpies,; entropies, or Gibbs free energies of formation provided by most; reference books. Instead, quantum chemistry programs compute “absolute”; thermodynamic properties relative to infinitely separated nuclei and; electrons, not “formation” values relative to elements in their standard; states. If you are computing thermodynamic differences, like a reaction; enthalpy computed as the enthalpy of the products minus the enthalpy; of the reactants, then these “absolute” enthalpies are perfectly valid; and usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the “thermal energies” reported in kcal/mol are the; finite-temperature corrections to the electronic total energy, and; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords¶. T¶. Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. P¶. Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. ROTATIONAL_SYMMETRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. Examp",MatchSource.WIKI,psi4manual/1.3.2/thermo-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/thermo-1.html
https://psicode.org/psi4manual/1.3.2/thermo-1.html:2010,Integrability,depend,dependent,2010," usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the “thermal energies” reported in kcal/mol are the; finite-temperature corrections to the electronic total energy, and; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords¶. T¶. Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. P¶. Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. ROTATIONAL_SYMMETRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. Examples¶; A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function qcdb.vib.thermo(); as is shown in freq-isotope2.; A few summary psivars are set: “ZPVE”, “THERMAL ENERGY CORRECTION”,; “ENTHALPY CORRECTION”, “GIBBS FREE ENERGY CORRECTION”, “ZERO K; ENTHALPHY”, “THERMAL ENERGY”, “ENTHALPY”, “GIBBS FREE ENERGY”.; But additionally, every valid combination of {S, Cv, Cp, ZPE, E, H, G}; with {elec, trans, rot, vib, corr, tot} (e.g., vibrational entropy,; S_vib, and enthalpy correction, H_corr) is returned by dictionary; from the thermo function. See python/vibanalys",MatchSource.WIKI,psi4manual/1.3.2/thermo-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/thermo-1.html
https://psicode.org/psi4manual/1.3.2/thermo-1.html:2205,Performance,perform,performed,2205,"ot the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords¶. T¶. Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. P¶. Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. ROTATIONAL_SYMMETRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. Examples¶; A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function qcdb.vib.thermo(); as is shown in freq-isotope2.; A few summary psivars are set: “ZPVE”, “THERMAL ENERGY CORRECTION”,; “ENTHALPY CORRECTION”, “GIBBS FREE ENERGY CORRECTION”, “ZERO K; ENTHALPHY”, “THERMAL ENERGY”, “ENTHALPY”, “GIBBS FREE ENERGY”.; But additionally, every valid combination of {S, Cv, Cp, ZPE, E, H, G}; with {elec, trans, rot, vib, corr, tot} (e.g., vibrational entropy,; S_vib, and enthalpy correction, H_corr) is returned by dictionary; from the thermo function. See python/vibanalysis; (near the end) for an example. Output¶; The full list of keywords for thermo is provided in Appendix THERMO.; Information on the Psithon function that drives frequency analyses is provided; at frequency(). table of contents. Vibrational and Thermochemical Analysis; Keywords; T",MatchSource.WIKI,psi4manual/1.3.2/thermo-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/thermo-1.html
https://psicode.org/psi4manual/1.3.2/thermo-1.html:936,Usability,usab,usable,936,"﻿. Vibrational and Thermochemical Analysis. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. Vibrational and Thermochemical Analysis¶; Code author: Rollin A. King and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, THERMO. Caution; It is important to know that PSI4, like any other; quantum chemistry program, does not compute the usual enthalpies,; entropies, or Gibbs free energies of formation provided by most; reference books. Instead, quantum chemistry programs compute “absolute”; thermodynamic properties relative to infinitely separated nuclei and; electrons, not “formation” values relative to elements in their standard; states. If you are computing thermodynamic differences, like a reaction; enthalpy computed as the enthalpy of the products minus the enthalpy; of the reactants, then these “absolute” enthalpies are perfectly valid; and usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the “thermal energies” reported in kcal/mol are the; finite-temperature corrections to the electronic total energy, and; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords¶. T¶. Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. P¶. Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. ROTATIONAL_SYMMETRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the ",MatchSource.WIKI,psi4manual/1.3.2/thermo-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/thermo-1.html
https://psicode.org/psi4manual/1.3.2/thermo.html:3447,Deployability,update,updated,3447,"te that 100000. is the value for IUPAC STP. Type: double; Default: 101325. ROTATIONAL_SYMMETRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. Examples¶; A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function qcdb.vib.thermo(); as is shown in freq-isotope2.; A few summary psivars are set: “ZPVE”, “THERMAL ENERGY CORRECTION”,; “ENTHALPY CORRECTION”, “GIBBS FREE ENERGY CORRECTION”, “ZERO K; ENTHALPHY”, “THERMAL ENERGY”, “ENTHALPY”, “GIBBS FREE ENERGY”.; But additionally, every valid combination of {S, Cv, Cp, ZPE, E, H, G}; with {elec, trans, rot, vib, corr, tot} (e.g., vibrational entropy,; S_vib, and enthalpy correction, H_corr) is returned by dictionary; from the thermo function. See python/vibanalysis; (near the end) for an example. Output¶; The full list of keywords for thermo is provided in Appendix THERMO.; Information on the Psithon function that drives frequency analyses is provided; at frequency(). table of contents. Vibrational and Thermochemical Analysis; Keywords; T; P; ROTATIONAL_SYMMETRY_NUMBER. Examples; Output. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/thermo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/thermo.html
https://psicode.org/psi4manual/1.3.2/thermo.html:1056,Energy Efficiency,energy,energy,1056,"nal and Thermochemical Analysis. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. Vibrational and Thermochemical Analysis¶; Code author: Rollin A. King and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, THERMO. Caution; It is important to know that PSI4, like any other; quantum chemistry program, does not compute the usual enthalpies,; entropies, or Gibbs free energies of formation provided by most; reference books. Instead, quantum chemistry programs compute “absolute”; thermodynamic properties relative to infinitely separated nuclei and; electrons, not “formation” values relative to elements in their standard; states. If you are computing thermodynamic differences, like a reaction; enthalpy computed as the enthalpy of the products minus the enthalpy; of the reactants, then these “absolute” enthalpies are perfectly valid; and usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the “thermal energies” reported in kcal/mol are the; finite-temperature corrections to the electronic total energy, and; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords¶. T¶. Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. P¶. Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. ROTATIONAL_SYMMETRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-d",MatchSource.WIKI,psi4manual/1.3.2/thermo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/thermo.html
https://psicode.org/psi4manual/1.3.2/thermo.html:1203,Energy Efficiency,energy,energy,1203,"chemical Analysis¶; Code author: Rollin A. King and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, THERMO. Caution; It is important to know that PSI4, like any other; quantum chemistry program, does not compute the usual enthalpies,; entropies, or Gibbs free energies of formation provided by most; reference books. Instead, quantum chemistry programs compute “absolute”; thermodynamic properties relative to infinitely separated nuclei and; electrons, not “formation” values relative to elements in their standard; states. If you are computing thermodynamic differences, like a reaction; enthalpy computed as the enthalpy of the products minus the enthalpy; of the reactants, then these “absolute” enthalpies are perfectly valid; and usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the “thermal energies” reported in kcal/mol are the; finite-temperature corrections to the electronic total energy, and; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords¶. T¶. Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. P¶. Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. ROTATIONAL_SYMMETRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. Examp",MatchSource.WIKI,psi4manual/1.3.2/thermo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/thermo.html
https://psicode.org/psi4manual/1.3.2/thermo.html:2010,Integrability,depend,dependent,2010," usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the “thermal energies” reported in kcal/mol are the; finite-temperature corrections to the electronic total energy, and; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords¶. T¶. Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. P¶. Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. ROTATIONAL_SYMMETRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. Examples¶; A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function qcdb.vib.thermo(); as is shown in freq-isotope2.; A few summary psivars are set: “ZPVE”, “THERMAL ENERGY CORRECTION”,; “ENTHALPY CORRECTION”, “GIBBS FREE ENERGY CORRECTION”, “ZERO K; ENTHALPHY”, “THERMAL ENERGY”, “ENTHALPY”, “GIBBS FREE ENERGY”.; But additionally, every valid combination of {S, Cv, Cp, ZPE, E, H, G}; with {elec, trans, rot, vib, corr, tot} (e.g., vibrational entropy,; S_vib, and enthalpy correction, H_corr) is returned by dictionary; from the thermo function. See python/vibanalys",MatchSource.WIKI,psi4manual/1.3.2/thermo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/thermo.html
https://psicode.org/psi4manual/1.3.2/thermo.html:2205,Performance,perform,performed,2205,"ot the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords¶. T¶. Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. P¶. Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. ROTATIONAL_SYMMETRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. Examples¶; A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function qcdb.vib.thermo(); as is shown in freq-isotope2.; A few summary psivars are set: “ZPVE”, “THERMAL ENERGY CORRECTION”,; “ENTHALPY CORRECTION”, “GIBBS FREE ENERGY CORRECTION”, “ZERO K; ENTHALPHY”, “THERMAL ENERGY”, “ENTHALPY”, “GIBBS FREE ENERGY”.; But additionally, every valid combination of {S, Cv, Cp, ZPE, E, H, G}; with {elec, trans, rot, vib, corr, tot} (e.g., vibrational entropy,; S_vib, and enthalpy correction, H_corr) is returned by dictionary; from the thermo function. See python/vibanalysis; (near the end) for an example. Output¶; The full list of keywords for thermo is provided in Appendix THERMO.; Information on the Psithon function that drives frequency analyses is provided; at frequency(). table of contents. Vibrational and Thermochemical Analysis; Keywords; T",MatchSource.WIKI,psi4manual/1.3.2/thermo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/thermo.html
https://psicode.org/psi4manual/1.3.2/thermo.html:936,Usability,usab,usable,936,"﻿. Vibrational and Thermochemical Analysis. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. Vibrational and Thermochemical Analysis¶; Code author: Rollin A. King and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, THERMO. Caution; It is important to know that PSI4, like any other; quantum chemistry program, does not compute the usual enthalpies,; entropies, or Gibbs free energies of formation provided by most; reference books. Instead, quantum chemistry programs compute “absolute”; thermodynamic properties relative to infinitely separated nuclei and; electrons, not “formation” values relative to elements in their standard; states. If you are computing thermodynamic differences, like a reaction; enthalpy computed as the enthalpy of the products minus the enthalpy; of the reactants, then these “absolute” enthalpies are perfectly valid; and usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the “thermal energies” reported in kcal/mol are the; finite-temperature corrections to the electronic total energy, and; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords¶. T¶. Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. P¶. Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. ROTATIONAL_SYMMETRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the ",MatchSource.WIKI,psi4manual/1.3.2/thermo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/thermo.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:6121,Availability,down,downhill,6121,"oice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:8768,Availability,error,errors,8768,"eometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm-1; is:; 1; 2; 3; 4; 5; 6 Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibrational frequency using visualization software.); Because the vibrational frequencies are available, a thermodynamics; analysis is automatically performed at the end of the co",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:9649,Availability,avail,available,9649,"ments. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm-1; is:; 1; 2; 3; 4; 5; 6 Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibrational frequency using visualization software.); Because the vibrational frequencies are available, a thermodynamics; analysis is automatically performed at the end of the computation.; You can see this in the next section of the output file. The vibrational; frequencies are sufficient to obtain vibrational contributions to; enthalpy (H), entropy (S), and Gibbs free energy (G). Similarly, the; molecular geometry is used to obtain rotational constants, which are; then used to obtain rotational contributions to H, S, and G. Analysis of Intermolecular Interactions¶; Now let’s consider something a little more interesting. PSI4; contains code to analyze the nature of intermolecular interactions; between two molecules, via symmetry-adapted perturbation theory; (SAPT) [Jeziorski:1994:1887]. This kind of analysis gives a lot; of insight into the nature of intermolecular interactions, and PSI4; makes these computations easier than ever.; For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for e",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:12246,Availability,error,error,12246,"n; options:; 1; 2; 3; 4; 5; 6; 7set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'). Before, we have been setting keywords individually with commands like; set basis cc-pVDZ. Because we have a few more options now, it’s; convenient to place them together into the set; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT example, we have found that for basic-level SAPT; computations (i.e., SAPT0), a good error cancellation is found; [Hohenstein:2012:WIREs] with the jun-cc-pVDZ basis (this is the; usual aug-cc-pVDZ basis, but without diffuse functions on hydrogen and; without diffuse \(d\) functions on heavy atoms) [Papajak:2011:10]. So,; we’ll use that as our standard basis set. The SAPT code is designed to; use density fitting techniques, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:12619,Availability,error,errors,12619," together into the set; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT example, we have found that for basic-level SAPT; computations (i.e., SAPT0), a good error cancellation is found; [Hohenstein:2012:WIREs] with the jun-cc-pVDZ basis (this is the; usual aug-cc-pVDZ basis, but without diffuse functions on hydrogen and; without diffuse \(d\) functions on heavy atoms) [Papajak:2011:10]. So,; we’ll use that as our standard basis set. The SAPT code is designed to; use density fitting techniques, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). T",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:17963,Availability,avail,available,17963,"asis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, PSI4 knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the counterpoise correction on (here, let’s; consider CCSD(T)), and it needs to know what’s monomer A and what’s monomer; B. This last issue of specifying the monomers separately was already dealt; with in the previous SAPT example, where we saw that two dashes in the; molecule block can be used to separate monomers.; So, we’re going to do counterpoise-corrected CCSD(T) energies for Ne2 at; a series of different interatomic distances. And let’s print out a table; of the interatomic distances we’ve considered, and the CP-corrected CCSD(T); interaction energies (in kcal mol-1) at each geometry. Doing all this; in a single input is surprisingly easy in PSI4. Here’s the input; (available as tu6-cp-ne2).; #! Example potential energy surface scan and CP-correction for Ne2. molecule dimer {; Ne; --; Ne 1 R; }. Rvals=[2.5, 3.0, 4.0]. set basis aug-cc-pVDZ; set freeze_core True. # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work); ecp = {}. for R in Rvals:; dimer.R = R; ecp[R] = energy('ccsd(t)', bsse_type = 'cp'). psi4.print_out(""\n""); psi4.print_out(""CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies\n\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""); for R in Rvals:; e = ecp[R] * psi_hartree2kcalmol; psi4.print_out("" %3.1f %10.6f\n"" % (R, e)). First, you can see the molecule block has a couple dashes to; separate the monomers from each other. Also note we’ve used a Z-matrix to; specify the geometry, and we’ve used a variable (R) as the; interatomic distance. We have not specified the value of R in; the molecule block like we n",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:19621,Availability,avail,available,19621,"\n""); for R in Rvals:; e = ecp[R] * psi_hartree2kcalmol; psi4.print_out("" %3.1f %10.6f\n"" % (R, e)). First, you can see the molecule block has a couple dashes to; separate the monomers from each other. Also note we’ve used a Z-matrix to; specify the geometry, and we’ve used a variable (R) as the; interatomic distance. We have not specified the value of R in; the molecule block like we normally would. That’s because we’re; going to vary it during the scan across the potential energy surface.; Below the molecule block, you can see the Rvals array; specified. This is a Python array holding the interatomic distances we; want to consider. In Python, arrays are surrounded by square brackets, and; elements are separated by commas.; The next lines, set basis aug-cc-pVDZ and set freeze_core True,; are familiar from previous test cases. Next comes a slightly; unusual-looking line, ecp = {}. This is Python’s way of initializing; a “dictionary”. We’re going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the R values. This winds up being; slightly more elegant than a regular array in later parts of the input; file.; The next section, beginning with for R in Rvals:, loops over the; interatomic distances, R, in our array Rvals. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = energy('ccsd(t)', bsse_type='cp'), computes the counterpoise-corrected; CCSD(T) energy and places it in the ecp dictionary with R as; the index. Note we didn’t need to specify ghost atoms, and we didn’t need; to call the monomer and dimer computations sep",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:2553,Deployability,install,installation,2553,"er of sample input files, covering everything from single-point energies; using density-functional theory to response properties from coupled-cluster; theory, can be found in the psi4/samples directory. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, ",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:3103,Deployability,install,installation,3103,"mputation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so ",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:3140,Deployability,install,installation,3140,"mputation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so ",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:23835,Deployability,update,updated,23835,"f the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (Hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol. PSI4; provides several built-in physical constants and conversion factors, as; described in section Physical Constants.; Notice the loop over \(R\) to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; Our table is printed at the very end of the output file, and looks like; this; 1; 2; 3; 4; 5; 6; 7CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies. R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264. The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. table of contents. Psithon Tutorial: Using PSI4 as an Executable; Basic Input File Structure; Sample Input Files; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy with Psithon. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. A PSI4 Tutorial. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:688,Energy Efficiency,power,powerful,688,"﻿. Psithon Tutorial: Using PSI4 as an Executable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. A PSI4 Tutorial. Psithon Tutorial: Using PSI4 as an Executable¶. Note; Psithon and PsiAPI refer to two modes of interacting with PSI4. In; Psithon mode, you write an input file in our domain-specific language; (not quite Python) where commands don’t have psi4. in front, then; submit it to the executable psi4 which processes the Psithon into; pure Python and runs it internally. In PsiAPI mode, you write a pure; Python script with import psi4 at the top and commands are behind; the psi4. namespace, then submit it to the python interpreter.; Both modes are equally powerful. This tutorial covers the Psithon; mode. Note; Some PSI4 functions and keywords have aliases. For example,; frequency(), frequencies(), and freq() all work to; obtain vibrational frequencies. Basic Input File Structure¶; PSI4 reads input from a text file, which can be prepared in any standard; text editor. The default input file name is input.dat and the; default output file name is output.dat. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. If you give an input name but no output name, then the output name will; be the same as the input name (replacing any “.in” or “.dat” extension by “.out”). Sample Input Files¶; Below, we will provide a few simple input files as examples. A large; number of sample input files, covering everything from single-point energies; using density-functional theory to response properties from coupled-cluster; theory, can be found in the psi4/samples directory. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matri",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:2188,Energy Efficiency,energy,energy,2188,"ying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. If you give an input name but no output name, then the output name will; be the same as the input name (replacing any “.in” or “.dat” extension by “.out”). Sample Input Files¶; Below, we will provide a few simple input files as examples. A large; number of sample input files, covering everything from single-point energies; using density-functional theory to response properties from coupled-cluster; theory, can be found in the psi4/samples directory. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling ",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:2272,Energy Efficiency,energy,energy,2272," line.; The syntax is:; >>> psi4 input-name output-name. If you give an input name but no output name, then the output name will; be the same as the input name (replacing any “.in” or “.dat” extension by “.out”). Sample Input Files¶; Below, we will provide a few simple input files as examples. A large; number of sample input files, covering everything from single-point energies; using density-functional theory to response properties from coupled-cluster; theory, can be found in the psi4/samples directory. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficien",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:2444,Energy Efficiency,energy,energy,2444,"lacing any “.in” or “.dat” extension by “.out”). Sample Input Files¶; Below, we will provide a few simple input files as examples. A large; number of sample input files, covering everything from single-point energies; using density-functional theory to response properties from coupled-cluster; theory, can be found in the psi4/samples directory. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:2760,Energy Efficiency,energy,energy,2760,"the psi4/samples directory. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:2872,Energy Efficiency,energy,energy,2872,"water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on ",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:3370,Energy Efficiency,charge,charge,3370," You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables (\(R\) and \(A\)), whose values are given; at",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:4179,Energy Efficiency,charge,charge,4179,"alling from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables (\(R\) and \(A\)), whose values are given; at the end of the Z-matrix specification.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted ",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:4639,Energy Efficiency,energy,energy,4639,"gram correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables (\(R\) and \(A\)), whose values are given; at the end of the Z-matrix specification.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perfor",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:4698,Energy Efficiency,energy,energy,4698,"avior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables (\(R\) and \(A\)), whose values are given; at the end of the Z-matrix specification.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These ca",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:4994,Energy Efficiency,energy,energy,4994,"spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables (\(R\) and \(A\)), whose values are given; at the end of the Z-matrix specification.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:5507,Energy Efficiency,energy,energy,5507,"ation.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force o",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:5549,Energy Efficiency,energy,energy,5549,"ation.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force o",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:5739,Energy Efficiency,energy,energy,5739,"ommand psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7---------------------------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:6133,Energy Efficiency,energy,energy,6133,"oice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:6429,Energy Efficiency,energy,energy,6429,"; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. The",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:8635,Energy Efficiency,energy,energy,8635,"up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm-1; is:; 1; 2; 3; 4; 5; 6 Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibratio",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:9929,Energy Efficiency,energy,energy,9929,"--------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm-1; is:; 1; 2; 3; 4; 5; 6 Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibrational frequency using visualization software.); Because the vibrational frequencies are available, a thermodynamics; analysis is automatically performed at the end of the computation.; You can see this in the next section of the output file. The vibrational; frequencies are sufficient to obtain vibrational contributions to; enthalpy (H), entropy (S), and Gibbs free energy (G). Similarly, the; molecular geometry is used to obtain rotational constants, which are; then used to obtain rotational contributions to H, S, and G. Analysis of Intermolecular Interactions¶; Now let’s consider something a little more interesting. PSI4; contains code to analyze the nature of intermolecular interactions; between two molecules, via symmetry-adapted perturbation theory; (SAPT) [Jeziorski:1994:1887]. This kind of analysis gives a lot; of insight into the nature of intermolecular interactions, and PSI4; makes these computations easier than ever.; For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20# Example SAPT computation for ethene*ethine (*i.e.*, ethylene",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:10296,Energy Efficiency,adapt,adapted,10296,"tant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibrational frequency using visualization software.); Because the vibrational frequencies are available, a thermodynamics; analysis is automatically performed at the end of the computation.; You can see this in the next section of the output file. The vibrational; frequencies are sufficient to obtain vibrational contributions to; enthalpy (H), entropy (S), and Gibbs free energy (G). Similarly, the; molecular geometry is used to obtain rotational constants, which are; then used to obtain rotational contributions to H, S, and G. Analysis of Intermolecular Interactions¶; Now let’s consider something a little more interesting. PSI4; contains code to analyze the nature of intermolecular interactions; between two molecules, via symmetry-adapted perturbation theory; (SAPT) [Jeziorski:1994:1887]. This kind of analysis gives a lot; of insight into the nature of intermolecular interactions, and PSI4; makes these computations easier than ever.; For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20# Example SAPT computation for ethene*ethine (*i.e.*, ethylene*acetylene),; # test case 16 from the S22 database. molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; unit",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:11445,Energy Efficiency,energy,energy,11445," PSI4; makes these computations easier than ever.; For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20# Example SAPT computation for ethene*ethine (*i.e.*, ethylene*acetylene),; # test case 16 from the S22 database. molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom. }. Here’s the second half of the input, where we specify the computation; options:; 1; 2; 3; 4; 5; 6; 7set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'). Before, we have been setting keywords individually with commands like; set basis cc-pVDZ. Because we have a few more options now, it’s; convenient to place them together into the set; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT example, we have found that for basic-level SAPT; computations (i.e., SAPT0), a good error cancellation is found; [Hohenstein:2012:WIREs] with the jun-cc-pVDZ basis (this is the; usual aug-cc-pVDZ basis, but without diffuse functions on hydrogen and; without diffuse \(d\) functions on heavy ",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:11961,Energy Efficiency,energy,energy,11961,"1 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom. }. Here’s the second half of the input, where we specify the computation; options:; 1; 2; 3; 4; 5; 6; 7set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'). Before, we have been setting keywords individually with commands like; set basis cc-pVDZ. Because we have a few more options now, it’s; convenient to place them together into the set; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT example, we have found that for basic-level SAPT; computations (i.e., SAPT0), a good error cancellation is found; [Hohenstein:2012:WIREs] with the jun-cc-pVDZ basis (this is the; usual aug-cc-pVDZ basis, but without diffuse functions on hydrogen and; without diffuse \(d\) functions on heavy atoms) [Papajak:2011:10]. So,; we’ll use that as our standard basis set. The SAPT code is designed to; use density fitting techniques, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. ",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:13604,Energy Efficiency,energy,energy,13604,"s, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:13779,Energy Efficiency,energy,energy,13779,"ations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; correlation). The next most attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:13879,Energy Efficiency,energy,energy,13879,"ations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; correlation). The next most attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:13918,Energy Efficiency,energy,energy,13918," the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; correlation). The next most attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2 in which; one excitation is placed on each monomer), contributing an attraction of; -1.21 kcal mol-1. It is not surprising that the electrostatic; contribution is domina",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:14149,Energy Efficiency,energy,energy,14149,"ple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; correlation). The next most attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2 in which; one excitation is placed on each monomer), contributing an attraction of; -1.21 kcal mol-1. It is not surprising that the electrostatic; contribution is dominant, because the geometry chosen for this example has the; acetylene perpendicular to the ethylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractive; because t",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:14241,Energy Efficiency,energy,energy,14241,"ple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; correlation). The next most attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2 in which; one excitation is placed on each monomer), contributing an attraction of; -1.21 kcal mol-1. It is not surprising that the electrostatic; contribution is dominant, because the geometry chosen for this example has the; acetylene perpendicular to the ethylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractive; because t",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:15256,Energy Efficiency,charge,charge,15256,"of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; correlation). The next most attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2 in which; one excitation is placed on each monomer), contributing an attraction of; -1.21 kcal mol-1. It is not surprising that the electrostatic; contribution is dominant, because the geometry chosen for this example has the; acetylene perpendicular to the ethylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractive; because the H atoms in acetylene bear a partial positive charge, while the; electron-rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon¶; Finally, let’s consider an example that shows how the Python driver; in PSI4 simplifies some routine tasks. PSI4 can interpret; valid Python code in addition to the computational chemistry directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the examp",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:15338,Energy Efficiency,charge,charge,15338,"of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; correlation). The next most attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2 in which; one excitation is placed on each monomer), contributing an attraction of; -1.21 kcal mol-1. It is not surprising that the electrostatic; contribution is dominant, because the geometry chosen for this example has the; acetylene perpendicular to the ethylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractive; because the H atoms in acetylene bear a partial positive charge, while the; electron-rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon¶; Finally, let’s consider an example that shows how the Python driver; in PSI4 simplifies some routine tasks. PSI4 can interpret; valid Python code in addition to the computational chemistry directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the examp",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:16247,Energy Efficiency,energy,energy,16247,"rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon¶; Finally, let’s consider an example that shows how the Python driver; in PSI4 simplifies some routine tasks. PSI4 can interpret; valid Python code in addition to the computational chemistry directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; Let’s also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, PSI4 knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the c",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:16303,Energy Efficiency,energy,energy,16303,"rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon¶; Finally, let’s consider an example that shows how the Python driver; in PSI4 simplifies some routine tasks. PSI4 can interpret; valid Python code in addition to the computational chemistry directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; Let’s also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, PSI4 knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the c",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:16868,Energy Efficiency,energy,energy,16868,"y directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; Let’s also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, PSI4 knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the counterpoise correction on (here, let’s; consider CCSD(T)), and it needs to know what’s monomer A and what’s monomer; B. This last issue of specifying the monomers separately was already dealt; with in the previous SAPT example, where we saw that two dashes in the; molecule block can be used to separate monomers.; So, we’re going to do counterpoise-corrected CCSD(T) energies for Ne2 at; a series of different interatomic distances. And let’s print out a table; of the interatomic distances we’ve considered, and the CP-corrected CCSD(T); interaction energies (in kcal mol-1) at each geometry. Doing all th",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:18011,Energy Efficiency,energy,energy,18011," separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, PSI4 knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the counterpoise correction on (here, let’s; consider CCSD(T)), and it needs to know what’s monomer A and what’s monomer; B. This last issue of specifying the monomers separately was already dealt; with in the previous SAPT example, where we saw that two dashes in the; molecule block can be used to separate monomers.; So, we’re going to do counterpoise-corrected CCSD(T) energies for Ne2 at; a series of different interatomic distances. And let’s print out a table; of the interatomic distances we’ve considered, and the CP-corrected CCSD(T); interaction energies (in kcal mol-1) at each geometry. Doing all this; in a single input is surprisingly easy in PSI4. Here’s the input; (available as tu6-cp-ne2).; #! Example potential energy surface scan and CP-correction for Ne2. molecule dimer {; Ne; --; Ne 1 R; }. Rvals=[2.5, 3.0, 4.0]. set basis aug-cc-pVDZ; set freeze_core True. # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work); ecp = {}. for R in Rvals:; dimer.R = R; ecp[R] = energy('ccsd(t)', bsse_type = 'cp'). psi4.print_out(""\n""); psi4.print_out(""CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies\n\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""); for R in Rvals:; e = ecp[R] * psi_hartree2kcalmol; psi4.print_out("" %3.1f %10.6f\n"" % (R, e)). First, you can see the molecule block has a couple dashes to; separate the monomers from each other. Also note we’ve used a Z-matrix to; specify the geometry, and we’ve used a variable (R) as the; interatomic distance. We have not specified the value of R in; the molecule block like we normally would. That’s because we’re; going to vary it dur",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:18324,Energy Efficiency,energy,energy,18324,"CCSD(T)), and it needs to know what’s monomer A and what’s monomer; B. This last issue of specifying the monomers separately was already dealt; with in the previous SAPT example, where we saw that two dashes in the; molecule block can be used to separate monomers.; So, we’re going to do counterpoise-corrected CCSD(T) energies for Ne2 at; a series of different interatomic distances. And let’s print out a table; of the interatomic distances we’ve considered, and the CP-corrected CCSD(T); interaction energies (in kcal mol-1) at each geometry. Doing all this; in a single input is surprisingly easy in PSI4. Here’s the input; (available as tu6-cp-ne2).; #! Example potential energy surface scan and CP-correction for Ne2. molecule dimer {; Ne; --; Ne 1 R; }. Rvals=[2.5, 3.0, 4.0]. set basis aug-cc-pVDZ; set freeze_core True. # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work); ecp = {}. for R in Rvals:; dimer.R = R; ecp[R] = energy('ccsd(t)', bsse_type = 'cp'). psi4.print_out(""\n""); psi4.print_out(""CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies\n\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""); for R in Rvals:; e = ecp[R] * psi_hartree2kcalmol; psi4.print_out("" %3.1f %10.6f\n"" % (R, e)). First, you can see the molecule block has a couple dashes to; separate the monomers from each other. Also note we’ve used a Z-matrix to; specify the geometry, and we’ve used a variable (R) as the; interatomic distance. We have not specified the value of R in; the molecule block like we normally would. That’s because we’re; going to vary it during the scan across the potential energy surface.; Below the molecule block, you can see the Rvals array; specified. This is a Python array holding the interatomic distances we; want to consider. In Python, arrays are surrounded by square brackets, and; elements are separated by commas.; The next lines, set ba",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:19057,Energy Efficiency,energy,energy,19057,"scan and CP-correction for Ne2. molecule dimer {; Ne; --; Ne 1 R; }. Rvals=[2.5, 3.0, 4.0]. set basis aug-cc-pVDZ; set freeze_core True. # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work); ecp = {}. for R in Rvals:; dimer.R = R; ecp[R] = energy('ccsd(t)', bsse_type = 'cp'). psi4.print_out(""\n""); psi4.print_out(""CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies\n\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""); for R in Rvals:; e = ecp[R] * psi_hartree2kcalmol; psi4.print_out("" %3.1f %10.6f\n"" % (R, e)). First, you can see the molecule block has a couple dashes to; separate the monomers from each other. Also note we’ve used a Z-matrix to; specify the geometry, and we’ve used a variable (R) as the; interatomic distance. We have not specified the value of R in; the molecule block like we normally would. That’s because we’re; going to vary it during the scan across the potential energy surface.; Below the molecule block, you can see the Rvals array; specified. This is a Python array holding the interatomic distances we; want to consider. In Python, arrays are surrounded by square brackets, and; elements are separated by commas.; The next lines, set basis aug-cc-pVDZ and set freeze_core True,; are familiar from previous test cases. Next comes a slightly; unusual-looking line, ecp = {}. This is Python’s way of initializing; a “dictionary”. We’re going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the R values. This winds up being; slightly more elegant than a regular array in later parts of the input; file.; The next section, beginning with for R in Rvals:, loops over the; interatomic distances, R, i",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:20323,Energy Efficiency,energy,energy,20323,"amiliar from previous test cases. Next comes a slightly; unusual-looking line, ecp = {}. This is Python’s way of initializing; a “dictionary”. We’re going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the R values. This winds up being; slightly more elegant than a regular array in later parts of the input; file.; The next section, beginning with for R in Rvals:, loops over the; interatomic distances, R, in our array Rvals. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = energy('ccsd(t)', bsse_type='cp'), computes the counterpoise-corrected; CCSD(T) energy and places it in the ecp dictionary with R as; the index. Note we didn’t need to specify ghost atoms, and we didn’t need; to call the monomer and dimer computations separately. The built-in; Psithon function nbody_gufunc() does it all for us, automatically.; Near the very end of the output file, the counterpoise correction Python; function will print a nice summary of the results of the counterpoise; computation (the energies of the dimer, of monomer 1 with the ghost functions; of monomer 2, of monomer 2 with the ghost functions of monomer 1, and the; overall counterpoise-corrected interaction energy):; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17N-Body: Computing complex (1/2) with fragments (2,) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (2,), basis = (1, 2): -128.70932405488924); ...; N-Body: Computing complex (2/2) with fragments (1,) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments =",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:20403,Energy Efficiency,energy,energy,20403,"amiliar from previous test cases. Next comes a slightly; unusual-looking line, ecp = {}. This is Python’s way of initializing; a “dictionary”. We’re going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the R values. This winds up being; slightly more elegant than a regular array in later parts of the input; file.; The next section, beginning with for R in Rvals:, loops over the; interatomic distances, R, in our array Rvals. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = energy('ccsd(t)', bsse_type='cp'), computes the counterpoise-corrected; CCSD(T) energy and places it in the ecp dictionary with R as; the index. Note we didn’t need to specify ghost atoms, and we didn’t need; to call the monomer and dimer computations separately. The built-in; Psithon function nbody_gufunc() does it all for us, automatically.; Near the very end of the output file, the counterpoise correction Python; function will print a nice summary of the results of the counterpoise; computation (the energies of the dimer, of monomer 1 with the ghost functions; of monomer 2, of monomer 2 with the ghost functions of monomer 1, and the; overall counterpoise-corrected interaction energy):; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17N-Body: Computing complex (1/2) with fragments (2,) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (2,), basis = (1, 2): -128.70932405488924); ...; N-Body: Computing complex (2/2) with fragments (1,) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments =",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:21011,Energy Efficiency,energy,energy,21011,"the input; file.; The next section, beginning with for R in Rvals:, loops over the; interatomic distances, R, in our array Rvals. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = energy('ccsd(t)', bsse_type='cp'), computes the counterpoise-corrected; CCSD(T) energy and places it in the ecp dictionary with R as; the index. Note we didn’t need to specify ghost atoms, and we didn’t need; to call the monomer and dimer computations separately. The built-in; Psithon function nbody_gufunc() does it all for us, automatically.; Near the very end of the output file, the counterpoise correction Python; function will print a nice summary of the results of the counterpoise; computation (the energies of the dimer, of monomer 1 with the ghost functions; of monomer 2, of monomer 2 with the ghost functions of monomer 1, and the; overall counterpoise-corrected interaction energy):; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17N-Body: Computing complex (1/2) with fragments (2,) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (2,), basis = (1, 2): -128.70932405488924); ...; N-Body: Computing complex (2/2) with fragments (1,) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (1,), basis = (1, 2): -128.70932405488935); ...; N-Body: Computing complex (1/1) with fragments (1, 2) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (1, 2), basis = (1, 2): -257.41867403127321); ...; ==> N-Body: Counterpoise Corrected (CP) energies <==. n-Body Total Energy [Eh] I.E. [kcal/mol] Delta [kcal/mol]; 1 -257.418648109779 0.000000000000 0.000000000000; 2 -257.418674031273 -0.016265984132 -0.016265984132. And that’s it! The only remaining part of the example input is a little table; of the",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:6268,Integrability,message,message,6268,"hell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; -------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:15797,Integrability,rout,routine,15797,"st attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2 in which; one excitation is placed on each monomer), contributing an attraction of; -1.21 kcal mol-1. It is not surprising that the electrostatic; contribution is dominant, because the geometry chosen for this example has the; acetylene perpendicular to the ethylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractive; because the H atoms in acetylene bear a partial positive charge, while the; electron-rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon¶; Finally, let’s consider an example that shows how the Python driver; in PSI4 simplifies some routine tasks. PSI4 can interpret; valid Python code in addition to the computational chemistry directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; L",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:17186,Integrability,rout,routine,17186," tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; Let’s also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, PSI4 knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the counterpoise correction on (here, let’s; consider CCSD(T)), and it needs to know what’s monomer A and what’s monomer; B. This last issue of specifying the monomers separately was already dealt; with in the previous SAPT example, where we saw that two dashes in the; molecule block can be used to separate monomers.; So, we’re going to do counterpoise-corrected CCSD(T) energies for Ne2 at; a series of different interatomic distances. And let’s print out a table; of the interatomic distances we’ve considered, and the CP-corrected CCSD(T); interaction energies (in kcal mol-1) at each geometry. Doing all this; in a single input is surprisingly easy in PSI4. Here’s the input; (available as tu6-cp-ne2).; #! Example potential energy surface scan and CP-correction for Ne2. molecule dimer {; Ne; --; Ne 1 R; }. Rvals",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:4397,Modifiability,variab,variables,4397,"al), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables (\(R\) and \(A\)), whose values are given; at the end of the Z-matrix specification.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geom",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:10296,Modifiability,adapt,adapted,10296,"tant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibrational frequency using visualization software.); Because the vibrational frequencies are available, a thermodynamics; analysis is automatically performed at the end of the computation.; You can see this in the next section of the output file. The vibrational; frequencies are sufficient to obtain vibrational contributions to; enthalpy (H), entropy (S), and Gibbs free energy (G). Similarly, the; molecular geometry is used to obtain rotational constants, which are; then used to obtain rotational contributions to H, S, and G. Analysis of Intermolecular Interactions¶; Now let’s consider something a little more interesting. PSI4; contains code to analyze the nature of intermolecular interactions; between two molecules, via symmetry-adapted perturbation theory; (SAPT) [Jeziorski:1994:1887]. This kind of analysis gives a lot; of insight into the nature of intermolecular interactions, and PSI4; makes these computations easier than ever.; For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20# Example SAPT computation for ethene*ethine (*i.e.*, ethylene*acetylene),; # test case 16 from the S22 database. molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; unit",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:18854,Modifiability,variab,variable,18854,"energies (in kcal mol-1) at each geometry. Doing all this; in a single input is surprisingly easy in PSI4. Here’s the input; (available as tu6-cp-ne2).; #! Example potential energy surface scan and CP-correction for Ne2. molecule dimer {; Ne; --; Ne 1 R; }. Rvals=[2.5, 3.0, 4.0]. set basis aug-cc-pVDZ; set freeze_core True. # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work); ecp = {}. for R in Rvals:; dimer.R = R; ecp[R] = energy('ccsd(t)', bsse_type = 'cp'). psi4.print_out(""\n""); psi4.print_out(""CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies\n\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""); for R in Rvals:; e = ecp[R] * psi_hartree2kcalmol; psi4.print_out("" %3.1f %10.6f\n"" % (R, e)). First, you can see the molecule block has a couple dashes to; separate the monomers from each other. Also note we’ve used a Z-matrix to; specify the geometry, and we’ve used a variable (R) as the; interatomic distance. We have not specified the value of R in; the molecule block like we normally would. That’s because we’re; going to vary it during the scan across the potential energy surface.; Below the molecule block, you can see the Rvals array; specified. This is a Python array holding the interatomic distances we; want to consider. In Python, arrays are surrounded by square brackets, and; elements are separated by commas.; The next lines, set basis aug-cc-pVDZ and set freeze_core True,; are familiar from previous test cases. Next comes a slightly; unusual-looking line, ecp = {}. This is Python’s way of initializing; a “dictionary”. We’re going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the R values. This",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:20210,Modifiability,variab,variable,20210," surrounded by square brackets, and; elements are separated by commas.; The next lines, set basis aug-cc-pVDZ and set freeze_core True,; are familiar from previous test cases. Next comes a slightly; unusual-looking line, ecp = {}. This is Python’s way of initializing; a “dictionary”. We’re going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the R values. This winds up being; slightly more elegant than a regular array in later parts of the input; file.; The next section, beginning with for R in Rvals:, loops over the; interatomic distances, R, in our array Rvals. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = energy('ccsd(t)', bsse_type='cp'), computes the counterpoise-corrected; CCSD(T) energy and places it in the ecp dictionary with R as; the index. Note we didn’t need to specify ghost atoms, and we didn’t need; to call the monomer and dimer computations separately. The built-in; Psithon function nbody_gufunc() does it all for us, automatically.; Near the very end of the output file, the counterpoise correction Python; function will print a nice summary of the results of the counterpoise; computation (the energies of the dimer, of monomer 1 with the ghost functions; of monomer 2, of monomer 2 with the ghost functions of monomer 1, and the; overall counterpoise-corrected interaction energy):; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17N-Body: Computing complex (1/2) with fragments (2,) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (2,), basis = (1, 2): -128.70932405",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:5621,Performance,perform,perform,5621,"uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; ",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:5647,Performance,optimiz,optimizations,5647,"uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; ",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:5753,Performance,optimiz,optimize,5753,"ommand psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7---------------------------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:5816,Performance,optimiz,optimizing,5816,"at and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; ------------------------------------",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:6015,Performance,optimiz,optimize,6015,"nal Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:6044,Performance,perform,perform,6044,"ed a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.001787",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:6149,Performance,optimiz,optimizer,6149,"oice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:6361,Performance,optimiz,optimizer,6361,"; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. The",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:7589,Performance,perform,perform,7589,"----------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respec",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:7671,Performance,optimiz,optimized,7671,"----------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respec",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:7743,Performance,optimiz,optimization,7743,"----------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respec",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:7958,Performance,optimiz,optimization,7958,".01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:7982,Performance,optimiz,optimization,7982,".01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:8031,Performance,optimiz,optimized,8031,".01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:8114,Performance,optimiz,optimization,8114,"0942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in t",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:8364,Performance,optimiz,optimize,8364,"rational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm-1; is:; 1; 2; 3; 4; 5; 6 Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where t",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:8475,Performance,optimiz,optimization,8475,"up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm-1; is:; 1; 2; 3; 4; 5; 6 Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibratio",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:9704,Performance,perform,performed,9704,"ments. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm-1; is:; 1; 2; 3; 4; 5; 6 Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibrational frequency using visualization software.); Because the vibrational frequencies are available, a thermodynamics; analysis is automatically performed at the end of the computation.; You can see this in the next section of the output file. The vibrational; frequencies are sufficient to obtain vibrational contributions to; enthalpy (H), entropy (S), and Gibbs free energy (G). Similarly, the; molecular geometry is used to obtain rotational constants, which are; then used to obtain rotational contributions to H, S, and G. Analysis of Intermolecular Interactions¶; Now let’s consider something a little more interesting. PSI4; contains code to analyze the nature of intermolecular interactions; between two molecules, via symmetry-adapted perturbation theory; (SAPT) [Jeziorski:1994:1887]. This kind of analysis gives a lot; of insight into the nature of intermolecular interactions, and PSI4; makes these computations easier than ever.; For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for e",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:12842,Performance,perform,performed,12842,"ommon PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT example, we have found that for basic-level SAPT; computations (i.e., SAPT0), a good error cancellation is found; [Hohenstein:2012:WIREs] with the jun-cc-pVDZ basis (this is the; usual aug-cc-pVDZ basis, but without diffuse functions on hydrogen and; without diffuse \(d\) functions on heavy atoms) [Papajak:2011:10]. So,; we’ll use that as our standard basis set. The SAPT code is designed to; use density fitting techniques, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:13739,Performance,perform,perform,13739,"; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; ",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:17197,Performance,perform,perform,17197," tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; Let’s also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, PSI4 knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the counterpoise correction on (here, let’s; consider CCSD(T)), and it needs to know what’s monomer A and what’s monomer; B. This last issue of specifying the monomers separately was already dealt; with in the previous SAPT example, where we saw that two dashes in the; molecule block can be used to separate monomers.; So, we’re going to do counterpoise-corrected CCSD(T) energies for Ne2 at; a series of different interatomic distances. And let’s print out a table; of the interatomic distances we’ve considered, and the CP-corrected CCSD(T); interaction energies (in kcal mol-1) at each geometry. Doing all this; in a single input is surprisingly easy in PSI4. Here’s the input; (available as tu6-cp-ne2).; #! Example potential energy surface scan and CP-correction for Ne2. molecule dimer {; Ne; --; Ne 1 R; }. Rvals",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:22389,Security,access,accessed,22389,"nts (1, 2).; ...; N-Body: Complex Energy (fragments = (1,), basis = (1, 2): -128.70932405488935); ...; N-Body: Computing complex (1/1) with fragments (1, 2) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (1, 2), basis = (1, 2): -257.41867403127321); ...; ==> N-Body: Counterpoise Corrected (CP) energies <==. n-Body Total Energy [Eh] I.E. [kcal/mol] Delta [kcal/mol]; 1 -257.418648109779 0.000000000000 0.000000000000; 2 -257.418674031273 -0.016265984132 -0.016265984132. And that’s it! The only remaining part of the example input is a little table; of the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (Hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol. PSI4; provides several built-in physical constants and conversion factors, as; described in section Physical Constants.; Notice the loop over \(R\) to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; Our table is printed at the very end of the output file, and looks like; this; 1; 2; 3; 4; 5; 6; 7CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies. R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264. The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easil",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:8211,Testability,test,test,8211,"----------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm-1; is:; 1; 2; 3; 4;",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:10887,Testability,test,test,10887,"alpy (H), entropy (S), and Gibbs free energy (G). Similarly, the; molecular geometry is used to obtain rotational constants, which are; then used to obtain rotational contributions to H, S, and G. Analysis of Intermolecular Interactions¶; Now let’s consider something a little more interesting. PSI4; contains code to analyze the nature of intermolecular interactions; between two molecules, via symmetry-adapted perturbation theory; (SAPT) [Jeziorski:1994:1887]. This kind of analysis gives a lot; of insight into the nature of intermolecular interactions, and PSI4; makes these computations easier than ever.; For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20# Example SAPT computation for ethene*ethine (*i.e.*, ethylene*acetylene),; # test case 16 from the S22 database. molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom. }. Here’s the second half of the input, where we specify the computation; options:; 1; 2; 3; 4; 5; 6; 7set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'). Before, we have been setting keywords individually with commands like; set basis cc-pVDZ. Because we have a few more options now, it’s; convenient to place them together into the set; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible;",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:19404,Testability,test,test,19404,"si4.print_out(""\n""); psi4.print_out(""CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies\n\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""); for R in Rvals:; e = ecp[R] * psi_hartree2kcalmol; psi4.print_out("" %3.1f %10.6f\n"" % (R, e)). First, you can see the molecule block has a couple dashes to; separate the monomers from each other. Also note we’ve used a Z-matrix to; specify the geometry, and we’ve used a variable (R) as the; interatomic distance. We have not specified the value of R in; the molecule block like we normally would. That’s because we’re; going to vary it during the scan across the potential energy surface.; Below the molecule block, you can see the Rvals array; specified. This is a Python array holding the interatomic distances we; want to consider. In Python, arrays are surrounded by square brackets, and; elements are separated by commas.; The next lines, set basis aug-cc-pVDZ and set freeze_core True,; are familiar from previous test cases. Next comes a slightly; unusual-looking line, ecp = {}. This is Python’s way of initializing; a “dictionary”. We’re going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the R values. This winds up being; slightly more elegant than a regular array in later parts of the input; file.; The next section, beginning with for R in Rvals:, loops over the; interatomic distances, R, in our array Rvals. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = energy('ccsd(t)', bsse_type='cp'), compu",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:1513,Usability,simpl,simple,1513,"PsiAPI mode, you write a pure; Python script with import psi4 at the top and commands are behind; the psi4. namespace, then submit it to the python interpreter.; Both modes are equally powerful. This tutorial covers the Psithon; mode. Note; Some PSI4 functions and keywords have aliases. For example,; frequency(), frequencies(), and freq() all work to; obtain vibrational frequencies. Basic Input File Structure¶; PSI4 reads input from a text file, which can be prepared in any standard; text editor. The default input file name is input.dat and the; default output file name is output.dat. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. If you give an input name but no output name, then the output name will; be the same as the input name (replacing any “.in” or “.dat” extension by “.out”). Sample Input Files¶; Below, we will provide a few simple input files as examples. A large; number of sample input files, covering everything from single-point energies; using density-functional theory to response properties from coupled-cluster; theory, can be found in the psi4/samples directory. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your ",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:3225,Usability,simpl,simple,3225,"are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. No",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:5487,Usability,simpl,simple,5487,"ation.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force o",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:13205,Usability,simpl,simple,13205,"tein:2012:WIREs] with the jun-cc-pVDZ basis (this is the; usual aug-cc-pVDZ basis, but without diffuse functions on hydrogen and; without diffuse \(d\) functions on heavy atoms) [Papajak:2011:10]. So,; we’ll use that as our standard basis set. The SAPT code is designed to; use density fitting techniques, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined a",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:13591,Usability,simpl,simple,13591,"s, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:15781,Usability,simpl,simplifies,15781,"st attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2 in which; one excitation is placed on each monomer), contributing an attraction of; -1.21 kcal mol-1. It is not surprising that the electrostatic; contribution is dominant, because the geometry chosen for this example has the; acetylene perpendicular to the ethylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractive; because the H atoms in acetylene bear a partial positive charge, while the; electron-rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon¶; Finally, let’s consider an example that shows how the Python driver; in PSI4 simplifies some routine tasks. PSI4 can interpret; valid Python code in addition to the computational chemistry directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; L",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:16091,Usability,simpl,simplify,16091,"thylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractive; because the H atoms in acetylene bear a partial positive charge, while the; electron-rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon¶; Finally, let’s consider an example that shows how the Python driver; in PSI4 simplifies some routine tasks. PSI4 can interpret; valid Python code in addition to the computational chemistry directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; Let’s also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a f",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:16372,Usability,simpl,simple,16372," perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon¶; Finally, let’s consider an example that shows how the Python driver; in PSI4 simplifies some routine tasks. PSI4 can interpret; valid Python code in addition to the computational chemistry directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; Let’s also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, PSI4 knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the counterpoise correction on (here, let’s; consider CCSD(T)), and it needs to know what’s monomer A and what’s monomer; B. This last issue o",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:22806,Usability,simpl,simple,22806," And that’s it! The only remaining part of the example input is a little table; of the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (Hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol. PSI4; provides several built-in physical constants and conversion factors, as; described in section Physical Constants.; Notice the loop over \(R\) to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; Our table is printed at the very end of the output file, and looks like; this; 1; 2; 3; 4; 5; 6; 7CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies. R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264. The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. table of contents. Psithon Tutorial: Using PSI4 as an Executable; Basic Input File Structure; Sample Input Files; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy with Psithon. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. A PSI4 Tutorial. © Copyright 2019, The Psi4 Project.; ",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial-1.html:23277,Usability,clear,clear,23277,"f the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (Hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol. PSI4; provides several built-in physical constants and conversion factors, as; described in section Physical Constants.; Notice the loop over \(R\) to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; Our table is printed at the very end of the output file, and looks like; this; 1; 2; 3; 4; 5; 6; 7CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies. R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264. The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. table of contents. Psithon Tutorial: Using PSI4 as an Executable; Basic Input File Structure; Sample Input Files; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy with Psithon. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. A PSI4 Tutorial. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial-1.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:6121,Availability,down,downhill,6121,"oice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:8768,Availability,error,errors,8768,"eometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm-1; is:; 1; 2; 3; 4; 5; 6 Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibrational frequency using visualization software.); Because the vibrational frequencies are available, a thermodynamics; analysis is automatically performed at the end of the co",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:9649,Availability,avail,available,9649,"ments. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm-1; is:; 1; 2; 3; 4; 5; 6 Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibrational frequency using visualization software.); Because the vibrational frequencies are available, a thermodynamics; analysis is automatically performed at the end of the computation.; You can see this in the next section of the output file. The vibrational; frequencies are sufficient to obtain vibrational contributions to; enthalpy (H), entropy (S), and Gibbs free energy (G). Similarly, the; molecular geometry is used to obtain rotational constants, which are; then used to obtain rotational contributions to H, S, and G. Analysis of Intermolecular Interactions¶; Now let’s consider something a little more interesting. PSI4; contains code to analyze the nature of intermolecular interactions; between two molecules, via symmetry-adapted perturbation theory; (SAPT) [Jeziorski:1994:1887]. This kind of analysis gives a lot; of insight into the nature of intermolecular interactions, and PSI4; makes these computations easier than ever.; For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for e",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:12246,Availability,error,error,12246,"n; options:; 1; 2; 3; 4; 5; 6; 7set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'). Before, we have been setting keywords individually with commands like; set basis cc-pVDZ. Because we have a few more options now, it’s; convenient to place them together into the set; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT example, we have found that for basic-level SAPT; computations (i.e., SAPT0), a good error cancellation is found; [Hohenstein:2012:WIREs] with the jun-cc-pVDZ basis (this is the; usual aug-cc-pVDZ basis, but without diffuse functions on hydrogen and; without diffuse \(d\) functions on heavy atoms) [Papajak:2011:10]. So,; we’ll use that as our standard basis set. The SAPT code is designed to; use density fitting techniques, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:12619,Availability,error,errors,12619," together into the set; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT example, we have found that for basic-level SAPT; computations (i.e., SAPT0), a good error cancellation is found; [Hohenstein:2012:WIREs] with the jun-cc-pVDZ basis (this is the; usual aug-cc-pVDZ basis, but without diffuse functions on hydrogen and; without diffuse \(d\) functions on heavy atoms) [Papajak:2011:10]. So,; we’ll use that as our standard basis set. The SAPT code is designed to; use density fitting techniques, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). T",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:17963,Availability,avail,available,17963,"asis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, PSI4 knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the counterpoise correction on (here, let’s; consider CCSD(T)), and it needs to know what’s monomer A and what’s monomer; B. This last issue of specifying the monomers separately was already dealt; with in the previous SAPT example, where we saw that two dashes in the; molecule block can be used to separate monomers.; So, we’re going to do counterpoise-corrected CCSD(T) energies for Ne2 at; a series of different interatomic distances. And let’s print out a table; of the interatomic distances we’ve considered, and the CP-corrected CCSD(T); interaction energies (in kcal mol-1) at each geometry. Doing all this; in a single input is surprisingly easy in PSI4. Here’s the input; (available as tu6-cp-ne2).; #! Example potential energy surface scan and CP-correction for Ne2. molecule dimer {; Ne; --; Ne 1 R; }. Rvals=[2.5, 3.0, 4.0]. set basis aug-cc-pVDZ; set freeze_core True. # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work); ecp = {}. for R in Rvals:; dimer.R = R; ecp[R] = energy('ccsd(t)', bsse_type = 'cp'). psi4.print_out(""\n""); psi4.print_out(""CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies\n\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""); for R in Rvals:; e = ecp[R] * psi_hartree2kcalmol; psi4.print_out("" %3.1f %10.6f\n"" % (R, e)). First, you can see the molecule block has a couple dashes to; separate the monomers from each other. Also note we’ve used a Z-matrix to; specify the geometry, and we’ve used a variable (R) as the; interatomic distance. We have not specified the value of R in; the molecule block like we n",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:19621,Availability,avail,available,19621,"\n""); for R in Rvals:; e = ecp[R] * psi_hartree2kcalmol; psi4.print_out("" %3.1f %10.6f\n"" % (R, e)). First, you can see the molecule block has a couple dashes to; separate the monomers from each other. Also note we’ve used a Z-matrix to; specify the geometry, and we’ve used a variable (R) as the; interatomic distance. We have not specified the value of R in; the molecule block like we normally would. That’s because we’re; going to vary it during the scan across the potential energy surface.; Below the molecule block, you can see the Rvals array; specified. This is a Python array holding the interatomic distances we; want to consider. In Python, arrays are surrounded by square brackets, and; elements are separated by commas.; The next lines, set basis aug-cc-pVDZ and set freeze_core True,; are familiar from previous test cases. Next comes a slightly; unusual-looking line, ecp = {}. This is Python’s way of initializing; a “dictionary”. We’re going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the R values. This winds up being; slightly more elegant than a regular array in later parts of the input; file.; The next section, beginning with for R in Rvals:, loops over the; interatomic distances, R, in our array Rvals. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = energy('ccsd(t)', bsse_type='cp'), computes the counterpoise-corrected; CCSD(T) energy and places it in the ecp dictionary with R as; the index. Note we didn’t need to specify ghost atoms, and we didn’t need; to call the monomer and dimer computations sep",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:2553,Deployability,install,installation,2553,"er of sample input files, covering everything from single-point energies; using density-functional theory to response properties from coupled-cluster; theory, can be found in the psi4/samples directory. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, ",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:3103,Deployability,install,installation,3103,"mputation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so ",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:3140,Deployability,install,installation,3140,"mputation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so ",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:23835,Deployability,update,updated,23835,"f the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (Hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol. PSI4; provides several built-in physical constants and conversion factors, as; described in section Physical Constants.; Notice the loop over \(R\) to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; Our table is printed at the very end of the output file, and looks like; this; 1; 2; 3; 4; 5; 6; 7CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies. R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264. The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. table of contents. Psithon Tutorial: Using PSI4 as an Executable; Basic Input File Structure; Sample Input Files; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy with Psithon. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. A PSI4 Tutorial. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:688,Energy Efficiency,power,powerful,688,"﻿. Psithon Tutorial: Using PSI4 as an Executable. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. A PSI4 Tutorial. Psithon Tutorial: Using PSI4 as an Executable¶. Note; Psithon and PsiAPI refer to two modes of interacting with PSI4. In; Psithon mode, you write an input file in our domain-specific language; (not quite Python) where commands don’t have psi4. in front, then; submit it to the executable psi4 which processes the Psithon into; pure Python and runs it internally. In PsiAPI mode, you write a pure; Python script with import psi4 at the top and commands are behind; the psi4. namespace, then submit it to the python interpreter.; Both modes are equally powerful. This tutorial covers the Psithon; mode. Note; Some PSI4 functions and keywords have aliases. For example,; frequency(), frequencies(), and freq() all work to; obtain vibrational frequencies. Basic Input File Structure¶; PSI4 reads input from a text file, which can be prepared in any standard; text editor. The default input file name is input.dat and the; default output file name is output.dat. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. If you give an input name but no output name, then the output name will; be the same as the input name (replacing any “.in” or “.dat” extension by “.out”). Sample Input Files¶; Below, we will provide a few simple input files as examples. A large; number of sample input files, covering everything from single-point energies; using density-functional theory to response properties from coupled-cluster; theory, can be found in the psi4/samples directory. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matri",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:2188,Energy Efficiency,energy,energy,2188,"ying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. If you give an input name but no output name, then the output name will; be the same as the input name (replacing any “.in” or “.dat” extension by “.out”). Sample Input Files¶; Below, we will provide a few simple input files as examples. A large; number of sample input files, covering everything from single-point energies; using density-functional theory to response properties from coupled-cluster; theory, can be found in the psi4/samples directory. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling ",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:2272,Energy Efficiency,energy,energy,2272," line.; The syntax is:; >>> psi4 input-name output-name. If you give an input name but no output name, then the output name will; be the same as the input name (replacing any “.in” or “.dat” extension by “.out”). Sample Input Files¶; Below, we will provide a few simple input files as examples. A large; number of sample input files, covering everything from single-point energies; using density-functional theory to response properties from coupled-cluster; theory, can be found in the psi4/samples directory. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficien",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:2444,Energy Efficiency,energy,energy,2444,"lacing any “.in” or “.dat” extension by “.out”). Sample Input Files¶; Below, we will provide a few simple input files as examples. A large; number of sample input files, covering everything from single-point energies; using density-functional theory to response properties from coupled-cluster; theory, can be found in the psi4/samples directory. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:2760,Energy Efficiency,energy,energy,2760,"the psi4/samples directory. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:2872,Energy Efficiency,energy,energy,2872,"water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on ",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:3370,Energy Efficiency,charge,charge,3370," You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables (\(R\) and \(A\)), whose values are given; at",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:4179,Energy Efficiency,charge,charge,4179,"alling from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables (\(R\) and \(A\)), whose values are given; at the end of the Z-matrix specification.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted ",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:4639,Energy Efficiency,energy,energy,4639,"gram correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables (\(R\) and \(A\)), whose values are given; at the end of the Z-matrix specification.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perfor",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:4698,Energy Efficiency,energy,energy,4698,"avior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables (\(R\) and \(A\)), whose values are given; at the end of the Z-matrix specification.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These ca",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:4994,Energy Efficiency,energy,energy,4994,"spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables (\(R\) and \(A\)), whose values are given; at the end of the Z-matrix specification.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:5507,Energy Efficiency,energy,energy,5507,"ation.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force o",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:5549,Energy Efficiency,energy,energy,5549,"ation.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force o",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:5739,Energy Efficiency,energy,energy,5739,"ommand psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7---------------------------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:6133,Energy Efficiency,energy,energy,6133,"oice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:6429,Energy Efficiency,energy,energy,6429,"; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. The",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:8635,Energy Efficiency,energy,energy,8635,"up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm-1; is:; 1; 2; 3; 4; 5; 6 Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibratio",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:9929,Energy Efficiency,energy,energy,9929,"--------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm-1; is:; 1; 2; 3; 4; 5; 6 Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibrational frequency using visualization software.); Because the vibrational frequencies are available, a thermodynamics; analysis is automatically performed at the end of the computation.; You can see this in the next section of the output file. The vibrational; frequencies are sufficient to obtain vibrational contributions to; enthalpy (H), entropy (S), and Gibbs free energy (G). Similarly, the; molecular geometry is used to obtain rotational constants, which are; then used to obtain rotational contributions to H, S, and G. Analysis of Intermolecular Interactions¶; Now let’s consider something a little more interesting. PSI4; contains code to analyze the nature of intermolecular interactions; between two molecules, via symmetry-adapted perturbation theory; (SAPT) [Jeziorski:1994:1887]. This kind of analysis gives a lot; of insight into the nature of intermolecular interactions, and PSI4; makes these computations easier than ever.; For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20# Example SAPT computation for ethene*ethine (*i.e.*, ethylene",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:10296,Energy Efficiency,adapt,adapted,10296,"tant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibrational frequency using visualization software.); Because the vibrational frequencies are available, a thermodynamics; analysis is automatically performed at the end of the computation.; You can see this in the next section of the output file. The vibrational; frequencies are sufficient to obtain vibrational contributions to; enthalpy (H), entropy (S), and Gibbs free energy (G). Similarly, the; molecular geometry is used to obtain rotational constants, which are; then used to obtain rotational contributions to H, S, and G. Analysis of Intermolecular Interactions¶; Now let’s consider something a little more interesting. PSI4; contains code to analyze the nature of intermolecular interactions; between two molecules, via symmetry-adapted perturbation theory; (SAPT) [Jeziorski:1994:1887]. This kind of analysis gives a lot; of insight into the nature of intermolecular interactions, and PSI4; makes these computations easier than ever.; For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20# Example SAPT computation for ethene*ethine (*i.e.*, ethylene*acetylene),; # test case 16 from the S22 database. molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; unit",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:11445,Energy Efficiency,energy,energy,11445," PSI4; makes these computations easier than ever.; For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20# Example SAPT computation for ethene*ethine (*i.e.*, ethylene*acetylene),; # test case 16 from the S22 database. molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom. }. Here’s the second half of the input, where we specify the computation; options:; 1; 2; 3; 4; 5; 6; 7set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'). Before, we have been setting keywords individually with commands like; set basis cc-pVDZ. Because we have a few more options now, it’s; convenient to place them together into the set; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT example, we have found that for basic-level SAPT; computations (i.e., SAPT0), a good error cancellation is found; [Hohenstein:2012:WIREs] with the jun-cc-pVDZ basis (this is the; usual aug-cc-pVDZ basis, but without diffuse functions on hydrogen and; without diffuse \(d\) functions on heavy ",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:11961,Energy Efficiency,energy,energy,11961,"1 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom. }. Here’s the second half of the input, where we specify the computation; options:; 1; 2; 3; 4; 5; 6; 7set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'). Before, we have been setting keywords individually with commands like; set basis cc-pVDZ. Because we have a few more options now, it’s; convenient to place them together into the set; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT example, we have found that for basic-level SAPT; computations (i.e., SAPT0), a good error cancellation is found; [Hohenstein:2012:WIREs] with the jun-cc-pVDZ basis (this is the; usual aug-cc-pVDZ basis, but without diffuse functions on hydrogen and; without diffuse \(d\) functions on heavy atoms) [Papajak:2011:10]. So,; we’ll use that as our standard basis set. The SAPT code is designed to; use density fitting techniques, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. ",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:13604,Energy Efficiency,energy,energy,13604,"s, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:13779,Energy Efficiency,energy,energy,13779,"ations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; correlation). The next most attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:13879,Energy Efficiency,energy,energy,13879,"ations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; correlation). The next most attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:13918,Energy Efficiency,energy,energy,13918," the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; correlation). The next most attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2 in which; one excitation is placed on each monomer), contributing an attraction of; -1.21 kcal mol-1. It is not surprising that the electrostatic; contribution is domina",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:14149,Energy Efficiency,energy,energy,14149,"ple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; correlation). The next most attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2 in which; one excitation is placed on each monomer), contributing an attraction of; -1.21 kcal mol-1. It is not surprising that the electrostatic; contribution is dominant, because the geometry chosen for this example has the; acetylene perpendicular to the ethylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractive; because t",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:14241,Energy Efficiency,energy,energy,14241,"ple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; correlation). The next most attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2 in which; one excitation is placed on each monomer), contributing an attraction of; -1.21 kcal mol-1. It is not surprising that the electrostatic; contribution is dominant, because the geometry chosen for this example has the; acetylene perpendicular to the ethylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractive; because t",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:15256,Energy Efficiency,charge,charge,15256,"of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; correlation). The next most attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2 in which; one excitation is placed on each monomer), contributing an attraction of; -1.21 kcal mol-1. It is not surprising that the electrostatic; contribution is dominant, because the geometry chosen for this example has the; acetylene perpendicular to the ethylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractive; because the H atoms in acetylene bear a partial positive charge, while the; electron-rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon¶; Finally, let’s consider an example that shows how the Python driver; in PSI4 simplifies some routine tasks. PSI4 can interpret; valid Python code in addition to the computational chemistry directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the examp",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:15338,Energy Efficiency,charge,charge,15338,"of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; correlation). The next most attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2 in which; one excitation is placed on each monomer), contributing an attraction of; -1.21 kcal mol-1. It is not surprising that the electrostatic; contribution is dominant, because the geometry chosen for this example has the; acetylene perpendicular to the ethylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractive; because the H atoms in acetylene bear a partial positive charge, while the; electron-rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon¶; Finally, let’s consider an example that shows how the Python driver; in PSI4 simplifies some routine tasks. PSI4 can interpret; valid Python code in addition to the computational chemistry directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the examp",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:16247,Energy Efficiency,energy,energy,16247,"rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon¶; Finally, let’s consider an example that shows how the Python driver; in PSI4 simplifies some routine tasks. PSI4 can interpret; valid Python code in addition to the computational chemistry directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; Let’s also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, PSI4 knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the c",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:16303,Energy Efficiency,energy,energy,16303,"rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon¶; Finally, let’s consider an example that shows how the Python driver; in PSI4 simplifies some routine tasks. PSI4 can interpret; valid Python code in addition to the computational chemistry directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; Let’s also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, PSI4 knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the c",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:16868,Energy Efficiency,energy,energy,16868,"y directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; Let’s also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, PSI4 knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the counterpoise correction on (here, let’s; consider CCSD(T)), and it needs to know what’s monomer A and what’s monomer; B. This last issue of specifying the monomers separately was already dealt; with in the previous SAPT example, where we saw that two dashes in the; molecule block can be used to separate monomers.; So, we’re going to do counterpoise-corrected CCSD(T) energies for Ne2 at; a series of different interatomic distances. And let’s print out a table; of the interatomic distances we’ve considered, and the CP-corrected CCSD(T); interaction energies (in kcal mol-1) at each geometry. Doing all th",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:18011,Energy Efficiency,energy,energy,18011," separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, PSI4 knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the counterpoise correction on (here, let’s; consider CCSD(T)), and it needs to know what’s monomer A and what’s monomer; B. This last issue of specifying the monomers separately was already dealt; with in the previous SAPT example, where we saw that two dashes in the; molecule block can be used to separate monomers.; So, we’re going to do counterpoise-corrected CCSD(T) energies for Ne2 at; a series of different interatomic distances. And let’s print out a table; of the interatomic distances we’ve considered, and the CP-corrected CCSD(T); interaction energies (in kcal mol-1) at each geometry. Doing all this; in a single input is surprisingly easy in PSI4. Here’s the input; (available as tu6-cp-ne2).; #! Example potential energy surface scan and CP-correction for Ne2. molecule dimer {; Ne; --; Ne 1 R; }. Rvals=[2.5, 3.0, 4.0]. set basis aug-cc-pVDZ; set freeze_core True. # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work); ecp = {}. for R in Rvals:; dimer.R = R; ecp[R] = energy('ccsd(t)', bsse_type = 'cp'). psi4.print_out(""\n""); psi4.print_out(""CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies\n\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""); for R in Rvals:; e = ecp[R] * psi_hartree2kcalmol; psi4.print_out("" %3.1f %10.6f\n"" % (R, e)). First, you can see the molecule block has a couple dashes to; separate the monomers from each other. Also note we’ve used a Z-matrix to; specify the geometry, and we’ve used a variable (R) as the; interatomic distance. We have not specified the value of R in; the molecule block like we normally would. That’s because we’re; going to vary it dur",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:18324,Energy Efficiency,energy,energy,18324,"CCSD(T)), and it needs to know what’s monomer A and what’s monomer; B. This last issue of specifying the monomers separately was already dealt; with in the previous SAPT example, where we saw that two dashes in the; molecule block can be used to separate monomers.; So, we’re going to do counterpoise-corrected CCSD(T) energies for Ne2 at; a series of different interatomic distances. And let’s print out a table; of the interatomic distances we’ve considered, and the CP-corrected CCSD(T); interaction energies (in kcal mol-1) at each geometry. Doing all this; in a single input is surprisingly easy in PSI4. Here’s the input; (available as tu6-cp-ne2).; #! Example potential energy surface scan and CP-correction for Ne2. molecule dimer {; Ne; --; Ne 1 R; }. Rvals=[2.5, 3.0, 4.0]. set basis aug-cc-pVDZ; set freeze_core True. # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work); ecp = {}. for R in Rvals:; dimer.R = R; ecp[R] = energy('ccsd(t)', bsse_type = 'cp'). psi4.print_out(""\n""); psi4.print_out(""CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies\n\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""); for R in Rvals:; e = ecp[R] * psi_hartree2kcalmol; psi4.print_out("" %3.1f %10.6f\n"" % (R, e)). First, you can see the molecule block has a couple dashes to; separate the monomers from each other. Also note we’ve used a Z-matrix to; specify the geometry, and we’ve used a variable (R) as the; interatomic distance. We have not specified the value of R in; the molecule block like we normally would. That’s because we’re; going to vary it during the scan across the potential energy surface.; Below the molecule block, you can see the Rvals array; specified. This is a Python array holding the interatomic distances we; want to consider. In Python, arrays are surrounded by square brackets, and; elements are separated by commas.; The next lines, set ba",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:19057,Energy Efficiency,energy,energy,19057,"scan and CP-correction for Ne2. molecule dimer {; Ne; --; Ne 1 R; }. Rvals=[2.5, 3.0, 4.0]. set basis aug-cc-pVDZ; set freeze_core True. # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work); ecp = {}. for R in Rvals:; dimer.R = R; ecp[R] = energy('ccsd(t)', bsse_type = 'cp'). psi4.print_out(""\n""); psi4.print_out(""CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies\n\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""); for R in Rvals:; e = ecp[R] * psi_hartree2kcalmol; psi4.print_out("" %3.1f %10.6f\n"" % (R, e)). First, you can see the molecule block has a couple dashes to; separate the monomers from each other. Also note we’ve used a Z-matrix to; specify the geometry, and we’ve used a variable (R) as the; interatomic distance. We have not specified the value of R in; the molecule block like we normally would. That’s because we’re; going to vary it during the scan across the potential energy surface.; Below the molecule block, you can see the Rvals array; specified. This is a Python array holding the interatomic distances we; want to consider. In Python, arrays are surrounded by square brackets, and; elements are separated by commas.; The next lines, set basis aug-cc-pVDZ and set freeze_core True,; are familiar from previous test cases. Next comes a slightly; unusual-looking line, ecp = {}. This is Python’s way of initializing; a “dictionary”. We’re going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the R values. This winds up being; slightly more elegant than a regular array in later parts of the input; file.; The next section, beginning with for R in Rvals:, loops over the; interatomic distances, R, i",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:20323,Energy Efficiency,energy,energy,20323,"amiliar from previous test cases. Next comes a slightly; unusual-looking line, ecp = {}. This is Python’s way of initializing; a “dictionary”. We’re going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the R values. This winds up being; slightly more elegant than a regular array in later parts of the input; file.; The next section, beginning with for R in Rvals:, loops over the; interatomic distances, R, in our array Rvals. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = energy('ccsd(t)', bsse_type='cp'), computes the counterpoise-corrected; CCSD(T) energy and places it in the ecp dictionary with R as; the index. Note we didn’t need to specify ghost atoms, and we didn’t need; to call the monomer and dimer computations separately. The built-in; Psithon function nbody_gufunc() does it all for us, automatically.; Near the very end of the output file, the counterpoise correction Python; function will print a nice summary of the results of the counterpoise; computation (the energies of the dimer, of monomer 1 with the ghost functions; of monomer 2, of monomer 2 with the ghost functions of monomer 1, and the; overall counterpoise-corrected interaction energy):; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17N-Body: Computing complex (1/2) with fragments (2,) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (2,), basis = (1, 2): -128.70932405488924); ...; N-Body: Computing complex (2/2) with fragments (1,) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments =",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:20403,Energy Efficiency,energy,energy,20403,"amiliar from previous test cases. Next comes a slightly; unusual-looking line, ecp = {}. This is Python’s way of initializing; a “dictionary”. We’re going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the R values. This winds up being; slightly more elegant than a regular array in later parts of the input; file.; The next section, beginning with for R in Rvals:, loops over the; interatomic distances, R, in our array Rvals. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = energy('ccsd(t)', bsse_type='cp'), computes the counterpoise-corrected; CCSD(T) energy and places it in the ecp dictionary with R as; the index. Note we didn’t need to specify ghost atoms, and we didn’t need; to call the monomer and dimer computations separately. The built-in; Psithon function nbody_gufunc() does it all for us, automatically.; Near the very end of the output file, the counterpoise correction Python; function will print a nice summary of the results of the counterpoise; computation (the energies of the dimer, of monomer 1 with the ghost functions; of monomer 2, of monomer 2 with the ghost functions of monomer 1, and the; overall counterpoise-corrected interaction energy):; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17N-Body: Computing complex (1/2) with fragments (2,) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (2,), basis = (1, 2): -128.70932405488924); ...; N-Body: Computing complex (2/2) with fragments (1,) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments =",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:21011,Energy Efficiency,energy,energy,21011,"the input; file.; The next section, beginning with for R in Rvals:, loops over the; interatomic distances, R, in our array Rvals. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = energy('ccsd(t)', bsse_type='cp'), computes the counterpoise-corrected; CCSD(T) energy and places it in the ecp dictionary with R as; the index. Note we didn’t need to specify ghost atoms, and we didn’t need; to call the monomer and dimer computations separately. The built-in; Psithon function nbody_gufunc() does it all for us, automatically.; Near the very end of the output file, the counterpoise correction Python; function will print a nice summary of the results of the counterpoise; computation (the energies of the dimer, of monomer 1 with the ghost functions; of monomer 2, of monomer 2 with the ghost functions of monomer 1, and the; overall counterpoise-corrected interaction energy):; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17N-Body: Computing complex (1/2) with fragments (2,) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (2,), basis = (1, 2): -128.70932405488924); ...; N-Body: Computing complex (2/2) with fragments (1,) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (1,), basis = (1, 2): -128.70932405488935); ...; N-Body: Computing complex (1/1) with fragments (1, 2) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (1, 2), basis = (1, 2): -257.41867403127321); ...; ==> N-Body: Counterpoise Corrected (CP) energies <==. n-Body Total Energy [Eh] I.E. [kcal/mol] Delta [kcal/mol]; 1 -257.418648109779 0.000000000000 0.000000000000; 2 -257.418674031273 -0.016265984132 -0.016265984132. And that’s it! The only remaining part of the example input is a little table; of the",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:6268,Integrability,message,message,6268,"hell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; -------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:15797,Integrability,rout,routine,15797,"st attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2 in which; one excitation is placed on each monomer), contributing an attraction of; -1.21 kcal mol-1. It is not surprising that the electrostatic; contribution is dominant, because the geometry chosen for this example has the; acetylene perpendicular to the ethylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractive; because the H atoms in acetylene bear a partial positive charge, while the; electron-rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon¶; Finally, let’s consider an example that shows how the Python driver; in PSI4 simplifies some routine tasks. PSI4 can interpret; valid Python code in addition to the computational chemistry directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; L",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:17186,Integrability,rout,routine,17186," tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; Let’s also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, PSI4 knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the counterpoise correction on (here, let’s; consider CCSD(T)), and it needs to know what’s monomer A and what’s monomer; B. This last issue of specifying the monomers separately was already dealt; with in the previous SAPT example, where we saw that two dashes in the; molecule block can be used to separate monomers.; So, we’re going to do counterpoise-corrected CCSD(T) energies for Ne2 at; a series of different interatomic distances. And let’s print out a table; of the interatomic distances we’ve considered, and the CP-corrected CCSD(T); interaction energies (in kcal mol-1) at each geometry. Doing all this; in a single input is surprisingly easy in PSI4. Here’s the input; (available as tu6-cp-ne2).; #! Example potential energy surface scan and CP-correction for Ne2. molecule dimer {; Ne; --; Ne 1 R; }. Rvals",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:4397,Modifiability,variab,variables,4397,"al), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables (\(R\) and \(A\)), whose values are given; at the end of the Z-matrix specification.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geom",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:10296,Modifiability,adapt,adapted,10296,"tant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibrational frequency using visualization software.); Because the vibrational frequencies are available, a thermodynamics; analysis is automatically performed at the end of the computation.; You can see this in the next section of the output file. The vibrational; frequencies are sufficient to obtain vibrational contributions to; enthalpy (H), entropy (S), and Gibbs free energy (G). Similarly, the; molecular geometry is used to obtain rotational constants, which are; then used to obtain rotational contributions to H, S, and G. Analysis of Intermolecular Interactions¶; Now let’s consider something a little more interesting. PSI4; contains code to analyze the nature of intermolecular interactions; between two molecules, via symmetry-adapted perturbation theory; (SAPT) [Jeziorski:1994:1887]. This kind of analysis gives a lot; of insight into the nature of intermolecular interactions, and PSI4; makes these computations easier than ever.; For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20# Example SAPT computation for ethene*ethine (*i.e.*, ethylene*acetylene),; # test case 16 from the S22 database. molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; unit",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:18854,Modifiability,variab,variable,18854,"energies (in kcal mol-1) at each geometry. Doing all this; in a single input is surprisingly easy in PSI4. Here’s the input; (available as tu6-cp-ne2).; #! Example potential energy surface scan and CP-correction for Ne2. molecule dimer {; Ne; --; Ne 1 R; }. Rvals=[2.5, 3.0, 4.0]. set basis aug-cc-pVDZ; set freeze_core True. # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work); ecp = {}. for R in Rvals:; dimer.R = R; ecp[R] = energy('ccsd(t)', bsse_type = 'cp'). psi4.print_out(""\n""); psi4.print_out(""CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies\n\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""); for R in Rvals:; e = ecp[R] * psi_hartree2kcalmol; psi4.print_out("" %3.1f %10.6f\n"" % (R, e)). First, you can see the molecule block has a couple dashes to; separate the monomers from each other. Also note we’ve used a Z-matrix to; specify the geometry, and we’ve used a variable (R) as the; interatomic distance. We have not specified the value of R in; the molecule block like we normally would. That’s because we’re; going to vary it during the scan across the potential energy surface.; Below the molecule block, you can see the Rvals array; specified. This is a Python array holding the interatomic distances we; want to consider. In Python, arrays are surrounded by square brackets, and; elements are separated by commas.; The next lines, set basis aug-cc-pVDZ and set freeze_core True,; are familiar from previous test cases. Next comes a slightly; unusual-looking line, ecp = {}. This is Python’s way of initializing; a “dictionary”. We’re going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the R values. This",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:20210,Modifiability,variab,variable,20210," surrounded by square brackets, and; elements are separated by commas.; The next lines, set basis aug-cc-pVDZ and set freeze_core True,; are familiar from previous test cases. Next comes a slightly; unusual-looking line, ecp = {}. This is Python’s way of initializing; a “dictionary”. We’re going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the R values. This winds up being; slightly more elegant than a regular array in later parts of the input; file.; The next section, beginning with for R in Rvals:, loops over the; interatomic distances, R, in our array Rvals. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = energy('ccsd(t)', bsse_type='cp'), computes the counterpoise-corrected; CCSD(T) energy and places it in the ecp dictionary with R as; the index. Note we didn’t need to specify ghost atoms, and we didn’t need; to call the monomer and dimer computations separately. The built-in; Psithon function nbody_gufunc() does it all for us, automatically.; Near the very end of the output file, the counterpoise correction Python; function will print a nice summary of the results of the counterpoise; computation (the energies of the dimer, of monomer 1 with the ghost functions; of monomer 2, of monomer 2 with the ghost functions of monomer 1, and the; overall counterpoise-corrected interaction energy):; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17N-Body: Computing complex (1/2) with fragments (2,) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (2,), basis = (1, 2): -128.70932405",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:5621,Performance,perform,perform,5621,"uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; ",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:5647,Performance,optimiz,optimizations,5647,"uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; ",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:5753,Performance,optimiz,optimize,5753,"ommand psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7---------------------------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:5816,Performance,optimiz,optimizing,5816,"at and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; ------------------------------------",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:6015,Performance,optimiz,optimize,6015,"nal Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:6044,Performance,perform,perform,6044,"ed a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.001787",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:6149,Performance,optimiz,optimizer,6149,"oice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:6361,Performance,optimiz,optimizer,6361,"; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. The",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:7589,Performance,perform,perform,7589,"----------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respec",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:7671,Performance,optimiz,optimized,7671,"----------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respec",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:7743,Performance,optimiz,optimization,7743,"----------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respec",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:7958,Performance,optimiz,optimization,7958,".01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:7982,Performance,optimiz,optimization,7982,".01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:8031,Performance,optimiz,optimized,8031,".01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:8114,Performance,optimiz,optimization,8114,"0942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in t",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:8364,Performance,optimiz,optimize,8364,"rational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm-1; is:; 1; 2; 3; 4; 5; 6 Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where t",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:8475,Performance,optimiz,optimization,8475,"up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm-1; is:; 1; 2; 3; 4; 5; 6 Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibratio",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:9704,Performance,perform,performed,9704,"ments. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm-1; is:; 1; 2; 3; 4; 5; 6 Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibrational frequency using visualization software.); Because the vibrational frequencies are available, a thermodynamics; analysis is automatically performed at the end of the computation.; You can see this in the next section of the output file. The vibrational; frequencies are sufficient to obtain vibrational contributions to; enthalpy (H), entropy (S), and Gibbs free energy (G). Similarly, the; molecular geometry is used to obtain rotational constants, which are; then used to obtain rotational contributions to H, S, and G. Analysis of Intermolecular Interactions¶; Now let’s consider something a little more interesting. PSI4; contains code to analyze the nature of intermolecular interactions; between two molecules, via symmetry-adapted perturbation theory; (SAPT) [Jeziorski:1994:1887]. This kind of analysis gives a lot; of insight into the nature of intermolecular interactions, and PSI4; makes these computations easier than ever.; For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for e",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:12842,Performance,perform,performed,12842,"ommon PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT example, we have found that for basic-level SAPT; computations (i.e., SAPT0), a good error cancellation is found; [Hohenstein:2012:WIREs] with the jun-cc-pVDZ basis (this is the; usual aug-cc-pVDZ basis, but without diffuse functions on hydrogen and; without diffuse \(d\) functions on heavy atoms) [Papajak:2011:10]. So,; we’ll use that as our standard basis set. The SAPT code is designed to; use density fitting techniques, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:13739,Performance,perform,perform,13739,"; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; ",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:17197,Performance,perform,perform,17197," tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; Let’s also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, PSI4 knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the counterpoise correction on (here, let’s; consider CCSD(T)), and it needs to know what’s monomer A and what’s monomer; B. This last issue of specifying the monomers separately was already dealt; with in the previous SAPT example, where we saw that two dashes in the; molecule block can be used to separate monomers.; So, we’re going to do counterpoise-corrected CCSD(T) energies for Ne2 at; a series of different interatomic distances. And let’s print out a table; of the interatomic distances we’ve considered, and the CP-corrected CCSD(T); interaction energies (in kcal mol-1) at each geometry. Doing all this; in a single input is surprisingly easy in PSI4. Here’s the input; (available as tu6-cp-ne2).; #! Example potential energy surface scan and CP-correction for Ne2. molecule dimer {; Ne; --; Ne 1 R; }. Rvals",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:22389,Security,access,accessed,22389,"nts (1, 2).; ...; N-Body: Complex Energy (fragments = (1,), basis = (1, 2): -128.70932405488935); ...; N-Body: Computing complex (1/1) with fragments (1, 2) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (1, 2), basis = (1, 2): -257.41867403127321); ...; ==> N-Body: Counterpoise Corrected (CP) energies <==. n-Body Total Energy [Eh] I.E. [kcal/mol] Delta [kcal/mol]; 1 -257.418648109779 0.000000000000 0.000000000000; 2 -257.418674031273 -0.016265984132 -0.016265984132. And that’s it! The only remaining part of the example input is a little table; of the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (Hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol. PSI4; provides several built-in physical constants and conversion factors, as; described in section Physical Constants.; Notice the loop over \(R\) to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; Our table is printed at the very end of the output file, and looks like; this; 1; 2; 3; 4; 5; 6; 7CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies. R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264. The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easil",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:8211,Testability,test,test,8211,"----------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, it’s important to obtain the vibrational frequencies; at the OPTIMIZED GEOMETRY. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the bottom of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there’s a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over.; So, it’s easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; tu4-h2o-freq):; #! Optimization followed by frequencies H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); scf_e, scf_wfn = frequencies('scf', return_wfn=True, dertype=1). The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm-1; may exist):; 1; 2; 3; 4; 5; 6; 7 Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm-1; is:; 1; 2; 3; 4;",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:10887,Testability,test,test,10887,"alpy (H), entropy (S), and Gibbs free energy (G). Similarly, the; molecular geometry is used to obtain rotational constants, which are; then used to obtain rotational contributions to H, S, and G. Analysis of Intermolecular Interactions¶; Now let’s consider something a little more interesting. PSI4; contains code to analyze the nature of intermolecular interactions; between two molecules, via symmetry-adapted perturbation theory; (SAPT) [Jeziorski:1994:1887]. This kind of analysis gives a lot; of insight into the nature of intermolecular interactions, and PSI4; makes these computations easier than ever.; For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20# Example SAPT computation for ethene*ethine (*i.e.*, ethylene*acetylene),; # test case 16 from the S22 database. molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom. }. Here’s the second half of the input, where we specify the computation; options:; 1; 2; 3; 4; 5; 6; 7set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'). Before, we have been setting keywords individually with commands like; set basis cc-pVDZ. Because we have a few more options now, it’s; convenient to place them together into the set; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible;",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:19404,Testability,test,test,19404,"si4.print_out(""\n""); psi4.print_out(""CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies\n\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""); for R in Rvals:; e = ecp[R] * psi_hartree2kcalmol; psi4.print_out("" %3.1f %10.6f\n"" % (R, e)). First, you can see the molecule block has a couple dashes to; separate the monomers from each other. Also note we’ve used a Z-matrix to; specify the geometry, and we’ve used a variable (R) as the; interatomic distance. We have not specified the value of R in; the molecule block like we normally would. That’s because we’re; going to vary it during the scan across the potential energy surface.; Below the molecule block, you can see the Rvals array; specified. This is a Python array holding the interatomic distances we; want to consider. In Python, arrays are surrounded by square brackets, and; elements are separated by commas.; The next lines, set basis aug-cc-pVDZ and set freeze_core True,; are familiar from previous test cases. Next comes a slightly; unusual-looking line, ecp = {}. This is Python’s way of initializing; a “dictionary”. We’re going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the R values. This winds up being; slightly more elegant than a regular array in later parts of the input; file.; The next section, beginning with for R in Rvals:, loops over the; interatomic distances, R, in our array Rvals. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = energy('ccsd(t)', bsse_type='cp'), compu",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:1513,Usability,simpl,simple,1513,"PsiAPI mode, you write a pure; Python script with import psi4 at the top and commands are behind; the psi4. namespace, then submit it to the python interpreter.; Both modes are equally powerful. This tutorial covers the Psithon; mode. Note; Some PSI4 functions and keywords have aliases. For example,; frequency(), frequencies(), and freq() all work to; obtain vibrational frequencies. Basic Input File Structure¶; PSI4 reads input from a text file, which can be prepared in any standard; text editor. The default input file name is input.dat and the; default output file name is output.dat. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. If you give an input name but no output name, then the output name will; be the same as the input name (replacing any “.in” or “.dat” extension by “.out”). Sample Input Files¶; Below, we will provide a few simple input files as examples. A large; number of sample input files, covering everything from single-point energies; using density-functional theory to response properties from coupled-cluster; theory, can be found in the psi4/samples directory. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). Note; The memory and basis set specifications are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your ",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:3225,Usability,simpl,simple,3225,"are placed before the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the; User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; 1; 2; 3Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about \(1.0 \times 10^{-6}\), so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing from Source).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity \(2S+1 = 3\)).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. No",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:5487,Usability,simpl,simple,5487,"ation.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force o",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:13205,Usability,simpl,simple,13205,"tein:2012:WIREs] with the jun-cc-pVDZ basis (this is the; usual aug-cc-pVDZ basis, but without diffuse functions on hydrogen and; without diffuse \(d\) functions on heavy atoms) [Papajak:2011:10]. So,; we’ll use that as our standard basis set. The SAPT code is designed to; use density fitting techniques, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined a",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:13591,Usability,simpl,simple,13591,"s, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887], and this is discussed in more detail; in the SAPT section later in this manual. For now, we’ll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 kcal mol-1; (Elst10,r where the 1 indicates the first-order; perturbation theory result with respect to",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:15781,Usability,simpl,simplifies,15781,"st attractive contribution is the Disp20; term (2nd order intermolecular dispersion, which looks like an MP2 in which; one excitation is placed on each monomer), contributing an attraction of; -1.21 kcal mol-1. It is not surprising that the electrostatic; contribution is dominant, because the geometry chosen for this example has the; acetylene perpendicular to the ethylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractive; because the H atoms in acetylene bear a partial positive charge, while the; electron-rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon¶; Finally, let’s consider an example that shows how the Python driver; in PSI4 simplifies some routine tasks. PSI4 can interpret; valid Python code in addition to the computational chemistry directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; L",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:16091,Usability,simpl,simplify,16091,"thylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractive; because the H atoms in acetylene bear a partial positive charge, while the; electron-rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon¶; Finally, let’s consider an example that shows how the Python driver; in PSI4 simplifies some routine tasks. PSI4 can interpret; valid Python code in addition to the computational chemistry directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; Let’s also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a f",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:16372,Usability,simpl,simple,16372," perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon¶; Finally, let’s consider an example that shows how the Python driver; in PSI4 simplifies some routine tasks. PSI4 can interpret; valid Python code in addition to the computational chemistry directives; we’ve seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with PSI4; in the psi4/samples directory.; Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; Rvals=[2.5, 3.0, 4.0].; Let’s also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, PSI4 knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the counterpoise correction on (here, let’s; consider CCSD(T)), and it needs to know what’s monomer A and what’s monomer; B. This last issue o",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:22806,Usability,simpl,simple,22806," And that’s it! The only remaining part of the example input is a little table; of the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (Hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol. PSI4; provides several built-in physical constants and conversion factors, as; described in section Physical Constants.; Notice the loop over \(R\) to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; Our table is printed at the very end of the output file, and looks like; this; 1; 2; 3; 4; 5; 6; 7CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies. R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264. The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. table of contents. Psithon Tutorial: Using PSI4 as an Executable; Basic Input File Structure; Sample Input Files; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy with Psithon. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. A PSI4 Tutorial. © Copyright 2019, The Psi4 Project.; ",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.3.2/tutorial.html:23277,Usability,clear,clear,23277,"f the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (Hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol. PSI4; provides several built-in physical constants and conversion factors, as; described in section Physical Constants.; Notice the loop over \(R\) to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; Our table is printed at the very end of the output file, and looks like; this; 1; 2; 3; 4; 5; 6; 7CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies. R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264. The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. table of contents. Psithon Tutorial: Using PSI4 as an Executable; Basic Input File Structure; Sample Input Files; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy with Psithon. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. A PSI4 Tutorial. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/tutorial.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:3176,Availability,avail,available,3176,"re constructed several times.; The structure and order of the blocks in the equation above; depend on the ADC level employed. With this also the computational cost changes.; The key computational step, namely the formation of the matrix-vector products; scales as \({\cal O}(N^5)\) for ADC(2) and \({\cal O}(N^6)\); for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]; and the adcc theory documentation. Available ADC methods¶; Section author: Michael F. Herbst; Several ADC methods are available in PSI4 for the computation of excited states,; see ADC capabilities of Psi4.; The methods are implemented in two distinct codes,; one is part of PSI4 itself and will be referred to as the built-in implementation,; the other is available via an interface to the adcc python module.; The two backends follow different approaches to compute ADC excited states; and as a result details and supported keywords differ.; After a more general introduction, specific aspects of the two implementations will be highlighted; in section Interface to adcc and Built-in ADC(2) code. ADC capabilities of Psi4¶. Method; Backend; References; Exc. Energies; Props; Supported values for kind keyword. ADC(1); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. built-in; RHF; yes; —; singlet. ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(3); adcc; RHF, UHF; yes; yes | any, singlet, triplet, spin_flip. CVS-ADC(1); adcc; RHF, UHF;",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:3414,Availability,avail,available,3414,"t changes.; The key computational step, namely the formation of the matrix-vector products; scales as \({\cal O}(N^5)\) for ADC(2) and \({\cal O}(N^6)\); for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]; and the adcc theory documentation. Available ADC methods¶; Section author: Michael F. Herbst; Several ADC methods are available in PSI4 for the computation of excited states,; see ADC capabilities of Psi4.; The methods are implemented in two distinct codes,; one is part of PSI4 itself and will be referred to as the built-in implementation,; the other is available via an interface to the adcc python module.; The two backends follow different approaches to compute ADC excited states; and as a result details and supported keywords differ.; After a more general introduction, specific aspects of the two implementations will be highlighted; in section Interface to adcc and Built-in ADC(2) code. ADC capabilities of Psi4¶. Method; Backend; References; Exc. Energies; Props; Supported values for kind keyword. ADC(1); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. built-in; RHF; yes; —; singlet. ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(3); adcc; RHF, UHF; yes; yes | any, singlet, triplet, spin_flip. CVS-ADC(1); adcc; RHF, UHF; yes; yes | any, singlet, triplet. CVS-ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:4803,Availability,avail,available,4803," References; Exc. Energies; Props; Supported values for kind keyword. ADC(1); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. built-in; RHF; yes; —; singlet. ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(3); adcc; RHF, UHF; yes; yes | any, singlet, triplet, spin_flip. CVS-ADC(1); adcc; RHF, UHF; yes; yes | any, singlet, triplet. CVS-ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(3); adcc; RHF, UHF; yes; yes; any, singlet, triplet. The leftmost column of table ADC capabilities of Psi4 provides the supported ADC methods.; If only excitation energies are desired, one can simply pass one; of the listed method strings to the function energy().; For example, energy('adc(2)-x') will compute; excitation energies at ADC(2)-x level.; Properties such as oscillator strengths, transition or state dipole moments; are available by calling the function properties(); with appropriate arguments.; Most commonly users will want to compute at least oscillator strengths; along with the excitation energies,; resulting in a call like properties('adc(2)', properties=[""oscillator_strength""]). Running ADC calculations¶; Section author: Michael F. Herbst; Running an ADC calculation with PSI4 requires; the call to properties() as discussed above; as well as one or more mandatory keyword arguments.; The most important keyword argument is ROOTS_PER_IRREP,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a single; element only. For example one can run an ADC(2) calculation for 10; (singlet) excited states using:; set roots_per_irrep [10]; properties('adc(2)', properties=[""oscillator_strength""]). where the molecule section was drop",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:6366,Availability,avail,available,6366,"cible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a single; element only. For example one can run an ADC(2) calculation for 10; (singlet) excited states using:; set roots_per_irrep [10]; properties('adc(2)', properties=[""oscillator_strength""]). where the molecule section was dropped for brevity.; Selecting the excitation manifold.; To select between the possible excitation manifolds,; use the KIND keyword. For restricted references; by default only singlet excited states are computed,; corresponding to the keyword value 'singlet'.; To compute triplet states, select 'triplet'.; To compute both without making a spin distinction, select 'any'.; The latter is default for unrestricted references.; The special KIND value 'spin_flip' selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for CVS-ADC(n) methods,; see table ADC capabilities of Psi4.; Using the core-valence separation.; For tackling core-valence excitations using the CVS-ADC(n); methods, the keyword argument NUM_CORE_ORBITALS; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of 2 indicates, for example,; that the two lowest-energy \(\alpha\) and the two; lowest-energy \(\beta\) orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space.; Example: Consider furane, \(C_4H_4O\). In order to tackle; the oxygen 1s edge, i.e simulate a O 1s XAS spectrum, one may; just set NUM_CORE_ORBITALS to 1. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the ",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:8031,Availability,avail,available,8031,"e value should be specified; such that the targeted core orbital is just inside the core space.; Example: Consider furane, \(C_4H_4O\). In order to tackle; the oxygen 1s edge, i.e simulate a O 1s XAS spectrum, one may; just set NUM_CORE_ORBITALS to 1. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the NUM_CORE_ORBITALS value needs; to be set to 5, such that both the O 1s and all four C 1s orbitals; are part of the core space.; Other keywords and examples.; Apart from the mentioned keywords, the following are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. The full list is provided in appendix ADC; and many more sample input files can be found in the adc and adcc; subfolders of psi4/samples.; Note, that not all keywords are supported by all backends.; Switching between ADC backends.; Psi4 currently defaults to the built-in implementation for all ADC(2) energy calculations.; You can explicitly set the QC_MODULE option to 'adcc'; enforce using adcc also for this case. Interface to adcc¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; For most implemented ADC methods PSI4 relies; on an interface to the adcc python package.; The approach of adcc is to directly diagonalise the; ADC matrix \(\mathbf{A}\) in an iterative diagonalisation; procedure, usually a Jacobi-preconditioned Davidson. Expensive parts; of the ADC matrix-v",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:8178,Availability,avail,available,8178," tackle; the oxygen 1s edge, i.e simulate a O 1s XAS spectrum, one may; just set NUM_CORE_ORBITALS to 1. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the NUM_CORE_ORBITALS value needs; to be set to 5, such that both the O 1s and all four C 1s orbitals; are part of the core space.; Other keywords and examples.; Apart from the mentioned keywords, the following are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. The full list is provided in appendix ADC; and many more sample input files can be found in the adc and adcc; subfolders of psi4/samples.; Note, that not all keywords are supported by all backends.; Switching between ADC backends.; Psi4 currently defaults to the built-in implementation for all ADC(2) energy calculations.; You can explicitly set the QC_MODULE option to 'adcc'; enforce using adcc also for this case. Interface to adcc¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; For most implemented ADC methods PSI4 relies; on an interface to the adcc python package.; The approach of adcc is to directly diagonalise the; ADC matrix \(\mathbf{A}\) in an iterative diagonalisation; procedure, usually a Jacobi-preconditioned Davidson. Expensive parts; of the ADC matrix-vector product are precomputed and stored; in memory. This approach is general in the sense; that it can be applied to a large range of ADC methods ",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:9244,Availability,avail,available,9244," more sample input files can be found in the adc and adcc; subfolders of psi4/samples.; Note, that not all keywords are supported by all backends.; Switching between ADC backends.; Psi4 currently defaults to the built-in implementation for all ADC(2) energy calculations.; You can explicitly set the QC_MODULE option to 'adcc'; enforce using adcc also for this case. Interface to adcc¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; For most implemented ADC methods PSI4 relies; on an interface to the adcc python package.; The approach of adcc is to directly diagonalise the; ADC matrix \(\mathbf{A}\) in an iterative diagonalisation; procedure, usually a Jacobi-preconditioned Davidson. Expensive parts; of the ADC matrix-vector product are precomputed and stored; in memory. This approach is general in the sense; that it can be applied to a large range of ADC methods and variants.; So far levels up to ADC(3) and CVS-ADC(3) are available; and additional approximations such as; FREEZE_CORE and NUM_FROZEN_UOCC; are supported with all ADC methods using the adcc backend.; Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; ",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:10447,Availability,avail,available,10447,"tions,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:14229,Availability,toler,tolerably,14229,"790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states.; Partial Renormalization Scheme; The built-in ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consis",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:14679,Deployability,configurat,configurations,14679," the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states.; Partial Renormalization Scheme; The built-in ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012].; Theory of the built-in ADC(2) implementation; For the built-in ADC(2) implementation; some very essential points shall be emphasized. In ADC(2) specifically; one may write the response equation as. \[\begin{split}\begin{pmatrix}; \mathbf{A_{SS}^{(2)}} & \mathbf{A_{SD}^{(1)}}\\; \mathbf{A_{DS}^{(1)}} & \mathbf{A_{DD}^{(0)}}",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:17986,Deployability,update,updated,17986,"ger}(\omega-; \mathbf{A_{DD}^{(0)}})^{-1}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}=; \omega\mathbf{X_{S}}.\]; This form of the ADC(2) equation requires 7–10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. \[\omega^{n+1}=\omega^{n}-; \frac{\omega^n-\mathbf{X_{S}}(\omega^n)^{\dagger}; [\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^n-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}(\omega^n)}{1+\mathbf{X_{S}}; (\omega^n)^{\dagger}[\mathbf{A_{SD}^{(1)}}^{\dagger}; (\omega^n-\mathbf{A_{DD}^{(0)}})^{-2}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}; (\omega^n)}\]; the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than construction of one \(\sigma\)-vector; with respect to the effective response matrix. The non-iterative excitation energy stated; above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. \[\omega^{Non-Iterative}=; \mathbf{X_{CIS}}^{\dagger}[\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^{CIS}-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{CIS}}\]; where \(\omega^{CIS}\) and \(\mathbf{X_{CIS}}\) denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/psi4/src/psi4/adc/sigma.pdf. table of contents. ADC: Ab Initio Polarization Propagator; Available ADC methods; Running ADC calculations; REFERENCE; R_CONVERGENCE; NUM_GUESSES; CUTOFF_AMPS_PRINT. Interface to adcc; Built-in ADC(2) code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; ADC: Ab Initio Polarization Propagator. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:2635,Energy Efficiency,reduce,reduce,2635,"plit}\]; where S refers to the single and D to the double excitation manifolds.; This matrix is typically sparse and thus may be diagonalised iteratively,; for example using Davidson’s method [Dreuw:2014:82]. An alternative viewpoint; has been addressed for example in [Haettig:2002], where ADC(2) is related; to other response theories such as CC2-LR, CIS(D) and CIS(D\(_n\)).; In this sense one may consider the ADC matrix the correlated response matrix; to a response problem based on CIS; and apply the simultaneous expansion method (SEM),; in which the σ-vectors (ADC matrix-vector products); are constructed several times.; The structure and order of the blocks in the equation above; depend on the ADC level employed. With this also the computational cost changes.; The key computational step, namely the formation of the matrix-vector products; scales as \({\cal O}(N^5)\) for ADC(2) and \({\cal O}(N^6)\); for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]; and the adcc theory documentation. Available ADC methods¶; Section author: Michael F. Herbst; Several ADC methods are available in PSI4 for the computation of excited states,; see ADC capabilities of Psi4.; The methods are implemented in two distinct codes,; one is part of PSI4 itself and will be referred to as the built-in implementation,; the other is available via an interface to the adcc python module.; The two backends follow different approaches to compute ADC excited states; and as a result details and supported keywords differ.; Afte",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:4625,Energy Efficiency,energy,energy,4625,"supported keywords differ.; After a more general introduction, specific aspects of the two implementations will be highlighted; in section Interface to adcc and Built-in ADC(2) code. ADC capabilities of Psi4¶. Method; Backend; References; Exc. Energies; Props; Supported values for kind keyword. ADC(1); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. built-in; RHF; yes; —; singlet. ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(3); adcc; RHF, UHF; yes; yes | any, singlet, triplet, spin_flip. CVS-ADC(1); adcc; RHF, UHF; yes; yes | any, singlet, triplet. CVS-ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(3); adcc; RHF, UHF; yes; yes; any, singlet, triplet. The leftmost column of table ADC capabilities of Psi4 provides the supported ADC methods.; If only excitation energies are desired, one can simply pass one; of the listed method strings to the function energy().; For example, energy('adc(2)-x') will compute; excitation energies at ADC(2)-x level.; Properties such as oscillator strengths, transition or state dipole moments; are available by calling the function properties(); with appropriate arguments.; Most commonly users will want to compute at least oscillator strengths; along with the excitation energies,; resulting in a call like properties('adc(2)', properties=[""oscillator_strength""]). Running ADC calculations¶; Section author: Michael F. Herbst; Running an ADC calculation with PSI4 requires; the call to properties() as discussed above; as well as one or more mandatory keyword arguments.; The most important keyword argument is ROOTS_PER_IRREP,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a si",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:4649,Energy Efficiency,energy,energy,4649,"ns will be highlighted; in section Interface to adcc and Built-in ADC(2) code. ADC capabilities of Psi4¶. Method; Backend; References; Exc. Energies; Props; Supported values for kind keyword. ADC(1); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. built-in; RHF; yes; —; singlet. ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(3); adcc; RHF, UHF; yes; yes | any, singlet, triplet, spin_flip. CVS-ADC(1); adcc; RHF, UHF; yes; yes | any, singlet, triplet. CVS-ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(3); adcc; RHF, UHF; yes; yes; any, singlet, triplet. The leftmost column of table ADC capabilities of Psi4 provides the supported ADC methods.; If only excitation energies are desired, one can simply pass one; of the listed method strings to the function energy().; For example, energy('adc(2)-x') will compute; excitation energies at ADC(2)-x level.; Properties such as oscillator strengths, transition or state dipole moments; are available by calling the function properties(); with appropriate arguments.; Most commonly users will want to compute at least oscillator strengths; along with the excitation energies,; resulting in a call like properties('adc(2)', properties=[""oscillator_strength""]). Running ADC calculations¶; Section author: Michael F. Herbst; Running an ADC calculation with PSI4 requires; the call to properties() as discussed above; as well as one or more mandatory keyword arguments.; The most important keyword argument is ROOTS_PER_IRREP,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a single; element only. For example one can run an ADC(2) calculation for 10; (singlet) excited states using",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:6863,Energy Efficiency,energy,energy,6863,"ible excitation manifolds,; use the KIND keyword. For restricted references; by default only singlet excited states are computed,; corresponding to the keyword value 'singlet'.; To compute triplet states, select 'triplet'.; To compute both without making a spin distinction, select 'any'.; The latter is default for unrestricted references.; The special KIND value 'spin_flip' selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for CVS-ADC(n) methods,; see table ADC capabilities of Psi4.; Using the core-valence separation.; For tackling core-valence excitations using the CVS-ADC(n); methods, the keyword argument NUM_CORE_ORBITALS; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of 2 indicates, for example,; that the two lowest-energy \(\alpha\) and the two; lowest-energy \(\beta\) orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space.; Example: Consider furane, \(C_4H_4O\). In order to tackle; the oxygen 1s edge, i.e simulate a O 1s XAS spectrum, one may; just set NUM_CORE_ORBITALS to 1. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the NUM_CORE_ORBITALS value needs; to be set to 5, such that both the O 1s and all four C 1s orbitals; are part of the core space.; Other keywords and examples.; Apart from the mentioned keywords, the following are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. N",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:6901,Energy Efficiency,energy,energy,6901,"ible excitation manifolds,; use the KIND keyword. For restricted references; by default only singlet excited states are computed,; corresponding to the keyword value 'singlet'.; To compute triplet states, select 'triplet'.; To compute both without making a spin distinction, select 'any'.; The latter is default for unrestricted references.; The special KIND value 'spin_flip' selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for CVS-ADC(n) methods,; see table ADC capabilities of Psi4.; Using the core-valence separation.; For tackling core-valence excitations using the CVS-ADC(n); methods, the keyword argument NUM_CORE_ORBITALS; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of 2 indicates, for example,; that the two lowest-energy \(\alpha\) and the two; lowest-energy \(\beta\) orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space.; Example: Consider furane, \(C_4H_4O\). In order to tackle; the oxygen 1s edge, i.e simulate a O 1s XAS spectrum, one may; just set NUM_CORE_ORBITALS to 1. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the NUM_CORE_ORBITALS value needs; to be set to 5, such that both the O 1s and all four C 1s orbitals; are part of the core space.; Other keywords and examples.; Apart from the mentioned keywords, the following are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. N",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:7014,Energy Efficiency,energy,energy,7014,"e 'singlet'.; To compute triplet states, select 'triplet'.; To compute both without making a spin distinction, select 'any'.; The latter is default for unrestricted references.; The special KIND value 'spin_flip' selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for CVS-ADC(n) methods,; see table ADC capabilities of Psi4.; Using the core-valence separation.; For tackling core-valence excitations using the CVS-ADC(n); methods, the keyword argument NUM_CORE_ORBITALS; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of 2 indicates, for example,; that the two lowest-energy \(\alpha\) and the two; lowest-energy \(\beta\) orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space.; Example: Consider furane, \(C_4H_4O\). In order to tackle; the oxygen 1s edge, i.e simulate a O 1s XAS spectrum, one may; just set NUM_CORE_ORBITALS to 1. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the NUM_CORE_ORBITALS value needs; to be set to 5, such that both the O 1s and all four C 1s orbitals; are part of the core space.; Other keywords and examples.; Apart from the mentioned keywords, the following are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:8541,Energy Efficiency,energy,energy,8541," part of the core space.; Other keywords and examples.; Apart from the mentioned keywords, the following are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. The full list is provided in appendix ADC; and many more sample input files can be found in the adc and adcc; subfolders of psi4/samples.; Note, that not all keywords are supported by all backends.; Switching between ADC backends.; Psi4 currently defaults to the built-in implementation for all ADC(2) energy calculations.; You can explicitly set the QC_MODULE option to 'adcc'; enforce using adcc also for this case. Interface to adcc¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; For most implemented ADC methods PSI4 relies; on an interface to the adcc python package.; The approach of adcc is to directly diagonalise the; ADC matrix \(\mathbf{A}\) in an iterative diagonalisation; procedure, usually a Jacobi-preconditioned Davidson. Expensive parts; of the ADC matrix-vector product are precomputed and stored; in memory. This approach is general in the sense; that it can be applied to a large range of ADC methods and variants.; So far levels up to ADC(3) and CVS-ADC(3) are available; and additional approximations such as; FREEZE_CORE and NUM_FROZEN_UOCC; are supported with all ADC methods using the adcc backend.; Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:10515,Energy Efficiency,energy,energy,10515,"rage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_state.plot_spectrum() plots a broadened excited states spectrum; in matplotlib. See the adcc calculations documentation; for details. Ti",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:10549,Energy Efficiency,energy,energy,10549,"rage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_state.plot_spectrum() plots a broadened excited states spectrum; in matplotlib. See the adcc calculations documentation; for details. Ti",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:10573,Energy Efficiency,energy,energy,10573,"rage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_state.plot_spectrum() plots a broadened excited states spectrum; in matplotlib. See the adcc calculations documentation; for details. Ti",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:10592,Energy Efficiency,energy,energy,10592,"rage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_state.plot_spectrum() plots a broadened excited states spectrum; in matplotlib. See the adcc calculations documentation; for details. Ti",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:10610,Energy Efficiency,energy,energy,10610,"rage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_state.plot_spectrum() plots a broadened excited states spectrum; in matplotlib. See the adcc calculations documentation; for details. Ti",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:10638,Energy Efficiency,energy,energy,10638,"rage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_state.plot_spectrum() plots a broadened excited states spectrum; in matplotlib. See the adcc calculations documentation; for details. Ti",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:10657,Energy Efficiency,energy,energy,10657,"rage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_state.plot_spectrum() plots a broadened excited states spectrum; in matplotlib. See the adcc calculations documentation; for details. Ti",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:12426,Energy Efficiency,efficient,efficient,12426,"pectrum; in matplotlib. See the adcc calculations documentation; for details. Tips for convergence issues.; If you encounter convergence issues inside adcc, the following parameters; are worth tweaking:. MAX_NUM_VECS: Specifies the maximal number of subspace vectors; in the Jacobi-Davidson scheme before a restart occurs. The defaults are usually; good, but do not be shy to increase this value if you encounter convergence problems.; NUM_GUESSES: By default adcc uses twice as many guess vectors as; states to be computed. Sometimes increasing this value by a few vectors can be helpful.; If you encounter a convergence to zero eigenvalues, than decreasing this parameter might; solve the problems. Built-in ADC(2) code¶; Code author: Masaaki Saitow; Section author: Masaaki Saitow; The ADC code built into PSI4 is capable of ADC(2) computations; of singlet excited states only.; It makes use of the libtrans library for efficient and flexible; integral-transformation and also the libdpd library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this i",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:13312,Energy Efficiency,energy,energy,13312,"t makes use of the libtrans library for efficient and flexible; integral-transformation and also the libdpd library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for t",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:13445,Energy Efficiency,energy,energy,13445,"t makes use of the libtrans library for efficient and flexible; integral-transformation and also the libdpd library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for t",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:16713,Energy Efficiency,reduce,reduces,16713,"egin{split}\begin{pmatrix}; \mathbf{A_{SS}^{(2)}} & \mathbf{A_{SD}^{(1)}}\\; \mathbf{A_{DS}^{(1)}} & \mathbf{A_{DD}^{(0)}}; \end{pmatrix}; \begin{pmatrix}; \mathbf{X_S}\\; \mathbf{X_D}; \end{pmatrix}; =\omega; \begin{pmatrix}; \mathbf{X_S}\\; \mathbf{X_D}; \end{pmatrix}\end{split}\]; where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. \[[\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega-; \mathbf{A_{DD}^{(0)}})^{-1}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}=; \omega\mathbf{X_{S}}.\]; This form of the ADC(2) equation requires 7–10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. \[\omega^{n+1}=\omega^{n}-; \frac{\omega^n-\mathbf{X_{S}}(\omega^n)^{\dagger}; [\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^n-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}(\omega^n)}{1+\mathbf{X_{S}}; (\omega^n)^{\dagger}[\mathbf{A_{SD}^{(1)}}^{\dagger}; (\omega^n-\mathbf{A_{DD}^{(0)}})^{-2}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}; (\omega^n)}\]; the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than construction of one \(\sigma\)-vector; with respect to the effective response matrix. The non-iterative excitation energy stated; above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. \[\omega^{Non-Iterative}=; \mathbf{X_{CIS}}^{\dagger}[\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^{CIS}-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{CIS}}\]; where \(\omega^{CIS}\) and \(\mathbf{X_{CIS}}\) denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/psi4/src",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:17006,Energy Efficiency,energy,energy,17006,"SD}^{(1)}}^{\dagger}(\omega-; \mathbf{A_{DD}^{(0)}})^{-1}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}=; \omega\mathbf{X_{S}}.\]; This form of the ADC(2) equation requires 7–10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. \[\omega^{n+1}=\omega^{n}-; \frac{\omega^n-\mathbf{X_{S}}(\omega^n)^{\dagger}; [\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^n-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}(\omega^n)}{1+\mathbf{X_{S}}; (\omega^n)^{\dagger}[\mathbf{A_{SD}^{(1)}}^{\dagger}; (\omega^n-\mathbf{A_{DD}^{(0)}})^{-2}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}; (\omega^n)}\]; the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than construction of one \(\sigma\)-vector; with respect to the effective response matrix. The non-iterative excitation energy stated; above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. \[\omega^{Non-Iterative}=; \mathbf{X_{CIS}}^{\dagger}[\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^{CIS}-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{CIS}}\]; where \(\omega^{CIS}\) and \(\mathbf{X_{CIS}}\) denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/psi4/src/psi4/adc/sigma.pdf. table of contents. ADC: Ab Initio Polarization Propagator; Available ADC methods; Running ADC calculations; REFERENCE; R_CONVERGENCE; NUM_GUESSES; CUTOFF_AMPS_PRINT. Interface to adcc; Built-in ADC(2) code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; ADC: Ab Initio Polarization Propagator. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using S",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:17388,Energy Efficiency,energy,energy,17388,"ger}(\omega-; \mathbf{A_{DD}^{(0)}})^{-1}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}=; \omega\mathbf{X_{S}}.\]; This form of the ADC(2) equation requires 7–10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. \[\omega^{n+1}=\omega^{n}-; \frac{\omega^n-\mathbf{X_{S}}(\omega^n)^{\dagger}; [\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^n-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}(\omega^n)}{1+\mathbf{X_{S}}; (\omega^n)^{\dagger}[\mathbf{A_{SD}^{(1)}}^{\dagger}; (\omega^n-\mathbf{A_{DD}^{(0)}})^{-2}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}; (\omega^n)}\]; the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than construction of one \(\sigma\)-vector; with respect to the effective response matrix. The non-iterative excitation energy stated; above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. \[\omega^{Non-Iterative}=; \mathbf{X_{CIS}}^{\dagger}[\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^{CIS}-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{CIS}}\]; where \(\omega^{CIS}\) and \(\mathbf{X_{CIS}}\) denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/psi4/src/psi4/adc/sigma.pdf. table of contents. ADC: Ab Initio Polarization Propagator; Available ADC methods; Running ADC calculations; REFERENCE; R_CONVERGENCE; NUM_GUESSES; CUTOFF_AMPS_PRINT. Interface to adcc; Built-in ADC(2) code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; ADC: Ab Initio Polarization Propagator. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:2295,Integrability,depend,depend,2295,"{A}\), the eigenproblem can be written; in terms of several blocks. \[\begin{split}\begin{pmatrix}; \mathbf{A_{SS}} & \mathbf{A_{SD}}\\; \mathbf{A_{DS}} & \mathbf{A_{DD}}; \end{pmatrix}; \begin{pmatrix}; \mathbf{X_S}\\; \mathbf{X_D}; \end{pmatrix}; =\omega; \begin{pmatrix}; \mathbf{X_S}\\; \mathbf{X_D}; \end{pmatrix}\end{split}\]; where S refers to the single and D to the double excitation manifolds.; This matrix is typically sparse and thus may be diagonalised iteratively,; for example using Davidson’s method [Dreuw:2014:82]. An alternative viewpoint; has been addressed for example in [Haettig:2002], where ADC(2) is related; to other response theories such as CC2-LR, CIS(D) and CIS(D\(_n\)).; In this sense one may consider the ADC matrix the correlated response matrix; to a response problem based on CIS; and apply the simultaneous expansion method (SEM),; in which the σ-vectors (ADC matrix-vector products); are constructed several times.; The structure and order of the blocks in the equation above; depend on the ADC level employed. With this also the computational cost changes.; The key computational step, namely the formation of the matrix-vector products; scales as \({\cal O}(N^5)\) for ADC(2) and \({\cal O}(N^6)\); for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]; and the adcc theory documentation. Available ADC methods¶; Section author: Michael F. Herbst; Several ADC methods are available in PSI4 for the computation of excited states,; see ADC capabilities of Psi4.; The methods are",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:3431,Integrability,interface,interface,3431,"t changes.; The key computational step, namely the formation of the matrix-vector products; scales as \({\cal O}(N^5)\) for ADC(2) and \({\cal O}(N^6)\); for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]; and the adcc theory documentation. Available ADC methods¶; Section author: Michael F. Herbst; Several ADC methods are available in PSI4 for the computation of excited states,; see ADC capabilities of Psi4.; The methods are implemented in two distinct codes,; one is part of PSI4 itself and will be referred to as the built-in implementation,; the other is available via an interface to the adcc python module.; The two backends follow different approaches to compute ADC excited states; and as a result details and supported keywords differ.; After a more general introduction, specific aspects of the two implementations will be highlighted; in section Interface to adcc and Built-in ADC(2) code. ADC capabilities of Psi4¶. Method; Backend; References; Exc. Energies; Props; Supported values for kind keyword. ADC(1); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. built-in; RHF; yes; —; singlet. ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(3); adcc; RHF, UHF; yes; yes | any, singlet, triplet, spin_flip. CVS-ADC(1); adcc; RHF, UHF; yes; yes | any, singlet, triplet. CVS-ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:8796,Integrability,interface,interface,8796,"agonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. The full list is provided in appendix ADC; and many more sample input files can be found in the adc and adcc; subfolders of psi4/samples.; Note, that not all keywords are supported by all backends.; Switching between ADC backends.; Psi4 currently defaults to the built-in implementation for all ADC(2) energy calculations.; You can explicitly set the QC_MODULE option to 'adcc'; enforce using adcc also for this case. Interface to adcc¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; For most implemented ADC methods PSI4 relies; on an interface to the adcc python package.; The approach of adcc is to directly diagonalise the; ADC matrix \(\mathbf{A}\) in an iterative diagonalisation; procedure, usually a Jacobi-preconditioned Davidson. Expensive parts; of the ADC matrix-vector product are precomputed and stored; in memory. This approach is general in the sense; that it can be applied to a large range of ADC methods and variants.; So far levels up to ADC(3) and CVS-ADC(3) are available; and additional approximations such as; FREEZE_CORE and NUM_FROZEN_UOCC; are supported with all ADC methods using the adcc backend.; Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the me",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:10190,Integrability,interface,interface,10190,"to ADC(3) and CVS-ADC(3) are available; and additional approximations such as; FREEZE_CORE and NUM_FROZEN_UOCC; are supported with all ADC methods using the adcc backend.; Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_stat",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:13769,Integrability,depend,dependence,13769,"ions of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states.; Partial Renormalization Scheme; The built-in ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D)",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:10223,Modifiability,variab,variables,10223,"to ADC(3) and CVS-ADC(3) are available; and additional approximations such as; FREEZE_CORE and NUM_FROZEN_UOCC; are supported with all ADC methods using the adcc backend.; Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_stat",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:10465,Modifiability,variab,variable,10465,"tions,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:12440,Modifiability,flexible,flexible,12440,"pectrum; in matplotlib. See the adcc calculations documentation; for details. Tips for convergence issues.; If you encounter convergence issues inside adcc, the following parameters; are worth tweaking:. MAX_NUM_VECS: Specifies the maximal number of subspace vectors; in the Jacobi-Davidson scheme before a restart occurs. The defaults are usually; good, but do not be shy to increase this value if you encounter convergence problems.; NUM_GUESSES: By default adcc uses twice as many guess vectors as; states to be computed. Sometimes increasing this value by a few vectors can be helpful.; If you encounter a convergence to zero eigenvalues, than decreasing this parameter might; solve the problems. Built-in ADC(2) code¶; Code author: Masaaki Saitow; Section author: Masaaki Saitow; The ADC code built into PSI4 is capable of ADC(2) computations; of singlet excited states only.; It makes use of the libtrans library for efficient and flexible; integral-transformation and also the libdpd library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this i",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:14679,Modifiability,config,configurations,14679," the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states.; Partial Renormalization Scheme; The built-in ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012].; Theory of the built-in ADC(2) implementation; For the built-in ADC(2) implementation; some very essential points shall be emphasized. In ADC(2) specifically; one may write the response equation as. \[\begin{split}\begin{pmatrix}; \mathbf{A_{SS}^{(2)}} & \mathbf{A_{SD}^{(1)}}\\; \mathbf{A_{DS}^{(1)}} & \mathbf{A_{DD}^{(0)}}",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:6342,Performance,perform,performed,6342,"st important keyword argument is ROOTS_PER_IRREP,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a single; element only. For example one can run an ADC(2) calculation for 10; (singlet) excited states using:; set roots_per_irrep [10]; properties('adc(2)', properties=[""oscillator_strength""]). where the molecule section was dropped for brevity.; Selecting the excitation manifold.; To select between the possible excitation manifolds,; use the KIND keyword. For restricted references; by default only singlet excited states are computed,; corresponding to the keyword value 'singlet'.; To compute triplet states, select 'triplet'.; To compute both without making a spin distinction, select 'any'.; The latter is default for unrestricted references.; The special KIND value 'spin_flip' selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for CVS-ADC(n) methods,; see table ADC capabilities of Psi4.; Using the core-valence separation.; For tackling core-valence excitations using the CVS-ADC(n); methods, the keyword argument NUM_CORE_ORBITALS; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of 2 indicates, for example,; that the two lowest-energy \(\alpha\) and the two; lowest-energy \(\beta\) orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space.; Example: Consider furane, \(C_4H_4O\). In order to tackle; the oxygen 1s edge, i.e simulate a O 1s XAS spectrum, one may; just set NUM_CORE_ORBITALS to 1",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:9421,Performance,perform,performing,9421,"defaults to the built-in implementation for all ADC(2) energy calculations.; You can explicitly set the QC_MODULE option to 'adcc'; enforce using adcc also for this case. Interface to adcc¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; For most implemented ADC methods PSI4 relies; on an interface to the adcc python package.; The approach of adcc is to directly diagonalise the; ADC matrix \(\mathbf{A}\) in an iterative diagonalisation; procedure, usually a Jacobi-preconditioned Davidson. Expensive parts; of the ADC matrix-vector product are precomputed and stored; in memory. This approach is general in the sense; that it can be applied to a large range of ADC methods and variants.; So far levels up to ADC(3) and CVS-ADC(3) are available; and additional approximations such as; FREEZE_CORE and NUM_FROZEN_UOCC; are supported with all ADC methods using the adcc backend.; Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excit",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:14512,Performance,perform,performing,14512,"on, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states.; Partial Renormalization Scheme; The built-in ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012].; Theory of the built-in ADC(2) implementation; For the built-in ADC(2) implementation; some very essential points shall be emphasized. In ADC(2) specifically; one may write the ",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:11373,Security,access,access,11373,"). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_state.plot_spectrum() plots a broadened excited states spectrum; in matplotlib. See the adcc calculations documentation; for details. Tips for convergence issues.; If you encounter convergence issues inside adcc, the following parameters; are worth tweaking:. MAX_NUM_VECS: Specifies the maximal number of subspace vectors; in the Jacobi-Davidson scheme before a restart occurs. The defaults are usually; good, but do not be shy to increase this value if you encounter convergence problems.; NUM_GUESSES: By default adcc uses twice as many guess vectors as; states to be computed. Sometimes increasing this value by a few vectors can be helpful.; If you encounter a convergence to zero eigenvalues, than decreasing this parameter might; solve the problems. Built-in ADC(2) code¶; Code author: Masaaki Saitow; Section author: Masaaki Saitow; The ADC code built into PSI4 is capable of ADC(2) computations; of singlet excited states only.; It make",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:4563,Usability,simpl,simply,4563,"supported keywords differ.; After a more general introduction, specific aspects of the two implementations will be highlighted; in section Interface to adcc and Built-in ADC(2) code. ADC capabilities of Psi4¶. Method; Backend; References; Exc. Energies; Props; Supported values for kind keyword. ADC(1); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. built-in; RHF; yes; —; singlet. ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(3); adcc; RHF, UHF; yes; yes | any, singlet, triplet, spin_flip. CVS-ADC(1); adcc; RHF, UHF; yes; yes | any, singlet, triplet. CVS-ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(3); adcc; RHF, UHF; yes; yes; any, singlet, triplet. The leftmost column of table ADC capabilities of Psi4 provides the supported ADC methods.; If only excitation energies are desired, one can simply pass one; of the listed method strings to the function energy().; For example, energy('adc(2)-x') will compute; excitation energies at ADC(2)-x level.; Properties such as oscillator strengths, transition or state dipole moments; are available by calling the function properties(); with appropriate arguments.; Most commonly users will want to compute at least oscillator strengths; along with the excitation energies,; resulting in a call like properties('adc(2)', properties=[""oscillator_strength""]). Running ADC calculations¶; Section author: Michael F. Herbst; Running an ADC calculation with PSI4 requires; the call to properties() as discussed above; as well as one or more mandatory keyword arguments.; The most important keyword argument is ROOTS_PER_IRREP,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a si",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc-1.html:16749,Usability,simpl,simple,16749,"egin{split}\begin{pmatrix}; \mathbf{A_{SS}^{(2)}} & \mathbf{A_{SD}^{(1)}}\\; \mathbf{A_{DS}^{(1)}} & \mathbf{A_{DD}^{(0)}}; \end{pmatrix}; \begin{pmatrix}; \mathbf{X_S}\\; \mathbf{X_D}; \end{pmatrix}; =\omega; \begin{pmatrix}; \mathbf{X_S}\\; \mathbf{X_D}; \end{pmatrix}\end{split}\]; where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. \[[\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega-; \mathbf{A_{DD}^{(0)}})^{-1}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}=; \omega\mathbf{X_{S}}.\]; This form of the ADC(2) equation requires 7–10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. \[\omega^{n+1}=\omega^{n}-; \frac{\omega^n-\mathbf{X_{S}}(\omega^n)^{\dagger}; [\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^n-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}(\omega^n)}{1+\mathbf{X_{S}}; (\omega^n)^{\dagger}[\mathbf{A_{SD}^{(1)}}^{\dagger}; (\omega^n-\mathbf{A_{DD}^{(0)}})^{-2}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}; (\omega^n)}\]; the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than construction of one \(\sigma\)-vector; with respect to the effective response matrix. The non-iterative excitation energy stated; above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. \[\omega^{Non-Iterative}=; \mathbf{X_{CIS}}^{\dagger}[\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^{CIS}-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{CIS}}\]; where \(\omega^{CIS}\) and \(\mathbf{X_{CIS}}\) denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/psi4/src",MatchSource.WIKI,psi4manual/1.4.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html
https://psicode.org/psi4manual/1.4.0/adc.html:3176,Availability,avail,available,3176,"re constructed several times.; The structure and order of the blocks in the equation above; depend on the ADC level employed. With this also the computational cost changes.; The key computational step, namely the formation of the matrix-vector products; scales as \({\cal O}(N^5)\) for ADC(2) and \({\cal O}(N^6)\); for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]; and the adcc theory documentation. Available ADC methods¶; Section author: Michael F. Herbst; Several ADC methods are available in PSI4 for the computation of excited states,; see ADC capabilities of Psi4.; The methods are implemented in two distinct codes,; one is part of PSI4 itself and will be referred to as the built-in implementation,; the other is available via an interface to the adcc python module.; The two backends follow different approaches to compute ADC excited states; and as a result details and supported keywords differ.; After a more general introduction, specific aspects of the two implementations will be highlighted; in section Interface to adcc and Built-in ADC(2) code. ADC capabilities of Psi4¶. Method; Backend; References; Exc. Energies; Props; Supported values for kind keyword. ADC(1); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. built-in; RHF; yes; —; singlet. ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(3); adcc; RHF, UHF; yes; yes | any, singlet, triplet, spin_flip. CVS-ADC(1); adcc; RHF, UHF;",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:3414,Availability,avail,available,3414,"t changes.; The key computational step, namely the formation of the matrix-vector products; scales as \({\cal O}(N^5)\) for ADC(2) and \({\cal O}(N^6)\); for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]; and the adcc theory documentation. Available ADC methods¶; Section author: Michael F. Herbst; Several ADC methods are available in PSI4 for the computation of excited states,; see ADC capabilities of Psi4.; The methods are implemented in two distinct codes,; one is part of PSI4 itself and will be referred to as the built-in implementation,; the other is available via an interface to the adcc python module.; The two backends follow different approaches to compute ADC excited states; and as a result details and supported keywords differ.; After a more general introduction, specific aspects of the two implementations will be highlighted; in section Interface to adcc and Built-in ADC(2) code. ADC capabilities of Psi4¶. Method; Backend; References; Exc. Energies; Props; Supported values for kind keyword. ADC(1); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. built-in; RHF; yes; —; singlet. ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(3); adcc; RHF, UHF; yes; yes | any, singlet, triplet, spin_flip. CVS-ADC(1); adcc; RHF, UHF; yes; yes | any, singlet, triplet. CVS-ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:4803,Availability,avail,available,4803," References; Exc. Energies; Props; Supported values for kind keyword. ADC(1); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. built-in; RHF; yes; —; singlet. ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(3); adcc; RHF, UHF; yes; yes | any, singlet, triplet, spin_flip. CVS-ADC(1); adcc; RHF, UHF; yes; yes | any, singlet, triplet. CVS-ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(3); adcc; RHF, UHF; yes; yes; any, singlet, triplet. The leftmost column of table ADC capabilities of Psi4 provides the supported ADC methods.; If only excitation energies are desired, one can simply pass one; of the listed method strings to the function energy().; For example, energy('adc(2)-x') will compute; excitation energies at ADC(2)-x level.; Properties such as oscillator strengths, transition or state dipole moments; are available by calling the function properties(); with appropriate arguments.; Most commonly users will want to compute at least oscillator strengths; along with the excitation energies,; resulting in a call like properties('adc(2)', properties=[""oscillator_strength""]). Running ADC calculations¶; Section author: Michael F. Herbst; Running an ADC calculation with PSI4 requires; the call to properties() as discussed above; as well as one or more mandatory keyword arguments.; The most important keyword argument is ROOTS_PER_IRREP,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a single; element only. For example one can run an ADC(2) calculation for 10; (singlet) excited states using:; set roots_per_irrep [10]; properties('adc(2)', properties=[""oscillator_strength""]). where the molecule section was drop",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:6366,Availability,avail,available,6366,"cible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a single; element only. For example one can run an ADC(2) calculation for 10; (singlet) excited states using:; set roots_per_irrep [10]; properties('adc(2)', properties=[""oscillator_strength""]). where the molecule section was dropped for brevity.; Selecting the excitation manifold.; To select between the possible excitation manifolds,; use the KIND keyword. For restricted references; by default only singlet excited states are computed,; corresponding to the keyword value 'singlet'.; To compute triplet states, select 'triplet'.; To compute both without making a spin distinction, select 'any'.; The latter is default for unrestricted references.; The special KIND value 'spin_flip' selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for CVS-ADC(n) methods,; see table ADC capabilities of Psi4.; Using the core-valence separation.; For tackling core-valence excitations using the CVS-ADC(n); methods, the keyword argument NUM_CORE_ORBITALS; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of 2 indicates, for example,; that the two lowest-energy \(\alpha\) and the two; lowest-energy \(\beta\) orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space.; Example: Consider furane, \(C_4H_4O\). In order to tackle; the oxygen 1s edge, i.e simulate a O 1s XAS spectrum, one may; just set NUM_CORE_ORBITALS to 1. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the ",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:8031,Availability,avail,available,8031,"e value should be specified; such that the targeted core orbital is just inside the core space.; Example: Consider furane, \(C_4H_4O\). In order to tackle; the oxygen 1s edge, i.e simulate a O 1s XAS spectrum, one may; just set NUM_CORE_ORBITALS to 1. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the NUM_CORE_ORBITALS value needs; to be set to 5, such that both the O 1s and all four C 1s orbitals; are part of the core space.; Other keywords and examples.; Apart from the mentioned keywords, the following are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. The full list is provided in appendix ADC; and many more sample input files can be found in the adc and adcc; subfolders of psi4/samples.; Note, that not all keywords are supported by all backends.; Switching between ADC backends.; Psi4 currently defaults to the built-in implementation for all ADC(2) energy calculations.; You can explicitly set the QC_MODULE option to 'adcc'; enforce using adcc also for this case. Interface to adcc¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; For most implemented ADC methods PSI4 relies; on an interface to the adcc python package.; The approach of adcc is to directly diagonalise the; ADC matrix \(\mathbf{A}\) in an iterative diagonalisation; procedure, usually a Jacobi-preconditioned Davidson. Expensive parts; of the ADC matrix-v",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:8178,Availability,avail,available,8178," tackle; the oxygen 1s edge, i.e simulate a O 1s XAS spectrum, one may; just set NUM_CORE_ORBITALS to 1. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the NUM_CORE_ORBITALS value needs; to be set to 5, such that both the O 1s and all four C 1s orbitals; are part of the core space.; Other keywords and examples.; Apart from the mentioned keywords, the following are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. The full list is provided in appendix ADC; and many more sample input files can be found in the adc and adcc; subfolders of psi4/samples.; Note, that not all keywords are supported by all backends.; Switching between ADC backends.; Psi4 currently defaults to the built-in implementation for all ADC(2) energy calculations.; You can explicitly set the QC_MODULE option to 'adcc'; enforce using adcc also for this case. Interface to adcc¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; For most implemented ADC methods PSI4 relies; on an interface to the adcc python package.; The approach of adcc is to directly diagonalise the; ADC matrix \(\mathbf{A}\) in an iterative diagonalisation; procedure, usually a Jacobi-preconditioned Davidson. Expensive parts; of the ADC matrix-vector product are precomputed and stored; in memory. This approach is general in the sense; that it can be applied to a large range of ADC methods ",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:9244,Availability,avail,available,9244," more sample input files can be found in the adc and adcc; subfolders of psi4/samples.; Note, that not all keywords are supported by all backends.; Switching between ADC backends.; Psi4 currently defaults to the built-in implementation for all ADC(2) energy calculations.; You can explicitly set the QC_MODULE option to 'adcc'; enforce using adcc also for this case. Interface to adcc¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; For most implemented ADC methods PSI4 relies; on an interface to the adcc python package.; The approach of adcc is to directly diagonalise the; ADC matrix \(\mathbf{A}\) in an iterative diagonalisation; procedure, usually a Jacobi-preconditioned Davidson. Expensive parts; of the ADC matrix-vector product are precomputed and stored; in memory. This approach is general in the sense; that it can be applied to a large range of ADC methods and variants.; So far levels up to ADC(3) and CVS-ADC(3) are available; and additional approximations such as; FREEZE_CORE and NUM_FROZEN_UOCC; are supported with all ADC methods using the adcc backend.; Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; ",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:10447,Availability,avail,available,10447,"tions,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:14229,Availability,toler,tolerably,14229,"790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states.; Partial Renormalization Scheme; The built-in ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consis",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:14679,Deployability,configurat,configurations,14679," the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states.; Partial Renormalization Scheme; The built-in ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012].; Theory of the built-in ADC(2) implementation; For the built-in ADC(2) implementation; some very essential points shall be emphasized. In ADC(2) specifically; one may write the response equation as. \[\begin{split}\begin{pmatrix}; \mathbf{A_{SS}^{(2)}} & \mathbf{A_{SD}^{(1)}}\\; \mathbf{A_{DS}^{(1)}} & \mathbf{A_{DD}^{(0)}}",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:17986,Deployability,update,updated,17986,"ger}(\omega-; \mathbf{A_{DD}^{(0)}})^{-1}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}=; \omega\mathbf{X_{S}}.\]; This form of the ADC(2) equation requires 7–10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. \[\omega^{n+1}=\omega^{n}-; \frac{\omega^n-\mathbf{X_{S}}(\omega^n)^{\dagger}; [\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^n-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}(\omega^n)}{1+\mathbf{X_{S}}; (\omega^n)^{\dagger}[\mathbf{A_{SD}^{(1)}}^{\dagger}; (\omega^n-\mathbf{A_{DD}^{(0)}})^{-2}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}; (\omega^n)}\]; the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than construction of one \(\sigma\)-vector; with respect to the effective response matrix. The non-iterative excitation energy stated; above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. \[\omega^{Non-Iterative}=; \mathbf{X_{CIS}}^{\dagger}[\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^{CIS}-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{CIS}}\]; where \(\omega^{CIS}\) and \(\mathbf{X_{CIS}}\) denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/psi4/src/psi4/adc/sigma.pdf. table of contents. ADC: Ab Initio Polarization Propagator; Available ADC methods; Running ADC calculations; REFERENCE; R_CONVERGENCE; NUM_GUESSES; CUTOFF_AMPS_PRINT. Interface to adcc; Built-in ADC(2) code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; ADC: Ab Initio Polarization Propagator. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:2635,Energy Efficiency,reduce,reduce,2635,"plit}\]; where S refers to the single and D to the double excitation manifolds.; This matrix is typically sparse and thus may be diagonalised iteratively,; for example using Davidson’s method [Dreuw:2014:82]. An alternative viewpoint; has been addressed for example in [Haettig:2002], where ADC(2) is related; to other response theories such as CC2-LR, CIS(D) and CIS(D\(_n\)).; In this sense one may consider the ADC matrix the correlated response matrix; to a response problem based on CIS; and apply the simultaneous expansion method (SEM),; in which the σ-vectors (ADC matrix-vector products); are constructed several times.; The structure and order of the blocks in the equation above; depend on the ADC level employed. With this also the computational cost changes.; The key computational step, namely the formation of the matrix-vector products; scales as \({\cal O}(N^5)\) for ADC(2) and \({\cal O}(N^6)\); for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]; and the adcc theory documentation. Available ADC methods¶; Section author: Michael F. Herbst; Several ADC methods are available in PSI4 for the computation of excited states,; see ADC capabilities of Psi4.; The methods are implemented in two distinct codes,; one is part of PSI4 itself and will be referred to as the built-in implementation,; the other is available via an interface to the adcc python module.; The two backends follow different approaches to compute ADC excited states; and as a result details and supported keywords differ.; Afte",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:4625,Energy Efficiency,energy,energy,4625,"supported keywords differ.; After a more general introduction, specific aspects of the two implementations will be highlighted; in section Interface to adcc and Built-in ADC(2) code. ADC capabilities of Psi4¶. Method; Backend; References; Exc. Energies; Props; Supported values for kind keyword. ADC(1); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. built-in; RHF; yes; —; singlet. ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(3); adcc; RHF, UHF; yes; yes | any, singlet, triplet, spin_flip. CVS-ADC(1); adcc; RHF, UHF; yes; yes | any, singlet, triplet. CVS-ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(3); adcc; RHF, UHF; yes; yes; any, singlet, triplet. The leftmost column of table ADC capabilities of Psi4 provides the supported ADC methods.; If only excitation energies are desired, one can simply pass one; of the listed method strings to the function energy().; For example, energy('adc(2)-x') will compute; excitation energies at ADC(2)-x level.; Properties such as oscillator strengths, transition or state dipole moments; are available by calling the function properties(); with appropriate arguments.; Most commonly users will want to compute at least oscillator strengths; along with the excitation energies,; resulting in a call like properties('adc(2)', properties=[""oscillator_strength""]). Running ADC calculations¶; Section author: Michael F. Herbst; Running an ADC calculation with PSI4 requires; the call to properties() as discussed above; as well as one or more mandatory keyword arguments.; The most important keyword argument is ROOTS_PER_IRREP,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a si",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:4649,Energy Efficiency,energy,energy,4649,"ns will be highlighted; in section Interface to adcc and Built-in ADC(2) code. ADC capabilities of Psi4¶. Method; Backend; References; Exc. Energies; Props; Supported values for kind keyword. ADC(1); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. built-in; RHF; yes; —; singlet. ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(3); adcc; RHF, UHF; yes; yes | any, singlet, triplet, spin_flip. CVS-ADC(1); adcc; RHF, UHF; yes; yes | any, singlet, triplet. CVS-ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(3); adcc; RHF, UHF; yes; yes; any, singlet, triplet. The leftmost column of table ADC capabilities of Psi4 provides the supported ADC methods.; If only excitation energies are desired, one can simply pass one; of the listed method strings to the function energy().; For example, energy('adc(2)-x') will compute; excitation energies at ADC(2)-x level.; Properties such as oscillator strengths, transition or state dipole moments; are available by calling the function properties(); with appropriate arguments.; Most commonly users will want to compute at least oscillator strengths; along with the excitation energies,; resulting in a call like properties('adc(2)', properties=[""oscillator_strength""]). Running ADC calculations¶; Section author: Michael F. Herbst; Running an ADC calculation with PSI4 requires; the call to properties() as discussed above; as well as one or more mandatory keyword arguments.; The most important keyword argument is ROOTS_PER_IRREP,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a single; element only. For example one can run an ADC(2) calculation for 10; (singlet) excited states using",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:6863,Energy Efficiency,energy,energy,6863,"ible excitation manifolds,; use the KIND keyword. For restricted references; by default only singlet excited states are computed,; corresponding to the keyword value 'singlet'.; To compute triplet states, select 'triplet'.; To compute both without making a spin distinction, select 'any'.; The latter is default for unrestricted references.; The special KIND value 'spin_flip' selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for CVS-ADC(n) methods,; see table ADC capabilities of Psi4.; Using the core-valence separation.; For tackling core-valence excitations using the CVS-ADC(n); methods, the keyword argument NUM_CORE_ORBITALS; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of 2 indicates, for example,; that the two lowest-energy \(\alpha\) and the two; lowest-energy \(\beta\) orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space.; Example: Consider furane, \(C_4H_4O\). In order to tackle; the oxygen 1s edge, i.e simulate a O 1s XAS spectrum, one may; just set NUM_CORE_ORBITALS to 1. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the NUM_CORE_ORBITALS value needs; to be set to 5, such that both the O 1s and all four C 1s orbitals; are part of the core space.; Other keywords and examples.; Apart from the mentioned keywords, the following are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. N",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:6901,Energy Efficiency,energy,energy,6901,"ible excitation manifolds,; use the KIND keyword. For restricted references; by default only singlet excited states are computed,; corresponding to the keyword value 'singlet'.; To compute triplet states, select 'triplet'.; To compute both without making a spin distinction, select 'any'.; The latter is default for unrestricted references.; The special KIND value 'spin_flip' selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for CVS-ADC(n) methods,; see table ADC capabilities of Psi4.; Using the core-valence separation.; For tackling core-valence excitations using the CVS-ADC(n); methods, the keyword argument NUM_CORE_ORBITALS; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of 2 indicates, for example,; that the two lowest-energy \(\alpha\) and the two; lowest-energy \(\beta\) orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space.; Example: Consider furane, \(C_4H_4O\). In order to tackle; the oxygen 1s edge, i.e simulate a O 1s XAS spectrum, one may; just set NUM_CORE_ORBITALS to 1. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the NUM_CORE_ORBITALS value needs; to be set to 5, such that both the O 1s and all four C 1s orbitals; are part of the core space.; Other keywords and examples.; Apart from the mentioned keywords, the following are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. N",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:7014,Energy Efficiency,energy,energy,7014,"e 'singlet'.; To compute triplet states, select 'triplet'.; To compute both without making a spin distinction, select 'any'.; The latter is default for unrestricted references.; The special KIND value 'spin_flip' selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for CVS-ADC(n) methods,; see table ADC capabilities of Psi4.; Using the core-valence separation.; For tackling core-valence excitations using the CVS-ADC(n); methods, the keyword argument NUM_CORE_ORBITALS; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of 2 indicates, for example,; that the two lowest-energy \(\alpha\) and the two; lowest-energy \(\beta\) orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space.; Example: Consider furane, \(C_4H_4O\). In order to tackle; the oxygen 1s edge, i.e simulate a O 1s XAS spectrum, one may; just set NUM_CORE_ORBITALS to 1. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the NUM_CORE_ORBITALS value needs; to be set to 5, such that both the O 1s and all four C 1s orbitals; are part of the core space.; Other keywords and examples.; Apart from the mentioned keywords, the following are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:8541,Energy Efficiency,energy,energy,8541," part of the core space.; Other keywords and examples.; Apart from the mentioned keywords, the following are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. The full list is provided in appendix ADC; and many more sample input files can be found in the adc and adcc; subfolders of psi4/samples.; Note, that not all keywords are supported by all backends.; Switching between ADC backends.; Psi4 currently defaults to the built-in implementation for all ADC(2) energy calculations.; You can explicitly set the QC_MODULE option to 'adcc'; enforce using adcc also for this case. Interface to adcc¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; For most implemented ADC methods PSI4 relies; on an interface to the adcc python package.; The approach of adcc is to directly diagonalise the; ADC matrix \(\mathbf{A}\) in an iterative diagonalisation; procedure, usually a Jacobi-preconditioned Davidson. Expensive parts; of the ADC matrix-vector product are precomputed and stored; in memory. This approach is general in the sense; that it can be applied to a large range of ADC methods and variants.; So far levels up to ADC(3) and CVS-ADC(3) are available; and additional approximations such as; FREEZE_CORE and NUM_FROZEN_UOCC; are supported with all ADC methods using the adcc backend.; Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:10515,Energy Efficiency,energy,energy,10515,"rage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_state.plot_spectrum() plots a broadened excited states spectrum; in matplotlib. See the adcc calculations documentation; for details. Ti",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:10549,Energy Efficiency,energy,energy,10549,"rage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_state.plot_spectrum() plots a broadened excited states spectrum; in matplotlib. See the adcc calculations documentation; for details. Ti",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:10573,Energy Efficiency,energy,energy,10573,"rage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_state.plot_spectrum() plots a broadened excited states spectrum; in matplotlib. See the adcc calculations documentation; for details. Ti",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:10592,Energy Efficiency,energy,energy,10592,"rage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_state.plot_spectrum() plots a broadened excited states spectrum; in matplotlib. See the adcc calculations documentation; for details. Ti",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:10610,Energy Efficiency,energy,energy,10610,"rage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_state.plot_spectrum() plots a broadened excited states spectrum; in matplotlib. See the adcc calculations documentation; for details. Ti",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:10638,Energy Efficiency,energy,energy,10638,"rage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_state.plot_spectrum() plots a broadened excited states spectrum; in matplotlib. See the adcc calculations documentation; for details. Ti",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:10657,Energy Efficiency,energy,energy,10657,"rage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_state.plot_spectrum() plots a broadened excited states spectrum; in matplotlib. See the adcc calculations documentation; for details. Ti",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:12426,Energy Efficiency,efficient,efficient,12426,"pectrum; in matplotlib. See the adcc calculations documentation; for details. Tips for convergence issues.; If you encounter convergence issues inside adcc, the following parameters; are worth tweaking:. MAX_NUM_VECS: Specifies the maximal number of subspace vectors; in the Jacobi-Davidson scheme before a restart occurs. The defaults are usually; good, but do not be shy to increase this value if you encounter convergence problems.; NUM_GUESSES: By default adcc uses twice as many guess vectors as; states to be computed. Sometimes increasing this value by a few vectors can be helpful.; If you encounter a convergence to zero eigenvalues, than decreasing this parameter might; solve the problems. Built-in ADC(2) code¶; Code author: Masaaki Saitow; Section author: Masaaki Saitow; The ADC code built into PSI4 is capable of ADC(2) computations; of singlet excited states only.; It makes use of the libtrans library for efficient and flexible; integral-transformation and also the libdpd library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this i",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:13312,Energy Efficiency,energy,energy,13312,"t makes use of the libtrans library for efficient and flexible; integral-transformation and also the libdpd library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for t",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:13445,Energy Efficiency,energy,energy,13445,"t makes use of the libtrans library for efficient and flexible; integral-transformation and also the libdpd library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for t",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:16713,Energy Efficiency,reduce,reduces,16713,"egin{split}\begin{pmatrix}; \mathbf{A_{SS}^{(2)}} & \mathbf{A_{SD}^{(1)}}\\; \mathbf{A_{DS}^{(1)}} & \mathbf{A_{DD}^{(0)}}; \end{pmatrix}; \begin{pmatrix}; \mathbf{X_S}\\; \mathbf{X_D}; \end{pmatrix}; =\omega; \begin{pmatrix}; \mathbf{X_S}\\; \mathbf{X_D}; \end{pmatrix}\end{split}\]; where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. \[[\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega-; \mathbf{A_{DD}^{(0)}})^{-1}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}=; \omega\mathbf{X_{S}}.\]; This form of the ADC(2) equation requires 7–10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. \[\omega^{n+1}=\omega^{n}-; \frac{\omega^n-\mathbf{X_{S}}(\omega^n)^{\dagger}; [\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^n-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}(\omega^n)}{1+\mathbf{X_{S}}; (\omega^n)^{\dagger}[\mathbf{A_{SD}^{(1)}}^{\dagger}; (\omega^n-\mathbf{A_{DD}^{(0)}})^{-2}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}; (\omega^n)}\]; the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than construction of one \(\sigma\)-vector; with respect to the effective response matrix. The non-iterative excitation energy stated; above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. \[\omega^{Non-Iterative}=; \mathbf{X_{CIS}}^{\dagger}[\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^{CIS}-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{CIS}}\]; where \(\omega^{CIS}\) and \(\mathbf{X_{CIS}}\) denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/psi4/src",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:17006,Energy Efficiency,energy,energy,17006,"SD}^{(1)}}^{\dagger}(\omega-; \mathbf{A_{DD}^{(0)}})^{-1}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}=; \omega\mathbf{X_{S}}.\]; This form of the ADC(2) equation requires 7–10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. \[\omega^{n+1}=\omega^{n}-; \frac{\omega^n-\mathbf{X_{S}}(\omega^n)^{\dagger}; [\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^n-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}(\omega^n)}{1+\mathbf{X_{S}}; (\omega^n)^{\dagger}[\mathbf{A_{SD}^{(1)}}^{\dagger}; (\omega^n-\mathbf{A_{DD}^{(0)}})^{-2}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}; (\omega^n)}\]; the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than construction of one \(\sigma\)-vector; with respect to the effective response matrix. The non-iterative excitation energy stated; above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. \[\omega^{Non-Iterative}=; \mathbf{X_{CIS}}^{\dagger}[\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^{CIS}-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{CIS}}\]; where \(\omega^{CIS}\) and \(\mathbf{X_{CIS}}\) denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/psi4/src/psi4/adc/sigma.pdf. table of contents. ADC: Ab Initio Polarization Propagator; Available ADC methods; Running ADC calculations; REFERENCE; R_CONVERGENCE; NUM_GUESSES; CUTOFF_AMPS_PRINT. Interface to adcc; Built-in ADC(2) code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; ADC: Ab Initio Polarization Propagator. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using S",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:17388,Energy Efficiency,energy,energy,17388,"ger}(\omega-; \mathbf{A_{DD}^{(0)}})^{-1}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}=; \omega\mathbf{X_{S}}.\]; This form of the ADC(2) equation requires 7–10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. \[\omega^{n+1}=\omega^{n}-; \frac{\omega^n-\mathbf{X_{S}}(\omega^n)^{\dagger}; [\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^n-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}(\omega^n)}{1+\mathbf{X_{S}}; (\omega^n)^{\dagger}[\mathbf{A_{SD}^{(1)}}^{\dagger}; (\omega^n-\mathbf{A_{DD}^{(0)}})^{-2}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}; (\omega^n)}\]; the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than construction of one \(\sigma\)-vector; with respect to the effective response matrix. The non-iterative excitation energy stated; above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. \[\omega^{Non-Iterative}=; \mathbf{X_{CIS}}^{\dagger}[\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^{CIS}-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{CIS}}\]; where \(\omega^{CIS}\) and \(\mathbf{X_{CIS}}\) denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/psi4/src/psi4/adc/sigma.pdf. table of contents. ADC: Ab Initio Polarization Propagator; Available ADC methods; Running ADC calculations; REFERENCE; R_CONVERGENCE; NUM_GUESSES; CUTOFF_AMPS_PRINT. Interface to adcc; Built-in ADC(2) code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; ADC: Ab Initio Polarization Propagator. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:2295,Integrability,depend,depend,2295,"{A}\), the eigenproblem can be written; in terms of several blocks. \[\begin{split}\begin{pmatrix}; \mathbf{A_{SS}} & \mathbf{A_{SD}}\\; \mathbf{A_{DS}} & \mathbf{A_{DD}}; \end{pmatrix}; \begin{pmatrix}; \mathbf{X_S}\\; \mathbf{X_D}; \end{pmatrix}; =\omega; \begin{pmatrix}; \mathbf{X_S}\\; \mathbf{X_D}; \end{pmatrix}\end{split}\]; where S refers to the single and D to the double excitation manifolds.; This matrix is typically sparse and thus may be diagonalised iteratively,; for example using Davidson’s method [Dreuw:2014:82]. An alternative viewpoint; has been addressed for example in [Haettig:2002], where ADC(2) is related; to other response theories such as CC2-LR, CIS(D) and CIS(D\(_n\)).; In this sense one may consider the ADC matrix the correlated response matrix; to a response problem based on CIS; and apply the simultaneous expansion method (SEM),; in which the σ-vectors (ADC matrix-vector products); are constructed several times.; The structure and order of the blocks in the equation above; depend on the ADC level employed. With this also the computational cost changes.; The key computational step, namely the formation of the matrix-vector products; scales as \({\cal O}(N^5)\) for ADC(2) and \({\cal O}(N^6)\); for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]; and the adcc theory documentation. Available ADC methods¶; Section author: Michael F. Herbst; Several ADC methods are available in PSI4 for the computation of excited states,; see ADC capabilities of Psi4.; The methods are",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:3431,Integrability,interface,interface,3431,"t changes.; The key computational step, namely the formation of the matrix-vector products; scales as \({\cal O}(N^5)\) for ADC(2) and \({\cal O}(N^6)\); for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]; and the adcc theory documentation. Available ADC methods¶; Section author: Michael F. Herbst; Several ADC methods are available in PSI4 for the computation of excited states,; see ADC capabilities of Psi4.; The methods are implemented in two distinct codes,; one is part of PSI4 itself and will be referred to as the built-in implementation,; the other is available via an interface to the adcc python module.; The two backends follow different approaches to compute ADC excited states; and as a result details and supported keywords differ.; After a more general introduction, specific aspects of the two implementations will be highlighted; in section Interface to adcc and Built-in ADC(2) code. ADC capabilities of Psi4¶. Method; Backend; References; Exc. Energies; Props; Supported values for kind keyword. ADC(1); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. built-in; RHF; yes; —; singlet. ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(3); adcc; RHF, UHF; yes; yes | any, singlet, triplet, spin_flip. CVS-ADC(1); adcc; RHF, UHF; yes; yes | any, singlet, triplet. CVS-ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:8796,Integrability,interface,interface,8796,"agonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. The full list is provided in appendix ADC; and many more sample input files can be found in the adc and adcc; subfolders of psi4/samples.; Note, that not all keywords are supported by all backends.; Switching between ADC backends.; Psi4 currently defaults to the built-in implementation for all ADC(2) energy calculations.; You can explicitly set the QC_MODULE option to 'adcc'; enforce using adcc also for this case. Interface to adcc¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; For most implemented ADC methods PSI4 relies; on an interface to the adcc python package.; The approach of adcc is to directly diagonalise the; ADC matrix \(\mathbf{A}\) in an iterative diagonalisation; procedure, usually a Jacobi-preconditioned Davidson. Expensive parts; of the ADC matrix-vector product are precomputed and stored; in memory. This approach is general in the sense; that it can be applied to a large range of ADC methods and variants.; So far levels up to ADC(3) and CVS-ADC(3) are available; and additional approximations such as; FREEZE_CORE and NUM_FROZEN_UOCC; are supported with all ADC methods using the adcc backend.; Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the me",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:10190,Integrability,interface,interface,10190,"to ADC(3) and CVS-ADC(3) are available; and additional approximations such as; FREEZE_CORE and NUM_FROZEN_UOCC; are supported with all ADC methods using the adcc backend.; Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_stat",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:13769,Integrability,depend,dependence,13769,"ions of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states.; Partial Renormalization Scheme; The built-in ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D)",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:10223,Modifiability,variab,variables,10223,"to ADC(3) and CVS-ADC(3) are available; and additional approximations such as; FREEZE_CORE and NUM_FROZEN_UOCC; are supported with all ADC methods using the adcc backend.; Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_stat",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:10465,Modifiability,variab,variable,10465,"tions,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:12440,Modifiability,flexible,flexible,12440,"pectrum; in matplotlib. See the adcc calculations documentation; for details. Tips for convergence issues.; If you encounter convergence issues inside adcc, the following parameters; are worth tweaking:. MAX_NUM_VECS: Specifies the maximal number of subspace vectors; in the Jacobi-Davidson scheme before a restart occurs. The defaults are usually; good, but do not be shy to increase this value if you encounter convergence problems.; NUM_GUESSES: By default adcc uses twice as many guess vectors as; states to be computed. Sometimes increasing this value by a few vectors can be helpful.; If you encounter a convergence to zero eigenvalues, than decreasing this parameter might; solve the problems. Built-in ADC(2) code¶; Code author: Masaaki Saitow; Section author: Masaaki Saitow; The ADC code built into PSI4 is capable of ADC(2) computations; of singlet excited states only.; It makes use of the libtrans library for efficient and flexible; integral-transformation and also the libdpd library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this i",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:14679,Modifiability,config,configurations,14679," the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states.; Partial Renormalization Scheme; The built-in ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012].; Theory of the built-in ADC(2) implementation; For the built-in ADC(2) implementation; some very essential points shall be emphasized. In ADC(2) specifically; one may write the response equation as. \[\begin{split}\begin{pmatrix}; \mathbf{A_{SS}^{(2)}} & \mathbf{A_{SD}^{(1)}}\\; \mathbf{A_{DS}^{(1)}} & \mathbf{A_{DD}^{(0)}}",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:6342,Performance,perform,performed,6342,"st important keyword argument is ROOTS_PER_IRREP,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a single; element only. For example one can run an ADC(2) calculation for 10; (singlet) excited states using:; set roots_per_irrep [10]; properties('adc(2)', properties=[""oscillator_strength""]). where the molecule section was dropped for brevity.; Selecting the excitation manifold.; To select between the possible excitation manifolds,; use the KIND keyword. For restricted references; by default only singlet excited states are computed,; corresponding to the keyword value 'singlet'.; To compute triplet states, select 'triplet'.; To compute both without making a spin distinction, select 'any'.; The latter is default for unrestricted references.; The special KIND value 'spin_flip' selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for CVS-ADC(n) methods,; see table ADC capabilities of Psi4.; Using the core-valence separation.; For tackling core-valence excitations using the CVS-ADC(n); methods, the keyword argument NUM_CORE_ORBITALS; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of 2 indicates, for example,; that the two lowest-energy \(\alpha\) and the two; lowest-energy \(\beta\) orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space.; Example: Consider furane, \(C_4H_4O\). In order to tackle; the oxygen 1s edge, i.e simulate a O 1s XAS spectrum, one may; just set NUM_CORE_ORBITALS to 1",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:9421,Performance,perform,performing,9421,"defaults to the built-in implementation for all ADC(2) energy calculations.; You can explicitly set the QC_MODULE option to 'adcc'; enforce using adcc also for this case. Interface to adcc¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; For most implemented ADC methods PSI4 relies; on an interface to the adcc python package.; The approach of adcc is to directly diagonalise the; ADC matrix \(\mathbf{A}\) in an iterative diagonalisation; procedure, usually a Jacobi-preconditioned Davidson. Expensive parts; of the ADC matrix-vector product are precomputed and stored; in memory. This approach is general in the sense; that it can be applied to a large range of ADC methods and variants.; So far levels up to ADC(3) and CVS-ADC(3) are available; and additional approximations such as; FREEZE_CORE and NUM_FROZEN_UOCC; are supported with all ADC methods using the adcc backend.; Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed.; More detailed documentation about adcc and its features can be found; at https://adc-connect.org,; especially the theory section.; If you are using adcc from PSI4 for your calculations,; please cite both PSI4 as well as adcc [Herbst2020]; in your published work.; The ADC wavefunction object.; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned Wavefunction; in case they are computed.; In the following the <method> prefix refers to the ADC method (such as adc(1),; adc(3), cvs-adc(2)-x). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excit",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:14512,Performance,perform,performing,14512,"on, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states.; Partial Renormalization Scheme; The built-in ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012].; Theory of the built-in ADC(2) implementation; For the built-in ADC(2) implementation; some very essential points shall be emphasized. In ADC(2) specifically; one may write the ",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:11373,Security,access,access,11373,"). For example excitation energies for ADC(2) are thus; available via the variable ADC(2) excitation energies. Ground state energy terms like MP2 correlation energy, MP3 correlation energy,; MP2 total energy, MP3 total energy, current correlation energy and current energy.; number of iterations: The number of iterations the iterative solver required to converge.; number of excited states: The number of excited states, which were computed.; <method> excitation energies: The obtained excitation energies as a Matrix.; MP2 dipole X and the other components: Ground state dipole moments at MP(2) level.; <method> transition dipoles, <method> oscillator strengths,; <method> rotational strengths and <method> dipoles:; The respective properties as Matrix. The following attribute is set on returned wavefunctions:. adcc_state: The adcc.ExcitedStates; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example adcc_state.plot_spectrum() plots a broadened excited states spectrum; in matplotlib. See the adcc calculations documentation; for details. Tips for convergence issues.; If you encounter convergence issues inside adcc, the following parameters; are worth tweaking:. MAX_NUM_VECS: Specifies the maximal number of subspace vectors; in the Jacobi-Davidson scheme before a restart occurs. The defaults are usually; good, but do not be shy to increase this value if you encounter convergence problems.; NUM_GUESSES: By default adcc uses twice as many guess vectors as; states to be computed. Sometimes increasing this value by a few vectors can be helpful.; If you encounter a convergence to zero eigenvalues, than decreasing this parameter might; solve the problems. Built-in ADC(2) code¶; Code author: Masaaki Saitow; Section author: Masaaki Saitow; The ADC code built into PSI4 is capable of ADC(2) computations; of singlet excited states only.; It make",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:4563,Usability,simpl,simply,4563,"supported keywords differ.; After a more general introduction, specific aspects of the two implementations will be highlighted; in section Interface to adcc and Built-in ADC(2) code. ADC capabilities of Psi4¶. Method; Backend; References; Exc. Energies; Props; Supported values for kind keyword. ADC(1); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. built-in; RHF; yes; —; singlet. ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(3); adcc; RHF, UHF; yes; yes | any, singlet, triplet, spin_flip. CVS-ADC(1); adcc; RHF, UHF; yes; yes | any, singlet, triplet. CVS-ADC(2); adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(2)-x; adcc; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(3); adcc; RHF, UHF; yes; yes; any, singlet, triplet. The leftmost column of table ADC capabilities of Psi4 provides the supported ADC methods.; If only excitation energies are desired, one can simply pass one; of the listed method strings to the function energy().; For example, energy('adc(2)-x') will compute; excitation energies at ADC(2)-x level.; Properties such as oscillator strengths, transition or state dipole moments; are available by calling the function properties(); with appropriate arguments.; Most commonly users will want to compute at least oscillator strengths; along with the excitation energies,; resulting in a call like properties('adc(2)', properties=[""oscillator_strength""]). Running ADC calculations¶; Section author: Michael F. Herbst; Running an ADC calculation with PSI4 requires; the call to properties() as discussed above; as well as one or more mandatory keyword arguments.; The most important keyword argument is ROOTS_PER_IRREP,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a si",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adc.html:16749,Usability,simpl,simple,16749,"egin{split}\begin{pmatrix}; \mathbf{A_{SS}^{(2)}} & \mathbf{A_{SD}^{(1)}}\\; \mathbf{A_{DS}^{(1)}} & \mathbf{A_{DD}^{(0)}}; \end{pmatrix}; \begin{pmatrix}; \mathbf{X_S}\\; \mathbf{X_D}; \end{pmatrix}; =\omega; \begin{pmatrix}; \mathbf{X_S}\\; \mathbf{X_D}; \end{pmatrix}\end{split}\]; where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. \[[\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega-; \mathbf{A_{DD}^{(0)}})^{-1}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}=; \omega\mathbf{X_{S}}.\]; This form of the ADC(2) equation requires 7–10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. \[\omega^{n+1}=\omega^{n}-; \frac{\omega^n-\mathbf{X_{S}}(\omega^n)^{\dagger}; [\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^n-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}(\omega^n)}{1+\mathbf{X_{S}}; (\omega^n)^{\dagger}[\mathbf{A_{SD}^{(1)}}^{\dagger}; (\omega^n-\mathbf{A_{DD}^{(0)}})^{-2}\mathbf{A_{DS}^{(1)}}]\mathbf{X_{S}}; (\omega^n)}\]; the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than construction of one \(\sigma\)-vector; with respect to the effective response matrix. The non-iterative excitation energy stated; above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. \[\omega^{Non-Iterative}=; \mathbf{X_{CIS}}^{\dagger}[\mathbf{A_{SS}^{(2)}}+; \mathbf{A_{SD}^{(1)}}^{\dagger}(\omega^{CIS}-\mathbf{A_{DD}^{(0)}})^{-1}; \mathbf{A_{DS}^{(1)}}]\mathbf{X_{CIS}}\]; where \(\omega^{CIS}\) and \(\mathbf{X_{CIS}}\) denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/psi4/src",MatchSource.WIKI,psi4manual/1.4.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:849,Availability,avail,available,849,"﻿. Interface to adcc by M. F. Herbst and M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available ",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:1237,Availability,avail,available,1237,"erbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. ",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:1571,Availability,avail,available,1571,"c-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods).",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:1780,Availability,avail,available,1780,"ils,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use PSI4 as the backend for; self-consistent field calculations and required integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) adcc; Upstream Dependencies — adcc (\(\Leftar",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:1991,Availability,avail,available,1991,"source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use PSI4 as the backend for; self-consistent field calculations and required integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) adcc; Upstream Dependencies — adcc (\(\Leftarrow\) optional) PSI4. CMake Variables. ENABLE_adcc — CMake variable toggling whether Psi4 automatically installs adcc. Examples. Build and install adcc if needed. >>> cmake -DENABLE_adcc=ON. Build without adcc. ",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:485,Deployability,configurat,configuration,485,"﻿. Interface to adcc by M. F. Herbst and M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available ",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:804,Deployability,install,installation,804,"﻿. Interface to adcc by M. F. Herbst and M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available ",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:930,Deployability,install,installation,930,"﻿. Interface to adcc by M. F. Herbst and M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available ",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:1021,Deployability,install,installed,1021,"rer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1.",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:1118,Deployability,install,install,1118,"rer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1.",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:2889,Deployability,install,installs,2889,"e adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use PSI4 as the backend for; self-consistent field calculations and required integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) adcc; Upstream Dependencies — adcc (\(\Leftarrow\) optional) PSI4. CMake Variables. ENABLE_adcc — CMake variable toggling whether Psi4 automatically installs adcc. Examples. Build and install adcc if needed. >>> cmake -DENABLE_adcc=ON. Build without adcc. >>> cmake. table of contents. Interface to adcc by M. F. Herbst and M. Scheurer; Installation; Keywords for adcc; CUTOFF_AMPS_PRINT; KIND; MAX_NUM_VECS; MAXITER; NUM_CORE_ORBITALS; NUM_GUESSES; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP. How to configure adcc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:2924,Deployability,install,install,2924,"e adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use PSI4 as the backend for; self-consistent field calculations and required integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) adcc; Upstream Dependencies — adcc (\(\Leftarrow\) optional) PSI4. CMake Variables. ENABLE_adcc — CMake variable toggling whether Psi4 automatically installs adcc. Examples. Build and install adcc if needed. >>> cmake -DENABLE_adcc=ON. Build without adcc. >>> cmake. table of contents. Interface to adcc by M. F. Herbst and M. Scheurer; Installation; Keywords for adcc; CUTOFF_AMPS_PRINT; KIND; MAX_NUM_VECS; MAXITER; NUM_CORE_ORBITALS; NUM_GUESSES; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP. How to configure adcc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:3510,Deployability,update,updated,3510,"e adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use PSI4 as the backend for; self-consistent field calculations and required integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) adcc; Upstream Dependencies — adcc (\(\Leftarrow\) optional) PSI4. CMake Variables. ENABLE_adcc — CMake variable toggling whether Psi4 automatically installs adcc. Examples. Build and install adcc if needed. >>> cmake -DENABLE_adcc=ON. Build without adcc. >>> cmake. table of contents. Interface to adcc by M. F. Herbst and M. Scheurer; Installation; Keywords for adcc; CUTOFF_AMPS_PRINT; KIND; MAX_NUM_VECS; MAXITER; NUM_CORE_ORBITALS; NUM_GUESSES; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP. How to configure adcc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:388,Integrability,interface,interface,388,"﻿. Interface to adcc by M. F. Herbst and M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available ",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:485,Modifiability,config,configuration,485,"﻿. Interface to adcc by M. F. Herbst and M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available ",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:2421,Modifiability,config,configure,2421,"ber of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use PSI4 as the backend for; self-consistent field calculations and required integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) adcc; Upstream Dependencies — adcc (\(\Leftarrow\) optional) PSI4. CMake Variables. ENABLE_adcc — CMake variable toggling whether Psi4 automatically installs adcc. Examples. Build and install adcc if needed. >>> cmake -DENABLE_adcc=ON. Build without adcc. >>> cmake. table of contents. Interface to adcc by M. F. Herbst and M. Scheurer; Installation; Keywords for adcc; CUTOFF_AMPS_PRINT; KIND; MAX_NUM_VECS; MAXITER; NUM_CORE_ORBITALS; NUM_GUESSES; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP. How to configure adcc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. He",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:2844,Modifiability,variab,variable,2844,"e adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use PSI4 as the backend for; self-consistent field calculations and required integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) adcc; Upstream Dependencies — adcc (\(\Leftarrow\) optional) PSI4. CMake Variables. ENABLE_adcc — CMake variable toggling whether Psi4 automatically installs adcc. Examples. Build and install adcc if needed. >>> cmake -DENABLE_adcc=ON. Build without adcc. >>> cmake. table of contents. Interface to adcc by M. F. Herbst and M. Scheurer; Installation; Keywords for adcc; CUTOFF_AMPS_PRINT; KIND; MAX_NUM_VECS; MAXITER; NUM_CORE_ORBITALS; NUM_GUESSES; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP. How to configure adcc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc-1.html:3240,Modifiability,config,configure,3240,"e adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use PSI4 as the backend for; self-consistent field calculations and required integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) adcc; Upstream Dependencies — adcc (\(\Leftarrow\) optional) PSI4. CMake Variables. ENABLE_adcc — CMake variable toggling whether Psi4 automatically installs adcc. Examples. Build and install adcc if needed. >>> cmake -DENABLE_adcc=ON. Build without adcc. >>> cmake. table of contents. Interface to adcc by M. F. Herbst and M. Scheurer; Installation; Keywords for adcc; CUTOFF_AMPS_PRINT; KIND; MAX_NUM_VECS; MAXITER; NUM_CORE_ORBITALS; NUM_GUESSES; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP. How to configure adcc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc-1.html
https://psicode.org/psi4manual/1.4.0/adcc.html:849,Availability,avail,available,849,"﻿. Interface to adcc by M. F. Herbst and M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available ",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/adcc.html:1237,Availability,avail,available,1237,"erbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. ",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/adcc.html:1571,Availability,avail,available,1571,"c-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods).",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/adcc.html:1780,Availability,avail,available,1780,"ils,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use PSI4 as the backend for; self-consistent field calculations and required integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) adcc; Upstream Dependencies — adcc (\(\Leftar",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/adcc.html:1991,Availability,avail,available,1991,"source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use PSI4 as the backend for; self-consistent field calculations and required integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) adcc; Upstream Dependencies — adcc (\(\Leftarrow\) optional) PSI4. CMake Variables. ENABLE_adcc — CMake variable toggling whether Psi4 automatically installs adcc. Examples. Build and install adcc if needed. >>> cmake -DENABLE_adcc=ON. Build without adcc. ",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/adcc.html:485,Deployability,configurat,configuration,485,"﻿. Interface to adcc by M. F. Herbst and M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available ",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/adcc.html:804,Deployability,install,installation,804,"﻿. Interface to adcc by M. F. Herbst and M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available ",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/adcc.html:930,Deployability,install,installation,930,"﻿. Interface to adcc by M. F. Herbst and M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available ",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/adcc.html:1021,Deployability,install,installed,1021,"rer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1.",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/adcc.html:1118,Deployability,install,install,1118,"rer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1.",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/adcc.html:2889,Deployability,install,installs,2889,"e adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use PSI4 as the backend for; self-consistent field calculations and required integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) adcc; Upstream Dependencies — adcc (\(\Leftarrow\) optional) PSI4. CMake Variables. ENABLE_adcc — CMake variable toggling whether Psi4 automatically installs adcc. Examples. Build and install adcc if needed. >>> cmake -DENABLE_adcc=ON. Build without adcc. >>> cmake. table of contents. Interface to adcc by M. F. Herbst and M. Scheurer; Installation; Keywords for adcc; CUTOFF_AMPS_PRINT; KIND; MAX_NUM_VECS; MAXITER; NUM_CORE_ORBITALS; NUM_GUESSES; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP. How to configure adcc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/adcc.html:2924,Deployability,install,install,2924,"e adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use PSI4 as the backend for; self-consistent field calculations and required integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) adcc; Upstream Dependencies — adcc (\(\Leftarrow\) optional) PSI4. CMake Variables. ENABLE_adcc — CMake variable toggling whether Psi4 automatically installs adcc. Examples. Build and install adcc if needed. >>> cmake -DENABLE_adcc=ON. Build without adcc. >>> cmake. table of contents. Interface to adcc by M. F. Herbst and M. Scheurer; Installation; Keywords for adcc; CUTOFF_AMPS_PRINT; KIND; MAX_NUM_VECS; MAXITER; NUM_CORE_ORBITALS; NUM_GUESSES; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP. How to configure adcc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/adcc.html:3510,Deployability,update,updated,3510,"e adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use PSI4 as the backend for; self-consistent field calculations and required integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) adcc; Upstream Dependencies — adcc (\(\Leftarrow\) optional) PSI4. CMake Variables. ENABLE_adcc — CMake variable toggling whether Psi4 automatically installs adcc. Examples. Build and install adcc if needed. >>> cmake -DENABLE_adcc=ON. Build without adcc. >>> cmake. table of contents. Interface to adcc by M. F. Herbst and M. Scheurer; Installation; Keywords for adcc; CUTOFF_AMPS_PRINT; KIND; MAX_NUM_VECS; MAXITER; NUM_CORE_ORBITALS; NUM_GUESSES; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP. How to configure adcc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/adcc.html:388,Integrability,interface,interface,388,"﻿. Interface to adcc by M. F. Herbst and M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available ",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/adcc.html:485,Modifiability,config,configuration,485,"﻿. Interface to adcc by M. F. Herbst and M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. Interface to adcc by M. F. Herbst and M. Scheurer¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; Module: Keywords, PSI Variables. PSI4 contains code to interface to the adcc python module developed; by M. F. Herbst et. al.. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in PSI4. For more details on ADC methods,; see ADC: Ab Initio Polarization Propagator. Installation¶; For up to date information and more details,; see the adcc installation documentation.; Binary. adcc is available as a conda package for Linux and macOS; and on pypi. To remove a conda installation, conda remove adcc. Source. If using PSI4 built from source and you want adcc installed as well,; enable it as a feature with ENABLE_adcc,; and let the build system fetch and install it. Keywords for adcc¶. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available ",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/adcc.html:2421,Modifiability,config,configure,2421,"ber of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use PSI4 as the backend for; self-consistent field calculations and required integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) adcc; Upstream Dependencies — adcc (\(\Leftarrow\) optional) PSI4. CMake Variables. ENABLE_adcc — CMake variable toggling whether Psi4 automatically installs adcc. Examples. Build and install adcc if needed. >>> cmake -DENABLE_adcc=ON. Build without adcc. >>> cmake. table of contents. Interface to adcc by M. F. Herbst and M. Scheurer; Installation; Keywords for adcc; CUTOFF_AMPS_PRINT; KIND; MAX_NUM_VECS; MAXITER; NUM_CORE_ORBITALS; NUM_GUESSES; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP. How to configure adcc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. He",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/adcc.html:2844,Modifiability,variab,variable,2844,"e adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use PSI4 as the backend for; self-consistent field calculations and required integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) adcc; Upstream Dependencies — adcc (\(\Leftarrow\) optional) PSI4. CMake Variables. ENABLE_adcc — CMake variable toggling whether Psi4 automatically installs adcc. Examples. Build and install adcc if needed. >>> cmake -DENABLE_adcc=ON. Build without adcc. >>> cmake. table of contents. Interface to adcc by M. F. Herbst and M. Scheurer; Installation; Keywords for adcc; CUTOFF_AMPS_PRINT; KIND; MAX_NUM_VECS; MAXITER; NUM_CORE_ORBITALS; NUM_GUESSES; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP. How to configure adcc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/adcc.html:3240,Modifiability,config,configure,3240,"e adcc backend. Type: integer; Default: -1. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. How to configure adcc for building Psi4¶; Role and Dependencies. Role — In PSI4, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use PSI4 as the backend for; self-consistent field calculations and required integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) adcc; Upstream Dependencies — adcc (\(\Leftarrow\) optional) PSI4. CMake Variables. ENABLE_adcc — CMake variable toggling whether Psi4 automatically installs adcc. Examples. Build and install adcc if needed. >>> cmake -DENABLE_adcc=ON. Build without adcc. >>> cmake. table of contents. Interface to adcc by M. F. Herbst and M. Scheurer; Installation; Keywords for adcc; CUTOFF_AMPS_PRINT; KIND; MAX_NUM_VECS; MAXITER; NUM_CORE_ORBITALS; NUM_GUESSES; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP. How to configure adcc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to adcc by M. F. Herbst and M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adcc.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:2440,Availability,error,error,2440,"2 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:3479,Availability,error,error,3479,"sage and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:4621,Availability,failure,failure,4621,"add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:4458,Deployability,install,installed,4458,"of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) ra",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:6186,Deployability,update,updated,6186,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:1295,Energy Efficiency,energy,energy,1295,"irst is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, mat",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:1638,Energy Efficiency,energy,energy,1638,"should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:1732,Energy Efficiency,energy,energy,1732,"for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:1800,Energy Efficiency,energy,energy,1800,"for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:1866,Energy Efficiency,energy,energy,1866,"for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:1890,Energy Efficiency,energy,energy,1890,"for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:2850,Energy Efficiency,energy,energy,2850,"difications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:3333,Energy Efficiency,energy,energy,3333,"l relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you pr",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:2446,Integrability,message,message,2446,"2 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:2172,Modifiability,variab,variables,2172,"ile itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:5350,Modifiability,parameteriz,parameterized,5350,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:5710,Modifiability,parameteriz,parameterized,5710,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:2577,Security,validat,validation,2577,"rgy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pyt",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:169,Testability,test,test,169,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:208,Testability,test,tests,208,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:373,Testability,test,test,373,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:544,Testability,test,test-labels,544,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:594,Testability,test,tests,594,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:612,Testability,test,test,612,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:686,Testability,test,test-specific,686,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:712,Testability,test,tested,712,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:788,Testability,test,test,788,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:846,Testability,test,tests,846,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:903,Testability,test,test,903,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:971,Testability,test,test,971,"ng PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! commen",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:1055,Testability,test,test,1055," · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:1248,Testability,test,test,1248,"t spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:2282,Testability,test,testing,2282," the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser t",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:2475,Testability,test,test,2475,"2 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:2700,Testability,test,tests,2700,"rgy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pyt",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:2780,Testability,test,tests,2780,"y, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:2794,Testability,test,tests,2794,"y, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:2834,Testability,test,test,2834,"difications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:3126,Testability,test,test,3126,"(unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:3274,Testability,test,test,3274,"l relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you pr",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:3411,Testability,test,tests,3411,"sage and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:3474,Testability,test,test,3474,"sage and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:3592,Testability,test,test,3592,"rocess should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add a",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:3623,Testability,test,tests,3623,"rocess should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add a",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:3682,Testability,test,tests,3682,"mples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:3713,Testability,test,tests,3713,"mples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:3993,Testability,test,test,3993,"e convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. T",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:4231,Testability,test,test,4231,"set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:4362,Testability,test,tests,4362,"API Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:4478,Testability,test,test,4478,"of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) ra",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:4568,Testability,test,test,4568,"add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:4589,Testability,assert,assert,4589,"add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:4999,Testability,test,tests,4999,"; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding Psi",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:5132,Testability,test,tests,5132,"PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Addi",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:5161,Testability,test,test,5161," will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Pro",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:5247,Testability,test,test,5247,"probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created us",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:5331,Testability,test,tests,5331,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:5364,Testability,test,tests,5364,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:5578,Testability,test,tests,5578,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:5677,Testability,test,test,5677,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:5724,Testability,test,test,5724,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:5751,Testability,test,test,5751,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:5800,Testability,test,tests,5800,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:1219,Usability,simpl,simple,1219,"t spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests-1.html:4087,Usability,simpl,simple,4087,"e convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. T",MatchSource.WIKI,psi4manual/1.4.0/add_tests-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:2440,Availability,error,error,2440,"2 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:3479,Availability,error,error,3479,"sage and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:4621,Availability,failure,failure,4621,"add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:4458,Deployability,install,installed,4458,"of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) ra",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:6186,Deployability,update,updated,6186,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:1295,Energy Efficiency,energy,energy,1295,"irst is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, mat",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:1638,Energy Efficiency,energy,energy,1638,"should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:1732,Energy Efficiency,energy,energy,1732,"for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:1800,Energy Efficiency,energy,energy,1800,"for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:1866,Energy Efficiency,energy,energy,1866,"for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:1890,Energy Efficiency,energy,energy,1890,"for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:2850,Energy Efficiency,energy,energy,2850,"difications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:3333,Energy Efficiency,energy,energy,3333,"l relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you pr",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:2446,Integrability,message,message,2446,"2 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:2172,Modifiability,variab,variables,2172,"ile itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:5350,Modifiability,parameteriz,parameterized,5350,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:5710,Modifiability,parameteriz,parameterized,5710,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:2577,Security,validat,validation,2577,"rgy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pyt",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:169,Testability,test,test,169,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:208,Testability,test,tests,208,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:373,Testability,test,test,373,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:544,Testability,test,test-labels,544,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:594,Testability,test,tests,594,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:612,Testability,test,test,612,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:686,Testability,test,test-specific,686,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:712,Testability,test,tested,712,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:788,Testability,test,test,788,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:846,Testability,test,tests,846,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:903,Testability,test,test,903,"﻿. Adding PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:971,Testability,test,test,971,"ng PSIthon Test Cases. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! commen",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:1055,Testability,test,test,1055," · . PSI4. Adding PSIthon Test Cases. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests. Use hyphens, not spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:1248,Testability,test,test,1248,"t spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:2282,Testability,test,testing,2282," the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser t",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:2475,Testability,test,test,2475,"2 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:2700,Testability,test,tests,2700,"rgy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pyt",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:2780,Testability,test,tests,2780,"y, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:2794,Testability,test,tests,2794,"y, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:2834,Testability,test,test,2834,"difications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:3126,Testability,test,test,3126,"(unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:3274,Testability,test,test,3274,"l relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you pr",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:3411,Testability,test,tests,3411,"sage and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:3474,Testability,test,test,3474,"sage and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:3592,Testability,test,test,3592,"rocess should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add a",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:3623,Testability,test,tests,3623,"rocess should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add a",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:3682,Testability,test,tests,3682,"mples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:3713,Testability,test,tests,3713,"mples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:3993,Testability,test,test,3993,"e convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. T",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:4231,Testability,test,test,4231,"set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:4362,Testability,test,tests,4362,"API Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:4478,Testability,test,test,4478,"of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) ra",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:4568,Testability,test,test,4568,"add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:4589,Testability,assert,assert,4589,"add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:4999,Testability,test,tests,4999,"; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding Psi",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:5132,Testability,test,tests,5132,"PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Addi",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:5161,Testability,test,test,5161," will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Pro",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:5247,Testability,test,test,5247,"probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created us",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:5331,Testability,test,tests,5331,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:5364,Testability,test,tests,5364,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:5578,Testability,test,tests,5578,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:5677,Testability,test,test,5677,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:5724,Testability,test,test,5724,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:5751,Testability,test,test,5751,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:5800,Testability,test,tests,5800,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:1219,Usability,simpl,simple,1219,"t spaces or underscores, in the directory name. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/add_tests.html:4087,Usability,simpl,simple,4087,"e convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. T",MatchSource.WIKI,psi4manual/1.4.0/add_tests.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests.html
https://psicode.org/psi4manual/1.4.0/appendices-1.html:1340,Deployability,update,updated,1340,"﻿. Appendices. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices. Appendices¶. Keywords¶. Keywords by Alpha; Keywords by Module; GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCTRANSORT; CCTRIPLES; CFOUR; CPHF; DCT; DETCI; DFEP2; DFMP2; DFOCC; DMRG; EFP; FINDIF; FISAPT; FNOCC; GDMA; MCSCF; MINTS; MRCC; OCC; OPTKING; PCM; PE; PSIMRCC; SAPT; SCF; THERMO. Basis Sets¶. Basis Sets by Family; Basis Sets by Element; Auxiliary Basis Sets. PSI Variables¶. PSI Variables by Alpha; PSI Variables by Module; ADC; CCENERGY; DCT; DETCI; DFMP2; DFOCC; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; OPTKING; PCM; PE; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. Miscellaneous¶. Test Suite and Sample Inputs; ADCC; BRIANQC; CFOUR; CHEMPS2; COOKBOOK; DFTD3; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. DFT Functionals; All Available; GGA; Meta; Long-Range Corrected; Hybrid; Double-Hybrid; SCS Double-Hybrid; Dispersion-Corrected. PSIOH Intermediate Files; Physical Constants; Bibliography. table of contents. Appendices; Keywords; Basis Sets; PSI Variables; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/appendices-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/appendices-1.html
https://psicode.org/psi4manual/1.4.0/appendices.html:1340,Deployability,update,updated,1340,"﻿. Appendices. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices. Appendices¶. Keywords¶. Keywords by Alpha; Keywords by Module; GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCTRANSORT; CCTRIPLES; CFOUR; CPHF; DCT; DETCI; DFEP2; DFMP2; DFOCC; DMRG; EFP; FINDIF; FISAPT; FNOCC; GDMA; MCSCF; MINTS; MRCC; OCC; OPTKING; PCM; PE; PSIMRCC; SAPT; SCF; THERMO. Basis Sets¶. Basis Sets by Family; Basis Sets by Element; Auxiliary Basis Sets. PSI Variables¶. PSI Variables by Alpha; PSI Variables by Module; ADC; CCENERGY; DCT; DETCI; DFMP2; DFOCC; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; OPTKING; PCM; PE; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. Miscellaneous¶. Test Suite and Sample Inputs; ADCC; BRIANQC; CFOUR; CHEMPS2; COOKBOOK; DFTD3; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. DFT Functionals; All Available; GGA; Meta; Long-Range Corrected; Hybrid; Double-Hybrid; SCS Double-Hybrid; Dispersion-Corrected. PSIOH Intermediate Files; Physical Constants; Bibliography. table of contents. Appendices; Keywords; Basis Sets; PSI Variables; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/appendices.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/appendices.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:12323,Availability,error,error,12323,"tabase_group/database_therm_bh/raw_geom.cgi (broken link).; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. JSCH¶. Database (Hobza) of interaction energies for nucelobase pairs.; Geometries and reference interaction energies from Jurecka et al. PCCP 8 1985 (2006).; Corrections implemented from footnote 92 of Burns et al., JCP 134 084107 (2011). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'HB' hydrogen-bonded systems (coplanar base-pairs); 'MX' interstrand systems (adjacent base-pairs on different strands); 'DD' stacked systems (adjacent base-pairs on same strand). S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 1; …; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 22. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmar",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:14577,Deployability,update,updated,14577,"dissociation curve for molecule 22. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NBC10; HTR40; S66; NHTBH; O24by5; BAKERJCC96; S22; RGC10; HBC6; HTBH; JSCH; S22by5; ACENES; HSG; NCB31. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(); A24. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:1865,Energy Efficiency,energy,energy,1865,"ation energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:14065,Energy Efficiency,charge,charge-transfer,14065,"dissociation curve for molecule 22. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NBC10; HTR40; S66; NHTBH; O24by5; BAKERJCC96; S22; RGC10; HBC6; HTBH; JSCH; S22by5; ACENES; HSG; NCB31. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(); A24. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:4784,Performance,optimiz,optimize,4784,"0043793.; Variant with ghosted hydrogen as midbonds in the COM. no | name | subset. 1 | CN - He | DD; 2 | NH - He | DD; 3 | C2H3 - C2H4 | DD; 4 | O2 - H2 | DD; 5 | NH - Ar | DD; 6 | CN - Ar | DD; 7 | O2 - N2 | DD; 8 | H2O - O2(sp) | DD; 9 | O2 - O2 | DD. 10 | NH - NH | ED; 11 | CH2O - NH2 | ED; 12 | H2O - Na | ED; 13 | H2O - OH | ED; 14 | H2O - O2H | ED; 15 | Li - NH3(gm) | ED; 16 | Li - O2 | MX; 17 | CN - H2 | MX; 18 | Li - NH3(lm) | MX; 19 | H2O - O2(gm) | MX; 20 | Na - Li | MX; 21 | CO2 - O2 | MX; 22 | C2H3 - CO2 | MX; 23 | He* - He* | MX; 24 | HF - CO+ | MX. cp 'on'; subset; - 'DD' dispersion-dominated systems; - 'ED' electrostatically-dominated systems; - 'MX' mixed-interaction systems. BBI¶. Database (Merz) of protein backbone-backbone interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from Sherrill group, Georgia Tech.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'NBC100' Burns et al. JCP 134 0",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:476,Testability,benchmark,benchmark,476,"﻿. A24. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(); A24. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:947,Testability,benchmark,benchmark,947,"﻿. A24. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(); A24. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:1586,Testability,benchmark,benchmark,1586,"nce>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part o",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:1959,Testability,benchmark,benchmark,1959,"2' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:2628,Testability,test,testing,2628,"me>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve dispersion-dominated systems. O24by5mb¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:5723,Testability,benchmark,benchmark,5723," rlxd 'off'. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'NBC100' Burns et al. JCP 134 084107 (2011).; \(\Rightarrow\) 'NBC10A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchm",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:6637,Testability,benchmark,benchmark,6637,"NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'NBC100' Burns et al. JCP 134 084107 (2011).; \(\Rightarrow\) 'NBC10A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm (broken link). cp 'off'; rlxd 'off'; subset. 'small'; 'large'. O24by5¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x5/-/tree/4ec3cae0546b6ae4f4f2cf28482cd164c8",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:8964,Testability,benchmark,benchmark,8964,"p) | DD; 9 | O2 - O2 | DD. 10 | NH - NH | ED; 11 | CH2O - NH2 | ED; 12 | H2O - Na | ED; 13 | H2O - OH | ED; 14 | H2O - O2H | ED; 15 | Li - NH3(gm) | ED; 16 | Li - O2 | MX; 17 | CN - H2 | MX; 18 | Li - NH3(lm) | MX; 19 | H2O - O2(gm) | MX; 20 | Na - Li | MX; 21 | CO2 - O2 | MX; 22 | C2H3 - CO2 | MX; 23 | He* - He* | MX; 24 | HF - CO+ | MX. cp 'on'; subset; - 'DD' dispersion-dominated systems; - 'ED' electrostatically-dominated systems; - 'MX' mixed-interaction systems. BAKERJCC96¶. Geometries from Baker and Chan J. Comput. Chem. 17 888 (1996),. as reported in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002). No reference energies defined. cp 'off'; rlxd 'off'. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; \(\Rightarrow\) 'S22B' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation c",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:10564,Testability,benchmark,benchmark,10564,"18 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; \(\Rightarrow\) 'HBC6A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset. 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOFaOO' dissociation curve for formic acid dimer; 'FaONFaON' dissociation curve for formamide dimer; 'FaNNFaNN' dissociation curve for formamidine dimer; 'FaOOFaON' dissociation curve for formic acid- formamide complex; 'FaONFaNN' dissociation curve for formamide- formamidine complex; 'FaOOFaNN' dissociation curve for formic acid- formamidine complex. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi (broken link).; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset. 'small'; 'large",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:13322,Testability,benchmark,benchmark,13322,"l round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 1; …; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 22. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NBC10; HTR40; S66; NHTBH; O24by5; BAKERJCC96; S22; RGC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:13857,Testability,benchmark,benchmark,13857,"dissociation curve for molecule 22. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NBC10; HTR40; S66; NHTBH; O24by5; BAKERJCC96; S22; RGC10; HBC6; HTBH; JSCH; S22by5; ACENES; HSG; NCB31. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(); A24. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:2599,Usability,simpl,simple,2599,"me>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve dispersion-dominated systems. O24by5mb¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html:12323,Availability,error,error,12323,"tabase_group/database_therm_bh/raw_geom.cgi (broken link).; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. JSCH¶. Database (Hobza) of interaction energies for nucelobase pairs.; Geometries and reference interaction energies from Jurecka et al. PCCP 8 1985 (2006).; Corrections implemented from footnote 92 of Burns et al., JCP 134 084107 (2011). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'HB' hydrogen-bonded systems (coplanar base-pairs); 'MX' interstrand systems (adjacent base-pairs on different strands); 'DD' stacked systems (adjacent base-pairs on same strand). S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 1; …; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 22. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmar",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html:14577,Deployability,update,updated,14577,"dissociation curve for molecule 22. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NBC10; HTR40; S66; NHTBH; O24by5; BAKERJCC96; S22; RGC10; HBC6; HTBH; JSCH; S22by5; ACENES; HSG; NCB31. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(); A24. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html:1865,Energy Efficiency,energy,energy,1865,"ation energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html:14065,Energy Efficiency,charge,charge-transfer,14065,"dissociation curve for molecule 22. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NBC10; HTR40; S66; NHTBH; O24by5; BAKERJCC96; S22; RGC10; HBC6; HTBH; JSCH; S22by5; ACENES; HSG; NCB31. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(); A24. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html:4784,Performance,optimiz,optimize,4784,"0043793.; Variant with ghosted hydrogen as midbonds in the COM. no | name | subset. 1 | CN - He | DD; 2 | NH - He | DD; 3 | C2H3 - C2H4 | DD; 4 | O2 - H2 | DD; 5 | NH - Ar | DD; 6 | CN - Ar | DD; 7 | O2 - N2 | DD; 8 | H2O - O2(sp) | DD; 9 | O2 - O2 | DD. 10 | NH - NH | ED; 11 | CH2O - NH2 | ED; 12 | H2O - Na | ED; 13 | H2O - OH | ED; 14 | H2O - O2H | ED; 15 | Li - NH3(gm) | ED; 16 | Li - O2 | MX; 17 | CN - H2 | MX; 18 | Li - NH3(lm) | MX; 19 | H2O - O2(gm) | MX; 20 | Na - Li | MX; 21 | CO2 - O2 | MX; 22 | C2H3 - CO2 | MX; 23 | He* - He* | MX; 24 | HF - CO+ | MX. cp 'on'; subset; - 'DD' dispersion-dominated systems; - 'ED' electrostatically-dominated systems; - 'MX' mixed-interaction systems. BBI¶. Database (Merz) of protein backbone-backbone interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from Sherrill group, Georgia Tech.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'NBC100' Burns et al. JCP 134 0",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html:476,Testability,benchmark,benchmark,476,"﻿. A24. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(); A24. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html:947,Testability,benchmark,benchmark,947,"﻿. A24. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(); A24. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html:1586,Testability,benchmark,benchmark,1586,"nce>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part o",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html:1959,Testability,benchmark,benchmark,1959,"2' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html:2628,Testability,test,testing,2628,"me>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve dispersion-dominated systems. O24by5mb¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html:5723,Testability,benchmark,benchmark,5723," rlxd 'off'. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'NBC100' Burns et al. JCP 134 084107 (2011).; \(\Rightarrow\) 'NBC10A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchm",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html:6637,Testability,benchmark,benchmark,6637,"NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'NBC100' Burns et al. JCP 134 084107 (2011).; \(\Rightarrow\) 'NBC10A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm (broken link). cp 'off'; rlxd 'off'; subset. 'small'; 'large'. O24by5¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x5/-/tree/4ec3cae0546b6ae4f4f2cf28482cd164c8",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html:8964,Testability,benchmark,benchmark,8964,"p) | DD; 9 | O2 - O2 | DD. 10 | NH - NH | ED; 11 | CH2O - NH2 | ED; 12 | H2O - Na | ED; 13 | H2O - OH | ED; 14 | H2O - O2H | ED; 15 | Li - NH3(gm) | ED; 16 | Li - O2 | MX; 17 | CN - H2 | MX; 18 | Li - NH3(lm) | MX; 19 | H2O - O2(gm) | MX; 20 | Na - Li | MX; 21 | CO2 - O2 | MX; 22 | C2H3 - CO2 | MX; 23 | He* - He* | MX; 24 | HF - CO+ | MX. cp 'on'; subset; - 'DD' dispersion-dominated systems; - 'ED' electrostatically-dominated systems; - 'MX' mixed-interaction systems. BAKERJCC96¶. Geometries from Baker and Chan J. Comput. Chem. 17 888 (1996),. as reported in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002). No reference energies defined. cp 'off'; rlxd 'off'. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; \(\Rightarrow\) 'S22B' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation c",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html:10564,Testability,benchmark,benchmark,10564,"18 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; \(\Rightarrow\) 'HBC6A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset. 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOFaOO' dissociation curve for formic acid dimer; 'FaONFaON' dissociation curve for formamide dimer; 'FaNNFaNN' dissociation curve for formamidine dimer; 'FaOOFaON' dissociation curve for formic acid- formamide complex; 'FaONFaNN' dissociation curve for formamide- formamidine complex; 'FaOOFaNN' dissociation curve for formic acid- formamidine complex. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi (broken link).; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset. 'small'; 'large",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html:13322,Testability,benchmark,benchmark,13322,"l round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 1; …; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 22. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NBC10; HTR40; S66; NHTBH; O24by5; BAKERJCC96; S22; RGC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html:13857,Testability,benchmark,benchmark,13857,"dissociation curve for molecule 22. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NBC10; HTR40; S66; NHTBH; O24by5; BAKERJCC96; S22; RGC10; HBC6; HTBH; JSCH; S22by5; ACENES; HSG; NCB31. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(); A24. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html:2599,Usability,simpl,simple,2599,"me>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve dispersion-dominated systems. O24by5mb¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_efpfrag-1.html:403,Deployability,update,updated,403,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to LIBEFP by I. Kaliman; <no title>. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to LIBEFP by I. Kaliman; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_efpfrag-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_efpfrag-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_available_efpfrag.html:403,Deployability,update,updated,403,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to LIBEFP by I. Kaliman; <no title>. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to LIBEFP by I. Kaliman; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_available_efpfrag.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_efpfrag.html
https://psicode.org/psi4manual/1.4.0/autodoc_basissets_byfamily-1.html:20805,Deployability,update,updated,20805,"aug-pcSseg-3; aug-pcsseg-3; def2-universal-jkfit; def2-qzvppd-ri; pcseg-0. aug-pcSseg-4; aug-pcsseg-4; aug-cc-pv5z-jkfit; aug-cc-pwcv5z-ri; pcseg-0. pcseg-0; pcseg-0; def2-universal-jkfit; def2-sv_p_-ri; —. pcseg-1; pcseg-1; def2-universal-jkfit; def2-svp-ri; pcseg-0. pcseg-2; pcseg-2; def2-universal-jkfit; def2-tzvpp-ri; pcseg-0. pcseg-3; pcseg-3; def2-universal-jkfit; def2-qzvpp-ri; pcseg-0. pcseg-4; pcseg-4; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. pcSseg-0; pcsseg-0; def2-universal-jkfit; def2-sv_p_-ri; pcseg-0. pcSseg-1; pcsseg-1; def2-universal-jkfit; def2-svp-ri; pcseg-0. pcSseg-2; pcsseg-2; def2-universal-jkfit; def2-tzvpp-ri; pcseg-0. pcSseg-3; pcsseg-3; def2-universal-jkfit; def2-qzvpp-ri; pcseg-0. pcSseg-4; pcsseg-4; cc-pv5z-jkfit; cc-pwcv5z-ri; pcseg-0. minix; minix; def2-universal-jkfit; def2-svp-ri; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; dgauss-dzvp-mix; dgauss-dzvp-autoaux; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. 2zapa-nr; 2zapa-nr; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; pcseg-0. 3zapa-nr; 3zapa-nr; aug-cc-pvqz-jkfit; aug-cc-pvqz-ri; pcseg-0. 4zapa-nr; 4zapa-nr; aug-cc-pv5z-jkfit; aug-cc-pv5z-ri; pcseg-0. 5zapa-nr; 5zapa-nr; aug-cc-pv5z-jkfit; aug-cc-pv6z-ri; pcseg-0. 6zapa-nr; 6zapa-nr; aug-cc-pv6z-ri; aug-cc-pv6z-ri; pcseg-0. 7zapa-nr; 7zapa-nr; aug-cc-pv6z-ri; aug-cc-pv6z-ri; pcseg-0. cc-pvqz-f12; cc-pvqz-f12; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. cc-pvtz-f12; cc-pvtz-f12; cc-pvqz-jkfit; cc-pvqz-ri; pcseg-0. cc-pvqz-f12; cc-pvqz-f12; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; Auxiliary Basis Sets; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_basissets_byfamily-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_basissets_byfamily-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_basissets_byfamily.html:20805,Deployability,update,updated,20805,"aug-pcSseg-3; aug-pcsseg-3; def2-universal-jkfit; def2-qzvppd-ri; pcseg-0. aug-pcSseg-4; aug-pcsseg-4; aug-cc-pv5z-jkfit; aug-cc-pwcv5z-ri; pcseg-0. pcseg-0; pcseg-0; def2-universal-jkfit; def2-sv_p_-ri; —. pcseg-1; pcseg-1; def2-universal-jkfit; def2-svp-ri; pcseg-0. pcseg-2; pcseg-2; def2-universal-jkfit; def2-tzvpp-ri; pcseg-0. pcseg-3; pcseg-3; def2-universal-jkfit; def2-qzvpp-ri; pcseg-0. pcseg-4; pcseg-4; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. pcSseg-0; pcsseg-0; def2-universal-jkfit; def2-sv_p_-ri; pcseg-0. pcSseg-1; pcsseg-1; def2-universal-jkfit; def2-svp-ri; pcseg-0. pcSseg-2; pcsseg-2; def2-universal-jkfit; def2-tzvpp-ri; pcseg-0. pcSseg-3; pcsseg-3; def2-universal-jkfit; def2-qzvpp-ri; pcseg-0. pcSseg-4; pcsseg-4; cc-pv5z-jkfit; cc-pwcv5z-ri; pcseg-0. minix; minix; def2-universal-jkfit; def2-svp-ri; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; dgauss-dzvp-mix; dgauss-dzvp-autoaux; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. 2zapa-nr; 2zapa-nr; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; pcseg-0. 3zapa-nr; 3zapa-nr; aug-cc-pvqz-jkfit; aug-cc-pvqz-ri; pcseg-0. 4zapa-nr; 4zapa-nr; aug-cc-pv5z-jkfit; aug-cc-pv5z-ri; pcseg-0. 5zapa-nr; 5zapa-nr; aug-cc-pv5z-jkfit; aug-cc-pv6z-ri; pcseg-0. 6zapa-nr; 6zapa-nr; aug-cc-pv6z-ri; aug-cc-pv6z-ri; pcseg-0. 7zapa-nr; 7zapa-nr; aug-cc-pv6z-ri; aug-cc-pv6z-ri; pcseg-0. cc-pvqz-f12; cc-pvqz-f12; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. cc-pvtz-f12; cc-pvtz-f12; cc-pvqz-jkfit; cc-pvqz-ri; pcseg-0. cc-pvqz-f12; cc-pvqz-f12; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; Auxiliary Basis Sets; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_basissets_byfamily.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_basissets_byfamily.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_all-1.html:140,Availability,avail,available,140,﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. DFT functionals available in PSI4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B1LYP; B1LYP Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; —; —. B1LYP-D3BJ; B1LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; Y. B1PW91; B1PW91 Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; —; —. B1WC; B1WC Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.160000; —; —; —; —; —. B2GPPLYP; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; —; —. B2GPPLYP-D3BJ; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; Y. B2GPPLYP-NL; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; —; —. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; Y. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; Y. B2PLYP-NL; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B3LYP; B3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-D3BJ; B3LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; Y. B3LYP-D3MBJ; B3LYP-d3mbj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; Y. B3LYP-NL; B3LYP-nl Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP5; B3LYP5 Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYPS; B3LYPs Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.150000; —; —; —; —; —. B3P86; B3P86 Hyb-GGA Exchange-Correlation Functional; Y; —; —,MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_all-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_all-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_all-1.html:24609,Deployability,update,updated,24609," VV10; VV10 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. WB97; wB97 GGA Exchange-Correlation Functional; Y; —; 0.400000; —; —; —; —; —; —. WB97M-D3BJ; wB97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; 0.300000; 0.150000; —; —; —; Y. WB97M-V; wB97M-V Hyb-GGA Exchange-Correlation Functional; Y; Y; 0.300000; 0.150000; —; —; —; —; —. WB97X; wB97X Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.157706; —; —; —; —; —. WB97X-D; wB97X-D Hyb-GGA Exchange-Correlation Functional; Y; —; 0.200000; 0.222036; —; —; —; Y. WB97X-D3; wB97X-D3 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.250000; 0.195728; —; —; —; Y. WB97X-D3BJ; wB97X-V with D3(BJ) instead of VV10 dispersion; Y; —; 0.300000; 0.167000; —; —; —; Y. WB97X-V; wB97X-V Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.167000; —; —; —; —; —. WPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. WPBE-D3BJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE-D3MBJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. X1B95; X1B95 Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.300000; —; —; —; —; —. X3LYP; X3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.218000; —; —; —; —; —. X3LYP-D3BJ; X3LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.218000; —; —; —; Y. XB1K; XB1K Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.430000; —; —; —; —; —. XLYP; XLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. XLYP-D3BJ; XLYP-d3bj GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. ZLP; ZLP GGA Exchange-Correlation Functional; Y; Y; —; —; —; —; —; —; —. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_all-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_all-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_all.html:140,Availability,avail,available,140,﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. DFT functionals available in PSI4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B1LYP; B1LYP Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; —; —. B1LYP-D3BJ; B1LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; Y. B1PW91; B1PW91 Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; —; —. B1WC; B1WC Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.160000; —; —; —; —; —. B2GPPLYP; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; —; —. B2GPPLYP-D3BJ; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; Y. B2GPPLYP-NL; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; —; —. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; Y. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; Y. B2PLYP-NL; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B3LYP; B3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-D3BJ; B3LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; Y. B3LYP-D3MBJ; B3LYP-d3mbj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; Y. B3LYP-NL; B3LYP-nl Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP5; B3LYP5 Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYPS; B3LYPs Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.150000; —; —; —; —; —. B3P86; B3P86 Hyb-GGA Exchange-Correlation Functional; Y; —; —,MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_all.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_all.html:24609,Deployability,update,updated,24609," VV10; VV10 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. WB97; wB97 GGA Exchange-Correlation Functional; Y; —; 0.400000; —; —; —; —; —; —. WB97M-D3BJ; wB97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; 0.300000; 0.150000; —; —; —; Y. WB97M-V; wB97M-V Hyb-GGA Exchange-Correlation Functional; Y; Y; 0.300000; 0.150000; —; —; —; —; —. WB97X; wB97X Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.157706; —; —; —; —; —. WB97X-D; wB97X-D Hyb-GGA Exchange-Correlation Functional; Y; —; 0.200000; 0.222036; —; —; —; Y. WB97X-D3; wB97X-D3 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.250000; 0.195728; —; —; —; Y. WB97X-D3BJ; wB97X-V with D3(BJ) instead of VV10 dispersion; Y; —; 0.300000; 0.167000; —; —; —; Y. WB97X-V; wB97X-V Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.167000; —; —; —; —; —. WPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. WPBE-D3BJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE-D3MBJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. X1B95; X1B95 Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.300000; —; —; —; —; —. X3LYP; X3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.218000; —; —; —; —; —. X3LYP-D3BJ; X3LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.218000; —; —; —; Y. XB1K; XB1K Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.430000; —; —; —; —; —. XLYP; XLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. XLYP-D3BJ; XLYP-d3bj GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. ZLP; ZLP GGA Exchange-Correlation Functional; Y; Y; —; —; —; —; —; —; —. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_all.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_dhybrid-1.html:150,Availability,avail,available,150,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. Double-Hybrid functionals available in PSI4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2GPPLYP; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; —; —. B2GPPLYP-D3BJ; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; Y. B2GPPLYP-NL; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; —; —. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; Y. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; Y. B2PLYP-NL; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. CORE-DSD-BLYP; DSD-BLYP SCS Double Hybrid XC Functional (full-core param.); Y; —; —; 0.690000; —; 1.000000; 0.370000 / 0.460000; Y. CORE-DSD-BLYP-D3BJ; DSD-BLYP SCS Double Hybrid XC Functional (full-core param.); Y; —; —; 0.690000; —; 1.000000; 0.370000 / 0.460000; Y. DSD-BLYP; DSD-BLYP SCS Double Hybrid XC Functional (not dispersion corrected); Y; —; —; 0.750000; —; 1.000000; 0.600000 / 0.460000; —; —. DSD-BLYP-D3BJ; DSD-BLYP-D3BJ Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.400000 / 0.470000; Y. DSD-BLYP-NL; DSD-BLYP-NL (D3BJ,FC parameters) VV10 SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.400000 / 0.470000; —; —. DSD-PBEB95; DSD-PBEB95 SCS Double Hybrid Meta-GGA XC Functional (not dispersion corrected); Y; Y; —; 0.690000; —; 1.000000; 0.220000 / 0.480000; —; —. DSD-PBEB95-D3BJ; DSD-PBEB95-D3BJ Dispersion-corrected SCS Double Hybrid Meta-GGA XC Functional; Y; Y; —; 0.660000; —; 1.0000",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_dhybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_dhybrid-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_dhybrid-1.html:4171,Deployability,update,updated,4171,"sion corrected); Y; —; —; 0.720000; —; 1.000000; 0.360000 / 0.510000; —; —. DSD-PBEP86-D3BJ; DSD-PBEP86-D3BJ Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.690000; —; 1.000000; 0.220000 / 0.520000; Y. DSD-PBEP86-NL; DSD-PBEP86-NL (D3BJ parameters) VV10 SCS Double Hybrid XC Functional; Y; —; —; 0.690000; —; 1.000000; 0.220000 / 0.520000; —; —. DSD-PBEPBE; DSD-PBEPBE SCS Double Hybrid XC Functional (not dispersion corrected); Y; —; —; 0.720000; —; 1.000000; 0.310000 / 0.540000; —; —. DSD-PBEPBE-D3BJ; DSD-PBEPBE-D3BJ Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.680000; —; 1.000000; 0.130000 / 0.550000; Y. DSD-PBEPBE-NL; DSD-PBEPBE-NL (D3BJ parameters) VV10 SCS Double Hybrid XC Functional; Y; —; —; 0.680000; —; 1.000000; 0.130000 / 0.550000; —; —. MP2D. —; —; —; 1.000000; —; 1.000000; —; —; —. MP2MP2. —; —; —; 1.000000; —; 1.000000; —; —; —. PBE0-2; PBE0-2 Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. PBE0-DH; PBE0-DH Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.500000; —; 0.125000; —; Y. PBE0-DH-D3BJ; PBE0-DH Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.500000; —; 0.125000; —; Y. PTPSS; PTPSS SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.375000; —; —. PTPSS-D3BJ; PTPSS SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.375000; Y. PWPB95; PWPB95 SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; —; —. PWPB95-D3BJ; PWPB95 SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; Y. PWPB95-NL; PWPB95 SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; —; —. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_dhybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_dhybrid-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_dhybrid.html:150,Availability,avail,available,150,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. Double-Hybrid functionals available in PSI4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2GPPLYP; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; —; —. B2GPPLYP-D3BJ; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; Y. B2GPPLYP-NL; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; —; —. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; Y. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; Y. B2PLYP-NL; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. CORE-DSD-BLYP; DSD-BLYP SCS Double Hybrid XC Functional (full-core param.); Y; —; —; 0.690000; —; 1.000000; 0.370000 / 0.460000; Y. CORE-DSD-BLYP-D3BJ; DSD-BLYP SCS Double Hybrid XC Functional (full-core param.); Y; —; —; 0.690000; —; 1.000000; 0.370000 / 0.460000; Y. DSD-BLYP; DSD-BLYP SCS Double Hybrid XC Functional (not dispersion corrected); Y; —; —; 0.750000; —; 1.000000; 0.600000 / 0.460000; —; —. DSD-BLYP-D3BJ; DSD-BLYP-D3BJ Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.400000 / 0.470000; Y. DSD-BLYP-NL; DSD-BLYP-NL (D3BJ,FC parameters) VV10 SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.400000 / 0.470000; —; —. DSD-PBEB95; DSD-PBEB95 SCS Double Hybrid Meta-GGA XC Functional (not dispersion corrected); Y; Y; —; 0.690000; —; 1.000000; 0.220000 / 0.480000; —; —. DSD-PBEB95-D3BJ; DSD-PBEB95-D3BJ Dispersion-corrected SCS Double Hybrid Meta-GGA XC Functional; Y; Y; —; 0.660000; —; 1.0000",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_dhybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_dhybrid.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_dhybrid.html:4171,Deployability,update,updated,4171,"sion corrected); Y; —; —; 0.720000; —; 1.000000; 0.360000 / 0.510000; —; —. DSD-PBEP86-D3BJ; DSD-PBEP86-D3BJ Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.690000; —; 1.000000; 0.220000 / 0.520000; Y. DSD-PBEP86-NL; DSD-PBEP86-NL (D3BJ parameters) VV10 SCS Double Hybrid XC Functional; Y; —; —; 0.690000; —; 1.000000; 0.220000 / 0.520000; —; —. DSD-PBEPBE; DSD-PBEPBE SCS Double Hybrid XC Functional (not dispersion corrected); Y; —; —; 0.720000; —; 1.000000; 0.310000 / 0.540000; —; —. DSD-PBEPBE-D3BJ; DSD-PBEPBE-D3BJ Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.680000; —; 1.000000; 0.130000 / 0.550000; Y. DSD-PBEPBE-NL; DSD-PBEPBE-NL (D3BJ parameters) VV10 SCS Double Hybrid XC Functional; Y; —; —; 0.680000; —; 1.000000; 0.130000 / 0.550000; —; —. MP2D. —; —; —; 1.000000; —; 1.000000; —; —; —. MP2MP2. —; —; —; 1.000000; —; 1.000000; —; —; —. PBE0-2; PBE0-2 Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. PBE0-DH; PBE0-DH Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.500000; —; 0.125000; —; Y. PBE0-DH-D3BJ; PBE0-DH Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.500000; —; 0.125000; —; Y. PTPSS; PTPSS SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.375000; —; —. PTPSS-D3BJ; PTPSS SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.375000; Y. PWPB95; PWPB95 SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; —; —. PWPB95-D3BJ; PWPB95 SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; Y. PWPB95-NL; PWPB95 SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; —; —. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_dhybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_dhybrid.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_disp-1.html:157,Availability,avail,available,157,﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. Dispersion-Corrected functionals available in PSI4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B1LYP-D3BJ; B1LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; Y. B2GPPLYP-D3BJ; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; Y. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; Y. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; Y. B3LYP-D3BJ; B3LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; Y. B3LYP-D3MBJ; B3LYP-d3mbj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; Y. B3P86-D3BJ; B3P86-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; Y. B3PW91-D3BJ; B3PW91-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; Y. B88B95-D3BJ; B88B95-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.280000; —; —; —; Y. B97-1-D3BJ; B97-1-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; Y. B97-2-D3BJ; B97-2-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; Y. B97-D; B97-D GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. B97-D3BJ; B97-D3BJ GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. B97-D3MBJ; B97-D3MBJ GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. B97M-D3BJ; B97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; —; —; —; —; —; Y. BLYP-D3BJ; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. BLYP-D3MBJ; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. BMK-D3BJ; BMK Hybrid Meta-GGA XC Functional for kinetics; Y; Y; —; 0.420000; —; —; —; Y. BOP-D3BJ; BOP GGA Exchange-Correlation Functional; Y; —,MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_disp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_disp-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_disp-1.html:7747,Deployability,update,updated,7747,"3BJ; PWB6K-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.460000; —; —; —; Y. PWPB95-D3BJ; PWPB95 SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; Y. REVPBE-D3BJ; revPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. REVPBE0-D3BJ; revPBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; Y. REVTPSS-D3BJ; revised TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. REVTPSSH-D3BJ; revTPSSh-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. RPBE-D3BJ; RPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. SCAN-D3BJ; SCAN Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. SOGGA11-X-D3BJ; SOGGA11-X Hybrid Exchange-Correlation Functional; Y; —; —; 0.401500; —; —; —; Y. T-HCTH-D3BJ; Tau HCTH Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. TPSS-D3BJ; TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. TPSSH-D3BJ; TPSSh-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. WB97M-D3BJ; wB97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; 0.300000; 0.150000; —; —; —; Y. WB97X-D; wB97X-D Hyb-GGA Exchange-Correlation Functional; Y; —; 0.200000; 0.222036; —; —; —; Y. WB97X-D3; wB97X-D3 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.250000; 0.195728; —; —; —; Y. WB97X-D3BJ; wB97X-V with D3(BJ) instead of VV10 dispersion; Y; —; 0.300000; 0.167000; —; —; —; Y. WPBE-D3BJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE-D3MBJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. X3LYP-D3BJ; X3LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.218000; —; —; —; Y. XLYP-D3BJ; XLYP-d3bj GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_disp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_disp-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_disp.html:157,Availability,avail,available,157,﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. Dispersion-Corrected functionals available in PSI4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B1LYP-D3BJ; B1LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; Y. B2GPPLYP-D3BJ; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; Y. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; Y. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; Y. B3LYP-D3BJ; B3LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; Y. B3LYP-D3MBJ; B3LYP-d3mbj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; Y. B3P86-D3BJ; B3P86-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; Y. B3PW91-D3BJ; B3PW91-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; Y. B88B95-D3BJ; B88B95-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.280000; —; —; —; Y. B97-1-D3BJ; B97-1-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; Y. B97-2-D3BJ; B97-2-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; Y. B97-D; B97-D GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. B97-D3BJ; B97-D3BJ GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. B97-D3MBJ; B97-D3MBJ GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. B97M-D3BJ; B97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; —; —; —; —; —; Y. BLYP-D3BJ; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. BLYP-D3MBJ; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. BMK-D3BJ; BMK Hybrid Meta-GGA XC Functional for kinetics; Y; Y; —; 0.420000; —; —; —; Y. BOP-D3BJ; BOP GGA Exchange-Correlation Functional; Y; —,MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_disp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_disp.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_disp.html:7747,Deployability,update,updated,7747,"3BJ; PWB6K-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.460000; —; —; —; Y. PWPB95-D3BJ; PWPB95 SOS Double Hybrid XC Functional; Y; Y; —; 0.500000; —; 1.000000; 0.000000 / 0.269000; Y. REVPBE-D3BJ; revPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. REVPBE0-D3BJ; revPBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; Y. REVTPSS-D3BJ; revised TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. REVTPSSH-D3BJ; revTPSSh-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. RPBE-D3BJ; RPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. SCAN-D3BJ; SCAN Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. SOGGA11-X-D3BJ; SOGGA11-X Hybrid Exchange-Correlation Functional; Y; —; —; 0.401500; —; —; —; Y. T-HCTH-D3BJ; Tau HCTH Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. TPSS-D3BJ; TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. TPSSH-D3BJ; TPSSh-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. WB97M-D3BJ; wB97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; 0.300000; 0.150000; —; —; —; Y. WB97X-D; wB97X-D Hyb-GGA Exchange-Correlation Functional; Y; —; 0.200000; 0.222036; —; —; —; Y. WB97X-D3; wB97X-D3 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.250000; 0.195728; —; —; —; Y. WB97X-D3BJ; wB97X-V with D3(BJ) instead of VV10 dispersion; Y; —; 0.300000; 0.167000; —; —; —; Y. WPBE-D3BJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE-D3MBJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. X3LYP-D3BJ; X3LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.218000; —; —; —; Y. XLYP-D3BJ; XLYP-d3bj GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_disp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_disp.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_energy-1.html:11645,Deployability,update,updated,11645,"on Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj. svwn; SVWN3 (RPA) LSDA Functional. t-hcth; Tau HCTH Meta-GGA XC Functional. t-hcth-d3bj. t-hcthh; Hybrid Tau HCTH Meta-GGA XC Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj. wpbe-d3mbj. wpbe0; PBE0 SR-XC Functional (HJS Model). x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj. zlp; ZLP GGA Exchange-Correlation Functional. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_energy-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_energy-1.html:10660,Performance,tune,tuned-cam-,10660,"SOGGA11 Exchange-Correlation Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj. svwn; SVWN3 (RPA) LSDA Functional. t-hcth; Tau HCTH Meta-GGA XC Functional. t-hcth-d3bj. t-hcthh; Hybrid Tau HCTH Meta-GGA XC Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj. wpbe-d3mbj. wpbe0; PBE0 SR-XC Functional (HJS Model). x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj. zlp; ZLP GGA Exchange-Correlation Functional. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Creat",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_energy-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_energy.html:11645,Deployability,update,updated,11645,"on Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj. svwn; SVWN3 (RPA) LSDA Functional. t-hcth; Tau HCTH Meta-GGA XC Functional. t-hcth-d3bj. t-hcthh; Hybrid Tau HCTH Meta-GGA XC Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj. wpbe-d3mbj. wpbe0; PBE0 SR-XC Functional (HJS Model). x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj. zlp; ZLP GGA Exchange-Correlation Functional. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_energy.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_energy.html:10660,Performance,tune,tuned-cam-,10660,"SOGGA11 Exchange-Correlation Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj. svwn; SVWN3 (RPA) LSDA Functional. t-hcth; Tau HCTH Meta-GGA XC Functional. t-hcth-d3bj. t-hcthh; Hybrid Tau HCTH Meta-GGA XC Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj. wpbe-d3mbj. wpbe0; PBE0 SR-XC Functional (HJS Model). x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj. zlp; ZLP GGA Exchange-Correlation Functional. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Creat",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_energy.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_gga-1.html:140,Availability,avail,available,140,﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. GGA functionals available in PSI4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B86BPBE; B86BPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. B97-D; B97-D GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. B97-D3BJ; B97-D3BJ GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. B97-D3MBJ; B97-D3MBJ GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. B97-GGA1; B97-GGA1 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. BLYP; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. BLYP-D3BJ; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. BLYP-D3MBJ; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. BLYP-NL; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. BOP; BOP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. BOP-D3BJ; BOP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. BP86; BP86 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. BP86-D3BJ; BP86 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. BP86-D3MBJ; BP86 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. BP86-NL; BP86 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. BP86-VWN; BP86 GGA XC Functional based on VWN5 corr. & more accurate ftilde value; Y; —; —; —; —; —; —; —; —. EDF1; EDF1 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. FT97; FT97 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. GAM; GAM GGA Minessota Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. HCTH120; HCTH120 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. HCTH120-D3BJ; HCTH120-d3bj GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. HCTH147; HCTH147 GGA Exchange-Correlation Fu,MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_gga-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_gga-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_gga-1.html:5839,Deployability,update,updated,5839,"ional; Y; —; —; —; —; —; —; —; —. PBELYP1W; PBELYP1W GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. PW86PBE; PW86PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. PW91; PW91 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. PW91-D3BJ; PW91 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. REVPBE; revPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. REVPBE-D3BJ; revPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. REVPBE-NL; revPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. RPBE; RPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. RPBE-D3BJ; RPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. SOGGA; SOGGA Exchange + PBE Correlation Functional; Y; —; —; —; —; —; —; —; —. SOGGA11; SOGGA11 Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH-FC; TH-FC GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH-FCFO; TH-FCFO GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH-FCO; TH-FCO GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH-FL; TH-FL GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH1; TH1 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH2; TH2 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH3; TH3 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH4; TH4 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. VV10; VV10 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. XLYP; XLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. XLYP-D3BJ; XLYP-d3bj GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_gga-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_gga-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_gga.html:140,Availability,avail,available,140,﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. GGA functionals available in PSI4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B86BPBE; B86BPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. B97-D; B97-D GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. B97-D3BJ; B97-D3BJ GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. B97-D3MBJ; B97-D3MBJ GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. B97-GGA1; B97-GGA1 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. BLYP; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. BLYP-D3BJ; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. BLYP-D3MBJ; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. BLYP-NL; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. BOP; BOP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. BOP-D3BJ; BOP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. BP86; BP86 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. BP86-D3BJ; BP86 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. BP86-D3MBJ; BP86 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. BP86-NL; BP86 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. BP86-VWN; BP86 GGA XC Functional based on VWN5 corr. & more accurate ftilde value; Y; —; —; —; —; —; —; —; —. EDF1; EDF1 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. FT97; FT97 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. GAM; GAM GGA Minessota Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. HCTH120; HCTH120 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. HCTH120-D3BJ; HCTH120-d3bj GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. HCTH147; HCTH147 GGA Exchange-Correlation Fu,MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_gga.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_gga.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_gga.html:5839,Deployability,update,updated,5839,"ional; Y; —; —; —; —; —; —; —; —. PBELYP1W; PBELYP1W GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. PW86PBE; PW86PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. PW91; PW91 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. PW91-D3BJ; PW91 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. REVPBE; revPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. REVPBE-D3BJ; revPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. REVPBE-NL; revPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. RPBE; RPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. RPBE-D3BJ; RPBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. SOGGA; SOGGA Exchange + PBE Correlation Functional; Y; —; —; —; —; —; —; —; —. SOGGA11; SOGGA11 Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH-FC; TH-FC GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH-FCFO; TH-FCFO GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH-FCO; TH-FCO GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH-FL; TH-FL GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH1; TH1 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH2; TH2 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH3; TH3 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. TH4; TH4 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. VV10; VV10 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. XLYP; XLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. XLYP-D3BJ; XLYP-d3bj GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; Y. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_gga.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_gga.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_hybrid-1.html:143,Availability,avail,available,143,﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. Hybrid functionals available in PSI4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B1LYP; B1LYP Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; —; —. B1LYP-D3BJ; B1LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; Y. B1PW91; B1PW91 Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; —; —. B1WC; B1WC Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.160000; —; —; —; —; —. B2GPPLYP; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; —; —. B2GPPLYP-D3BJ; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; Y. B2GPPLYP-NL; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; —; —. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; Y. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; Y. B2PLYP-NL; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B3LYP; B3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-D3BJ; B3LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; Y. B3LYP-D3MBJ; B3LYP-d3mbj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; Y. B3LYP-NL; B3LYP-nl Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP5; B3LYP5 Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYPS; B3LYPs Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.150000; —; —; —; —; —. B3P86; B3P86 Hyb-GGA Exchange-Correlation Functional; Y; —,MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_hybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_hybrid-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_hybrid-1.html:16434,Deployability,update,updated,16434,"ctional; Y; —; —; 0.401500; —; —; —; —; —. SOGGA11-X-D3BJ; SOGGA11-X Hybrid Exchange-Correlation Functional; Y; —; —; 0.401500; —; —; —; Y. T-HCTHH; Hybrid Tau HCTH Meta-GGA XC Functional; Y; Y; —; 0.150000; —; —; —; —; —. TPSSH; TPSSh Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. TPSSH-D3BJ; TPSSh-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-NL; TPSSh-nl Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. TUNED-CAM-B3LYP; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; 0.150000; 0.079900; —; —; —; —; —. WB97M-D3BJ; wB97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; 0.300000; 0.150000; —; —; —; Y. WB97M-V; wB97M-V Hyb-GGA Exchange-Correlation Functional; Y; Y; 0.300000; 0.150000; —; —; —; —; —. WB97X; wB97X Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.157706; —; —; —; —; —. WB97X-D; wB97X-D Hyb-GGA Exchange-Correlation Functional; Y; —; 0.200000; 0.222036; —; —; —; Y. WB97X-D3; wB97X-D3 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.250000; 0.195728; —; —; —; Y. WB97X-D3BJ; wB97X-V with D3(BJ) instead of VV10 dispersion; Y; —; 0.300000; 0.167000; —; —; —; Y. WB97X-V; wB97X-V Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.167000; —; —; —; —; —. WPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. X1B95; X1B95 Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.300000; —; —; —; —; —. X3LYP; X3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.218000; —; —; —; —; —. X3LYP-D3BJ; X3LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.218000; —; —; —; Y. XB1K; XB1K Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.430000; —; —; —; —; —. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_hybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_hybrid-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_hybrid.html:143,Availability,avail,available,143,﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. Hybrid functionals available in PSI4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B1LYP; B1LYP Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; —; —. B1LYP-D3BJ; B1LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; Y. B1PW91; B1PW91 Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; —; —. B1WC; B1WC Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.160000; —; —; —; —; —. B2GPPLYP; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; —; —. B2GPPLYP-D3BJ; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; Y. B2GPPLYP-NL; B2GPPLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.650000; —; 0.360000; —; —; —. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; Y. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; Y. B2PLYP-NL; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B3LYP; B3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-D3BJ; B3LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; Y. B3LYP-D3MBJ; B3LYP-d3mbj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; Y. B3LYP-NL; B3LYP-nl Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP5; B3LYP5 Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYPS; B3LYPs Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.150000; —; —; —; —; —. B3P86; B3P86 Hyb-GGA Exchange-Correlation Functional; Y; —,MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_hybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_hybrid.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_hybrid.html:16434,Deployability,update,updated,16434,"ctional; Y; —; —; 0.401500; —; —; —; —; —. SOGGA11-X-D3BJ; SOGGA11-X Hybrid Exchange-Correlation Functional; Y; —; —; 0.401500; —; —; —; Y. T-HCTHH; Hybrid Tau HCTH Meta-GGA XC Functional; Y; Y; —; 0.150000; —; —; —; —; —. TPSSH; TPSSh Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. TPSSH-D3BJ; TPSSh-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-NL; TPSSh-nl Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. TUNED-CAM-B3LYP; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; 0.150000; 0.079900; —; —; —; —; —. WB97M-D3BJ; wB97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; 0.300000; 0.150000; —; —; —; Y. WB97M-V; wB97M-V Hyb-GGA Exchange-Correlation Functional; Y; Y; 0.300000; 0.150000; —; —; —; —; —. WB97X; wB97X Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.157706; —; —; —; —; —. WB97X-D; wB97X-D Hyb-GGA Exchange-Correlation Functional; Y; —; 0.200000; 0.222036; —; —; —; Y. WB97X-D3; wB97X-D3 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.250000; 0.195728; —; —; —; Y. WB97X-D3BJ; wB97X-V with D3(BJ) instead of VV10 dispersion; Y; —; 0.300000; 0.167000; —; —; —; Y. WB97X-V; wB97X-V Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.167000; —; —; —; —; —. WPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. X1B95; X1B95 Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.300000; —; —; —; —; —. X3LYP; X3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.218000; —; —; —; —; —. X3LYP-D3BJ; X3LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; —; 0.218000; —; —; —; Y. XB1K; XB1K Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.430000; —; —; —; —; —. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_hybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_hybrid.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_lrc-1.html:157,Availability,avail,available,157,﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. Long-Range-Corrected functionals available in PSI4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. CAM-B3LYP; CAM-B3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; 0.330000; 0.190000; —; —; —; —; —. CAM-B3LYP-D3BJ; CAM-B3LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; 0.330000; 0.190000; —; —; —; Y. CAM-LDA0; CAM-LDA0 Exchange-Correlation Functional; —; —; 0.333333; 0.250000; —; —; —; —; —. HJS-B88; HJS-B88 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; —; —. HJS-B97X; HJS-B97X Hyb-GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; —; —. HJS-PBE; HJS-PBE Hyb-GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; —; —. HJS-PBE-SOL; HJS-PBE-SOL Hyb-GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; —; —. HSE03; HSE03 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.106066; 0.250000; —; —; —; —; —. HSE03-D3BJ; HSE03-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; 0.106066; 0.250000; —; —; —; Y. HSE06; HSE06 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; —; —. HSE06-D3BJ; HSE06-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; Y. LC-BOP; LC-BOP GGA Exchange-Correlation Functional; Y; —; 0.470000; —; —; —; —; —; —. LC-VV10; LC-VV10 GGA Exchange-Correlation Functional; Y; —; 0.450000; —; —; —; —; —; —. LRC-WPBE; LRC-WPBE GGA Exchange-Correlation Functional; Y; —; 0.300000; —; —; —; —; —; —. LRC-WPBEH; LRC-wPBEh Hyb-GGA Exchange-Correlation Functional; Y; —; 0.200000; 0.200000; —; —; —; —; —. M11; M11 Meta-GGA XC Functional; Y; Y; 0.250000; 0.428000; —; —; —; —; —. M11-D3BJ; M11 Meta-GGA XC Functional; Y; Y; 0.250000; 0.428000; —; —; —; Y. MN12-SX; MN12-SX Meta-GGA Hybrid Screened Exchange-Correlation Functional; Y; Y;,MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_lrc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_lrc-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_lrc-1.html:3758,Deployability,update,updated,3758," —; —; —. M11-D3BJ; M11 Meta-GGA XC Functional; Y; Y; 0.250000; 0.428000; —; —; —; Y. MN12-SX; MN12-SX Meta-GGA Hybrid Screened Exchange-Correlation Functional; Y; Y; 0.110000; 0.250000; —; —; —; —; —. MN12-SX-D3BJ; MN12-SX Meta-GGA Hybrid Screened Exchange-Correlation Functional; Y; Y; 0.110000; 0.250000; —; —; —; Y. N12-SX; N12-SX Hybrid nonseparable GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; —; —. N12-SX-D3BJ; N12-SX Hybrid nonseparable GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; Y. TUNED-CAM-B3LYP; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; 0.150000; 0.079900; —; —; —; —; —. WB97; wB97 GGA Exchange-Correlation Functional; Y; —; 0.400000; —; —; —; —; —; —. WB97M-D3BJ; wB97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; 0.300000; 0.150000; —; —; —; Y. WB97M-V; wB97M-V Hyb-GGA Exchange-Correlation Functional; Y; Y; 0.300000; 0.150000; —; —; —; —; —. WB97X; wB97X Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.157706; —; —; —; —; —. WB97X-D; wB97X-D Hyb-GGA Exchange-Correlation Functional; Y; —; 0.200000; 0.222036; —; —; —; Y. WB97X-D3; wB97X-D3 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.250000; 0.195728; —; —; —; Y. WB97X-D3BJ; wB97X-V with D3(BJ) instead of VV10 dispersion; Y; —; 0.300000; 0.167000; —; —; —; Y. WB97X-V; wB97X-V Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.167000; —; —; —; —; —. WPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. WPBE-D3BJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE-D3MBJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_lrc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_lrc-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_lrc.html:157,Availability,avail,available,157,﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. Long-Range-Corrected functionals available in PSI4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. CAM-B3LYP; CAM-B3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; 0.330000; 0.190000; —; —; —; —; —. CAM-B3LYP-D3BJ; CAM-B3LYP-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; 0.330000; 0.190000; —; —; —; Y. CAM-LDA0; CAM-LDA0 Exchange-Correlation Functional; —; —; 0.333333; 0.250000; —; —; —; —; —. HJS-B88; HJS-B88 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; —; —. HJS-B97X; HJS-B97X Hyb-GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; —; —. HJS-PBE; HJS-PBE Hyb-GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; —; —. HJS-PBE-SOL; HJS-PBE-SOL Hyb-GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; —; —. HSE03; HSE03 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.106066; 0.250000; —; —; —; —; —. HSE03-D3BJ; HSE03-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; 0.106066; 0.250000; —; —; —; Y. HSE06; HSE06 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; —; —. HSE06-D3BJ; HSE06-d3bj Hyb-GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; Y. LC-BOP; LC-BOP GGA Exchange-Correlation Functional; Y; —; 0.470000; —; —; —; —; —; —. LC-VV10; LC-VV10 GGA Exchange-Correlation Functional; Y; —; 0.450000; —; —; —; —; —; —. LRC-WPBE; LRC-WPBE GGA Exchange-Correlation Functional; Y; —; 0.300000; —; —; —; —; —; —. LRC-WPBEH; LRC-wPBEh Hyb-GGA Exchange-Correlation Functional; Y; —; 0.200000; 0.200000; —; —; —; —; —. M11; M11 Meta-GGA XC Functional; Y; Y; 0.250000; 0.428000; —; —; —; —; —. M11-D3BJ; M11 Meta-GGA XC Functional; Y; Y; 0.250000; 0.428000; —; —; —; Y. MN12-SX; MN12-SX Meta-GGA Hybrid Screened Exchange-Correlation Functional; Y; Y;,MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_lrc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_lrc.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_lrc.html:3758,Deployability,update,updated,3758," —; —; —. M11-D3BJ; M11 Meta-GGA XC Functional; Y; Y; 0.250000; 0.428000; —; —; —; Y. MN12-SX; MN12-SX Meta-GGA Hybrid Screened Exchange-Correlation Functional; Y; Y; 0.110000; 0.250000; —; —; —; —; —. MN12-SX-D3BJ; MN12-SX Meta-GGA Hybrid Screened Exchange-Correlation Functional; Y; Y; 0.110000; 0.250000; —; —; —; Y. N12-SX; N12-SX Hybrid nonseparable GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; —; —. N12-SX-D3BJ; N12-SX Hybrid nonseparable GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; Y. TUNED-CAM-B3LYP; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; 0.150000; 0.079900; —; —; —; —; —. WB97; wB97 GGA Exchange-Correlation Functional; Y; —; 0.400000; —; —; —; —; —; —. WB97M-D3BJ; wB97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; 0.300000; 0.150000; —; —; —; Y. WB97M-V; wB97M-V Hyb-GGA Exchange-Correlation Functional; Y; Y; 0.300000; 0.150000; —; —; —; —; —. WB97X; wB97X Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.157706; —; —; —; —; —. WB97X-D; wB97X-D Hyb-GGA Exchange-Correlation Functional; Y; —; 0.200000; 0.222036; —; —; —; Y. WB97X-D3; wB97X-D3 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.250000; 0.195728; —; —; —; Y. WB97X-D3BJ; wB97X-V with D3(BJ) instead of VV10 dispersion; Y; —; 0.300000; 0.167000; —; —; —; Y. WB97X-V; wB97X-V Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.167000; —; —; —; —; —. WPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. WPBE-D3BJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE-D3MBJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_lrc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_lrc.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_meta-1.html:141,Availability,avail,available,141,﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. Meta functionals available in PSI4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B86B95; B86B95 Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.280000; —; —; —; —; —. B88B95; B88B95 Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.280000; —; —; —; —; —. B88B95-D3BJ; B88B95-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.280000; —; —; —; Y. B97M-D3BJ; B97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; —; —; —; —; —; Y. B97M-V; B97M-V GGA Exchange-Correlation Functional; Y; Y; —; —; —; —; —; —; —. BB1K; BB1K Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.420000; —; —; —; —; —. BMK; BMK Hybrid Meta-GGA XC Functional for kinetics; Y; Y; —; 0.420000; —; —; —; —; —. BMK-D3BJ; BMK Hybrid Meta-GGA XC Functional for kinetics; Y; Y; —; 0.420000; —; —; —; Y. DLDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. DLDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. DLDF+D10; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. DSD-PBEB95; DSD-PBEB95 SCS Double Hybrid Meta-GGA XC Functional (not dispersion corrected); Y; Y; —; 0.690000; —; 1.000000; 0.220000 / 0.480000; —; —. DSD-PBEB95-D3BJ; DSD-PBEB95-D3BJ Dispersion-corrected SCS Double Hybrid Meta-GGA XC Functional; Y; Y; —; 0.660000; —; 1.000000; 0.090000 / 0.460000; Y. DSD-PBEB95-NL; DSD-PBEB95-NL (D3BJ parameters) VV10 SCS Double Hybrid Meta-GGA XC Functional; Y; Y; —; 0.660000; —; 1.000000; 0.090000 / 0.460000; —; —. M05; M05 Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; —; —. M05-2X; Heavily Parameterized Hybrid M05-2X Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; —; —. M06; M06 Meta-GGA XC Functional; Y; Y; —; 0.270000; —; —; —; —; —. M06-2X; Hybrid M06-2X Meta-GGA XC Functional; Y; Y; —; 0.5400,MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_meta-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_meta-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_meta-1.html:7501,Deployability,update,updated,7501,"ed TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. REVTPSSH; revTPSSh Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. REVTPSSH-D3BJ; revTPSSh-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. SCAN; SCAN Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. SCAN-D3BJ; SCAN Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. SCAN0; SCAN0 Hybrid Meta-GGA XC Functional; Y; Y; —; 0.250000; —; —; —; —; —. T-HCTH; Tau HCTH Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. T-HCTH-D3BJ; Tau HCTH Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. T-HCTHH; Hybrid Tau HCTH Meta-GGA XC Functional; Y; Y; —; 0.150000; —; —; —; —; —. TPSS; TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. TPSS-D3BJ; TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. TPSS-NL; TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. TPSSH; TPSSh Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. TPSSH-D3BJ; TPSSh-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-NL; TPSSh-nl Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. TPSSLYP1W; TPSSLYP1W GGA Exchange-Correlation Functional; Y; Y; —; —; —; —; —; —; —. VSXC; VSXC Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. WB97M-D3BJ; wB97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; 0.300000; 0.150000; —; —; —; Y. WB97M-V; wB97M-V Hyb-GGA Exchange-Correlation Functional; Y; Y; 0.300000; 0.150000; —; —; —; —; —. X1B95; X1B95 Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.300000; —; —; —; —; —. XB1K; XB1K Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.430000; —; —; —; —; —. ZLP; ZLP GGA Exchange-Correlation Functional; Y; Y; —; —; —; —; —; —; —. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_meta-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_meta-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_meta.html:141,Availability,avail,available,141,﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. Meta functionals available in PSI4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B86B95; B86B95 Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.280000; —; —; —; —; —. B88B95; B88B95 Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.280000; —; —; —; —; —. B88B95-D3BJ; B88B95-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.280000; —; —; —; Y. B97M-D3BJ; B97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; —; —; —; —; —; Y. B97M-V; B97M-V GGA Exchange-Correlation Functional; Y; Y; —; —; —; —; —; —; —. BB1K; BB1K Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.420000; —; —; —; —; —. BMK; BMK Hybrid Meta-GGA XC Functional for kinetics; Y; Y; —; 0.420000; —; —; —; —; —. BMK-D3BJ; BMK Hybrid Meta-GGA XC Functional for kinetics; Y; Y; —; 0.420000; —; —; —; Y. DLDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. DLDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. DLDF+D10; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. DSD-PBEB95; DSD-PBEB95 SCS Double Hybrid Meta-GGA XC Functional (not dispersion corrected); Y; Y; —; 0.690000; —; 1.000000; 0.220000 / 0.480000; —; —. DSD-PBEB95-D3BJ; DSD-PBEB95-D3BJ Dispersion-corrected SCS Double Hybrid Meta-GGA XC Functional; Y; Y; —; 0.660000; —; 1.000000; 0.090000 / 0.460000; Y. DSD-PBEB95-NL; DSD-PBEB95-NL (D3BJ parameters) VV10 SCS Double Hybrid Meta-GGA XC Functional; Y; Y; —; 0.660000; —; 1.000000; 0.090000 / 0.460000; —; —. M05; M05 Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; —; —. M05-2X; Heavily Parameterized Hybrid M05-2X Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; —; —. M06; M06 Meta-GGA XC Functional; Y; Y; —; 0.270000; —; —; —; —; —. M06-2X; Hybrid M06-2X Meta-GGA XC Functional; Y; Y; —; 0.5400,MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_meta.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_meta.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_meta.html:7501,Deployability,update,updated,7501,"ed TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. REVTPSSH; revTPSSh Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. REVTPSSH-D3BJ; revTPSSh-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. SCAN; SCAN Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. SCAN-D3BJ; SCAN Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. SCAN0; SCAN0 Hybrid Meta-GGA XC Functional; Y; Y; —; 0.250000; —; —; —; —; —. T-HCTH; Tau HCTH Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. T-HCTH-D3BJ; Tau HCTH Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. T-HCTHH; Hybrid Tau HCTH Meta-GGA XC Functional; Y; Y; —; 0.150000; —; —; —; —; —. TPSS; TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. TPSS-D3BJ; TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. TPSS-NL; TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. TPSSH; TPSSh Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. TPSSH-D3BJ; TPSSh-d3bj Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-NL; TPSSh-nl Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. TPSSLYP1W; TPSSLYP1W GGA Exchange-Correlation Functional; Y; Y; —; —; —; —; —; —; —. VSXC; VSXC Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. WB97M-D3BJ; wB97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; 0.300000; 0.150000; —; —; —; Y. WB97M-V; wB97M-V Hyb-GGA Exchange-Correlation Functional; Y; Y; 0.300000; 0.150000; —; —; —; —; —. X1B95; X1B95 Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.300000; —; —; —; —; —. XB1K; XB1K Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.430000; —; —; —; —; —. ZLP; ZLP GGA Exchange-Correlation Functional; Y; Y; —; —; —; —; —; —; —. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_meta.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_meta.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_opt-1.html:8901,Deployability,update,updated,8901,"change-Correlation Functional. sb98-1c; SB98-1c Hyb-GGA Exchange-Correlation Functional. sb98-2a; SB98-2a Hyb-GGA Exchange-Correlation Functional. sb98-2b; SB98-2b Hyb-GGA Exchange-Correlation Functional. sb98-2c; SB98-2c Hyb-GGA Exchange-Correlation Functional. scan; SCAN Meta-GGA XC Functional. scan-d3bj. scan0; SCAN0 Hybrid Meta-GGA XC Functional. sogga; SOGGA Exchange + PBE Correlation Functional. sogga11; SOGGA11 Exchange-Correlation Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj. svwn; SVWN3 (RPA) LSDA Functional. t-hcth; Tau HCTH Meta-GGA XC Functional. t-hcth-d3bj. t-hcthh; Hybrid Tau HCTH Meta-GGA XC Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj. zlp; ZLP GGA Exchange-Correlation Functional. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_opt-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_dft_opt.html:8901,Deployability,update,updated,8901,"change-Correlation Functional. sb98-1c; SB98-1c Hyb-GGA Exchange-Correlation Functional. sb98-2a; SB98-2a Hyb-GGA Exchange-Correlation Functional. sb98-2b; SB98-2b Hyb-GGA Exchange-Correlation Functional. sb98-2c; SB98-2c Hyb-GGA Exchange-Correlation Functional. scan; SCAN Meta-GGA XC Functional. scan-d3bj. scan0; SCAN0 Hybrid Meta-GGA XC Functional. sogga; SOGGA Exchange + PBE Correlation Functional. sogga11; SOGGA11 Exchange-Correlation Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj. svwn; SVWN3 (RPA) LSDA Functional. t-hcth; Tau HCTH Meta-GGA XC Functional. t-hcth-d3bj. t-hcthh; Hybrid Tau HCTH Meta-GGA XC Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj. zlp; ZLP GGA Exchange-Correlation Functional. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_dft_opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_opt.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:8097,Availability,avail,available,8097,"¶PE — minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT (PE)¶PE — unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_TYPE (PE)¶PE — border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BRIANQC_ENABLE (GLOBALS)¶GLOBALS — Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC)¶FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC)¶ADC — How to cache quantities within the DPD library. This option is only available for the built-in ADC backend. Type: integer; Default: 2. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a valu",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:13084,Availability,error,error,13084,"onicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING)¶OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI)¶DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM)¶CCEOM — Do turn on root following for CC3. Type: boolean; Default: false. CC_A_RAS3_MAX (DETCI)¶DETCI — maximum number of alpha electrons in RAS III, for CC. Type: integer; Default: -1. CC_B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III, for CC. Type: integer; Default: -1. CC_DIIS_MAX_VECS (DFOCC)¶DFOCC — Maximum number of vectors used in amplitude DIIS. Type: integer; Default: 6. CC_DIIS_MAX_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 6. CC_DIIS_MIN_VECS (DFOCC)¶DFOCC — Minimum number of vectors used in amplitude DIIS. Type: integer; Default: 2. CC_DIIS_MIN_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 2. CC_EX_LEVEL (DETCI)¶DETCI — The CC excitation level. Type: integer; Default: 2. CC_FIX_EXTERNAL (DETCI)¶DETCI (Expert) — Do fix amplitudes involving RAS I or RAS IV? Useful in mixed MP2-CC methods. Type: boolean; Default: false. CC_FIX_EXTERNAL_MIN (DETCI)¶DETCI (Expert) — Number of external indices before amplitude gets fixed by CC_FIX_EXTERNAL. Experimental. Type: integer; Default: 1. CC_LAMBDA (DFOCC)¶DFOCC — Do solve lambda amplitude equations?. Type: boolean; Default: false. CC_MACRO (DETCI)¶DETCI (Expert) — CC_MACRO = [ [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], … ] Optional additional restrictions on allowed excitations in coupled-cluster computations, based on macroconfiguration ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:13294,Availability,error,error,13294,"uch that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING)¶OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI)¶DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM)¶CCEOM — Do turn on root following for CC3. Type: boolean; Default: false. CC_A_RAS3_MAX (DETCI)¶DETCI — maximum number of alpha electrons in RAS III, for CC. Type: integer; Default: -1. CC_B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III, for CC. Type: integer; Default: -1. CC_DIIS_MAX_VECS (DFOCC)¶DFOCC — Maximum number of vectors used in amplitude DIIS. Type: integer; Default: 6. CC_DIIS_MAX_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 6. CC_DIIS_MIN_VECS (DFOCC)¶DFOCC — Minimum number of vectors used in amplitude DIIS. Type: integer; Default: 2. CC_DIIS_MIN_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 2. CC_EX_LEVEL (DETCI)¶DETCI — The CC excitation level. Type: integer; Default: 2. CC_FIX_EXTERNAL (DETCI)¶DETCI (Expert) — Do fix amplitudes involving RAS I or RAS IV? Useful in mixed MP2-CC methods. Type: boolean; Default: false. CC_FIX_EXTERNAL_MIN (DETCI)¶DETCI (Expert) — Number of external indices before amplitude gets fixed by CC_FIX_EXTERNAL. Experimental. Type: integer; Default: 1. CC_LAMBDA (DFOCC)¶DFOCC — Do solve lambda amplitude equations?. Type: boolean; Default: false. CC_MACRO (DETCI)¶DETCI (Expert) — CC_MACRO = [ [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], … ] Optional additional restrictions on allowed excitations in coupled-cluster computations, based on macroconfiguration selection. For each sub-array, [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], eliminate cluster amplitudes in which: [the excitation level (holes in I + II) is equal to ex_lvl] AND [there are more than max_hole",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:17068,Availability,toler,tolerance,17068,"GLOBALS)¶GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI)¶DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI)¶DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI)¶DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI)¶DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI)¶DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:17719,Availability,error,error,17719,"ctor from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI)¶DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calcul",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:17819,Availability,error,error,17819,"to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitatio",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:17917,Availability,error,error,17917," Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:24821,Availability,avail,available,24821,"sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR)¶CFOUR — Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR)¶CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR)¶CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR)¶CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR)¶CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR)¶CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:24912,Availability,avail,available,24912,"x in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR)¶CFOUR — Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR)¶CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR)¶CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR)¶CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR)¶CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR)¶CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:25853,Availability,avail,available,25853," file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR)¶CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR)¶CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR)¶CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR)¶CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. CFOUR_CC_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR)¶CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:27141,Availability,avail,available,27141,"Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR)¶CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR)¶CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy(",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:27403,Availability,avail,available,27403,"FOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR)¶CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from act",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:31060,Availability,error,error,31060,"rently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR)¶CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR)¶CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR)¶CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:31520,Availability,avail,available,31520,"or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR)¶CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR)¶CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually ne",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:31695,Availability,avail,available,31695,"are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR)¶CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR)¶CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computat",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:31934,Availability,avail,available,31934," of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR)¶CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) deriva",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:33762,Availability,toler,tolerant,33762,"etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR)¶CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63,64]. Type: array; Default: No Default. CFOUR_ECP (CFOUR)¶CFOUR — Specifies whether effective core potentials (pseudopotentials) are used (ON, =1) or not (OFF, =0). Type: boolean; Default: false. CFOUR_EIGENVECTOR (CFOUR)¶CFOUR — Specifies which eigenvector of the totally symmetric part of the block-factored Hessian is to be followed uphill in a transition state search. Eigenvectors are indexed by their eigenvalues – the lowest eigenvalue is 1, the next lowest is 2, etc. The default is 1, which should always be used if you are not looking for a specific transition state which you know corresponds to motion along a different mode. In the future, relatively sophisticated generation of a guessed eigenvector will be implemented, but this is the way things are for now. Of course, this keyword has no meaning if CFOUR_METHOD is not set to TS. Type: integer; Default: 1. CFOUR_EL_ANHARM (CFOUR)¶CFOUR — Experimental use, ON = 1 requests t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:35912,Availability,avail,available,35912,"non-iterative triples corrections are applied after various types of EOM-CCSD calculation. Works with CFOUR_EXCITE set to EOMIP, might work with EOMEE, certainly doesn’t work with EOMEA. Use with great caution, preferably after having a few drinks. Type: boolean; Default: false. CFOUR_ESTATE_CONV (CFOUR)¶CFOUR — Specifies the threshold used in converging CC-LR/EOM-CC calculations. The iterative diagonalization is continued until the RMS residual falls below \(10^{-N}\) with \(N\) as the value specified with this keyword. Type: integer; Default: 5. CFOUR_ESTATE_MAXCYC (CFOUR)¶CFOUR — The maximum number of expansion vectors used in the solution of EOMCC equations (Default: 20, hard-coded to 4 in triples calculations). Type: integer; Default: 20. CFOUR_ESTATE_PROP (CFOUR)¶CFOUR — This keyword applies only to EOM-CC calculations and specifies whether any excited or ionized state one-electron properties are to be calculated. Proper use of this keyword requires a relatively advanced knowledge of quantum chemistry and the available options are discussed here. The options are: OFF (=0) [no properties or transition moments are calculated]; EXPECTATION (=1) [transition moments and dipole strengths are calculated along with selected one-electron properties which are evaluated as expectation values]; UNRELAXED (=2) [selected one-electron properties are calculated in an approximation that neglects relaxation of molecular orbitals]; RESPONSE (=3) [selected one-electron properties are calculated as analytic first derivatives of the energy]. Except for EOMCC calculations on two-electron systems (which are exact), properties obtained by the three approaches will not be equivalent. The default value for this keyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evalu",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:38547,Availability,toler,tolerant,38547,"an iterative (modified Davidson) algorithm. For excited state gradient calculations, only one root (clearly) is used. In such a case, one and only one non-zero entry in the string can be used, and this value is usually set to one (i.e. 0/1/0/0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR)¶CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR)¶CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR)¶CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculatio",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:38912,Availability,avail,available,38912,"a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR)¶CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR)¶CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR)¶CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR)¶CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatm",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:41486,Availability,avail,available,41486,"itched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be aware that for some atoms, the calculation has to be run in lower symmetry or even without symmetry. (Default : 0). Type: integer; Default: 0. CFOUR_FD_CALCTYPE (CFOUR)¶CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energies (dipole moment derivatives are not evaluated); while MIXED (=2) evaluates 1x1 blocks of symmetry-blocked force constants by second differences pf energies and all other elements by first differences of gradients. the GRADONLY and MIXED approaches may, of course, only be used hwen using computational methods for which analytic gradients are available. Type: string; Possible Values: GRADONLY, ENERONLY, MIXED; Default: GRADONLY. CFOUR_FD_IRREPS (CFOUR)¶CFOUR — Requests that only vibrational frequencies of certain symmetry types are evaluated in a VIBRATION=FINDIF calculation. The numbers of the irreducible representations for which vibrational analysis is to be performed are separated by slashes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without sta",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:46499,Availability,avail,available,46499,"y the valence electrons (ON =1) are considered. This keyword provides an alternative to the CFOUR_DROPMO keyword, as it allows frozen-core calculation without explicitly specifying the corresponding inner-shell orbitals. Type: boolean; Default: false. CFOUR_FROZEN_VIRT (CFOUR)¶CFOUR — Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energy needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR)¶CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR)¶CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENB",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:49606,Availability,avail,available,49606,"mber of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:52129,Availability,avail,available,52129,"as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR)¶CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR)¶CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Defa",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:56604,Availability,avail,available,56604," core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR)¶CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR)¶CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:58089,Availability,error,error,58089,"multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CF",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:61112,Availability,toler,tolerant,61112,"xample of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the \(^2A_1\) water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR)¶CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD appr",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:80481,Availability,avail,available,80481,"uadruply- or pentuply-degenerate representations. Extending the code to those cases is probably straightforward, and the reader is encouraged to do so if (s)he is so inclined. SYM_CHECK=0 “forces” the high-symmetry solution. SYM_CHECK=OVERRIDE (=1) doesn’t. The latter is the default. Type: boolean; Default: true. CFOUR_SYMMETRY (CFOUR)¶CFOUR — Specifies what subgroup of the full point group is to be used in the energy and/or gradient calculation (the computational point group). OFF (=1) forces a no symmetry run (in \(C_1\) ) and ON (=0) runs the calculation in the largest self-adjoint subgroup ( \(D_{2h}\) and its subgroups). Type: boolean; Default: true. CFOUR_T3_EXTRAPOL (CFOUR)¶CFOUR — Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module xecc. Type: boolean; Default: false. CFOUR_TAMP_SUM (CFOUR)¶CFOUR — Specifies how often the largest \(t\) amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc. Type: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR)¶CFOUR — Specifies whether to calculate finite-temperature thermodynamic corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives abbreviated output; and VERBOSE (=2) gives elaborate output that is separated by translation, rotation and vibration. Default: ON (currently not available in public version). Type: string; Possible Values: OFF, ON, VERBOSE; Default: ON. CFOUR_TRANS_INV (CFOUR)¶CFOUR — Specifies whether or not translational invariance is exploited in geometrical derivative calculations. USE(=0) specifies that translational invariance is exploited, while IGNORE (=1) turns ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:81166,Availability,avail,available,81166,")¶CFOUR — Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module xecc. Type: boolean; Default: false. CFOUR_TAMP_SUM (CFOUR)¶CFOUR — Specifies how often the largest \(t\) amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc. Type: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR)¶CFOUR — Specifies whether to calculate finite-temperature thermodynamic corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives abbreviated output; and VERBOSE (=2) gives elaborate output that is separated by translation, rotation and vibration. Default: ON (currently not available in public version). Type: string; Possible Values: OFF, ON, VERBOSE; Default: ON. CFOUR_TRANS_INV (CFOUR)¶CFOUR — Specifies whether or not translational invariance is exploited in geometrical derivative calculations. USE(=0) specifies that translational invariance is exploited, while IGNORE (=1) turns it off. Type: string; Possible Values: USE, IGNORE; Default: USE. CFOUR_TREAT_PERT (CFOUR)¶CFOUR — Specifies whether in a correlated NMR chemical shift calculations all perturbations are treated at once or sequentially. Available option are SIMULTANEOUS (=0) and SEQUENTIAL (=1). The latter is at least preferred for large-scale calculations, as it has less demands on the available disk space. Type: string; Possible Values: SIMULTANEOUS, SEQUENTIAL; Default: SIMULTANEOUS. CFOUR_UIJ_THRESHOLD (CFOUR)¶CFOUR — Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coeffi",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:81852,Availability,avail,available,81852,"ype: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR)¶CFOUR — Specifies whether to calculate finite-temperature thermodynamic corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives abbreviated output; and VERBOSE (=2) gives elaborate output that is separated by translation, rotation and vibration. Default: ON (currently not available in public version). Type: string; Possible Values: OFF, ON, VERBOSE; Default: ON. CFOUR_TRANS_INV (CFOUR)¶CFOUR — Specifies whether or not translational invariance is exploited in geometrical derivative calculations. USE(=0) specifies that translational invariance is exploited, while IGNORE (=1) turns it off. Type: string; Possible Values: USE, IGNORE; Default: USE. CFOUR_TREAT_PERT (CFOUR)¶CFOUR — Specifies whether in a correlated NMR chemical shift calculations all perturbations are treated at once or sequentially. Available option are SIMULTANEOUS (=0) and SEQUENTIAL (=1). The latter is at least preferred for large-scale calculations, as it has less demands on the available disk space. Type: string; Possible Values: SIMULTANEOUS, SEQUENTIAL; Default: SIMULTANEOUS. CFOUR_UIJ_THRESHOLD (CFOUR)¶CFOUR — Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR)¶CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANG",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:84815,Availability,toler,tolerance,84815,"s are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTRAN (CFOUR)¶CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR)¶CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR)¶CFOUR — The tolerance for storing transformed integrals. Integrals less than \(10^{-N}\) are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR)¶CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_ZFIELD (CFOUR)¶CFOUR — Specifies the Z-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CHOLESKY (DFOCC)¶DFOCC — Do Cholesky decomposition of the ERI tensor. Type: boolean; Default: false. CHOLESKY_TOLERANCE (DFOCC)¶DFOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLE",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:85714,Availability,toler,tolerance,85714,"lon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR)¶CFOUR — The tolerance for storing transformed integrals. Integrals less than \(10^{-N}\) are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR)¶CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_ZFIELD (CFOUR)¶CFOUR — Specifies the Z-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CHOLESKY (DFOCC)¶DFOCC — Do Cholesky decomposition of the ERI tensor. Type: boolean; Default: false. CHOLESKY_TOLERANCE (DFOCC)¶DFOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (FNOCC)¶FNOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1e-4. CI_DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the CI coefficients?. Type: boolean; Default: false. CI_FILE_START (DETCI)¶DETCI (Expert) — What file do we start at for hd/c/s/d CIvects? Should be 350 for normal CI calculations and 354 if we are going to do a second monomer. Type: integer; Default: 350. CI_MAXITER (DETCI)¶DETCI — Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. CI_NUM_THREADS (DETCI)¶DETCI (Expert) — Number of threads for DETCI. Type: integer; Default: 1. CI_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module Redundancies for det",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:85841,Availability,toler,tolerance,85841,"ntegrals. Integrals less than \(10^{-N}\) are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR)¶CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_ZFIELD (CFOUR)¶CFOUR — Specifies the Z-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CHOLESKY (DFOCC)¶DFOCC — Do Cholesky decomposition of the ERI tensor. Type: boolean; Default: false. CHOLESKY_TOLERANCE (DFOCC)¶DFOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (FNOCC)¶FNOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1e-4. CI_DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the CI coefficients?. Type: boolean; Default: false. CI_FILE_START (DETCI)¶DETCI (Expert) — What file do we start at for hd/c/s/d CIvects? Should be 350 for normal CI calculations and 354 if we are going to do a second monomer. Type: integer; Default: 350. CI_MAXITER (DETCI)¶DETCI — Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. CI_NUM_THREADS (DETCI)¶DETCI (Expert) — Number of threads for DETCI. Type: integer; Default: 1. CI_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module Redundancies for details. Type: string; Possible Values: CONV; Default: CONV. CIBLKS_PRINT (DETCI)¶DETCI — Do print a summary of the CI blocks?. Ty",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:87835,Availability,toler,tolerance,87835,"the CI blocks?. Type: boolean; Default: false. CIS_AMPLITUDE_CUTOFF (CPHF)¶CPHF — Minimum singles amplitude to print in CIS analysis. Type: double; Default: 0.15. COLLAPSE_SIZE (DETCI)¶DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM)¶CCEOM — When collapsing Davidson subspace, whether to also include the previous approximate solution (for each root)? This doubles the number of resulting vectors but generally improves convergence. Type: boolean; Default: true. COLLAPSE_WITH_LAST_CC3 (CCEOM)¶CCEOM — Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. COMPLEX_TOLERANCE (CCEOM)¶CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC)¶DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:89211,Availability,avail,available,89211,"lt: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC)¶PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT)¶SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. COUPLING (PSIMRCC)¶PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC)¶PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING)¶OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF)¶CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF)¶CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS)¶GLOBALS — List of basis function indices ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:92605,Availability,avail,available,92605,"xpert) — CubicScalarGrid maximum number of grid points per evaluation block. Type: integer; Default: 1000. CUBIC_GRID_OVERAGE (FISAPT)¶FISAPT — CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. CUBIC_GRID_OVERAGE (GLOBALS)¶GLOBALS — CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. CUBIC_GRID_SPACING (FISAPT)¶FISAPT — CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to 0.2 bohr each. Type: array; Default: No Default. CUBIC_GRID_SPACING (GLOBALS)¶GLOBALS — CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to 0.2 bohr each. Type: array; Default: No Default. CUTOFF (DFOCC)¶DFOCC — Cutoff value for numerical procedures. Type: integer; Default: 8. CUTOFF (OCC)¶OCC — Cutoff value for numerical procedures. Type: integer; Default: 14. CUTOFF_AMPS_PRINT (ADC)¶ADC — Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. D_CONVERGENCE (FISAPT)¶FISAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. D_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for density, as measured by the orbital gradient. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF density, defined as the RMS or maximum absolute value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMP_INDUCED (PE)¶PE — Enable Thole damping for induced moments. Type: boolean; Default: false. DAMP_MULTIPOLE (PE)¶PE — Enable Thole damping for ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:96495,Availability,error,error,96495,"als from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algorithm to use for the DCT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CCDENSITY)¶CCDENSITY — Reproducing energies from densities ?. Type: integer; Default: 0. DEBUG (CPHF)¶CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS)¶GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT)¶CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT)¶SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT)¶SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP)¶EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS)¶GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI)¶DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC)¶FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS)¶GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCT (DCT)¶DCT — Auxiliary basis set for DCT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT)¶SAPT — Auxiliary basis set for SAPT Elst10 and Ex",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:96514,Availability,error,error,96514,"als from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algorithm to use for the DCT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CCDENSITY)¶CCDENSITY — Reproducing energies from densities ?. Type: integer; Default: 0. DEBUG (CPHF)¶CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS)¶GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT)¶CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT)¶SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT)¶SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP)¶EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS)¶GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI)¶DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC)¶FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS)¶GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCT (DCT)¶DCT — Auxiliary basis set for DCT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT)¶SAPT — Auxiliary basis set for SAPT Elst10 and Ex",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:100188,Availability,down,down,100188,"ns. Defaults to a JKFIT basis. Type: string; Possible Values: basis string; Default: No Default. DF_BUMP_R0 (SCF)¶SCF — Bump function min radius. Type: double; Default: 0.0. DF_BUMP_R1 (SCF)¶SCF — Bump function max radius. Type: double; Default: 0.0. DF_DOMAINS (SCF)¶SCF — FastDF geometric fitting domain selection algorithm. Type: string; Possible Values: DIATOMIC, SPHERES; Default: DIATOMIC. DF_FITTING_CONDITION (SCF)¶SCF (Expert) — Fitting Condition, i.e. eigenvalue threshold for RI basis. Analogous to S_TOLERANCE. Type: double; Default: 1.0e-10. DF_INTS_IO (DFMP2)¶DFMP2 (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_IO (SCF)¶SCF (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_NUM_THREADS (DFMP2)¶DFMP2 — Number of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. DF_INTS_NUM_THREADS (SCF)¶SCF — Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC (SCF)¶SCF — FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_SCF_GUESS (SCF)¶SCF — Do a density fitting SCF calculation to converge the orbitals before switching to the use of exact integrals in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. DF_THETA (SCF)¶SCF — FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. DFCC (FNOCC)¶FNOCC — Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. DFMP2_MEM_FACTOR (DFMP2)¶DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE (DFMP2)¶DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE (DFMP2)",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:101035,Availability,error,error,101035,"te integrals with. 0 is wild card. Type: integer; Default: 0. DF_INTS_NUM_THREADS (SCF)¶SCF — Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC (SCF)¶SCF — FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_SCF_GUESS (SCF)¶SCF — Do a density fitting SCF calculation to converge the orbitals before switching to the use of exact integrals in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. DF_THETA (SCF)¶SCF — FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. DFCC (FNOCC)¶FNOCC — Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. DFMP2_MEM_FACTOR (DFMP2)¶DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE (DFMP2)¶DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE (DFMP2)¶DFMP2 — Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DFT_ALPHA (SCF)¶SCF — The DFT Exact-exchange parameter. Type: double; Default: 0.0. DFT_ALPHA_C (SCF)¶SCF — The DFT Correlation hybrid parameter. Type: double; Default: 0.0. DFT_BASIS_TOLERANCE (SCF)¶SCF — DFT basis cutoff. Type: conv double; Default: 1.0e-12. DFT_BLOCK_MAX_POINTS (SCF)¶SCF (Expert) — The maximum number of grid points per evaluation block. Type: integer; Default: 256. DFT_BLOCK_MAX_RADIUS (SCF)¶SCF (Expert) — The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS (SCF)¶SCF (Expert) — The minimum number of grid points per evaluation block. Type: integer; Default: 100. DFT_BLOCK_SCHEME (SCF)¶SCF (Expert) — The blocking scheme for DFT. Type: string; Possible Values: NAIV",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:101179,Availability,error,error,101179,"memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC (SCF)¶SCF — FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_SCF_GUESS (SCF)¶SCF — Do a density fitting SCF calculation to converge the orbitals before switching to the use of exact integrals in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. DF_THETA (SCF)¶SCF — FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. DFCC (FNOCC)¶FNOCC — Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. DFMP2_MEM_FACTOR (DFMP2)¶DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE (DFMP2)¶DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE (DFMP2)¶DFMP2 — Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DFT_ALPHA (SCF)¶SCF — The DFT Exact-exchange parameter. Type: double; Default: 0.0. DFT_ALPHA_C (SCF)¶SCF — The DFT Correlation hybrid parameter. Type: double; Default: 0.0. DFT_BASIS_TOLERANCE (SCF)¶SCF — DFT basis cutoff. Type: conv double; Default: 1.0e-12. DFT_BLOCK_MAX_POINTS (SCF)¶SCF (Expert) — The maximum number of grid points per evaluation block. Type: integer; Default: 256. DFT_BLOCK_MAX_RADIUS (SCF)¶SCF (Expert) — The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS (SCF)¶SCF (Expert) — The minimum number of grid points per evaluation block. Type: integer; Default: 100. DFT_BLOCK_SCHEME (SCF)¶SCF (Expert) — The blocking scheme for DFT. Type: string; Possible Values: NAIVE, OCTREE; Default: OCTREE. DFT_BS_RADIUS_ALPHA (SCF)¶SCF — Factor for effective BS radius in radial grid. Type: double; Default: 1.0. DFT_DENSITY_TOL",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:106038,Availability,robust,robust,106038,"RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIAGONALIZE_HEFF (PSIMRCC)¶PSIMRCC — Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIE_IF_NOT_CONVERGED (GLOBALS)¶GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY)¶CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA)¶CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE)¶CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI)¶DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to a",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:107500,Availability,error,error,107500,"RGED (GLOBALS)¶GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY)¶CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA)¶CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE)¶CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI)¶DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Defa",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:107620,Availability,error,error,107620,"NERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA)¶CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE)¶CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI)¶DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:107829,Availability,error,error,107829,"CCRESPONSE)¶CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI)¶DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: b",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:107945,Availability,error,error,107945,"CI)¶DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is perfor",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:108069,Availability,error,error,108069,"Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: intege",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:108185,Availability,error,error,108185,"rue. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector bel",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:108311,Availability,error,error,108311,")¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equatio",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:108431,Availability,error,error,108431,teger; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer,MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:108547,Availability,error,error,108547,ype: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOC,MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:108663,Availability,error,error,108663,"n. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, C",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:108770,Availability,error,error,108770,": 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for f",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:108796,Availability,robust,robust,108796,": 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for f",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:108812,Availability,error,error,108812,": 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for f",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:109169,Availability,error,error,109169,"_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF)¶SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS)¶GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG)¶DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:109612,Availability,avail,available,109612,"Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF)¶SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS)¶GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG)¶DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG)¶DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG)¶DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG)¶DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG)¶DMRG — Whether or not to use DIIS for DMRG. Type: ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:110696,Availability,checkpoint,checkpoint,110696,". Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF)¶SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS)¶GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG)¶DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG)¶DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG)¶DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG)¶DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG)¶DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG)¶DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG)¶DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG)¶DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT (DMRG)¶DMRG — Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG)¶DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:111743,Availability,checkpoint,checkpoints,111743,"k (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG)¶DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG)¶DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT (DMRG)¶DMRG — Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG)¶DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG)¶DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG)¶DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG)¶DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (DMRG)¶DMRG — Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG)¶DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG)¶DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG)¶DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG)¶DMRG — Maximu",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:112951,Availability,toler,tolerances,112951,"rix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (DMRG)¶DMRG — Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG)¶DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG)¶DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG)¶DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG)¶DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG)¶DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG)¶DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG)¶DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG)¶DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG)¶DMRG — The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES (DMRG)¶DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG)¶DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT)¶SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC)¶DFOCC — Do apply D",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:114508,Availability,error,error,114508,"STATES (DMRG)¶DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG)¶DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT)¶SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC)¶DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC)¶OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Dispersion terms. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: b",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:115046,Availability,error,error,115046,"extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Dispersion terms. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — Th",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:115579,Availability,error,error,115579,"(Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:121705,Availability,avail,available,121705,"he extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING)¶OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM)¶CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. EOM_REFERENCE (CCEOM)¶CCEOM — Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR)¶CCHBAR — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EP2_CONVERGENCE (DFEP2)¶DFEP2 — What is the maximum number of iterations?. Type: conv double; Default: 5.e-5. EP2_MAXITER (DFEP2)¶DFEP2 — What is the maximum number of iterations?. Type: integer; Default: 20. EP2_NUM_EA (DFEP2)¶DFEP2 — Number of Electron Affinities to compute, starting with the LUMO. Type: integer; Default: 0. EP2_NUM_IP (DFEP2)¶DFEP2 — Number of Ionization Potentials to compute, starting with the HOMO. Type: integer; Default: 3. EP2_ORBITALS (DFEP2)¶DFEP2 — Explicitly pick orbitals to use in the EP2 method, overrides EP2_NUM_IP and EP2_NUM_EA options. Input array should be [[orb1, orb2], [], …] for each irrep. Type: array; Defau",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:132418,Availability,checkpoint,checkpoint,132418," specifies arrays containing the absolute alpha string indices (A_i below), absolute beta indices (B_i below), and CI coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], …]. Type: array; Default: No Default. FORCE_RESTART (CCENERGY)¶CCENERGY (Expert) — Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. FORCE_TWOCON (MCSCF)¶MCSCF — Do attempt to force a two configuration solution by starting with CI coefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. FRAC_DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF)¶SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF)¶SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF)¶SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF)¶SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF)¶SCF — The occupations of the orbital indices specified above (\(0.0\le {\rm occ} \le 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING)¶OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FRAG_REF_ATOMS (OPTKING)¶OPTKING — Which atoms define the reference points for interfragment coordinates?. Type: array; Default: No Default. FREEZE_CORE (GLOBALS)¶GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragme",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:132953,Availability,redundant,redundant,132953,"coefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. FRAC_DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF)¶SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF)¶SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF)¶SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF)¶SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF)¶SCF — The occupations of the orbital indices specified above (\(0.0\le {\rm occ} \le 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING)¶OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FRAG_REF_ATOMS (OPTKING)¶OPTKING — Which atoms define the reference points for interfragment coordinates?. Type: array; Default: No Default. FREEZE_CORE (GLOBALS)¶GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total numbe",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:140041,Availability,avail,available,140041,"ESS (SCF)¶SCF — The type of guess orbitals. Defaults to READ for geometry optimizations after the first step, to CORE for single atoms, and to SAD otherwise. The HUCKEL guess employs on-the-fly calculations like SAD, as described in doi:10.1021/acs.jctc.8b01089 which also describes the SAP guess. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, HUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI)¶DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI)¶DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI)¶DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:150023,Availability,error,error,150023,"KING)¶OPTKING — IRC step size in bohr(amu)\(^{1/2}\). Type: double; Default: 0.2. IRC_STOP (OPTKING)¶OPTKING — Decide when to stop IRC calculations. Type: string; Possible Values: ASK, STOP, GO; Default: STOP. ISOTROPIC_POL (PE)¶PE — Make polarizabilities isotropic. Type: boolean; Default: false. ISTOP (DETCI)¶DETCI — Do stop DETCI after string information is formed and before integrals are read?. Type: boolean; Default: false. JOBTYPE (CCLAMBDA)¶CCLAMBDA (Expert) — Type of job being performed. Type: string; Default: No Default. KEEP_INTCOS (OPTKING)¶OPTKING — Keep internal coordinate definition file. Type: boolean; Default: false. KIND (ADC)¶ADC — The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. LEVEL_SHIFT (DFOCC)¶DFOCC — Level shift to aid convergence. Type: double; Default: 0.02. LEVEL_SHIFT (MCSCF)¶MCSCF — Level shift to aid convergence. Type: double; Default: 0.0. LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 0.02. LEVEL_SHIFT (SCF)¶SCF — Do use a level shift?. Type: double; Default: 0.0. LEVEL_SHIFT_CUTOFF (SCF)¶SCF — DIIS error at which to stop applying the level shift. Type: double; Default: 1e-2. LINEAR (CCRESPONSE)¶CCRESPONSE — Do Bartlett size-extensive linear model?. Type: boolean; Default: false. LINEQ_SOLVER (DFOCC)¶DFOCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. LINEQ_SOLVER (OCC)¶OCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. LINESEARCH_STATIC_MAX (OPTKING)¶OPTKING — If doing a static line search, this fixes the largest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.100. LINESEARCH_STATIC_MIN (OPTKING)¶OPTKING — If doing a static line search, this fixes the shortest step, whose largest change in an internal co",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:150177,Availability,error,error,150177,"; Possible Values: ASK, STOP, GO; Default: STOP. ISOTROPIC_POL (PE)¶PE — Make polarizabilities isotropic. Type: boolean; Default: false. ISTOP (DETCI)¶DETCI — Do stop DETCI after string information is formed and before integrals are read?. Type: boolean; Default: false. JOBTYPE (CCLAMBDA)¶CCLAMBDA (Expert) — Type of job being performed. Type: string; Default: No Default. KEEP_INTCOS (OPTKING)¶OPTKING — Keep internal coordinate definition file. Type: boolean; Default: false. KIND (ADC)¶ADC — The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. LEVEL_SHIFT (DFOCC)¶DFOCC — Level shift to aid convergence. Type: double; Default: 0.02. LEVEL_SHIFT (MCSCF)¶MCSCF — Level shift to aid convergence. Type: double; Default: 0.0. LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 0.02. LEVEL_SHIFT (SCF)¶SCF — Do use a level shift?. Type: double; Default: 0.0. LEVEL_SHIFT_CUTOFF (SCF)¶SCF — DIIS error at which to stop applying the level shift. Type: double; Default: 1e-2. LINEAR (CCRESPONSE)¶CCRESPONSE — Do Bartlett size-extensive linear model?. Type: boolean; Default: false. LINEQ_SOLVER (DFOCC)¶DFOCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. LINEQ_SOLVER (OCC)¶OCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. LINESEARCH_STATIC_MAX (OPTKING)¶OPTKING — If doing a static line search, this fixes the largest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.100. LINESEARCH_STATIC_MIN (OPTKING)¶OPTKING — If doing a static line search, this fixes the shortest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.001. LINESEARCH_STATIC_N (OPTKING)¶OPTKING — If doing a static line search, scan this many points.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:155900,Availability,avail,available,155900,"RS (FISAPT)¶FISAPT — IBO Stars procedure. Type: boolean; Default: false. LOCAL_MAXITER (FISAPT)¶FISAPT — Maximum iterations in localization. Type: integer; Default: 1000. LOCAL_MAXITER (SCF)¶SCF — The maxiter on the orbital localization procedure. Type: integer; Default: 200. LOCAL_METHOD (CCENERGY)¶CCENERGY — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METHOD (CCEOM)¶CCEOM — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METHOD (CCLAMBDA)¶CCLAMBDA — Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_METHOD (CCRESPONSE)¶CCRESPONSE — Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_PAIRDEF (CCENERGY)¶CCENERGY — Definition of local pair domains, default is BP, Boughton-Pulay. Type: string; Possible Values: BP, RESPONSE; Default: BP. LOCAL_PAIRDEF (CCLAMBDA)¶CCLAMBDA — Definition of local pair domains. Type: string; Default: No Default. LOCAL_PAIRDEF (CCRESPONSE)¶CCRESPONSE — Definition of local pair domains. Type: string; Default: NONE. LOCAL_PRECONDITIONER (CCEOM)¶CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT)¶FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY)¶CCENERGY — Desired treatment of “weak pai",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:156107,Availability,avail,available,156107,"r on the orbital localization procedure. Type: integer; Default: 200. LOCAL_METHOD (CCENERGY)¶CCENERGY — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METHOD (CCEOM)¶CCEOM — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METHOD (CCLAMBDA)¶CCLAMBDA — Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_METHOD (CCRESPONSE)¶CCRESPONSE — Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_PAIRDEF (CCENERGY)¶CCENERGY — Definition of local pair domains, default is BP, Boughton-Pulay. Type: string; Possible Values: BP, RESPONSE; Default: BP. LOCAL_PAIRDEF (CCLAMBDA)¶CCLAMBDA — Definition of local pair domains. Type: string; Default: No Default. LOCAL_PAIRDEF (CCRESPONSE)¶CCRESPONSE — Definition of local pair domains. Type: string; Default: NONE. LOCAL_PRECONDITIONER (CCEOM)¶CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT)¶FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY)¶CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to cor",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:157764,Availability,avail,available,157764," atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY)¶CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM)¶CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA)¶CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE)¶CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC)¶PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI)¶DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI)¶DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2)¶DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS)¶GLOBALS (Expert) — Number of columns to print in calls to Matrix::print",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:157989,Availability,avail,available,157989," treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM)¶CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA)¶CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE)¶CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC)¶PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI)¶DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI)¶DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2)¶DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS)¶GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIIS",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:160529,Availability,avail,available,160529,"ximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. MAX_MEM_BUF (SCF)¶SCF — Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MAX_MOGRAD_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired E_CONVERGENCE. The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MAX_MOGRAD_CONVERGENCE (OCC)¶OCC — Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired E_CONVERGENCE. The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MAX_NUM_VECS (ADC)¶ADC — Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAX_NUM_VECS (DETCI)¶DETCI — Maximum number of Davidson subspace vectors which can be held on disk for the CI coefficient and sigma vectors. (There is one H(diag) vector and the number of D vectors is equal to the number of roots). When the number of vectors on disk reaches the value of MAX_NUM_VECS, the Davidson subspace will be collapsed to COLLAPSE_SIZE vectors for each root. This is very helpful for saving disk space. Defaults to CI_MAXITER * NUM_ROOTS + NUM_INIT_VECS. Type: integer; Default: 0. MAX_RADIAL_MOMENT (GLOBALS)¶GLOBALS — Maximum Radial Moment to Calculate. Type: integer; Default: 4. MAXITER (ADC)¶ADC — Maximum number of iterations. Type: integer; Default: 50. MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. MAXITER (CCEOM)¶CCEOM — Maximum number of iterations. Type: integer; Default: 80. MAXITER (CCLAMBDA)¶CCLAMBDA — Maximum number of iterations. Type:",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:163356,Availability,error,error,163356,"50. MAXITER (SCF)¶SCF — Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MBIS_D_CONVERGENCE (GLOBALS)¶GLOBALS — MBIS Convergence Criteria. Type: conv double; Default: 1.0e-8. MBIS_MAXITER (GLOBALS)¶GLOBALS — Maximum Number of MBIS Iterations. Type: integer; Default: 500. MBIS_PRUNING_SCHEME (GLOBALS)¶GLOBALS — Pruning scheme for MBIS Grid. Type: string; Default: ROBUST. MBIS_RADIAL_POINTS (GLOBALS)¶GLOBALS — MBIS Number of Radial Points. Type: integer; Default: 75. MBIS_SPHERICAL_POINTS (GLOBALS)¶GLOBALS — MBIS Number of Spherical Points. Type: integer; Default: 302. MCSCF_ALGORITHM (DETCI)¶DETCI — Convergence algorithm to utilize. Two-Step, Augmented Hessian, or One-Step. Defaults to TS for RASSCF. Type: string; Possible Values: TS, AH; Default: TS. MCSCF_CI_CLEANUP (DETCI)¶DETCI — Cleanup the CI info at the end of a run?. Type: boolean; Default: true. MCSCF_DIIS_ERROR_TYPE (DETCI)¶DETCI — DIIS error vector type either, the AO orbital gradient or the orbital rotation update matrix. Type: string; Possible Values: GRAD, UPDATE; Default: GRAD. MCSCF_DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation for TS convergence. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of DIIS vectors for TS convergence. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI)¶DETCI — Iteration to turn on DIIS for TS convergence. Type: integer; Default: 3. MCSCF_DPD_CLEANUP (DETCI)¶DETCI — Cleanup the DPD MCSCF object at the end of a run?. Type: boolean; Default: true. MCSCF_E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI)¶DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI)¶DETCI — Maximum value in the",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:164241,Availability,avail,available,164241,"CI_CLEANUP (DETCI)¶DETCI — Cleanup the CI info at the end of a run?. Type: boolean; Default: true. MCSCF_DIIS_ERROR_TYPE (DETCI)¶DETCI — DIIS error vector type either, the AO orbital gradient or the orbital rotation update matrix. Type: string; Possible Values: GRAD, UPDATE; Default: GRAD. MCSCF_DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation for TS convergence. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of DIIS vectors for TS convergence. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI)¶DETCI — Iteration to turn on DIIS for TS convergence. Type: integer; Default: 3. MCSCF_DPD_CLEANUP (DETCI)¶DETCI — Cleanup the DPD MCSCF object at the end of a run?. Type: boolean; Default: true. MCSCF_E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI)¶DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI)¶DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI)¶DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_ROTATE (DETCI)¶DETCI — Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals. Type: array; Default: No Default. MCSCF_SO_START_E (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-4. MCSCF_SO_START_GRAD (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on RMS of orbi",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:165429,Availability,avail,available,165429,"re scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI)¶DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_ROTATE (DETCI)¶DETCI — Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals. Type: array; Default: No Default. MCSCF_SO_START_E (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-4. MCSCF_SO_START_GRAD (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on RMS of orbital gradient. Type: double; Default: 1e-4. MCSCF_TYPE (DETCI)¶DETCI — Method to handle the two-electron integrals. Type: string; Possible Values: DF, CONV, AO; Default: CONV. MEMORY (ADC)¶ADC — The amount of memory available (in Mb) This option is only available for the built-in ADC backend. Type: integer; Default: 1000. MIN_CCD_DIISVECS (SAPT)¶SAPT — Minimum number of vectors used in CCD-DIIS. Type: integer; Default: 4. MINAO_BASIS (FISAPT)¶FISAPT (Expert) — MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. MIXED (DETCI)¶DETCI (Expert) — Do allow “mixed” RAS II/RAS III excitations into the CI space? If FALSE, then if there are any electrons in RAS III, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MIXED4 (DETCI)¶DETCI (Expert) — Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC)¶DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC)¶OCC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:165467,Availability,avail,available,165467,"re scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI)¶DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_ROTATE (DETCI)¶DETCI — Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals. Type: array; Default: No Default. MCSCF_SO_START_E (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-4. MCSCF_SO_START_GRAD (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on RMS of orbital gradient. Type: double; Default: 1e-4. MCSCF_TYPE (DETCI)¶DETCI — Method to handle the two-electron integrals. Type: string; Possible Values: DF, CONV, AO; Default: CONV. MEMORY (ADC)¶ADC — The amount of memory available (in Mb) This option is only available for the built-in ADC backend. Type: integer; Default: 1000. MIN_CCD_DIISVECS (SAPT)¶SAPT — Minimum number of vectors used in CCD-DIIS. Type: integer; Default: 4. MINAO_BASIS (FISAPT)¶FISAPT (Expert) — MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. MIXED (DETCI)¶DETCI (Expert) — Do allow “mixed” RAS II/RAS III excitations into the CI space? If FALSE, then if there are any electrons in RAS III, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MIXED4 (DETCI)¶DETCI (Expert) — Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC)¶DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC)¶OCC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:166480,Availability,error,error,166480,"or the built-in ADC backend. Type: integer; Default: 1000. MIN_CCD_DIISVECS (SAPT)¶SAPT — Minimum number of vectors used in CCD-DIIS. Type: integer; Default: 4. MINAO_BASIS (FISAPT)¶FISAPT (Expert) — MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. MIXED (DETCI)¶DETCI (Expert) — Do allow “mixed” RAS II/RAS III excitations into the CI space? If FALSE, then if there are any electrons in RAS III, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MIXED4 (DETCI)¶DETCI (Expert) — Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC)¶DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 6. MO_MAXITER (DFOCC)¶DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC)¶OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF)¶MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC)¶OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_STEP_MAX (DFOCC)¶DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC)¶OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC)¶OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF)¶CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:169586,Availability,error,error,169586,"orbitals to excite to in MOM (+/- for alpha/beta). Type: array; Default: No Default. MP2_AMP_TYPE (DFOCC)¶DFOCC — The algorithm that used to handle mp2 amplitudes. The DIRECT option means compute amplitudes on the fly * whenever they are necessary. Type: string; Possible Values: DIRECT, CONV; Default: DIRECT. MP2_AMPS_PRINT (CCENERGY)¶CCENERGY — Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. MP2_CCSD_METHOD (PSIMRCC)¶PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC)¶PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY)¶CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2)¶DFMP2 — OS Scale. Type: double; Default: 6.0. MP2_OS_SCALE (DFOCC)¶DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SCALE_OS (FNOCC)¶FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. MP2_SOS_SCALE (DFOCC)¶DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY)¶CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (DFMP2)¶DFMP2 — SS Scale. Type: double; Default: 1.0. MP2_SS_SCALE (DFOCC)¶DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:169976,Availability,error,error,169976,"starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. MP2_CCSD_METHOD (PSIMRCC)¶PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC)¶PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY)¶CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2)¶DFMP2 — OS Scale. Type: double; Default: 6.0. MP2_OS_SCALE (DFOCC)¶DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SCALE_OS (FNOCC)¶FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. MP2_SOS_SCALE (DFOCC)¶DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY)¶CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (DFMP2)¶DFMP2 — SS Scale. Type: double; Default: 1.0. MP2_SS_SCALE (DFOCC)¶DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type:",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:170196,Availability,error,error,170196,"UESS (PSIMRCC)¶PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY)¶CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2)¶DFMP2 — OS Scale. Type: double; Default: 6.0. MP2_OS_SCALE (DFOCC)¶DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SCALE_OS (FNOCC)¶FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. MP2_SOS_SCALE (DFOCC)¶DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY)¶CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (DFMP2)¶DFMP2 — SS Scale. Type: double; Default: 1.0. MP2_SS_SCALE (DFOCC)¶DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:170538,Availability,error,error,170538,"S_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SCALE_OS (FNOCC)¶FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. MP2_SOS_SCALE (DFOCC)¶DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY)¶CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (DFMP2)¶DFMP2 — SS Scale. Type: double; Default: 1.0. MP2_SS_SCALE (DFOCC)¶DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = tru",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:171505,Availability,avail,available,171505," — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:171575,Availability,avail,available,171575," — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:173958,Availability,avail,available,173958,"o otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC)¶MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC)¶MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC)¶MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI)¶DETCI — Do use the \(M_s = 0\) component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI)¶DETCI — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (DFOCC)¶DFOCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (FNOCC)¶FNOCC — Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. NAT_ORBS (OCC)¶OCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS_T2 (SAPT)¶SAPT — Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3 ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:175632,Availability,avail,available,175632,"ype: boolean; Default: false. NAT_ORBS_T2 (SAPT)¶SAPT — Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3 (SAPT)¶SAPT — Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4 (SAPT)¶SAPT — Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NEW_TRIPLES (CCENERGY)¶CCENERGY — Do use new triples?. Type: boolean; Default: true. NEW_TRIPLES (CCEOM)¶CCEOM — Do use new triples?. Type: boolean; Default: true. NEWTON_CONVERGENCE (ADC)¶ADC — The convergence criterion for pole searching step. This option is only available for the built-in ADC backend. Type: conv double; Default: 1e-7. NL_DISPERSION_PARAMETERS (SCF)¶SCF — Parameters defining the -NL/-V dispersion correction. First b, then C. Type: array; Default: No Default. NO_DFILE (DETCI)¶DETCI (Expert) — Do use the last vector space in the BVEC file to write scratch DVEC rather than using a separate DVEC file? (Only possible if NUM_ROOTS = 1.). Type: boolean; Default: false. NO_SINGLES (PSIMRCC)¶PSIMRCC — Do disregard updating single excitation amplitudes?. Type: boolean; Default: false. NORM_TOLERANCE (ADC)¶ADC — The cutoff norm of residual vector in SEM step. This option is only available for the built-in ADC backend. Type: conv double; Default: 1e-6. NORMAL_MODES_WRITE (FINDIF)¶FINDIF — Do write a file containing the normal modes in Molden format? If so, the filename will end in .molden_normal_modes, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: bool",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:176266,Availability,avail,available,176266,"D T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NEW_TRIPLES (CCENERGY)¶CCENERGY — Do use new triples?. Type: boolean; Default: true. NEW_TRIPLES (CCEOM)¶CCEOM — Do use new triples?. Type: boolean; Default: true. NEWTON_CONVERGENCE (ADC)¶ADC — The convergence criterion for pole searching step. This option is only available for the built-in ADC backend. Type: conv double; Default: 1e-7. NL_DISPERSION_PARAMETERS (SCF)¶SCF — Parameters defining the -NL/-V dispersion correction. First b, then C. Type: array; Default: No Default. NO_DFILE (DETCI)¶DETCI (Expert) — Do use the last vector space in the BVEC file to write scratch DVEC rather than using a separate DVEC file? (Only possible if NUM_ROOTS = 1.). Type: boolean; Default: false. NO_SINGLES (PSIMRCC)¶PSIMRCC — Do disregard updating single excitation amplitudes?. Type: boolean; Default: false. NORM_TOLERANCE (ADC)¶ADC — The cutoff norm of residual vector in SEM step. This option is only available for the built-in ADC backend. Type: conv double; Default: 1e-6. NORMAL_MODES_WRITE (FINDIF)¶FINDIF — Do write a file containing the normal modes in Molden format? If so, the filename will end in .molden_normal_modes, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. NUM_AMPS_PRINT (ADC)¶ADC — Number of components of transition amplitudes printed. This option is only available for the built-in ADC backend. Type: integer; Default: 5. NUM_AMPS_PRINT (CCENERGY)¶CCENERGY — Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. NUM_AMPS_PRINT (CCEOM)¶CCEOM — Number of important CC amplitudes to print. Type: integer; Default: 5. NUM_AMPS_PRINT (CCLAMBDA)¶CCLAMBDA — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. NUM_AMPS_PRINT (CCRESPONSE)¶CCRESPONSE — Number of import",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:176764,Availability,avail,available,176764," dispersion correction. First b, then C. Type: array; Default: No Default. NO_DFILE (DETCI)¶DETCI (Expert) — Do use the last vector space in the BVEC file to write scratch DVEC rather than using a separate DVEC file? (Only possible if NUM_ROOTS = 1.). Type: boolean; Default: false. NO_SINGLES (PSIMRCC)¶PSIMRCC — Do disregard updating single excitation amplitudes?. Type: boolean; Default: false. NORM_TOLERANCE (ADC)¶ADC — The cutoff norm of residual vector in SEM step. This option is only available for the built-in ADC backend. Type: conv double; Default: 1e-6. NORMAL_MODES_WRITE (FINDIF)¶FINDIF — Do write a file containing the normal modes in Molden format? If so, the filename will end in .molden_normal_modes, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. NUM_AMPS_PRINT (ADC)¶ADC — Number of components of transition amplitudes printed. This option is only available for the built-in ADC backend. Type: integer; Default: 5. NUM_AMPS_PRINT (CCENERGY)¶CCENERGY — Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. NUM_AMPS_PRINT (CCEOM)¶CCEOM — Number of important CC amplitudes to print. Type: integer; Default: 5. NUM_AMPS_PRINT (CCLAMBDA)¶CCLAMBDA — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. NUM_AMPS_PRINT (CCRESPONSE)¶CCRESPONSE — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 5. NUM_AMPS_PRINT (DETCI)¶DETCI — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. NUM_CORE_ORBITALS (ADC)¶ADC — Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_DETS_PRINT (DETCI)¶DETCI — Number of important determinants to print. Type: integer; D",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:177624,Availability,avail,available,177624,. Type: boolean; Default: false. NUM_AMPS_PRINT (ADC)¶ADC — Number of components of transition amplitudes printed. This option is only available for the built-in ADC backend. Type: integer; Default: 5. NUM_AMPS_PRINT (CCENERGY)¶CCENERGY — Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. NUM_AMPS_PRINT (CCEOM)¶CCEOM — Number of important CC amplitudes to print. Type: integer; Default: 5. NUM_AMPS_PRINT (CCLAMBDA)¶CCLAMBDA — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. NUM_AMPS_PRINT (CCRESPONSE)¶CCRESPONSE — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 5. NUM_AMPS_PRINT (DETCI)¶DETCI — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. NUM_CORE_ORBITALS (ADC)¶ADC — Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_DETS_PRINT (DETCI)¶DETCI — Number of important determinants to print. Type: integer; Default: 20. NUM_FROZEN_DOCC (GLOBALS)¶GLOBALS — The number of core orbitals to freeze in later correlated computations. This trumps FREEZE_CORE. Type: integer; Default: 0. NUM_FROZEN_UOCC (GLOBALS)¶GLOBALS — The number of virtual orbitals to freeze in later correlated computations. Type: integer; Default: 0. NUM_GUESSES (ADC)¶ADC — Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. NUM_INIT_VECS (DETCI)¶DETCI (Expert) — The number of initial vectors to use in the CI iterative procedure. Defaults to the number of roots. Type: integer; Default: 0. NUM_ROOTS (DETCI)¶DETCI — number of CI roots to find. Type: integer; Default: 1. OCC_ORBS_PRINT (DFOCC)¶DFOCC — Do print OCC orbital energies?. Type: boolean,MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:178245,Availability,avail,available,178245,SPONSE — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 5. NUM_AMPS_PRINT (DETCI)¶DETCI — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. NUM_CORE_ORBITALS (ADC)¶ADC — Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_DETS_PRINT (DETCI)¶DETCI — Number of important determinants to print. Type: integer; Default: 20. NUM_FROZEN_DOCC (GLOBALS)¶GLOBALS — The number of core orbitals to freeze in later correlated computations. This trumps FREEZE_CORE. Type: integer; Default: 0. NUM_FROZEN_UOCC (GLOBALS)¶GLOBALS — The number of virtual orbitals to freeze in later correlated computations. Type: integer; Default: 0. NUM_GUESSES (ADC)¶ADC — Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. NUM_INIT_VECS (DETCI)¶DETCI (Expert) — The number of initial vectors to use in the CI iterative procedure. Defaults to the number of roots. Type: integer; Default: 0. NUM_ROOTS (DETCI)¶DETCI — number of CI roots to find. Type: integer; Default: 1. OCC_ORBS_PRINT (DFOCC)¶DFOCC — Do print OCC orbital energies?. Type: boolean; Default: false. OCC_ORBS_PRINT (OCC)¶OCC — Do print OCC orbital energies?. Type: boolean; Default: false. OCC_PERCENTAGE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE. Type: double; Default: 99.0. OCC_TOLERANCE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE w,MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:179692,Availability,avail,available,179692,"?. Type: boolean; Default: false. OCC_PERCENTAGE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE. Type: double; Default: 99.0. OCC_TOLERANCE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. OCC_TOLERANCE (SAPT)¶SAPT — Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. ODC_GUESS (DCT)¶DCT — Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OEPROP (DFOCC)¶DFOCC — Do compute one electron properties?. Type: boolean; Default: false. OEPROP (OCC)¶OCC — Do compute one electron properties?. Type: boolean; Default: false. OFFDIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the off-diagonal corrections in (T) computations?. Type: boolean; Default: true. OMEGA (CCRESPONSE)¶CCRESPONSE — Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. OMEGA_ERF (MINTS)¶MINTS — Omega scaling for Erf and Erfc. Type: double; Default: 0.20. ONEPDM (CCDENSITY)¶CCDENSITY — Do compute one-particle density matrix?. Type: boolean; Default: false. ONEPDM (DFMP2)¶DFMP2 — Do compute one-particle density ma",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:182130,Availability,redundant,redundant,182130,"Type: double; Default: 0.1. ONEPOT_GRID_READ (SCF)¶SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC)¶DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DCT)¶DCT — Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orb",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:182381,Availability,avail,available,182381,"pute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:184952,Availability,avail,available,184952,"tion. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCT)¶DCT (Expert) — The shift applied to the denominator in the orbital update iterations. Type: double; Default: 0.0. ORBITALS_WRITE (SCF)¶SCF — File name (case sensitive) to which to serialize Wavefunction orbital data. Type: string; Default: No Default. ORTH_TYPE (DFOCC)¶DFOCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. ORTH_TYPE (OCC)¶OCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. OS_SCALE (OCC)¶OCC — A custom scaling parameter for opposite-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. OVERLAP_CHECK (CCEOM)¶CCEOM — Report overlaps with old excited-state wave functions, if available, and store current wave functions for later use. Type: boolean; Default: false. P (THERMO)¶THERMO — Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. PAIR_ENERGIES_PRINT (CCENERGY)¶CCENERGY — Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. PARALLEL (SCF)¶SCF (Expert) — Do run in parallel?. Type: boolean; Default: false. PARENT_SYMMETRY (GLOBALS)¶GLOBALS (Expert) — For displacements, symmetry (Schoenflies symbol) of ‘parent’ (undisplaced) reference molecule. Internal use only for finite difference. Type: string; Default: No Default. PCG_BETA_TYPE (DFOCC)¶DFOCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_BETA_TYPE (OCC)¶OCC — Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere). Type: string; Possible Values: FLETCHER_REEVES, P",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:187453,Availability,error,error,187453,"pe: conv double; Default: 1e-6. PCG_MAXITER (DFOCC)¶DFOCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 50. PCG_MAXITER (OCC)¶OCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 30. PCM (GLOBALS)¶GLOBALS — PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_CC_TYPE (PCM)¶PCM — PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. PCM_SCF_TYPE (PCM)¶PCM (Expert) — Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCMSOLVER_PARSED_FNAME (PCM)¶PCM (Expert) — Name of the PCMSolver input file as parsed by pcmsolver.py. Type: string; Default: No Default. PE (GLOBALS)¶GLOBALS — PE boolean for polarizable embedding module. Type: boolean; Default: false. PE_ECP (PE)¶PE — use PE(ECP) repulsive potentials. Type: boolean; Default: false. PERTURB_CBS (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: false. PERTURB_CBS_COUPLING (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. PERTURB_DIPOLE (SCF)¶SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF)¶SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI)¶DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = H_0 + z H_1\). Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF)¶SCF — Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH (SCF)¶SCF — The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:187569,Availability,error,error,187569,"ations. Type: integer; Default: 50. PCG_MAXITER (OCC)¶OCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 30. PCM (GLOBALS)¶GLOBALS — PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_CC_TYPE (PCM)¶PCM — PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. PCM_SCF_TYPE (PCM)¶PCM (Expert) — Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCMSOLVER_PARSED_FNAME (PCM)¶PCM (Expert) — Name of the PCMSolver input file as parsed by pcmsolver.py. Type: string; Default: No Default. PE (GLOBALS)¶GLOBALS — PE boolean for polarizable embedding module. Type: boolean; Default: false. PE_ECP (PE)¶PE — use PE(ECP) repulsive potentials. Type: boolean; Default: false. PERTURB_CBS (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: false. PERTURB_CBS_COUPLING (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. PERTURB_DIPOLE (SCF)¶SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF)¶SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI)¶DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = H_0 + z H_1\). Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF)¶SCF — Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH (SCF)¶SCF — The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS (SCF)¶SCF — Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:189297,Availability,avail,available,189297,"f the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS (SCF)¶SCF — Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. PK_ALGO (SCF)¶SCF (Expert) — Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF)¶SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF)¶SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF)¶SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. POINTS (FINDIF)¶FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC)¶ADC — Maximum iteration number in pole searching. This option is only available for the built-in ADC backend. Type: integer; Default: 20. POTFILE (PE)¶PE — Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; Default: potfile.pot. PPL_TYPE (DFOCC)¶DFOCC — Type of the CCSD PPL term. Type: string; Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO; Default: AUTO. PR (ADC)¶ADC — Do use the partial renormalization scheme for the ground state wavefunction? * This option is only available for the built-in ADC backend. Type: boolean; Default: false. PRECONDITIONER (DETCI)¶DETCI — This specifies the type of preconditioner to use in the selected diagonalization method. The valid options are: DAVIDSON which approximates the Hamiltonian matrix by the diagonal elements; H0BLOCK_INV which uses an exact Hamiltonian of H0_BLOCKSIZE and explicitly inverts it; GEN_DAVIDSON which does a spectral decomposition of H0BLOCK; ITER_INV using an iterative approach to obtain the correction vector of H0BLOCK. The H0BLOCK_INV, GEN_DAVIDSON, ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:189755,Availability,avail,available,189755,"ORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF)¶SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF)¶SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF)¶SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. POINTS (FINDIF)¶FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC)¶ADC — Maximum iteration number in pole searching. This option is only available for the built-in ADC backend. Type: integer; Default: 20. POTFILE (PE)¶PE — Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; Default: potfile.pot. PPL_TYPE (DFOCC)¶DFOCC — Type of the CCSD PPL term. Type: string; Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO; Default: AUTO. PR (ADC)¶ADC — Do use the partial renormalization scheme for the ground state wavefunction? * This option is only available for the built-in ADC backend. Type: boolean; Default: false. PRECONDITIONER (DETCI)¶DETCI — This specifies the type of preconditioner to use in the selected diagonalization method. The valid options are: DAVIDSON which approximates the Hamiltonian matrix by the diagonal elements; H0BLOCK_INV which uses an exact Hamiltonian of H0_BLOCKSIZE and explicitly inverts it; GEN_DAVIDSON which does a spectral decomposition of H0BLOCK; ITER_INV using an iterative approach to obtain the correction vector of H0BLOCK. The H0BLOCK_INV, GEN_DAVIDSON, and ITER_INV approaches are all formally equivalent but the ITER_INV is less computationally expensive. Default is DAVIDSON. Type: string; Possible Values: LANCZOS, DAVIDSON, GEN_DAVIDSON, H0BLOCK, ITER_INV, EVANGELISTI; Default: DAVIDSON. PRINT (CPHF)¶CPHF — The amount of information printed to the output file. Type: integer; Default: 1. PRINT (EFP)¶EFP — The amount of information printed to the output file",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:196748,Availability,error,error,196748,"efault: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA)¶CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE)¶CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC)¶FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC)¶OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF)¶SCF — Number of radial grid points for spherical potential integration. Type: integer; Default: 100. RADIUS (SCF)¶SCF — Radius (bohr) of a hard-sphere external potential. Type: double",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:196903,Availability,error,error,196903,"c default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA)¶CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE)¶CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC)¶FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC)¶OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF)¶SCF — Number of radial grid points for spherical potential integration. Type: integer; Default: 100. RADIUS (SCF)¶SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; D",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:207385,Availability,redundant,redundant,207385,")¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF)¶SCF (Expert) — SAD guess density decomposition threshold. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF density in the SAD guess, analogous to D_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF)¶SCF — Convergence crit",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:212288,Availability,avail,available,212288,"nomer B GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_MP2_DISP_ALG (SAPT)¶SAPT (Expert) — Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; Default: false. SAVE_JK (SCF)¶SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF)¶SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR (SCF)¶SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_PROPERTIES (SCF)¶SCF — SCF Properties to calculate after an energy evaluation. Note, this keyword is not used for property evaluations. Type: array; Default: No Default. SCF_TYPE (CPHF)¶CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCF_TYPE (GLOBALS)¶GLOBALS — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calcul",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:215020,Availability,avail,available,215020,"false. SCS_CEPA (FNOCC)¶FNOCC — Do SCS-CEPA? Note that the scaling factors will be identical to those for SCS-CCSD. Type: boolean; Default: false. SCS_MP2 (CCENERGY)¶CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_MP2 (FNOCC)¶FNOCC — Do SCS-MP2?. Type: boolean; Default: false. SCS_TYPE (DFOCC)¶DFOCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCS_TYPE (OCC)¶OCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCSN_MP2 (CCENERGY)¶CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SEKINO (CCLAMBDA)¶CCLAMBDA — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEKINO (CCRESPONSE)¶CCRESPONSE — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEM_MAXITER (ADC)¶ADC — Maximum iteration number in simultaneous expansion method. This option is only available for the built-in ADC backend. Type: integer; Default: 30. SEMICANONICAL (CCENERGY)¶CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCEOM)¶CCEOM — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCTRANSORT)¶CCTRANSORT — Force conversion of ROHF MOs to semicanonical MOs to run UHF-based energies. Type: boolean; Default: false. SEMICANONICAL (CCTRIPLES)¶CCTRIPLES — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SF_RESTRICT (DETCI)¶DETCI (Expert) — Do eliminate determinants not valid for spin-complete spin-flip CI’s? [see J. S. Sears et al, J. Chem. Phys. 118, 9084-9094 (2003)]. Type: boolean; Default: false. SIGMA_OVERLAP (DETCI)¶DETCI (Expert) — Do print the sigma overlap matrix? Not generally useful. Type: boolean; Default: false. SINGLES_PRINT (CCEOM)¶CCEOM — Do print information on the iterative solution to the single-excitation EOM-CC problem used as a guess to full EOM-CC?. Type",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:221995,Availability,toler,tolerance,221995," in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCT)¶DCT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCT)¶DCT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING)¶OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SUMMATION_FIELDS (PE)¶PE — Summation scheme for field computations, can be direct or fmm. Type: string; Possible Values: DIRECT, FMM; Default: DIRECT. SYMM_TOL (OPTKING)¶OPTKING — Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. SYMMETRIZE (OCC)¶OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO)¶THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY)¶CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY)¶CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM)¶CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR)¶CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDM (DETCI)¶DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:227763,Availability,avail,available,227763,"Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. TRANSLATE_PSI4 (CFOUR)¶CFOUR — Do translate set Psi4 options to their cfour counterparts. Type: boolean; Default: true. TREE_EXPANSION_ORDER (PE)¶PE — Expansion order of the multipoles for FMM. Type: integer; Default: 5. TREE_THETA (PE)¶PE — Opening angle theta. Type: double; Default: 0.5. TRIPLES_ALGORITHM (PSIMRCC)¶PSIMRCC — The type of algorithm to use for (T) computations. Type: string; Possible Values: SPIN_ADAPTED, RESTRICTED, UNRESTRICTED; Default: RESTRICTED. TRIPLES_DIIS (PSIMRCC)¶PSIMRCC — Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. TRIPLES_IABC_TYPE (DFOCC)¶DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC)¶FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. TURN_ON_ACTV (MCSCF)¶MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF)¶SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UPDATE (DETCI)¶DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC)¶FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC)¶PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC)¶PSIMRCC (Expert) — Whether to use spin",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:1989,Deployability,update,updates,1989," irrep (in Cotton order) so a user can specify the number of retained natural orbitals rather than determining them with OCC_TOLERANCE. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING)¶OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: true. AEL (CCDENSITY)¶CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT)¶SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT)¶SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCT)¶DCT — Algorithm to use for the density cumulant and orbital updates in the DCT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: SIMULTANEOUS. ANALYZE (CCENERGY)¶CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE)¶CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY)¶CCDENSITY — The algorithm to use for the \(\left\langle VV||VV\right \rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY)¶CCENERGY (Expert) — The algorithm to use for the \(\left\langle VV||VV\right\rangle\) terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:11803,Deployability,release,release,11803,"CC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING)¶OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI)¶DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM)¶CCEOM — Do turn on root following for CC3. Type: boolean; Default: false. CC_A_RAS3_MAX (DETCI)¶DETCI — maximum number of alpha electrons in RAS III, for CC. Type: int",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:16305,Deployability,update,update,16305,". Type: double; Default: 1.27. CC_RAS34_MAX (DETCI)¶DETCI — maximum number of electrons in RAS III + IV, for CC. Type: integer; Default: -1. CC_RAS3_MAX (DETCI)¶DETCI — maximum number of electrons in RAS III, for CC. Type: integer; Default: -1. CC_RAS4_MAX (DETCI)¶DETCI — maximum number of electrons in RAS IV, for CC. Type: integer; Default: -1. CC_SCALE_OS (FNOCC)¶FNOCC — Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. CC_SS_SCALE (CCENERGY)¶CCENERGY — Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. CC_TIMINGS (FNOCC)¶FNOCC — Do time each cc diagram?. Type: boolean; Default: false. CC_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI)¶DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI)¶DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI)¶DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI)¶DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI)¶DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:17584,Deployability,configurat,configurations,17584,"e variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI)¶DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI)¶DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\r",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:22693,Deployability,release,release,22693,"ests calculation of only those cubic constants of the form \(\phi_{nij}\), where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are not sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (i.e. HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form \(\phi_{ijkl}\), which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR)¶CFOUR — Can be used to control the algorithm used by CFOUR when terms involving \(\langle ab||cd\rangle\) molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:26646,Deployability,continuous,continuous,26646,": 10. CFOUR_CALC_LEVEL (CFOUR)¶CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. CFOUR_CC_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR)¶CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR)¶CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kalla",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:50527,Deployability,integrat,integration,50527,"ion where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR)¶CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR)¶CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR)¶CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:66356,Deployability,release,release,66356,"rnal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR)¶CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR)¶CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR)¶CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orb",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:66456,Deployability,release,release,66456,"rnal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR)¶CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR)¶CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR)¶CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orb",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:70819,Deployability,configurat,configurational,70819,"etrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR)¶CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR)¶CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR)¶CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR)¶CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin contribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-orbit corrections), SF-DPT6 (scalar-relativistic part of sixth-order direct perturbation theory), SFREE (spin-free treatment), X2C1E (spin-free X2C-1e treatment), or DPT (synonym with DPT2). Type:",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:82897,Deployability,update,update,82897,"ce. Type: string; Possible Values: SIMULTANEOUS, SEQUENTIAL; Default: SIMULTANEOUS. CFOUR_UIJ_THRESHOLD (CFOUR)¶CFOUR — Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR)¶CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR)¶CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR)¶CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:83027,Deployability,update,updates,83027,"es the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR)¶CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR)¶CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR)¶CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTR",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:94277,Deployability,update,update,94277,"ee Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMP_INDUCED (PE)¶PE — Enable Thole damping for induced moments. Type: boolean; Default: false. DAMP_MULTIPOLE (PE)¶PE — Enable Thole damping for multipole fields. Type: boolean; Default: false. DAMPING_CONVERGENCE (SCF)¶SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_FACTOR_INDUCED (PE)¶PE — Thole damping factor for induced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE (PE)¶PE — Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:94319,Deployability,update,update,94319,"ee Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMP_INDUCED (PE)¶PE — Enable Thole damping for induced moments. Type: boolean; Default: false. DAMP_MULTIPOLE (PE)¶PE — Enable Thole damping for multipole fields. Type: boolean; Default: false. DAMPING_CONVERGENCE (SCF)¶SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_FACTOR_INDUCED (PE)¶PE — Thole damping factor for induced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE (PE)¶PE — Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:94357,Deployability,update,update,94357,"ee Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMP_INDUCED (PE)¶PE — Enable Thole damping for induced moments. Type: boolean; Default: false. DAMP_MULTIPOLE (PE)¶PE — Enable Thole damping for multipole fields. Type: boolean; Default: false. DAMPING_CONVERGENCE (SCF)¶SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_FACTOR_INDUCED (PE)¶PE — Thole damping factor for induced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE (PE)¶PE — Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:94674,Deployability,update,updates,94674," Type: boolean; Default: false. DAMPING_CONVERGENCE (SCF)¶SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_FACTOR_INDUCED (PE)¶PE — Thole damping factor for induced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE (PE)¶PE — Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCT_FUNCTIONAL (DCT)¶DCT — Chooses appropriate DCT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCT_GUESS (DCT)¶DCT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: s",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:94707,Deployability,update,update,94707,"reshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_FACTOR_INDUCED (PE)¶PE — Thole damping factor for induced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE (PE)¶PE — Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCT_FUNCTIONAL (DCT)¶DCT — Chooses appropriate DCT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCT_GUESS (DCT)¶DCT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algori",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:94745,Deployability,update,update,94745,"reshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_FACTOR_INDUCED (PE)¶PE — Thole damping factor for induced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE (PE)¶PE — Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCT_FUNCTIONAL (DCT)¶DCT — Chooses appropriate DCT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCT_GUESS (DCT)¶DCT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algori",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:95068,Deployability,update,updates,95068,"duced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE (PE)¶PE — Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCT_FUNCTIONAL (DCT)¶DCT — Chooses appropriate DCT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCT_GUESS (DCT)¶DCT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algorithm to use for the DCT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CCDENSITY)¶CCDENSITY — Reproducing energies from densities ?. Type: integer; Default: 0. DEBUG (CPHF)¶CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBA",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:95101,Deployability,update,update,95101,"amping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCT_FUNCTIONAL (DCT)¶DCT — Chooses appropriate DCT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCT_GUESS (DCT)¶DCT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algorithm to use for the DCT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CCDENSITY)¶CCDENSITY — Reproducing energies from densities ?. Type: integer; Default: 0. DEBUG (CPHF)¶CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS)¶GLOBALS (Expert) — The amount of information to print to the output file. Type: int",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:95139,Deployability,update,update,95139,"amping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCT_FUNCTIONAL (DCT)¶DCT — Chooses appropriate DCT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCT_GUESS (DCT)¶DCT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algorithm to use for the DCT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CCDENSITY)¶CCDENSITY — Reproducing energies from densities ?. Type: integer; Default: 0. DEBUG (CPHF)¶CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS)¶GLOBALS (Expert) — The amount of information to print to the output file. Type: int",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:105044,Deployability,integrat,integration,105044,"GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER prune based on decaying functions (experts only!). The recommended scheme is ROBUST. Type: string; Default: NONE. DFT_RADIAL_POINTS (SCF)¶SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:105149,Deployability,integrat,integration,105149,"y!). The recommended scheme is ROBUST. Type: string; Default: NONE. DFT_RADIAL_POINTS (SCF)¶SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:105295,Deployability,integrat,integration,105295,": integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGO",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:112444,Deployability,update,update,112444,"tive space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG)¶DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG)¶DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG)¶DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG)¶DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (DMRG)¶DMRG — Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG)¶DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG)¶DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG)¶DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG)¶DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG)¶DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG)¶DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG)¶DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG)¶DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG)¶DMRG — The noise prefactors for successive DMRG in",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:131873,Deployability,configurat,configuration,131873,"ALE (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI)¶DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root with the closest overlap. The user specifies arrays containing the absolute alpha string indices (A_i below), absolute beta indices (B_i below), and CI coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], …]. Type: array; Default: No Default. FORCE_RESTART (CCENERGY)¶CCENERGY (Expert) — Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. FORCE_TWOCON (MCSCF)¶MCSCF — Do attempt to force a two configuration solution by starting with CI coefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. FRAC_DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF)¶SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF)¶SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF)¶SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF)¶SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF)¶SCF — The occupations of the orbital indices specified above (\(0.0\le {\rm occ} \le 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING)¶OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary differen",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:142077,Deployability,update,update,142077,"trix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI)¶DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING)¶OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING)¶OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING)¶OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI)¶DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_K",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:143702,Deployability,update,update,143702,"rs. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC)¶PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC)¶DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING)¶OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING)¶OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING)¶OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF)¶FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:143889,Deployability,update,update,143889,"n back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC)¶PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC)¶DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING)¶OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING)¶OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING)¶OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF)¶FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI)¶DET",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:144032,Deployability,update,update,144032,"NINGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC)¶PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC)¶DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING)¶OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING)¶OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING)¶OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF)¶FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI)¶DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:144282,Deployability,update,update,144282,"FF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC)¶PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC)¶DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING)¶OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING)¶OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING)¶OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF)¶FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI)¶DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. INDUCED_CONVERGENCE (",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:144510,Deployability,update,update,144510,"?. Type: boolean; Default: false. HESS_TYPE (DFOCC)¶DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING)¶OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING)¶OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING)¶OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF)¶FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI)¶DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. INDUCED_CONVERGENCE (PE)¶PE — Threshold for induced moments convergence. Type: conv double; Default: 1e-8. INTCOS_GENERATE_EXIT (OPTKING)¶OPTKING — Do only generate the internal coordinates and then stop?. Type: ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:163430,Deployability,update,update,163430,"50. MAXITER (SCF)¶SCF — Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MBIS_D_CONVERGENCE (GLOBALS)¶GLOBALS — MBIS Convergence Criteria. Type: conv double; Default: 1.0e-8. MBIS_MAXITER (GLOBALS)¶GLOBALS — Maximum Number of MBIS Iterations. Type: integer; Default: 500. MBIS_PRUNING_SCHEME (GLOBALS)¶GLOBALS — Pruning scheme for MBIS Grid. Type: string; Default: ROBUST. MBIS_RADIAL_POINTS (GLOBALS)¶GLOBALS — MBIS Number of Radial Points. Type: integer; Default: 75. MBIS_SPHERICAL_POINTS (GLOBALS)¶GLOBALS — MBIS Number of Spherical Points. Type: integer; Default: 302. MCSCF_ALGORITHM (DETCI)¶DETCI — Convergence algorithm to utilize. Two-Step, Augmented Hessian, or One-Step. Defaults to TS for RASSCF. Type: string; Possible Values: TS, AH; Default: TS. MCSCF_CI_CLEANUP (DETCI)¶DETCI — Cleanup the CI info at the end of a run?. Type: boolean; Default: true. MCSCF_DIIS_ERROR_TYPE (DETCI)¶DETCI — DIIS error vector type either, the AO orbital gradient or the orbital rotation update matrix. Type: string; Possible Values: GRAD, UPDATE; Default: GRAD. MCSCF_DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation for TS convergence. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of DIIS vectors for TS convergence. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI)¶DETCI — Iteration to turn on DIIS for TS convergence. Type: integer; Default: 3. MCSCF_DPD_CLEANUP (DETCI)¶DETCI — Cleanup the DPD MCSCF object at the end of a run?. Type: boolean; Default: true. MCSCF_E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI)¶DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI)¶DETCI — Maximum value in the",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:184258,Deployability,update,update,184258,"ls?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC)¶OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCT)¶DCT (Expert) — The shift applied to the denominator in the orbital update iterations. Type: double; Default: 0.0. ORBITALS_WRITE (SCF)¶SCF — File name (case sensitive) to which to serialize Wavefunction orbital data. Type: string; Default: No Default. ORTH_TYPE (DFOCC)¶DFOCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. ORTH_TYPE (OCC)¶OCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. OS_SCALE (OCC)¶OCC — A custom scaling parameter for opposite-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. OVERLAP_CHECK (CCEOM)¶CCEOM — Report overlaps with old excited-state wave functions, if available, and store current wave functions for later use. Type: boolean; Default: false. P (THERMO)¶THERMO — Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. PAIR_ENERGIES_PRINT (CCENERGY)¶CCE",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:188526,Deployability,integrat,integration,188526,"alse. PERTURB_CBS_COUPLING (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. PERTURB_DIPOLE (SCF)¶SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF)¶SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI)¶DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = H_0 + z H_1\). Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF)¶SCF — Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH (SCF)¶SCF — The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS (SCF)¶SCF — Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. PK_ALGO (SCF)¶SCF (Expert) — Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF)¶SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF)¶SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF)¶SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. POINTS (FINDIF)¶FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC)¶ADC — Maximum iteration number in pole searching. This option is only available for the built-in ADC backend. Type: integer; Default: 20. POTFILE (PE)¶PE — Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:194869,Deployability,update,updates,194869,"CC)¶PSIMRCC — The type of perturbation theory computation to perform. Type: string; Default: SECOND_ORDER. PUREAM (GLOBALS)¶GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCT)¶DCT — Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP)¶EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI)¶DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:194894,Deployability,update,updated,194894,"CC)¶PSIMRCC — The type of perturbation theory computation to perform. Type: string; Default: SECOND_ORDER. PUREAM (GLOBALS)¶GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCT)¶DCT — Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP)¶EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI)¶DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:194993,Deployability,update,updated,194993,")¶GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCT)¶DCT — Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP)¶EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI)¶DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change)",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:196608,Deployability,update,updates,196608," I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA)¶CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE)¶CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC)¶FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC)¶OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF)¶SCF — Number of radial grid points for spherical poten",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:196712,Deployability,update,updates,196712,"efault: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA)¶CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE)¶CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC)¶FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC)¶OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF)¶SCF — Number of radial grid points for spherical potential integration. Type: integer; Default: 100. RADIUS (SCF)¶SCF — Radius (bohr) of a hard-sphere external potential. Type: double",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:197605,Deployability,integrat,integration,197605,"esidual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC)¶FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC)¶OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF)¶SCF — Number of radial grid points for spherical potential integration. Type: integer; Default: 100. RADIUS (SCF)¶SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS2 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS3 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS34_MAX (DETCI)¶DETCI — maximum number of electrons in RAS III + IV. Type: integer; Default: -1. RAS3_MAX (DETCI)¶DETCI — maximum number of electrons in RAS III. Type: integer; Default: -1. RAS4 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS4. Type: array; Default: No Default. RAS4_MAX (DETCI)¶DETCI — maximum number of electrons in RAS IV. Type: integer; Default: -1. READ_SCF_3INDEX (DFOCC)¶DFOCC — Do r",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:200720,Deployability,update,update,200720," TWOCON, MCSCF, GENERAL; Default: RHF. REFERENCE (SCF)¶SCF — Reference wavefunction type. Cfour Interface: Keyword translates into CFOUR_REFERENCE. Type: string; Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. REFERENCE_SYM (DETCI)¶DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC)¶DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC)¶DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS)¶GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCT)¶DCT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAXED (OCC)¶OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY)¶CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:201851,Deployability,update,updates,201851,"butions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY)¶CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE)¶CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI)¶DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM)¶CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:206579,Deployability,install,installation,206579,"CF)¶MCSCF (Expert) — For orbital rotations after convergence, number of the second orbital (1-based) to rotate. Type: integer; Default: 2. ROTATIONAL_SYMMETRY_NUMBER (THERMO)¶THERMO — Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING)¶OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC)¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\ran",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:211611,Deployability,integrat,integration,211611,"T_EXCH_DISP_SCALE_SCHEME (SAPT)¶SAPT — Scheme for approximating exchange-dispersion for SAPT-DFT. NONE Use unscaled Exch-Disp2,u . FIXED Use a fixed factor SAPT_DFT_EXCH_DISP_FIXED_SCALE to scale Exch-Disp2,u . DISP Use the ratio of Disp2,r and Disp2,u to scale Exch-Disp2,u . Type: string; Possible Values: NONE, FIXED, DISP; Default: DISP. SAPT_DFT_FUNCTIONAL (SAPT)¶SAPT (Expert) — Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION (SAPT)¶SAPT (Expert) — How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_GRAC_SHIFT_A (SAPT)¶SAPT — Monomer A GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_GRAC_SHIFT_B (SAPT)¶SAPT — Monomer B GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_MP2_DISP_ALG (SAPT)¶SAPT (Expert) — Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; D",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:211755,Deployability,integrat,integration,211755,"factor SAPT_DFT_EXCH_DISP_FIXED_SCALE to scale Exch-Disp2,u . DISP Use the ratio of Disp2,r and Disp2,u to scale Exch-Disp2,u . Type: string; Possible Values: NONE, FIXED, DISP; Default: DISP. SAPT_DFT_FUNCTIONAL (SAPT)¶SAPT (Expert) — Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION (SAPT)¶SAPT (Expert) — How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_GRAC_SHIFT_A (SAPT)¶SAPT — Monomer A GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_GRAC_SHIFT_B (SAPT)¶SAPT — Monomer B GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_MP2_DISP_ALG (SAPT)¶SAPT (Expert) — Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; Default: false. SAVE_JK (SCF)¶SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF)¶SCF — Save the UHF NOs. Type: boo",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:225207,Deployability,integrat,integration,225207,"ult: false. TDSCF_TDM_PRINT (SCF)¶SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC)¶PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF)¶SCF (Expert) — The tile size for the distribut",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:225777,Deployability,update,update,225777,"ts are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC)¶PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF)¶SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DETCI)¶DETCI (Expert) — Do compute two-particle density matrix if not otherwise required? Warning: This will hold 4 dense active TPDM’s in memory. Type: boolean; Default: false. TPDM_ABCD_TYPE (OCC)¶OCC — How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algorithm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:228095,Deployability,update,update,228095,"utations. Type: string; Possible Values: SPIN_ADAPTED, RESTRICTED, UNRESTRICTED; Default: RESTRICTED. TRIPLES_DIIS (PSIMRCC)¶PSIMRCC — Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. TRIPLES_IABC_TYPE (DFOCC)¶DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC)¶FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. TURN_ON_ACTV (MCSCF)¶MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF)¶SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UPDATE (DETCI)¶DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC)¶FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC)¶PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC)¶PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI)¶DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM)¶CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:228697,Deployability,configurat,configurations,228697,"d automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. TURN_ON_ACTV (MCSCF)¶MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF)¶SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UPDATE (DETCI)¶DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC)¶FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC)¶PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC)¶PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI)¶DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM)¶CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM)¶CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR)¶CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. WCOMBINE (SCF)¶SCF — combine omega exchange and Hartree–Fock exchange into one matrix for efficiency? Default is True for MemDFJK (itself the default for SCF_TYPE DF), False otherwise as not yet implemented. Type: boolean; Default: false. WFN (CCDENSITY)¶CCDENSITY (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (CCENERGY)¶CCENERGY (Expert) — Wavefuncti",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:232154,Deployability,update,updated,232154," Type: string; Default: SCF. WFN (DETCI)¶DETCI (Expert) — Wavefunction type. This should be set automatically from the calling Psithon function. Type: string; Possible Values: DETCI, CI, ZAPTN, DETCAS, CASSCF, RASSCF; Default: DETCI. WFN (GLOBALS)¶GLOBALS (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (SCF)¶SCF (Expert) — Wavefunction type. Type: string; Possible Values: SCF; Default: SCF. WFN_SYM (MCSCF)¶MCSCF — The symmetry of the SCF wavefunction. Type: string; Default: 1. WFN_SYM (PSIMRCC)¶PSIMRCC — The symmetry of the target wavefunction, specified either by Schönflies symbol, or irrep number (in Cotton ordering). Type: string; Default: 1. WFN_TYPE (DFOCC)¶DFOCC — Type of the wavefunction. Type: string; Default: DF-OMP2. WFN_TYPE (OCC)¶OCC — Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. WRITE_NOS (CCDENSITY)¶CCDENSITY — Do write natural orbitals (molden). Type: boolean; Default: false. WRITER_FILE_LABEL (GLOBALS)¶GLOBALS — Base filename for text files written by PSI, such as the MOLDEN output file, the Hessian file, the internal coordinate file, etc. Use the add_str_i function to make this string case sensitive. Type: string; Default: No Default. XI (CCDENSITY)¶CCDENSITY — Do compute Xi?. Type: boolean; Default: false. XI_CONNECT (CCDENSITY)¶CCDENSITY (Expert) — Do require \(\bar{H}\) and \(R\) to be connected?. Type: boolean; Default: false. ZERO_INTERNAL_AMPS (PSIMRCC)¶PSIMRCC — Do zero the internal amplitudes, i.e., those that map reference determinants onto each other?. Type: boolean; Default: true. ZETA (CCDENSITY)¶CCDENSITY — Do use zeta?. Type: boolean; Default: false. ZETA (CCLAMBDA)¶CCLAMBDA — Do use zeta?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; Keywords by Alpha. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:2008,Energy Efficiency,energy,energy,2008," irrep (in Cotton order) so a user can specify the number of retained natural orbitals rather than determining them with OCC_TOLERANCE. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING)¶OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: true. AEL (CCDENSITY)¶CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT)¶SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT)¶SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCT)¶DCT — Algorithm to use for the density cumulant and orbital updates in the DCT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: SIMULTANEOUS. ANALYZE (CCENERGY)¶CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE)¶CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY)¶CCDENSITY — The algorithm to use for the \(\left\langle VV||VV\right \rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY)¶CCENERGY (Expert) — The algorithm to use for the \(\left\langle VV||VV\right\rangle\) terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:2063,Energy Efficiency,efficient,efficient,2063,"TOLERANCE. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING)¶OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: true. AEL (CCDENSITY)¶CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT)¶SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT)¶SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCT)¶DCT — Algorithm to use for the density cumulant and orbital updates in the DCT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: SIMULTANEOUS. ANALYZE (CCENERGY)¶CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE)¶CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY)¶CCDENSITY — The algorithm to use for the \(\left\langle VV||VV\right \rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY)¶CCENERGY (Expert) — The algorithm to use for the \(\left\langle VV||VV\right\rangle\) terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should onl",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:4062,Energy Efficiency,reduce,reduces,4062,"ts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA)¶CCLAMBDA — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT)¶CCTRANSORT — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCT)¶DCT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\(\langle VV|| VV \rangle\)) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AUXILIARY_BOND_FACTOR (OPTKING)¶OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI)¶DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI)¶DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2)¶DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS)¶MINTS — Primary basis set. Available basis sets. Type: string; Poss",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:4116,Energy Efficiency,reduce,reduce,4116,"ts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA)¶CCLAMBDA — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT)¶CCTRANSORT — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCT)¶DCT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\(\langle VV|| VV \rangle\)) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AUXILIARY_BOND_FACTOR (OPTKING)¶OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI)¶DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI)¶DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2)¶DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS)¶MINTS — Primary basis set. Available basis sets. Type: string; Poss",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:4139,Energy Efficiency,energy,energy,4139,"ts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA)¶CCLAMBDA — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT)¶CCTRANSORT — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCT)¶DCT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\(\langle VV|| VV \rangle\)) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AUXILIARY_BOND_FACTOR (OPTKING)¶OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI)¶DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI)¶DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2)¶DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS)¶MINTS — Primary basis set. Available basis sets. Type: string; Poss",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:6855,Energy Efficiency,charge,charges,6855,"ult: No Default. BCCD_MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. BENCH (GLOBALS)¶GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI)¶DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BORDER (PE)¶PE — Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_N_REDIST (PE)¶PE — number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER (PE)¶PE — order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_REDIST_POL (PE)¶PE — redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. BORDER_RMIN (PE)¶PE — minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT (PE)¶PE — unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_TYPE (PE)¶PE — border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BRIANQC_ENABLE (GLOBALS)¶GLOBALS — Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC)¶FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:16589,Energy Efficiency,energy,energy,16589,"ETCI — maximum number of electrons in RAS IV, for CC. Type: integer; Default: -1. CC_SCALE_OS (FNOCC)¶FNOCC — Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. CC_SS_SCALE (CCENERGY)¶CCENERGY — Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. CC_TIMINGS (FNOCC)¶FNOCC — Do time each cc diagram?. Type: boolean; Default: false. CC_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI)¶DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI)¶DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI)¶DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI)¶DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI)¶DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:17176,Energy Efficiency,energy,energy,17176,"s. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI)¶DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI)¶DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI)¶DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI)¶DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI)¶DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:18612,Energy Efficiency,reduce,reduces,18612,"lude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR)¶CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR)¶CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:18767,Energy Efficiency,energy,energy,18767,"le; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR)¶CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR)¶CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations be",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:18819,Energy Efficiency,energy,energy,18819,"le; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR)¶CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR)¶CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations be",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:20574,Energy Efficiency,reduce,reduced,20574,"LQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in “parallel” (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. CFOUR_ANH_DERIVATIVES (CFOUR)¶CFOUR — Specifies whether the anharmonic force field is calculated using analytic gradients (=FIRST) or analytic Hessians (=SECOND). Type: string; Possible Values: FIRST, SECOND; Default: SECOND. CFOUR_ANH_STEPSIZE (CFOUR)¶CFOUR — Controls the stepsize used in anharmonic force field calculations. The value is specified in reduced normal coordinates, which are dimensionless. The actual stepsize used in the calculation is \(\times 10^6\) the integer value specified. Type: integer; Default: 50000. CFOUR_ANH_SYMMETRY (CFOUR)¶CFOUR — Specifies whether non-abelian symmetry is to be exploited in determining displacements for CFOUR_ANHARMONIC =VIBROT or VPT2 calculations. If set to NONABELIAN (=0), maximum advantage will be taken of symmetry and the full set of cubic force constants will be generated from a skeleton set by application of the totally symmetric projection operator. If set to ABELIAN (=1), only the operations of the abelian subgroup will be exploited. Note: It is important to point out that the symmetrization currently works only for cubic constants. Therefore, if you require quartic force constants (for frequency calculations), you must use the ABELIAN option. Moreover, the latter work for only asymmetric tops and linear molecules. Type: string; Possible Values: ABELIAN, NONABELIAN; Default: ABELIAN. CFOUR_AN",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:22504,Energy Efficiency,energy,energy,22504,"if you require quartic force constants (for frequency calculations), you must use the ABELIAN option. Moreover, the latter work for only asymmetric tops and linear molecules. Type: string; Possible Values: ABELIAN, NONABELIAN; Default: ABELIAN. CFOUR_ANHARMONIC (CFOUR)¶CFOUR — Specifies treatment of anharmonic effects by calculating cubic and/or quartic force fields. VIBROT (=3) requests calculation of only those cubic constants of the form \(\phi_{nij}\), where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are not sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (i.e. HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form \(\phi_{ijkl}\), which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR)¶CFOUR — Can be used to control the algorithm used by CFOUR when terms involving \(\langle ab||cd\rangle\) molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectori",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:23525,Energy Efficiency,reduce,reduced,23525,"s of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR)¶CFOUR — Can be used to control the algorithm used by CFOUR when terms involving \(\langle ab||cd\rangle\) molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e.g., IBM-RS6000, HP-735, SGI-Indigo, DEC alphastations)). SPARSE_AO (=2) uses a sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR)¶C",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:24124,Energy Efficiency,reduce,reduced,24124,"ulated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e.g., IBM-RS6000, HP-735, SGI-Indigo, DEC alphastations)). SPARSE_AO (=2) uses a sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR)¶CFOUR — Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR)¶CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR)¶CFOUR — experimen",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:25780,Energy Efficiency,energy,energy,25780,"is (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR)¶CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR)¶CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR)¶CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR)¶CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. CFOUR_CC_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR)¶CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best resu",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:28126,Energy Efficiency,energy,energy,28126,"ns are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR)¶CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction sche",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:28167,Energy Efficiency,energy,energy,28167,"ns are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR)¶CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction sche",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:28360,Energy Efficiency,charge,charge,28360,"T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR)¶CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral prog",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:31852,Energy Efficiency,energy,energy,31852," array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR)¶CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR)¶CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZE",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:32239,Energy Efficiency,energy,energy,32239,"s. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR)¶CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR)¶CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:32711,Energy Efficiency,energy,energy,32711,"able, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR)¶CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 I",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:33247,Energy Efficiency,energy,energy,33247,"ot energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR)¶CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63,64]. Type: array; Default: No Default. CFOUR_ECP (CFOUR)¶CFOUR — Specifies whether effective core potentials (pseudopotentials) are used (ON, =1) or not (OFF, =0). Type: boolean; Default: false. CFOUR_EIGENVECTOR (CFOUR)¶CFOUR — Specifies which eigenvector of the totally symmetric part of the block-factored Hessian is to be followed uphill in a transition state search. Eigenvectors are indexed by their eigenvalues – t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:33294,Energy Efficiency,energy,energy,33294,"ot energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR)¶CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63,64]. Type: array; Default: No Default. CFOUR_ECP (CFOUR)¶CFOUR — Specifies whether effective core potentials (pseudopotentials) are used (ON, =1) or not (OFF, =0). Type: boolean; Default: false. CFOUR_EIGENVECTOR (CFOUR)¶CFOUR — Specifies which eigenvector of the totally symmetric part of the block-factored Hessian is to be followed uphill in a transition state search. Eigenvectors are indexed by their eigenvalues – t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:36424,Energy Efficiency,energy,energy,36424,"UR — Specifies the threshold used in converging CC-LR/EOM-CC calculations. The iterative diagonalization is continued until the RMS residual falls below \(10^{-N}\) with \(N\) as the value specified with this keyword. Type: integer; Default: 5. CFOUR_ESTATE_MAXCYC (CFOUR)¶CFOUR — The maximum number of expansion vectors used in the solution of EOMCC equations (Default: 20, hard-coded to 4 in triples calculations). Type: integer; Default: 20. CFOUR_ESTATE_PROP (CFOUR)¶CFOUR — This keyword applies only to EOM-CC calculations and specifies whether any excited or ionized state one-electron properties are to be calculated. Proper use of this keyword requires a relatively advanced knowledge of quantum chemistry and the available options are discussed here. The options are: OFF (=0) [no properties or transition moments are calculated]; EXPECTATION (=1) [transition moments and dipole strengths are calculated along with selected one-electron properties which are evaluated as expectation values]; UNRELAXED (=2) [selected one-electron properties are calculated in an approximation that neglects relaxation of molecular orbitals]; RESPONSE (=3) [selected one-electron properties are calculated as analytic first derivatives of the energy]. Except for EOMCC calculations on two-electron systems (which are exact), properties obtained by the three approaches will not be equivalent. The default value for this keyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF. Type: string; Possible Values: OFF, EXPECTATION, UNRELAXED, RESPONSE; Default: No Default. CFOUR_ES",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:42877,Energy Efficiency,adapt,adapted,42877,"hes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR)¶CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR)¶CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR)¶CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:43080,Energy Efficiency,energy,energy,43080,"sentations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR)¶CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR)¶CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR)¶CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR)¶CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 by",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:43664,Energy Efficiency,adapt,adapted,43664," desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR)¶CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR)¶CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR)¶CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR)¶CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR)¶CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are split, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR)¶CFOUR — Specifies the field strength for a perturbation (defin",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:46003,Energy Efficiency,energy,energy,46003,"constructs the matrix directly from the basis function integrals. In general, PK is somewhat faster, but results in considerable use of disk space when out-of-core algorithms are required. (Default: FOCK). Type: string; Possible Values: PK, AO; Default: No Default. CFOUR_FREQ_ALGORITHM (CFOUR)¶CFOUR — FREQ_ALGORIT experimental use. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. CFOUR_FROZEN_CORE (CFOUR)¶CFOUR — Specifies whether in the correlation treatment all electron (OFF =0) or only the valence electrons (ON =1) are considered. This keyword provides an alternative to the CFOUR_DROPMO keyword, as it allows frozen-core calculation without explicitly specifying the corresponding inner-shell orbitals. Type: boolean; Default: false. CFOUR_FROZEN_VIRT (CFOUR)¶CFOUR — Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energy needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR)¶CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR)¶CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in th",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:49544,Energy Efficiency,efficient,efficient,49544,"mber of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:49655,Energy Efficiency,energy,energy,49655,"mber of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:49744,Energy Efficiency,energy,energy,49744,"y optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR)¶CFOUR — Where the initial ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:52049,Energy Efficiency,reduce,reduce,52049,"CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR)¶CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR)¶CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:52782,Energy Efficiency,energy,energy,52782,"icular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR)¶CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR)¶CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR)¶CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (C",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:52818,Energy Efficiency,energy,energy,52818,"icular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR)¶CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR)¶CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR)¶CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (C",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:56542,Energy Efficiency,efficient,efficient,56542," core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR)¶CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR)¶CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:58795,Energy Efficiency,energy,energy,58795,"ATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR)¶CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR)¶CFOUR — Specifies the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducib",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:58940,Energy Efficiency,energy,energy,58940,"ive eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR)¶CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR)¶CFOUR — Specifies the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the ref",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:60904,Energy Efficiency,energy,energy,60904,"mmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the \(\alpha\) and \(\beta\) sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the \(^2A_1\) water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR)¶CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-re",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:62028,Energy Efficiency,adapt,adapted,62028,"lution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR)¶CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The two-determinant CC method for open-shell singlet states can be activated by TD-CC (=8). Type: string; Possible Values: SPIN-ORBITAL, SR-CC, PSA-CC_FULL, SR-CC_FULL, TD-CC; Default: SPIN-ORBITAL. CFOUR_OPT_MAXCYC (CFOUR)¶CFOUR — Identical to CFOUR_GEO_MAXCYC. Type: integer; Default: 50. CFOUR_ORBITALS (CFOUR)¶CFOUR — Specifies the type of molecular orbitals used in post-HF calculations. STANDARD (=0) requests usage of the orbitals (from a corresponding HF-SCF calculation) without any modification. These are in the case of RHF/UHF the usual canonical HF orbitals a",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:63896,Energy Efficiency,energy,energy,63896," case of RHF/UHF the usual canonical HF orbitals and in the case of ROHF calculations the standard ROHF-orbitals with equal spatial parts for both the \(\alpha\) and the \(\beta\) spin orbitals. SEMICANONICAL (=1) forces in ROHF type calculations a transformation to so-called semicanonical orbitals which diagonalize the occupied-occupied and virtual-virtual blocks of the usual Fock-matrices. The use of semicanonical orbitals is, for example, required for ROHF-CCSD(T) calculations and for those calculations also automatically set. LOCAL requests a localization of the HF orbitals and this is currently done according to the Pipek-Mezey localization criterion. Note that it is strongly recommended not to use this keyword unless you know what are you doing. Default: STANDARD except for ROHF-CCSD(T) and ROHF-MP4 calculations for which SEMICANONICAL is the default. Type: string; Possible Values: STANDARD, SEMICANONICAL; Default: STANDARD. CFOUR_PERT_ORB (CFOUR)¶CFOUR — Specifies the type of perturbed orbitals used in energy derivative calculations. STANDARD means that the gradient formulation assumes that the perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal. CANONICAL means that the perturbed orbitals are assumed to be canonical. This keyword is set automatically to CANONICAL in derivative calculations with methods which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T] and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL requests a canonical perturbed-orbital treatment only for the occupied-occupied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:65476,Energy Efficiency,energy,energy,65476,"ied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR)¶CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR)¶CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, which includes some useful information such as SCF eigenvectors, Fock matrix elements, etc. Type: integer; Default: 0. CFOUR_PROP_INTEGRAL (CFOUR)¶CFOUR — Allows storage of property integrals computed in xvdint on internal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR)¶CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release rep",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:65487,Energy Efficiency,energy,energy,65487,"ied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR)¶CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR)¶CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, which includes some useful information such as SCF eigenvectors, Fock matrix elements, etc. Type: integer; Default: 0. CFOUR_PROP_INTEGRAL (CFOUR)¶CFOUR — Allows storage of property integrals computed in xvdint on internal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR)¶CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release rep",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:73702,Energy Efficiency,energy,energy,73702,"ant matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR)¶CFOUR — Offers the possibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR)¶CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> UHF stabilities leads to a UHF solution. To converge the SCF roots associated with such instabilities, one must run the calculation in reduced symmetry and as a closed-shell UHF case, respectively. Value n directs the program to follow the vector associated with the nth lowest eigenvalue having the proper symmetry (totally symmetric) and spin (RHF–>RHF or UHF–>UHF) properties. 0 means use the lowest eigenvalue. Type: integer; Default: 0. CFOUR_SAVE_INTS (CFOUR)¶CFOUR — Tells CFOUR whether to delete large files (AO integrals and MOINTS file for now) when they are no longer needed. OFF (=0) They will not be saved, ON (=1) they will be saved. Type: boolean",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:74101,Energy Efficiency,reduce,reduced,74101,"sibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR)¶CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> UHF stabilities leads to a UHF solution. To converge the SCF roots associated with such instabilities, one must run the calculation in reduced symmetry and as a closed-shell UHF case, respectively. Value n directs the program to follow the vector associated with the nth lowest eigenvalue having the proper symmetry (totally symmetric) and spin (RHF–>RHF or UHF–>UHF) properties. 0 means use the lowest eigenvalue. Type: integer; Default: 0. CFOUR_SAVE_INTS (CFOUR)¶CFOUR — Tells CFOUR whether to delete large files (AO integrals and MOINTS file for now) when they are no longer needed. OFF (=0) They will not be saved, ON (=1) they will be saved. Type: boolean; Default: false. CFOUR_SCALE_ON (CFOUR)¶CFOUR — Controls whether step scaling is based on the absolute step length (1-norm) (=0 or MAG(S)) or the largest individual step in the internal coordinate space (=1 or MAX(S)). Type: string; Possible Values: MAG(S), MAX(S); Default: MAG(S). CFOUR_SCF_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for the HF-SCF equations. Equations are considered converged when the maximum change in density matrix elem",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:77396,Energy Efficiency,energy,energy,77396,"terface: Keyword subject to translation from value of MAXITER unless set explicitly. Type: integer; Default: 150. CFOUR_SD_FIELD (CFOUR)¶CFOUR — Specifies the strength of a spin-dipole perturbation as required for finite-field calculations of the SD contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the SD strength used by the program will be the value of the keyword \(\times 10^{-6}\). (Default : 0, currently not implemented). Type: integer; Default: 0. CFOUR_SPHERICAL (CFOUR)¶CFOUR — Specifies whether spherical harmonic (5d, 7f, 9g, etc.) or Cartesian (6d, 10f, 15g, etc.) basis functions are to be used. ON (= 1) uses spherical harmonics, OFF (= 0) uses Cartesians. Psi4 Interface: Keyword set according to basis design when BASIS is used instead of CFOUR_BASIS. Keyword subject to translation from value of PUREAM unless set explicitly. Type: boolean; Default: true. CFOUR_SPIN_FLIP (CFOUR)¶CFOUR — Controls whether excitation energy calculations allow for a “spin flip” which changes the \(M_s\) quantum number. Such calculations have some advantages for biradicals and are currently implemented (together with gradients) for CIS and CIS(D) calculations. Options are OFF and ON. Type: boolean; Default: false. CFOUR_SPIN_ORBIT (CFOUR)¶CFOUR — Experimental Use! ON (=1) requests calculation of one-electron spin-orbit integrals. MEANSO additionally gives a mean-field treatment of the two-electron terms (spin-orbit mean field treatment as described Mol. Phys. 98, 1823-1833 (2000)). Type: string; Possible Values: ON, MEANSO, OFF; Default: OFF. CFOUR_SPIN_SCAL (CFOUR)¶CFOUR — ON (=1) requests the spin-component scaled variant of the MP2 approach. This keyword has only an effect when CFOUR_CALC_LEVEL =MP2 is specified and must be used together with CFOUR_REFERENCE =UHF. Type: boolean; Default: false. CFOUR_SPINROTATION (CFOUR)¶CFOUR — Specifies whether nuclear spin-rotation tensors are computed within a NMR chemical shift calculati",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:79893,Energy Efficiency,energy,energy,79893,"ing CFOUR_SYMMETRY =OFF in the input. The DEFAULT option (which is the default) uses the highest order Abelian subgroup. Type: string; Possible Values: DEFAULT, C1, C2, CS, CI, C2V, C2H, D2, D2H, OFF; Default: DEFAULT. CFOUR_SYM_CHECK (CFOUR)¶CFOUR — In principle can be used to force the SCF to converge a solution for which the density matrix transforms as the totally symmetric representation of the point group (i.e. no broken symmetry solutions). The code seems to work in most cases, but has currently been implemented for point groups with E type representation and not for those with triply-, quadruply- or pentuply-degenerate representations. Extending the code to those cases is probably straightforward, and the reader is encouraged to do so if (s)he is so inclined. SYM_CHECK=0 “forces” the high-symmetry solution. SYM_CHECK=OVERRIDE (=1) doesn’t. The latter is the default. Type: boolean; Default: true. CFOUR_SYMMETRY (CFOUR)¶CFOUR — Specifies what subgroup of the full point group is to be used in the energy and/or gradient calculation (the computational point group). OFF (=1) forces a no symmetry run (in \(C_1\) ) and ON (=0) runs the calculation in the largest self-adjoint subgroup ( \(D_{2h}\) and its subgroups). Type: boolean; Default: true. CFOUR_T3_EXTRAPOL (CFOUR)¶CFOUR — Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module xecc. Type: boolean; Default: false. CFOUR_TAMP_SUM (CFOUR)¶CFOUR — Specifies how often the largest \(t\) amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc. Type: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR)¶CFOUR",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:83619,Energy Efficiency,adapt,adapted,83619,"eloper version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR)¶CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR)¶CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR)¶CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTRAN (CFOUR)¶CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR)¶C",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:88710,Energy Efficiency,charge,charge,88710,"help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. COMPLEX_TOLERANCE (CCEOM)¶CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC)¶DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC)¶PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT)¶SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. COUPLING (PSIMRCC)¶PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC)¶PSIMRCC — Do include the terms that couple the reference dete",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:89380,Energy Efficiency,energy,energy,89380,"t: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC)¶PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT)¶SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. COUPLING (PSIMRCC)¶PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC)¶PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING)¶OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF)¶CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF)¶CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS)¶GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (G",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:90590,Energy Efficiency,adapt,adaptive,90590,"es: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC)¶PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING)¶OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF)¶CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF)¶CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS)¶GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (GLOBALS)¶GLOBALS — Directory to which to write cube files. Default is the input file directory. Type: string; Default: No Default. CUBEPROP_ISOCONTOUR_THRESHOLD (GLOBALS)¶GLOBALS — Fraction of density captured by adaptive isocontour values. Type: double; Default: 0.85. CUBEPROP_ORBITALS (GLOBALS)¶GLOBALS — List of orbital indices for which cube files are generated (1-based, \(+\) for alpha, \(-\) for beta). All orbitals computed if empty. Type: array; Default: No Default. CUBEPROP_TASKS (GLOBALS)¶GLOBALS — Properties to compute. Valid tasks include: DENSITY - Da, Db, Dt, Ds; ESP - Dt, ESP; ORBITALS - Psi_a_N, Psi_b_N; BASIS_FUNCTIONS - Phi_N; LOL - LOLa, LOLb; ELF - ELFa, ELFb; FRONTIER_ORBITALS - Psi_a_N_HOMO + Psi_a_N_LUMO; DUAL_DESCRIPTOR - DUAL_N_HOMO-M_LUMO. Type: array; Default: No Default. CUBIC_BASIS_TOLERANCE (FISAPT)¶FISAPT (Expert) — CubicScalarGrid basis cutoff. Type: conv double; Default: 1.0e-12. CUBIC_BASIS_TOLERANCE (GLOBALS)¶GLOBALS (Expert) — CubicScalarGrid basis cutoff. Type: conv double; Default: 1.0e-12. CUBIC_BLOCK_MAX_POINTS (FISAPT)¶FISAPT (Expert) — CubicScalarGrid maximum number of grid points per evaluation block. Type: integer; Default: 1",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:96376,Energy Efficiency,efficient,efficient,96376,"CTIONAL (DCT)¶DCT — Chooses appropriate DCT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCT_GUESS (DCT)¶DCT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algorithm to use for the DCT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CCDENSITY)¶CCDENSITY — Reproducing energies from densities ?. Type: integer; Default: 0. DEBUG (CPHF)¶CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS)¶GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT)¶CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT)¶SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT)¶SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP)¶EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS)¶GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI)¶DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC)¶FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS)¶GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCT (DCT)¶DCT — Auxiliary basis se",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:96561,Energy Efficiency,energy,energy,96561,"als from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algorithm to use for the DCT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CCDENSITY)¶CCDENSITY — Reproducing energies from densities ?. Type: integer; Default: 0. DEBUG (CPHF)¶CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS)¶GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT)¶CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT)¶SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT)¶SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP)¶EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS)¶GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI)¶DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC)¶FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS)¶GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCT (DCT)¶DCT — Auxiliary basis set for DCT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT)¶SAPT — Auxiliary basis set for SAPT Elst10 and Ex",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:106542,Energy Efficiency,energy,energy,106542,"sed in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIAGONALIZE_HEFF (PSIMRCC)¶PSIMRCC — Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIE_IF_NOT_CONVERGED (GLOBALS)¶GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY)¶CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA)¶CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE)¶CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI)¶DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored fo",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:107127,Energy Efficiency,energy,energy,107127,"re \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIAGONALIZE_HEFF (PSIMRCC)¶PSIMRCC — Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIE_IF_NOT_CONVERGED (GLOBALS)¶GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY)¶CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA)¶CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE)¶CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI)¶DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS e",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:110102,Energy Efficiency,energy,energy,110102,"ERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF)¶SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS)¶GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG)¶DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG)¶DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG)¶DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG)¶DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG)¶DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG)¶DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG)¶DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG)¶DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouter",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:110411,Energy Efficiency,energy,energy,110411,"art using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF)¶SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS)¶GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG)¶DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG)¶DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG)¶DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG)¶DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG)¶DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG)¶DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG)¶DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG)¶DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:113096,Energy Efficiency,energy,energy,113096,"tion. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG)¶DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG)¶DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG)¶DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG)¶DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG)¶DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG)¶DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG)¶DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG)¶DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG)¶DMRG — The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES (DMRG)¶DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG)¶DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT)¶SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC)¶DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC)¶OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:113541,Energy Efficiency,reduce,reduced,113541," density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG)¶DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG)¶DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG)¶DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG)¶DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG)¶DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG)¶DMRG — The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES (DMRG)¶DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG)¶DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT)¶SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC)¶DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC)¶OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Dispersion terms. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:114803,Energy Efficiency,energy,energy,114803,"ype: boolean; Default: true. DO_CCD_DISP (SAPT)¶SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC)¶DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC)¶OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Dispersion terms. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean;",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:115099,Energy Efficiency,energy,energy,115099,"ue. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Dispersion terms. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per i",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:115336,Energy Efficiency,energy,energy,115336,"nf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA o",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:115632,Energy Efficiency,energy,energy,115632,"n SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:116422,Energy Efficiency,energy,energy,116422," optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criteri",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:116581,Energy Efficiency,energy,energy,116581,"ved in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:116787,Energy Efficiency,energy,energy,116787,"alse. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CON",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:117024,Energy Efficiency,energy,energy,117024,"efault: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. S",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:117220,Energy Efficiency,energy,energy,117220,"ation (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:117415,Energy Efficiency,energy,energy,117415,"C — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PS",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:117613,Energy Efficiency,energy,energy,117613,y. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAP,MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:117896,Energy Efficiency,energy,energy,117896," for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergen",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:117992,Energy Efficiency,energy,energy,117992,"-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:118225,Energy Efficiency,energy,energy,118225,"nce criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:118424,Energy Efficiency,energy,energy,118424,"nce criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: O",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:118617,Energy Efficiency,energy,energy,118617,"CF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen gro",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:118804,Energy Efficiency,energy,energy,118804,"NVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Defa",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:119112,Energy Efficiency,energy,energy,119112,"mes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:119452,Energy Efficiency,energy,energy,119452,"st-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP comput",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:119695,Energy Efficiency,charge,charge,119695,"f the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:119714,Energy Efficiency,energy,energy,119714,"f the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:119843,Energy Efficiency,energy,energy,119843,"ence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koop",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:119950,Energy Efficiency,energy,energy,119950," EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the di",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:120282,Energy Efficiency,energy,energy,120282,"d Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING)¶OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:120416,Energy Efficiency,energy,energy,120416,"FP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING)¶OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM)¶CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the gu",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:121060,Energy Efficiency,energy,energy,121060," EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING)¶OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM)¶CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. EOM_REFERENCE (CCEOM)¶CCEOM — Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR)¶CCHBAR — Reference wavefunction type for EOM computations. Type: string; Default",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:127638,Energy Efficiency,charge,charge,127638,"TCI)¶DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI)¶DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta string numbers of the target determinant. This could be useful for trying to exclude states that have a nonzero CI coefficient for the given determinant. However, this option was experimental and may not be effective. Type: array; Default: No Default. FINAL_GEOM_WRITE (OPTKING)¶OPTKING — Do save and print the geometry from the last projected step at the end of a geometry optimization? Otherwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. FISAPT_CHARGE_COMPLETENESS (FISAPT)¶FISAPT — Amount of fragment charge completeness to distinguish link bonds. Type: double; Default: 0.8. FISAPT_DO_FSAPT (FISAPT)¶FISAPT — Do an F-SAPT analysis?. Type: boolean; Default: true. FISAPT_DO_FSAPT_DISP (FISAPT)¶FISAPT — Do F-SAPT Dispersion?. Type: boolean; Default: true. FISAPT_DO_PLOT (FISAPT)¶FISAPT — Plot a scalar-field analysis. Type: boolean; Default: false. FISAPT_FSAPT_EXCH_SCALE (FISAPT)¶FISAPT — Do F-SAPT exchange scaling? (ratio of S^infty to S^2). Type: boolean; Default: true. FISAPT_FSAPT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop F-SAPT data within input file directory. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT)¶FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT)¶FISAPT — Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction). Type: boolean; Default: true. FISAPT_FSSAPT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop sSAPT0 exchange-scaling F-SAPT data within input file directo",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:133369,Energy Efficiency,charge,charges,133369,"to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF)¶SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF)¶SCF — The occupations of the orbital indices specified above (\(0.0\le {\rm occ} \le 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING)¶OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FRAG_REF_ATOMS (OPTKING)¶OPTKING — Which atoms define the reference points for interfragment coordinates?. Type: array; Default: No Default. FREEZE_CORE (GLOBALS)¶GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE, 1, 0, -1, -2, -3; Default: FALSE. FREEZE_CORE (SAPT)¶SAPT — The scope of core orbitals to freeze in evaluation of SAPT \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPT",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:133967,Energy Efficiency,energy,energy,133967,"gment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FRAG_REF_ATOMS (OPTKING)¶OPTKING — Which atoms define the reference points for interfragment coordinates?. Type: array; Default: No Default. FREEZE_CORE (GLOBALS)¶GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE, 1, 0, -1, -2, -3; Default: FALSE. FREEZE_CORE (SAPT)¶SAPT — The scope of core orbitals to freeze in evaluation of SAPT \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPTKING)¶OPTKING — Do freeze all interfragment modes?. Type: boolean; Default: false. FREEZE_INTRAFRAG (OPTKING)¶OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING)¶OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING)¶OPTKING — Specify atom and X, XY, XYZ, … to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to b",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:140944,Energy Efficiency,energy,energy,140944,"ess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI)¶DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI)¶DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI)¶DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI)¶DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING)¶OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING)¶OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:142449,Energy Efficiency,energy,energy,142449," this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI)¶DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING)¶OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING)¶OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING)¶OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI)¶DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC)¶PSIMRCC — Do print the effective Hamiltonian?. Type: ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:142645,Energy Efficiency,energy,energy,142645,"ESS_SIZE (DETCI)¶DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING)¶OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING)¶OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING)¶OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI)¶DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC)¶PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC)¶DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_E",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:154648,Energy Efficiency,power,power,154648,"l domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.01. LOCAL_DO_SINGLES (CCEOM)¶CCEOM —. Type: boolean; Default: true. LOCAL_FILTER_SINGLES (CCEOM)¶CCEOM — Do apply local filtering to singles amplitudes?. Type: boolean; Default: true. LOCAL_FILTER_SINGLES (CCLAMBDA)¶CCLAMBDA — Do apply local filtering to single de-excitation (\(\lambda 1\) amplitudes?. Type: boolean; Default: true. LOCAL_FILTER_SINGLES (CCRESPONSE)¶CCRESPONSE — Do apply local filtering to single excitation amplitudes?. Type: boolean; Default: false. LOCAL_GHOST (CCEOM)¶CCEOM — Permit ghost atoms to hold projected atomic orbitals to include in the virtual space in local-EOM-CCSD calculations. Type: integer; Default: -1. LOCAL_IBO_CONDITION (FISAPT)¶FISAPT (Expert) — Condition number to use in IBO metric inversions. Type: double; Default: 1.0e-7. LOCAL_IBO_POWER (FISAPT)¶FISAPT — IBO localization metric power. Type: integer; Default: 4. LOCAL_IBO_STARS (FISAPT)¶FISAPT — IBO Centers for Pi Degeneracy. Type: array; Default: No Default. LOCAL_IBO_STARS_COMPLETENESS (FISAPT)¶FISAPT — IBO Charge metric for classification as Pi. Type: double; Default: 0.90. LOCAL_IBO_USE_STARS (FISAPT)¶FISAPT — IBO Stars procedure. Type: boolean; Default: false. LOCAL_MAXITER (FISAPT)¶FISAPT — Maximum iterations in localization. Type: integer; Default: 1000. LOCAL_MAXITER (SCF)¶SCF — The maxiter on the orbital localization procedure. Type: integer; Default: 200. LOCAL_METHOD (CCENERGY)¶CCENERGY — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METHOD (CCEOM)¶CCEOM — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. W",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:157145,Energy Efficiency,energy,energy,157145,"selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_PAIRDEF (CCENERGY)¶CCENERGY — Definition of local pair domains, default is BP, Boughton-Pulay. Type: string; Possible Values: BP, RESPONSE; Default: BP. LOCAL_PAIRDEF (CCLAMBDA)¶CCLAMBDA — Definition of local pair domains. Type: string; Default: No Default. LOCAL_PAIRDEF (CCRESPONSE)¶CCRESPONSE — Definition of local pair domains. Type: string; Default: NONE. LOCAL_PRECONDITIONER (CCEOM)¶CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT)¶FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY)¶CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM)¶CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA)¶CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE)¶CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC)¶PSIMRCC — Do",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:157537,Energy Efficiency,energy,energy,157537,"E — Definition of local pair domains. Type: string; Default: NONE. LOCAL_PRECONDITIONER (CCEOM)¶CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT)¶FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY)¶CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM)¶CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA)¶CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE)¶CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC)¶PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI)¶DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI)¶DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be pe",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:158470,Energy Efficiency,energy,energy,158470,"uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA)¶CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE)¶CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC)¶PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI)¶DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI)¶DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2)¶DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS)¶GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT)¶SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING)",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:159389,Energy Efficiency,energy,energy,159389," iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2)¶DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS)¶GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT)¶SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. MAX_MEM_BUF (SCF)¶SCF — Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MAX_MOGRAD_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired E_CONVERGENCE. The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MAX_MOGRAD_CONVERGENCE (OCC)¶OCC — Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired E_CONVERGENCE. The listed default will be used for the default value of E_CONVERGENCE. Type: conv d",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:161765,Energy Efficiency,energy,energy,161765,"e H(diag) vector and the number of D vectors is equal to the number of roots). When the number of vectors on disk reaches the value of MAX_NUM_VECS, the Davidson subspace will be collapsed to COLLAPSE_SIZE vectors for each root. This is very helpful for saving disk space. Defaults to CI_MAXITER * NUM_ROOTS + NUM_INIT_VECS. Type: integer; Default: 0. MAX_RADIAL_MOMENT (GLOBALS)¶GLOBALS — Maximum Radial Moment to Calculate. Type: integer; Default: 4. MAXITER (ADC)¶ADC — Maximum number of iterations. Type: integer; Default: 50. MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. MAXITER (CCEOM)¶CCEOM — Maximum number of iterations. Type: integer; Default: 80. MAXITER (CCLAMBDA)¶CCLAMBDA — Maximum number of iterations. Type: integer; Default: 50. MAXITER (CCRESPONSE)¶CCRESPONSE — Maximum number of iterations to converge perturbed amplitude equations. Type: integer; Default: 50. MAXITER (DCT)¶DCT — Maximum number of macro- or micro-iterations for both energy and response equations. Type: integer; Default: 40. MAXITER (FISAPT)¶FISAPT — Maximum number of iterations for CPHF. Type: integer; Default: 50. MAXITER (FNOCC)¶FNOCC — Maximum number of CC iterations. Type: integer; Default: 100. MAXITER (MCSCF)¶MCSCF — Maximum number of iterations. Type: integer; Default: 100. MAXITER (PE)¶PE — Maximum number of iterations for induced moments. Type: integer; Default: 50. MAXITER (PSIMRCC)¶PSIMRCC — Maximum number of iterations to determine the amplitudes. Type: integer; Default: 100. MAXITER (SAPT)¶SAPT — Maximum number of CPHF iterations. Type: integer; Default: 50. MAXITER (SCF)¶SCF — Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MBIS_D_CONVERGENCE (GLOBALS)¶GLOBALS — MBIS Convergence Criteria. Type: conv double; Default: 1.0e-8. MBIS_MAXITER (GLOBALS)¶GLOBALS — Maximum Number of MBIS Iterations. Type: integer; Default: 500. MBIS_PRUNING_SCHEME (GLO",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:164018,Energy Efficiency,energy,energy,164018,". Type: integer; Default: 302. MCSCF_ALGORITHM (DETCI)¶DETCI — Convergence algorithm to utilize. Two-Step, Augmented Hessian, or One-Step. Defaults to TS for RASSCF. Type: string; Possible Values: TS, AH; Default: TS. MCSCF_CI_CLEANUP (DETCI)¶DETCI — Cleanup the CI info at the end of a run?. Type: boolean; Default: true. MCSCF_DIIS_ERROR_TYPE (DETCI)¶DETCI — DIIS error vector type either, the AO orbital gradient or the orbital rotation update matrix. Type: string; Possible Values: GRAD, UPDATE; Default: GRAD. MCSCF_DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation for TS convergence. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of DIIS vectors for TS convergence. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI)¶DETCI — Iteration to turn on DIIS for TS convergence. Type: integer; Default: 3. MCSCF_DPD_CLEANUP (DETCI)¶DETCI — Cleanup the DPD MCSCF object at the end of a run?. Type: boolean; Default: true. MCSCF_E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI)¶DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI)¶DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI)¶DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_ROTATE (DETCI)¶DETCI — Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals. Type: array; Default: No Default. MCSCF_SO_START_E (DETCI)¶DE",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:165057,Energy Efficiency,energy,energy,165057,"nergy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI)¶DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI)¶DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI)¶DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_ROTATE (DETCI)¶DETCI — Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals. Type: array; Default: No Default. MCSCF_SO_START_E (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-4. MCSCF_SO_START_GRAD (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on RMS of orbital gradient. Type: double; Default: 1e-4. MCSCF_TYPE (DETCI)¶DETCI — Method to handle the two-electron integrals. Type: string; Possible Values: DF, CONV, AO; Default: CONV. MEMORY (ADC)¶ADC — The amount of memory available (in Mb) This option is only available for the built-in ADC backend. Type: integer; Default: 1000. MIN_CCD_DIISVECS (SAPT)¶SAPT — Minimum number of vectors used in CCD-DIIS. Type: integer; Default: 4. MINAO_BASIS (FISAPT)¶FISAPT (Expert) — MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. MIXED (DETCI)¶DETCI (Expert) — Do allow “mixed” RAS II/RAS III excitations into the CI space? If FALSE, then if there are any electrons in RAS III, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MIXED4 (DETCI)¶DETC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:171462,Energy Efficiency,energy,energy,171462," — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:171494,Energy Efficiency,energy,energy,171494," — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:171564,Energy Efficiency,energy,energy,171564," — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:172449,Energy Efficiency,energy,energy,172449,"AVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC)¶MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC)¶MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC)¶MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC)¶MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:173977,Energy Efficiency,energy,energy,173977,"o otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC)¶MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC)¶MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC)¶MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI)¶DETCI — Do use the \(M_s = 0\) component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI)¶DETCI — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (DFOCC)¶DFOCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (FNOCC)¶FNOCC — Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. NAT_ORBS (OCC)¶OCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS_T2 (SAPT)¶SAPT — Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3 ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:186978,Energy Efficiency,charge,charges,186978,"lt: FLETCHER_REEVES. PCG_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for residual vector of preconditioned conjugate gradient method. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve R_CONVERGENCE residual convergence. The listed default will be used for the default value of R_CONVERGENCE. Type: conv double; Default: 1e-7. PCG_CONVERGENCE (OCC)¶OCC — Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_MAXITER (DFOCC)¶DFOCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 50. PCG_MAXITER (OCC)¶OCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 30. PCM (GLOBALS)¶GLOBALS — PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_CC_TYPE (PCM)¶PCM — PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. PCM_SCF_TYPE (PCM)¶PCM (Expert) — Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCMSOLVER_PARSED_FNAME (PCM)¶PCM (Expert) — Name of the PCMSolver input file as parsed by pcmsolver.py. Type: string; Default: No Default. PE (GLOBALS)¶GLOBALS — PE boolean for polarizable embedding module. Type: boolean; Default: false. PE_ECP (PE)¶PE — use PE(ECP) repulsive potentials. Type: boolean; Default: false. PERTURB_CBS (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: false. PERTURB_CBS_COUPLING (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. PERTURB_DIPOLE (SCF)¶SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF)¶SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI)¶DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:195441,Energy Efficiency,reduce,reduce,195441,"me methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP)¶EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI)¶DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA)¶CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE)¶CCRESPONSE — Convergence criterion for wavefunction (change) in p",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:206949,Energy Efficiency,energy,energy,206949," Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING)¶OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC)¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLES",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:207043,Energy Efficiency,energy,energy,207043," unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING)¶OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC)¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalue to allow before linear ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:207137,Energy Efficiency,energy,energy,207137,"symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING)¶OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC)¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF)¶SCF (Expe",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:208405,Energy Efficiency,energy,energy,208405,"of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF)¶SCF (Expert) — SAD guess density decomposition threshold. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF density in the SAD guess, analogous to D_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy in the SAD guess, analogous to E_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF)¶SCF (Expert) — Do force an even distribution of occupations across the last partially occupied orbital shell?. Type: boolean; Default: true. SAD_MAXITER (SCF)¶SCF (Expert) — Maximum number of atomic SCF iterations within SAD. Type: integer; Default: 50. SAD_PRINT (SCF)¶SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE (SCF)¶SCF (Expert) — SCF type used for atomic calculations in SAD guess. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK; Default: DF. SAD_SPIN_AVERAGE (SCF)¶SCF (Expert) — Do use spin-averaged occupations instead of atomic ground spin state in fractional SAD?. Type: boolean; Default: true. SAPT (SCF)¶SCF (Expert) — Are going to do SAPT? If so, what part?. Type: string; Default: FALSE. SAPT0_E10 (SAPT)¶SAPT (Expert) — For SAPT0 only, compute only first-order electros",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:212898,Energy Efficiency,energy,energy,212898,"he LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; Default: false. SAVE_JK (SCF)¶SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF)¶SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR (SCF)¶SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_PROPERTIES (SCF)¶SCF — SCF Properties to calculate after an energy evaluation. Note, this keyword is not used for property evaluations. Type: array; Default: No Default. SCF_TYPE (CPHF)¶CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCF_TYPE (GLOBALS)¶GLOBALS — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK; Default: PK. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM)¶CCEOM — Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCREENING (SAPT)¶SAPT — Do use Combined Schwarz Approximation Maximum (CSAM) screening on two-electron integrals. This is a slightly tighter bound than that of default Schwarz screening. Type: string; Possible Values: SCHWARZ, CSAM; Default: CSAM. SC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:218833,Energy Efficiency,energy,energy,218833,"lvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC)¶DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC)¶OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF)¶SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF)¶SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF)¶SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SPINADAPT_ENERGIES (CCENERGY)¶CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:219018,Energy Efficiency,adapt,adapted,219018," SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF)¶SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF)¶SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF)¶SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SPINADAPT_ENERGIES (CCENERGY)¶CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subsp",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:219143,Energy Efficiency,energy,energy,219143,"oolean; Default: false. SOSCF_CONV (SCF)¶SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF)¶SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SPINADAPT_ENERGIES (CCENERGY)¶CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stabilit",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:220860,Energy Efficiency,energy,energy,220860,"PT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCT)¶DCT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCT)¶DCT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCT)¶DCT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING)¶OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SUMMATION_FIELDS (P",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:224666,Energy Efficiency,energy,energy,224666,"1e-4. TDSCF_STATES (SCF)¶SCF — Number of roots (excited states) we should seek to converge. This can be either an integer (total number of states to seek) or a list (number of states per irrep). The latter is only valid if the system has symmetry. Furthermore, the total number of states will be redistributed among irreps when symmetry is used. Type: array; Default: No Default. TDSCF_TDA (SCF)¶SCF — Run with Tamm-Dancoff approximation (TDA), uses random-phase approximation (RPA) when false. Type: boolean; Default: false. TDSCF_TDM_PRINT (SCF)¶SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:225415,Energy Efficiency,energy,energy,225415,"tation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC)¶PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF)¶SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DETCI)¶DETCI (Expert) — Do compute two-particle density matrix if not otherwise required? Warning: This will hold 4 dense active TPDM’s in memory. Type: boolean; Default: false.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:6172,Integrability,rout,routines,6172,"T)¶SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF)¶SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF)¶SCF — Accelerate convergence by performing a preliminary SCF with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the Defaults small basis set 3-21G, pcseg-0, or def2-SV(P). Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS)¶GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. BENCH (GLOBALS)¶GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI)¶DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BORDER (PE)¶PE — Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_N_REDIST (PE)¶PE — number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER (PE)¶PE — order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_REDIST_POL (PE)¶PE — redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. BORDER_RMIN (PE)¶PE — minimum radius from QM atoms to MM sites to be taken into ac",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:7944,Integrability,depend,depending,7944," BORDER_REDIST_POL (PE)¶PE — redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. BORDER_RMIN (PE)¶PE — minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT (PE)¶PE — unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_TYPE (PE)¶PE — border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BRIANQC_ENABLE (GLOBALS)¶GLOBALS — Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC)¶FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC)¶ADC — How to cache quantities within the DPD library. This option is only available for the built-in ADC backend. Type: integer; Default: 2. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC proc",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:29036,Integrability,contract,contraction,29036,"Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR)¶CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR)¶CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR)¶CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently on",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:29141,Integrability,contract,contraction,29141,"ed). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR)¶CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR)¶CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR)¶CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optim",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:29189,Integrability,contract,contraction,29189,"ed). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR)¶CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR)¶CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR)¶CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optim",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:46713,Integrability,contract,contracted,46713,"fying the corresponding inner-shell orbitals. Type: boolean; Default: false. CFOUR_FROZEN_VIRT (CFOUR)¶CFOUR — Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energy needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR)¶CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR)¶CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENB",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:46926,Integrability,contract,contracted,46926,"s (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energy needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR)¶CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR)¶CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry o",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:47013,Integrability,contract,contracted,47013,"ion. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR)¶CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR)¶CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sa",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:50527,Integrability,integrat,integration,50527,"ion where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR)¶CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR)¶CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR)¶CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:58095,Integrability,message,message,58095,"multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CF",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:66523,Integrability,depend,dependent,66523,"rnal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR)¶CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR)¶CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR)¶CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orb",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:67099,Integrability,depend,dependent,67099,"rnal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR)¶CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR)¶CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR)¶CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orb",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:69484,Integrability,depend,depending,69484,"ERAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR)¶CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR)¶CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR)¶CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR)¶CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:72942,Integrability,message,message,72942,"x is computed for correlated wave functions. OFF (= 0) The relaxed density will not be computed, ON (= 1) it will be computed. Type: boolean; Default: false. CFOUR_RES_RAMAN (CFOUR)¶CFOUR — This option can be used to convert an analytically calculated gradient vector to a particular normal coordinate representation. A useful application is to calculate the gradient of an electronically excited state in the normal coordinate representation of the ground electronic state, as this provides a first approximation to resonance Raman intensities (hence the name of the keyword). Calculations that use the this option require the externally supplied force constant matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR)¶CFOUR — Offers the possibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR)¶CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> UH",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:105044,Integrability,integrat,integration,105044,"GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER prune based on decaying functions (experts only!). The recommended scheme is ROBUST. Type: string; Default: NONE. DFT_RADIAL_POINTS (SCF)¶SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:105149,Integrability,integrat,integration,105149,"y!). The recommended scheme is ROBUST. Type: string; Default: NONE. DFT_RADIAL_POINTS (SCF)¶SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:105295,Integrability,integrat,integration,105295,": integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGO",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:126034,Integrability,rout,routine,126034,"r; Default: 5. FCI (DETCI)¶DETCI — Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FCI_STRINGS (DETCI)¶DETCI (Expert) — Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. FD_PROJECT (FINDIF)¶FINDIF — Do discount rotational degrees of freedom in a finite difference frequency calculation. Turned off at non-stationary geometries and in the presence of external perturbations. Type: boolean; Default: true. FILTER_GUESS (DETCI)¶DETCI (Expert) — Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determinants? This is useful to remove, e.g., delta states when a sigma state is desired. The user inputs two determinants (by giving the absolute alpha string number and beta string number for each), and also the desired phase between these two determinants for guesses which are to be kept. FILTER_GUESS = TRUE turns on the filtering routine. Requires additional keywords FILTER_GUESS_DET1, FILTER_GUESS_DET2, and FILTER_GUESS_SIGN. Type: boolean; Default: false. FILTER_GUESS_DET1 (DETCI)¶DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the first determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_DET2 (DETCI)¶DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_SIGN (DETCI)¶DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI)¶DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta st",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:137284,Integrability,depend,dependent,137284,"n of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (ADC)¶ADC — Specifies the choice of representation of the electric dipole operator. * Acceptable values are LENGTH (default) and VELOCITY. Type: string; Possible Values: LENGTH, VELOCITY; Default: LENGTH. GAUGE (CCDENSITY)¶CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE)¶CCRESPONSE — Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and LENGTH gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are LENGTH for the usual length-gauge representation, VELOCITY``(default) for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or ``BOTH. Note that, for optical rotation and raman optical activity calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: VELOCITY. GDMA_LIMIT (GDMA)¶GDMA — The order of multipole expansion on each site. Currently limited to the same order for all sites; for more advanced usage a user-provided GDMA data file should be provided. Type: integer; Default: 2. GDMA_MULTIPOLE_UNITS (GDMA)¶GDMA — Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_ORIGIN (GDMA)¶GDMA — The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point. Type: array; Default: No Default. ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:184827,Integrability,depend,dependent,184827,"quations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCT)¶DCT (Expert) — The shift applied to the denominator in the orbital update iterations. Type: double; Default: 0.0. ORBITALS_WRITE (SCF)¶SCF — File name (case sensitive) to which to serialize Wavefunction orbital data. Type: string; Default: No Default. ORTH_TYPE (DFOCC)¶DFOCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. ORTH_TYPE (OCC)¶OCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. OS_SCALE (OCC)¶OCC — A custom scaling parameter for opposite-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. OVERLAP_CHECK (CCEOM)¶CCEOM — Report overlaps with old excited-state wave functions, if available, and store current wave functions for later use. Type: boolean; Default: false. P (THERMO)¶THERMO — Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. PAIR_ENERGIES_PRINT (CCENERGY)¶CCENERGY — Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. PARALLEL (SCF)¶SCF (Expert) — Do run in parallel?. Type: boolean; Default: false. PARENT_SYMMETRY (GLOBALS)¶GLOBALS (Expert) — For displacements, symmetry (Schoenflies symbol) of ‘parent’ (undisplaced) reference molecule. Internal use only for finite difference. Type: string; Default: No Default. PCG_BETA_TYPE (DFOCC)¶DFOCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:188526,Integrability,integrat,integration,188526,"alse. PERTURB_CBS_COUPLING (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. PERTURB_DIPOLE (SCF)¶SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF)¶SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI)¶DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = H_0 + z H_1\). Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF)¶SCF — Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH (SCF)¶SCF — The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS (SCF)¶SCF — Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. PK_ALGO (SCF)¶SCF (Expert) — Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF)¶SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF)¶SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF)¶SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. POINTS (FINDIF)¶FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC)¶ADC — Maximum iteration number in pole searching. This option is only available for the built-in ADC backend. Type: integer; Default: 20. POTFILE (PE)¶PE — Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:194475,Integrability,rout,routing,194475,"ult: POLARIZABILITY. PROPERTY (CCRESPONSE)¶CCRESPONSE — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC)¶PSIMRCC — The type of perturbation theory computation to perform. Type: string; Default: SECOND_ORDER. PUREAM (GLOBALS)¶GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCT)¶DCT — Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP)¶EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI)¶DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce th",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:197605,Integrability,integrat,integration,197605,"esidual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC)¶FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC)¶OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF)¶SCF — Number of radial grid points for spherical potential integration. Type: integer; Default: 100. RADIUS (SCF)¶SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS2 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS3 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS34_MAX (DETCI)¶DETCI — maximum number of electrons in RAS III + IV. Type: integer; Default: -1. RAS3_MAX (DETCI)¶DETCI — maximum number of electrons in RAS III. Type: integer; Default: -1. RAS4 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS4. Type: array; Default: No Default. RAS4_MAX (DETCI)¶DETCI — maximum number of electrons in RAS IV. Type: integer; Default: -1. READ_SCF_3INDEX (DFOCC)¶DFOCC — Do r",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:206122,Integrability,depend,dependent,206122,"ault: No Default. ROTATE_MO_ANGLE (MCSCF)¶MCSCF (Expert) — For orbital rotations after convergence, the angle (in degrees) by which to rotate. Type: double; Default: 0.0. ROTATE_MO_IRREP (MCSCF)¶MCSCF (Expert) — For orbital rotations after convergence, irrep (1-based, Cotton order) of the orbitals to rotate. Type: integer; Default: 1. ROTATE_MO_P (MCSCF)¶MCSCF (Expert) — For orbital rotations after convergence, number of the first orbital (1-based) to rotate. Type: integer; Default: 1. ROTATE_MO_Q (MCSCF)¶MCSCF (Expert) — For orbital rotations after convergence, number of the second orbital (1-based) to rotate. Type: integer; Default: 2. ROTATIONAL_SYMMETRY_NUMBER (THERMO)¶THERMO — Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING)¶OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC)¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:208020,Integrability,depend,dependencies,208020,"P3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF)¶SCF (Expert) — SAD guess density decomposition threshold. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF density in the SAD guess, analogous to D_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy in the SAD guess, analogous to E_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF)¶SCF (Expert) — Do force an even distribution of occupations across the last partially occupied orbital shell?. Type: boolean; Default: true. SAD_MAXITER (SCF)¶SCF (Expert) — Maximum number of atomic SCF iterations within SAD. Type: integer; Default: 50. SAD_PRINT (SCF)¶SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE (SCF)¶SCF (Expert) — SCF type used for atomic calculations in SAD guess. Type: string; Possible Values: D",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:211611,Integrability,integrat,integration,211611,"T_EXCH_DISP_SCALE_SCHEME (SAPT)¶SAPT — Scheme for approximating exchange-dispersion for SAPT-DFT. NONE Use unscaled Exch-Disp2,u . FIXED Use a fixed factor SAPT_DFT_EXCH_DISP_FIXED_SCALE to scale Exch-Disp2,u . DISP Use the ratio of Disp2,r and Disp2,u to scale Exch-Disp2,u . Type: string; Possible Values: NONE, FIXED, DISP; Default: DISP. SAPT_DFT_FUNCTIONAL (SAPT)¶SAPT (Expert) — Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION (SAPT)¶SAPT (Expert) — How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_GRAC_SHIFT_A (SAPT)¶SAPT — Monomer A GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_GRAC_SHIFT_B (SAPT)¶SAPT — Monomer B GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_MP2_DISP_ALG (SAPT)¶SAPT (Expert) — Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; D",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:211755,Integrability,integrat,integration,211755,"factor SAPT_DFT_EXCH_DISP_FIXED_SCALE to scale Exch-Disp2,u . DISP Use the ratio of Disp2,r and Disp2,u to scale Exch-Disp2,u . Type: string; Possible Values: NONE, FIXED, DISP; Default: DISP. SAPT_DFT_FUNCTIONAL (SAPT)¶SAPT (Expert) — Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION (SAPT)¶SAPT (Expert) — How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_GRAC_SHIFT_A (SAPT)¶SAPT — Monomer A GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_GRAC_SHIFT_B (SAPT)¶SAPT — Monomer B GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_MP2_DISP_ALG (SAPT)¶SAPT (Expert) — Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; Default: false. SAVE_JK (SCF)¶SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF)¶SCF — Save the UHF NOs. Type: boo",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:219560,Integrability,depend,dependent,219560," (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SPINADAPT_ENERGIES (CCENERGY)¶CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:225207,Integrability,integrat,integration,225207,"ult: false. TDSCF_TDM_PRINT (SCF)¶SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC)¶PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF)¶SCF (Expert) — The tile size for the distribut",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:6399,Modifiability,extend,extended,6399,"le Values: basis string; Default: No Default. BASIS_GUESS (SCF)¶SCF — Accelerate convergence by performing a preliminary SCF with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the Defaults small basis set 3-21G, pcseg-0, or def2-SV(P). Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS)¶GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. BENCH (GLOBALS)¶GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI)¶DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BORDER (PE)¶PE — Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_N_REDIST (PE)¶PE — number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER (PE)¶PE — order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_REDIST_POL (PE)¶PE — redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. BORDER_RMIN (PE)¶PE — minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT (PE)¶PE — unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BO",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:17584,Modifiability,config,configurations,17584,"e variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI)¶DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI)¶DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\r",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:26319,Modifiability,enhance,enhance,26319,"the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR)¶CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR)¶CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. CFOUR_CC_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR)¶CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR)¶CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of x",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:40227,Modifiability,coupling,coupling,40227,"ry N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR)¶CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR)¶CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR)¶CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword \(\times 10^{-6}\). The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be aware that for some atoms, the calculation has to be run in lower symmetry or even without symmetry. (Default : 0). Type: integer; Default: 0. CFOUR_FD_CALCTYPE (CFOUR)¶CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:42877,Modifiability,adapt,adapted,42877,"hes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR)¶CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR)¶CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR)¶CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:43664,Modifiability,adapt,adapted,43664," desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR)¶CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR)¶CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR)¶CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR)¶CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR)¶CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are split, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR)¶CFOUR — Specifies the field strength for a perturbation (defin",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:49802,Modifiability,variab,variables,49802,"sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR)¶CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:57349,Modifiability,coupling,coupling,57349,"); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:57444,Modifiability,coupling,coupling,57444,"equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and s",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:57491,Modifiability,coupling,coupling,57491,"equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and s",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:57633,Modifiability,coupling,coupling,57633," is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:61277,Modifiability,variab,variable,61277,"the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR)¶CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) incl",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:61327,Modifiability,variab,variable,61327,"ogram orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR)¶CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The two",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:62028,Modifiability,adapt,adapted,62028,"lution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR)¶CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The two-determinant CC method for open-shell singlet states can be activated by TD-CC (=8). Type: string; Possible Values: SPIN-ORBITAL, SR-CC, PSA-CC_FULL, SR-CC_FULL, TD-CC; Default: SPIN-ORBITAL. CFOUR_OPT_MAXCYC (CFOUR)¶CFOUR — Identical to CFOUR_GEO_MAXCYC. Type: integer; Default: 50. CFOUR_ORBITALS (CFOUR)¶CFOUR — Specifies the type of molecular orbitals used in post-HF calculations. STANDARD (=0) requests usage of the orbitals (from a corresponding HF-SCF calculation) without any modification. These are in the case of RHF/UHF the usual canonical HF orbitals a",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:66813,Modifiability,coupling,coupling,66813,"rnal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR)¶CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR)¶CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR)¶CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orb",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:70819,Modifiability,config,configurational,70819,"etrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR)¶CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR)¶CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR)¶CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR)¶CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin contribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-orbit corrections), SF-DPT6 (scalar-relativistic part of sixth-order direct perturbation theory), SFREE (spin-free treatment), X2C1E (spin-free X2C-1e treatment), or DPT (synonym with DPT2). Type:",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:76694,Modifiability,coupling,coupling,76694,"s often troublesome. Psi4 Interface: Keyword subject to translation from value of DAMPING_PERCENTAGE unless set explicitly. Type: integer; Default: 1000. CFOUR_SCF_EXPORDER (CFOUR)¶CFOUR — Specifies the number of density matrices to be used in the DIIS convergence acceleration procedure. Type: integer; Default: 6. CFOUR_SCF_EXPSTART (CFOUR)¶CFOUR — Specifies the first iteration in which the DIIS convergence acceleration procedure is applied. Type: integer; Default: 8. CFOUR_SCF_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies whether or not the DIIS extrapolation is used to accelerate convergence of the SCF procedure. OFF (=0) means do not use DIIS, ON (=1) means use DIIS. Type: boolean; Default: true. CFOUR_SCF_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of SCF iterations. Psi4 Interface: Keyword subject to translation from value of MAXITER unless set explicitly. Type: integer; Default: 150. CFOUR_SD_FIELD (CFOUR)¶CFOUR — Specifies the strength of a spin-dipole perturbation as required for finite-field calculations of the SD contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the SD strength used by the program will be the value of the keyword \(\times 10^{-6}\). (Default : 0, currently not implemented). Type: integer; Default: 0. CFOUR_SPHERICAL (CFOUR)¶CFOUR — Specifies whether spherical harmonic (5d, 7f, 9g, etc.) or Cartesian (6d, 10f, 15g, etc.) basis functions are to be used. ON (= 1) uses spherical harmonics, OFF (= 0) uses Cartesians. Psi4 Interface: Keyword set according to basis design when BASIS is used instead of CFOUR_BASIS. Keyword subject to translation from value of PUREAM unless set explicitly. Type: boolean; Default: true. CFOUR_SPIN_FLIP (CFOUR)¶CFOUR — Controls whether excitation energy calculations allow for a “spin flip” which changes the \(M_s\) quantum number. Such calculations have some advantages for biradicals and are currently implemented (together with gradients) for CIS and CIS(D) calcul",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:83619,Modifiability,adapt,adapted,83619,"eloper version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR)¶CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR)¶CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR)¶CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTRAN (CFOUR)¶CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR)¶C",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:89484,Modifiability,coupling,coupling,89484," SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC)¶PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT)¶SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. COUPLING (PSIMRCC)¶PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC)¶PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING)¶OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF)¶CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF)¶CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS)¶GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (GLOBALS)¶GLOBALS — Directory to which to write cube files. Default is the input file directory. Type: string; D",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:90590,Modifiability,adapt,adaptive,90590,"es: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC)¶PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING)¶OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF)¶CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF)¶CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS)¶GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (GLOBALS)¶GLOBALS — Directory to which to write cube files. Default is the input file directory. Type: string; Default: No Default. CUBEPROP_ISOCONTOUR_THRESHOLD (GLOBALS)¶GLOBALS — Fraction of density captured by adaptive isocontour values. Type: double; Default: 0.85. CUBEPROP_ORBITALS (GLOBALS)¶GLOBALS — List of orbital indices for which cube files are generated (1-based, \(+\) for alpha, \(-\) for beta). All orbitals computed if empty. Type: array; Default: No Default. CUBEPROP_TASKS (GLOBALS)¶GLOBALS — Properties to compute. Valid tasks include: DENSITY - Da, Db, Dt, Ds; ESP - Dt, ESP; ORBITALS - Psi_a_N, Psi_b_N; BASIS_FUNCTIONS - Phi_N; LOL - LOLa, LOLb; ELF - ELFa, ELFb; FRONTIER_ORBITALS - Psi_a_N_HOMO + Psi_a_N_LUMO; DUAL_DESCRIPTOR - DUAL_N_HOMO-M_LUMO. Type: array; Default: No Default. CUBIC_BASIS_TOLERANCE (FISAPT)¶FISAPT (Expert) — CubicScalarGrid basis cutoff. Type: conv double; Default: 1.0e-12. CUBIC_BASIS_TOLERANCE (GLOBALS)¶GLOBALS (Expert) — CubicScalarGrid basis cutoff. Type: conv double; Default: 1.0e-12. CUBIC_BLOCK_MAX_POINTS (FISAPT)¶FISAPT (Expert) — CubicScalarGrid maximum number of grid points per evaluation block. Type: integer; Default: 1",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:120566,Modifiability,extend,extended,120566,"gment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING)¶OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM)¶CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:120695,Modifiability,extend,extended,120695,"amping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING)¶OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM)¶CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:120820,Modifiability,extend,extended,120820,"(EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING)¶OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM)¶CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. EOM_REFERENCE ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:130109,Modifiability,flexible,flexible,130109," Default. FISAPT_MEM_SAFETY_FACTOR (FISAPT)¶FISAPT (Expert) — Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. FISAPT_PLOT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop scalar data within input file directory. Type: string; Default: plot/. FIXED_BEND (OPTKING)¶OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING)¶OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING)¶OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI)¶DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 0. FOLLOW_ROOT (MCSCF)¶MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC)¶PSIMRCC — Which root of the effective hamiltonian is the target state?. Type: integer; Default: 1. FOLLOW_STEP_INCREMENT (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution. Type: double; Default: 0.2. FOLLOW_STEP_SCALE (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: double; ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:131873,Modifiability,config,configuration,131873,"ALE (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI)¶DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root with the closest overlap. The user specifies arrays containing the absolute alpha string indices (A_i below), absolute beta indices (B_i below), and CI coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], …]. Type: array; Default: No Default. FORCE_RESTART (CCENERGY)¶CCENERGY (Expert) — Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. FORCE_TWOCON (MCSCF)¶MCSCF — Do attempt to force a two configuration solution by starting with CI coefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. FRAC_DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF)¶SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF)¶SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF)¶SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF)¶SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF)¶SCF — The occupations of the orbital indices specified above (\(0.0\le {\rm occ} \le 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING)¶OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary differen",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:140526,Modifiability,coupling,coupling,140526," spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI)¶DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI)¶DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI)¶DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:140683,Modifiability,coupling,coupling,140683,". Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI)¶DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI)¶DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI)¶DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI)¶DETCI (Expert) — size of H",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:142192,Modifiability,coupling,coupling,142192,"o to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI)¶DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING)¶OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING)¶OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING)¶OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI)¶DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matr",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:142362,Modifiability,coupling,coupling,142362,"e H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI)¶DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING)¶OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING)¶OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING)¶OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI)¶DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the eff",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:173329,Modifiability,variab,variable,173329,"OM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC)¶MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC)¶MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC)¶MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC)¶MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC)¶MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI)¶DETCI — Do use the \(M_s = 0\) component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:173378,Modifiability,variab,variable,173378,"ination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC)¶MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC)¶MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC)¶MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC)¶MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC)¶MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI)¶DETCI — Do use the \(M_s = 0\) component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI)¶DETCI — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (DFOCC)¶DFOCC — D",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:184799,Modifiability,variab,variable,184799,"quations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCT)¶DCT (Expert) — The shift applied to the denominator in the orbital update iterations. Type: double; Default: 0.0. ORBITALS_WRITE (SCF)¶SCF — File name (case sensitive) to which to serialize Wavefunction orbital data. Type: string; Default: No Default. ORTH_TYPE (DFOCC)¶DFOCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. ORTH_TYPE (OCC)¶OCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. OS_SCALE (OCC)¶OCC — A custom scaling parameter for opposite-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. OVERLAP_CHECK (CCEOM)¶CCEOM — Report overlaps with old excited-state wave functions, if available, and store current wave functions for later use. Type: boolean; Default: false. P (THERMO)¶THERMO — Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. PAIR_ENERGIES_PRINT (CCENERGY)¶CCENERGY — Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. PARALLEL (SCF)¶SCF (Expert) — Do run in parallel?. Type: boolean; Default: false. PARENT_SYMMETRY (GLOBALS)¶GLOBALS (Expert) — For displacements, symmetry (Schoenflies symbol) of ‘parent’ (undisplaced) reference molecule. Internal use only for finite difference. Type: string; Default: No Default. PCG_BETA_TYPE (DFOCC)¶DFOCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:194248,Modifiability,coupling,coupling,194248,"TATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. PROPERTY (CCRESPONSE)¶CCRESPONSE — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC)¶PSIMRCC — The type of perturbation theory computation to perform. Type: string; Default: SECOND_ORDER. PUREAM (GLOBALS)¶GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCT)¶DCT — Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: f",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:219018,Modifiability,adapt,adapted,219018," SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF)¶SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF)¶SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF)¶SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SPINADAPT_ENERGIES (CCENERGY)¶CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subsp",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:219532,Modifiability,variab,variable,219532," (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SPINADAPT_ENERGIES (CCENERGY)¶CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:228697,Modifiability,config,configurations,228697,"d automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. TURN_ON_ACTV (MCSCF)¶MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF)¶SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UPDATE (DETCI)¶DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC)¶FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC)¶PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC)¶PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI)¶DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM)¶CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM)¶CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR)¶CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. WCOMBINE (SCF)¶SCF — combine omega exchange and Hartree–Fock exchange into one matrix for efficiency? Default is True for MemDFJK (itself the default for SCF_TYPE DF), False otherwise as not yet implemented. Type: boolean; Default: false. WFN (CCDENSITY)¶CCDENSITY (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (CCENERGY)¶CCENERGY (Expert) — Wavefuncti",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:5462,Performance,perform,performing,5462," Default: 2.5. AVG_STATES (DETCI)¶DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI)¶DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2)¶DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS)¶MINTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT)¶SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF)¶SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF)¶SCF — Accelerate convergence by performing a preliminary SCF with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the Defaults small basis set 3-21G, pcseg-0, or def2-SV(P). Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS)¶GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. BENCH (GLOBALS)¶GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI)¶DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BORDER (PE)¶PE — Activate borde",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:7719,Performance,optimiz,optimization,7719," sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER (PE)¶PE — order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_REDIST_POL (PE)¶PE — redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. BORDER_RMIN (PE)¶PE — minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT (PE)¶PE — unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_TYPE (PE)¶PE — border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BRIANQC_ENABLE (GLOBALS)¶GLOBALS — Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC)¶FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC)¶ADC — How to cache quantities within the DPD library. This option is only available for the built-in ADC backend. Type: integer; Default: 2. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities wit",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:8036,Performance,cache,cache,8036,"removed (default). Type: boolean; Default: false. BORDER_RMIN (PE)¶PE — minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT (PE)¶PE — unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_TYPE (PE)¶PE — border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BRIANQC_ENABLE (GLOBALS)¶GLOBALS — Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC)¶FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC)¶ADC — How to cache quantities within the DPD library. This option is only available for the built-in ADC backend. Type: integer; Default: 2. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:8232,Performance,perform,perform,8232,"ion. Type: double; Default: 2.2. BORDER_RMIN_UNIT (PE)¶PE — unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_TYPE (PE)¶PE — border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BRIANQC_ENABLE (GLOBALS)¶GLOBALS — Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC)¶FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC)¶ADC — How to cache quantities within the DPD library. This option is only available for the built-in ADC backend. Type: integer; Default: 2. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all fo",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:8451,Performance,cache,cache,8451,"ng; Possible Values: REMOVE, REDIST; Default: REMOVE. BRIANQC_ENABLE (GLOBALS)¶GLOBALS — Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC)¶FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC)¶ADC — How to cache quantities within the DPD library. This option is only available for the built-in ADC backend. Type: integer; Default: 2. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, inte",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:8513,Performance,cache,cache,8513,"ng; Possible Values: REMOVE, REDIST; Default: REMOVE. BRIANQC_ENABLE (GLOBALS)¶GLOBALS — Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC)¶FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC)¶ADC — How to cache quantities within the DPD library. This option is only available for the built-in ADC backend. Type: integer; Default: 2. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, inte",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:8783,Performance,cache,cache,8783," 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC)¶ADC — How to cache quantities within the DPD library. This option is only available for the built-in ADC backend. Type: integer; Default: 2. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:8994,Performance,cache,cache,8994,"CHELEVEL (ADC)¶ADC — How to cache quantities within the DPD library. This option is only available for the built-in ADC backend. Type: integer; Default: 2. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:9056,Performance,cache,cache,9056,"CHELEVEL (ADC)¶ADC — How to cache quantities within the DPD library. This option is only available for the built-in ADC backend. Type: integer; Default: 2. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:9337,Performance,cache,cache,9337,"hing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:9550,Performance,cache,cache,9550," of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:9612,Performance,cache,cache,9612," of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:9882,Performance,cache,cache,9882,"el for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:10099,Performance,cache,cache,10099,"may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. Th",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:10161,Performance,cache,cache,10161,"may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. Th",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:10442,Performance,cache,cache,10442,"evel for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cach",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:10704,Performance,cache,cache,10704," memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: s",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:10945,Performance,cache,cache,10945,"vel for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) f",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:11007,Performance,cache,cache,11007,"vel for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) f",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:11277,Performance,cache,cache,11277,"emory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:11406,Performance,cache,cache,11406,"\(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:11525,Performance,cache,cache,11525,"ESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING)¶OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default:",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:11656,Performance,cache,cache,11656,"ype: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING)¶OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI)¶DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM)¶CCEOM — Do tu",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:11811,Performance,cache,cached,11811,"CC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING)¶OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI)¶DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM)¶CCEOM — Do turn on root following for CC3. Type: boolean; Default: false. CC_A_RAS3_MAX (DETCI)¶DETCI — maximum number of alpha electrons in RAS III, for CC. Type: int",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:25502,Performance,cache,cache,25502,"degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR)¶CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR)¶CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR)¶CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR)¶CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR)¶CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. CFOUR_CC_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR)¶CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence accelera",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:25695,Performance,perform,performed,25695,"n either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR)¶CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR)¶CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR)¶CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR)¶CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. CFOUR_CC_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR)¶CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapo",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:27382,Performance,perform,performance,27382,"FOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR)¶CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from act",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:27756,Performance,optimiz,optimization,27756," OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR)¶CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:30018,Performance,optimiz,optimizations,30018,"action scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR)¶CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR)¶CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR)¶CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR)¶CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the res",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:30185,Performance,optimiz,optimizations,30185,"eral contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR)¶CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR)¶CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR)¶CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR)¶CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum numbe",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:31550,Performance,perform,performed,31550,"or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR)¶CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR)¶CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually ne",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:32744,Performance,optimiz,optimize,32744,"able, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR)¶CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 I",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:39086,Performance,optimiz,optimization,39086,"keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR)¶CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR)¶CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR)¶CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR)¶CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR)¶CFOUR — Specifies the ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:39214,Performance,optimiz,optimizations,39214,"uld be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR)¶CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR)¶CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR)¶CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR)¶CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR)¶CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:39280,Performance,optimiz,optimizer,39280,"uld be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR)¶CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR)¶CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR)¶CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR)¶CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR)¶CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:39682,Performance,perform,performed,39682," whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR)¶CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR)¶CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR)¶CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR)¶CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword \(\times 10^{-6}\). The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:41811,Performance,perform,performed,41811,"teger; Default: 0. CFOUR_FD_CALCTYPE (CFOUR)¶CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energies (dipole moment derivatives are not evaluated); while MIXED (=2) evaluates 1x1 blocks of symmetry-blocked force constants by second differences pf energies and all other elements by first differences of gradients. the GRADONLY and MIXED approaches may, of course, only be used hwen using computational methods for which analytic gradients are available. Type: string; Possible Values: GRADONLY, ENERONLY, MIXED; Default: GRADONLY. CFOUR_FD_IRREPS (CFOUR)¶CFOUR — Requests that only vibrational frequencies of certain symmetry types are evaluated in a VIBRATION=FINDIF calculation. The numbers of the irreducible representations for which vibrational analysis is to be performed are separated by slashes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR)¶CFOUR — ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:47278,Performance,perform,performs,47278,"ore all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR)¶CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CF",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:47442,Performance,perform,performs,47442," that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR)¶CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in san",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:47619,Performance,perform,performs,47619," to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — S",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:47852,Performance,optimiz,optimization,47852,"ul for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) u",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:47870,Performance,optimiz,optimization,47870," contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_S",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:48012,Performance,optimiz,optimizations,48012," a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The f",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:48078,Performance,optimiz,optimizer,48078," a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The f",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:48378,Performance,optimiz,optimization,48378,"econd-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Mille",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:48424,Performance,optimiz,optimizations,48424,"on as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:48490,Performance,optimiz,optimizer,48490,"on as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:48721,Performance,optimiz,optimizations,48721,"S_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. EN",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:48761,Performance,optimiz,optimizations,48761,"Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as v",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:48827,Performance,optimiz,optimizer,48827,"Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as v",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:49027,Performance,optimiz,optimization,49027,"metry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic o",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:49709,Performance,optimiz,optimization,49709,"y optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR)¶CFOUR — Where the initial ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:49829,Performance,optimiz,optimized,49829,"sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR)¶CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:51537,Performance,perform,performs,51537,". (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR)¶CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR)¶CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR)¶CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:51675,Performance,perform,performs,51675," disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR)¶CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR)¶CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:53480,Performance,perform,performed,53480,"angle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR)¶CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR)¶CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR)¶CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (CFOUR)¶CFOUR — Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below \(10^{-N}\), where \(N\) is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY (CFOUR)¶CFOUR — The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR)¶CFOUR — Determines the algorithm used to solve linear equations ( \(\Lambda\) and derivative \(T\) and \(\Lambda\) ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring m",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:55120,Performance,optimiz,optimizations,55120,"ear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR)¶CFOUR — Determines the algorithm used to solve linear equations ( \(\Lambda\) and derivative \(T\) and \(\Lambda\) ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC (CFOUR)¶CFOUR — This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR)¶CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR)¶CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR)¶CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR)¶CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) –",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:56033,Performance,optimiz,optimization,56033,"e. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR)¶CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR)¶CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR)¶CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR)¶CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifie",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:56718,Performance,optimiz,optimizations,56718,"yword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR)¶CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:56784,Performance,optimiz,optimizer,56784,"yword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR)¶CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:57053,Performance,perform,performs,57053,"ed: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:58022,Performance,optimiz,optimization,58022,"OINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculat",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:58325,Performance,optimiz,optimization,58325,"multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CF",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:58377,Performance,optimiz,optimizations,58377,"sed to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR)¶CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: integer",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:58443,Performance,optimiz,optimizer,58443,"sed to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR)¶CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: integer",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:67679,Performance,perform,performed,67679," the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR)¶CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR)¶CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orbital in a symmetry block (symmetry block HOMO), while electrons are added to the lowest unoccupied orbital within a symmetry block (symmetry block LUMO). The purpose of the QRHF_ORBITAL keyword is to allow additional flexibility in choosing which orbitals will have their occupation numbers altered. The value of this keyword gives the offset with respect to the default orbital for the orbital which will be depopulated (or populated) in QRHF-CC calculations. For calculations involving more than one removal or addition of electrons, values are separated by commas and correspond to the CFOUR_QRHF_GENERAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:69391,Performance,perform,performed,69391,"ERAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR)¶CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR)¶CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR)¶CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR)¶CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:70624,Performance,perform,performed,70624,"lculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR)¶CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR)¶CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR)¶CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR)¶CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR)¶CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin contribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-o",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:72792,Performance,perform,performed,72792,", SF-DPT6, SFREE, X2C1E, DPT; Default: OFF. CFOUR_RELAX_DENS (CFOUR)¶CFOUR — Specifies whether the relaxed density matrix is computed for correlated wave functions. OFF (= 0) The relaxed density will not be computed, ON (= 1) it will be computed. Type: boolean; Default: false. CFOUR_RES_RAMAN (CFOUR)¶CFOUR — This option can be used to convert an analytically calculated gradient vector to a particular normal coordinate representation. A useful application is to calculate the gradient of an electronically excited state in the normal coordinate representation of the ground electronic state, as this provides a first approximation to resonance Raman intensities (hence the name of the keyword). Calculations that use the this option require the externally supplied force constant matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR)¶CFOUR — Offers the possibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR)¶CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to u",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:83056,Performance,optimiz,optimization,83056,"es the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR)¶CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR)¶CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR)¶CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTR",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:83774,Performance,perform,performed,83774,"NGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR)¶CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR)¶CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTRAN (CFOUR)¶CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR)¶CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_XFOR",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:84084,Performance,perform,performed,84084,"ent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR)¶CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTRAN (CFOUR)¶CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR)¶CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR)¶CFOUR — The tolerance for storing transformed integrals. Integrals less than \(10^{-N}\) are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR)¶CFOUR — Specifies the Y-component of an external electric field. The valu",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:88343,Performance,optimiz,optimization,88343," (CCEOM)¶CCEOM — When collapsing Davidson subspace, whether to also include the previous approximate solution (for each root)? This doubles the number of resulting vectors but generally improves convergence. Type: boolean; Default: true. COLLAPSE_WITH_LAST_CC3 (CCEOM)¶CCEOM — Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. COMPLEX_TOLERANCE (CCEOM)¶CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC)¶DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC)¶PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT)¶SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases,",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:88586,Performance,perform,perform,88586,"ST_CC3 (CCEOM)¶CCEOM — Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. COMPLEX_TOLERANCE (CCEOM)¶CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC)¶DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC)¶PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT)¶SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. COUPLING (PSIMRCC)¶PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possibl",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:93758,Performance,perform,performed,93758,"r residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. D_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for density, as measured by the orbital gradient. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF density, defined as the RMS or maximum absolute value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMP_INDUCED (PE)¶PE — Enable Thole damping for induced moments. Type: boolean; Default: false. DAMP_MULTIPOLE (PE)¶PE — Enable Thole damping for multipole fields. Type: boolean; Default: false. DAMPING_CONVERGENCE (SCF)¶SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_FACTOR_INDUCED (PE)¶PE — Thole damping factor for induced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE (PE)¶PE — Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 wil",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:108939,Performance,perform,performed,108939,". DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF)¶SCF (Expert) — The dimension sizes of the distri",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:114727,Performance,perform,perform,114727,"ype: boolean; Default: true. DO_CCD_DISP (SAPT)¶SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC)¶DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC)¶OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Dispersion terms. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean;",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:114858,Performance,perform,perform,114858," boolean; Default: false. DO_DIIS (DFOCC)¶DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC)¶OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Dispersion terms. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:114875,Performance,optimiz,optimizations,114875," boolean; Default: false. DO_DIIS (DFOCC)¶DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC)¶OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Dispersion terms. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:115261,Performance,perform,perform,115261,"nf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA o",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:115391,Performance,perform,perform,115391,"n; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy corre",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:115408,Performance,optimiz,optimizations,115408,"n; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy corre",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:116188,Performance,optimiz,optimization,116188,"tates? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:123430,Performance,perform,perform,123430,"pute, starting with the HOMO. Type: integer; Default: 3. EP2_ORBITALS (DFEP2)¶DFEP2 — Explicitly pick orbitals to use in the EP2 method, overrides EP2_NUM_IP and EP2_NUM_EA options. Input array should be [[orb1, orb2], [], …] for each irrep. Type: array; Default: No Default. EP_EA_POLES (OCC)¶OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC)¶OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC)¶OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI)¶DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI)¶DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT)¶SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM)¶CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF)¶CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF)¶SCF — An ExternalPotential (built by Python or nullptr/None). Type: boolean; Default: false. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS)¶GLOBALS (Expert) — Assume external fields are arranged so that they have ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:123536,Performance,perform,performs,123536,"n the EP2 method, overrides EP2_NUM_IP and EP2_NUM_EA options. Input array should be [[orb1, orb2], [], …] for each irrep. Type: array; Default: No Default. EP_EA_POLES (OCC)¶OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC)¶OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC)¶OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI)¶DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI)¶DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT)¶SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM)¶CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF)¶CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF)¶SCF — An ExternalPotential (built by Python or nullptr/None). Type: boolean; Default: false. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS)¶GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Defa",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:123614,Performance,perform,performs,123614,"hould be [[orb1, orb2], [], …] for each irrep. Type: array; Default: No Default. EP_EA_POLES (OCC)¶OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC)¶OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC)¶OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI)¶DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI)¶DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT)¶SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM)¶CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF)¶CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF)¶SCF — An ExternalPotential (built by Python or nullptr/None). Type: boolean; Default: false. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS)¶GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. FAIL_ON_MAXITER (SCF)¶SCF — Fail if we reach maxiter without conv",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:124734,Performance,optimiz,optimization,124734,"TATION_RANGE (CCEOM)¶CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF)¶CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF)¶SCF — An ExternalPotential (built by Python or nullptr/None). Type: boolean; Default: false. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS)¶GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. FAIL_ON_MAXITER (SCF)¶SCF — Fail if we reach maxiter without converging?. Type: boolean; Default: true. FAVG (MCSCF)¶MCSCF — Do use the average Fock matrix during the SCF optimization?. Type: boolean; Default: false. FAVG_CCSD_T (PSIMRCC)¶PSIMRCC — Do use the averaged Fock matrix over all references in (T) computations?. Type: boolean; Default: false. FAVG_START (MCSCF)¶MCSCF — Iteration at which to begin using the averaged Fock matrix. Type: integer; Default: 5. FCI (DETCI)¶DETCI — Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FCI_STRINGS (DETCI)¶DETCI (Expert) — Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. FD_PROJECT (FINDIF)¶FINDIF — Do discount rotational degrees of freedom in a finite difference frequency calculation. Turned off at non-stationary geometries and in the presence of external perturbations. Type: boolean; Default: true. FILTER_GUESS (DETCI)¶DETCI (Expert) — Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determina",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:127388,Performance,optimiz,optimization,127388,"(DETCI)¶DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_SIGN (DETCI)¶DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI)¶DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta string numbers of the target determinant. This could be useful for trying to exclude states that have a nonzero CI coefficient for the given determinant. However, this option was experimental and may not be effective. Type: array; Default: No Default. FINAL_GEOM_WRITE (OPTKING)¶OPTKING — Do save and print the geometry from the last projected step at the end of a geometry optimization? Otherwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. FISAPT_CHARGE_COMPLETENESS (FISAPT)¶FISAPT — Amount of fragment charge completeness to distinguish link bonds. Type: double; Default: 0.8. FISAPT_DO_FSAPT (FISAPT)¶FISAPT — Do an F-SAPT analysis?. Type: boolean; Default: true. FISAPT_DO_FSAPT_DISP (FISAPT)¶FISAPT — Do F-SAPT Dispersion?. Type: boolean; Default: true. FISAPT_DO_PLOT (FISAPT)¶FISAPT — Plot a scalar-field analysis. Type: boolean; Default: false. FISAPT_FSAPT_EXCH_SCALE (FISAPT)¶FISAPT — Do F-SAPT exchange scaling? (ratio of S^infty to S^2). Type: boolean; Default: true. FISAPT_FSAPT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop F-SAPT data within input file directory. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT)¶FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT)¶FISAPT ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:129531,Performance,optimiz,optimizations,129531,"-scaling F-SAPT data within input file directory. Type: string; Default: s-fsapt/. FISAPT_LINK_ASSIGNMENT (FISAPT)¶FISAPT — Where do sigma links go (to C or to AB)?. Type: string; Possible Values: C, AB; Default: C. FISAPT_LINK_SELECTION (FISAPT)¶FISAPT — Specification algorithm for link bonds in ISAPT. Type: string; Possible Values: AUTOMATIC, MANUAL; Default: AUTOMATIC. FISAPT_MANUAL_LINKS (FISAPT)¶FISAPT — Manual link bond specification [[Atom1, Atom2], …]. Type: array; Default: No Default. FISAPT_MEM_SAFETY_FACTOR (FISAPT)¶FISAPT (Expert) — Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. FISAPT_PLOT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop scalar data within input file directory. Type: string; Default: plot/. FIXED_BEND (OPTKING)¶OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING)¶OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING)¶OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI)¶DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 0. FOLLOW_ROOT (MCSCF)¶MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC)¶PSIMRC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:130361,Performance,optimiz,optimization,130361,"NG)¶OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING)¶OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING)¶OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI)¶DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 0. FOLLOW_ROOT (MCSCF)¶MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC)¶PSIMRCC — Which root of the effective hamiltonian is the target state?. Type: integer; Default: 1. FOLLOW_STEP_INCREMENT (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution. Type: double; Default: 0.2. FOLLOW_STEP_SCALE (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI)¶DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root with ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:135291,Performance,optimiz,optimized,135291,"e in evaluation of SAPT \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPTKING)¶OPTKING — Do freeze all interfragment modes?. Type: boolean; Default: false. FREEZE_INTRAFRAG (OPTKING)¶OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING)¶OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING)¶OPTKING — Specify atom and X, XY, XYZ, … to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING)¶OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM)¶CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING)¶OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:135564,Performance,optimiz,optimized,135564,"ault: false. FREEZE_INTRAFRAG (OPTKING)¶OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING)¶OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING)¶OPTKING — Specify atom and X, XY, XYZ, … to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING)¶OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM)¶CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING)¶OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:135760,Performance,optimiz,optimization,135760,"No Default. FROZEN_CARTESIAN (OPTKING)¶OPTKING — Specify atom and X, XY, XYZ, … to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING)¶OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM)¶CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING)¶OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (ADC)¶ADC — Specifies the choice of representation of the electric dipole operator. * Acceptable values are LENGTH (default) and VELOCITY. Type: string; Possible Values: LENGTH, VELOCITY; Default: LENGTH. GAUGE ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:136112,Performance,optimiz,optimization,136112,"No Default. FROZEN_DOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING)¶OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM)¶CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING)¶OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (ADC)¶ADC — Specifies the choice of representation of the electric dipole operator. * Acceptable values are LENGTH (default) and VELOCITY. Type: string; Possible Values: LENGTH, VELOCITY; Default: LENGTH. GAUGE (CCDENSITY)¶CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE)¶CCRESPONSE — Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and LENGTH gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are LENGTH for the usua",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:138728,Performance,optimiz,optimization,138728,"a file should be provided. Type: integer; Default: 2. GDMA_MULTIPOLE_UNITS (GDMA)¶GDMA — Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_ORIGIN (GDMA)¶GDMA — The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point. Type: array; Default: No Default. GDMA_RADIUS (GDMA)¶GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA)¶GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING)¶OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF)¶FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF)¶SCF — The type of guess orbitals. Defaults to READ for geometry optimizations after the first step, to CORE for single atoms, and to SAD otherwise. The HUCKEL guess employs on-the-fly calculations like SAD, as described in doi:10.1021/acs.jctc.8b01089 which also describes the SAP guess. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, HUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:139126,Performance,optimiz,optimizations,139126,"_RADIUS (GDMA)¶GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA)¶GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING)¶OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF)¶FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF)¶SCF — The type of guess orbitals. Defaults to READ for geometry optimizations after the first step, to CORE for single atoms, and to SAD otherwise. The HUCKEL guess employs on-the-fly calculations like SAD, as described in doi:10.1021/acs.jctc.8b01089 which also describes the SAP guess. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, HUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) —",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:139831,Performance,optimiz,optimization,139831,"50. GRADIENT_WRITE (FINDIF)¶FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF)¶SCF — The type of guess orbitals. Defaults to READ for geometry optimizations after the first step, to CORE for single atoms, and to SAD otherwise. The HUCKEL guess employs on-the-fly calculations like SAD, as described in doi:10.1021/acs.jctc.8b01089 which also describes the SAP guess. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, HUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI)¶DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI)¶DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:140003,Performance,optimiz,optimized,140003,"y the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF)¶SCF — The type of guess orbitals. Defaults to READ for geometry optimizations after the first step, to CORE for single atoms, and to SAD otherwise. The HUCKEL guess employs on-the-fly calculations like SAD, as described in doi:10.1021/acs.jctc.8b01089 which also describes the SAP guess. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, HUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI)¶DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI)¶DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI)¶DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:144931,Performance,perform,perform,144931,"f HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING)¶OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF)¶FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI)¶DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. INDUCED_CONVERGENCE (PE)¶PE — Threshold for induced moments convergence. Type: conv double; Default: 1e-8. INTCOS_GENERATE_EXIT (OPTKING)¶OPTKING — Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. INTEGRAL_CUTOFF (DFOCC)¶DFOCC — Cutoff value for DF integrals. Type: integer; Default: 9. INTEGRAL_PACKAGE (GLOBALS)¶GLOBALS — Integral package to use. If compiled with ERD or Simint support, change this option to use them; LibInt is used otherwise. Type: string; Possible Values: ERD, LIBINT1, SIMINT, LIBINT2; Default: LIBINT2. INTERFRAG_DIST_INV (OPTKING)¶OPTKING — Do use \(\frac{1}{R_{AB}}\) for the stretching coordinate between fragments? Otherwise, use \(R_{AB}\",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:149510,Performance,perform,performed,149510,"tive, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. INTS_TOLERANCE (SCF)¶SCF — Schwarz screening threshold. Mininum absolute value below which TEI are neglected. Type: conv double; Default: 1e-12. IP_POLES (OCC)¶OCC — Do compute OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. IRC_DIRECTION (OPTKING)¶OPTKING — IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORWARD. IRC_STEP_SIZE (OPTKING)¶OPTKING — IRC step size in bohr(amu)\(^{1/2}\). Type: double; Default: 0.2. IRC_STOP (OPTKING)¶OPTKING — Decide when to stop IRC calculations. Type: string; Possible Values: ASK, STOP, GO; Default: STOP. ISOTROPIC_POL (PE)¶PE — Make polarizabilities isotropic. Type: boolean; Default: false. ISTOP (DETCI)¶DETCI — Do stop DETCI after string information is formed and before integrals are read?. Type: boolean; Default: false. JOBTYPE (CCLAMBDA)¶CCLAMBDA (Expert) — Type of job being performed. Type: string; Default: No Default. KEEP_INTCOS (OPTKING)¶OPTKING — Keep internal coordinate definition file. Type: boolean; Default: false. KIND (ADC)¶ADC — The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. LEVEL_SHIFT (DFOCC)¶DFOCC — Level shift to aid convergence. Type: double; Default: 0.02. LEVEL_SHIFT (MCSCF)¶MCSCF — Level shift to aid convergence. Type: double; Default: 0.0. LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 0.02. LEVEL_SHIFT (SCF)¶SCF — Do use a level shift?. Type: double; Default: 0.0. LEVEL_SHIFT_CUTOFF (SCF)¶SCF — DIIS error at which to stop applying the level shift. Type: double; Default: 1e-2. LINEAR (CCRESPONSE)¶CCRESPONSE — Do Bartlett size-extensive linear model?. Type: boolean; Default: false. LINEQ_SOLVER (DFOCC)¶DFOCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:158515,Performance,perform,performed,158515,"uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA)¶CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE)¶CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC)¶PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI)¶DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI)¶DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2)¶DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS)¶GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT)¶SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING)",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:158917,Performance,optimiz,optimization,158917,"SPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC)¶PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI)¶DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI)¶DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2)¶DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS)¶GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT)¶SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. MAX_MEM_BUF (SCF)¶SCF — Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MAX_MOGRAD_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a v",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:167050,Performance,optimiz,optimization,167050,"Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC)¶DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 6. MO_MAXITER (DFOCC)¶DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC)¶OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF)¶MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC)¶OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_STEP_MAX (DFOCC)¶DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC)¶OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC)¶OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF)¶CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC)¶OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS)¶GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DFOCC)¶DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Defa",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:167155,Performance,optimiz,optimization,167155," computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC)¶DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 6. MO_MAXITER (DFOCC)¶DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC)¶OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF)¶MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC)¶OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_STEP_MAX (DFOCC)¶DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC)¶OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC)¶OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF)¶CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC)¶OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS)¶GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DFOCC)¶DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (SCF)¶SCF — Do write a MOLDEN output file? If so, the filename will end in .molden",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:169103,Performance,perform,perform,169103,"ile? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOM_OCC (SCF)¶SCF — The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOM_START (SCF)¶SCF — The iteration to start MOM on (or 0 for no MOM). Type: integer; Default: 0. MOM_VIR (SCF)¶SCF — The absolute indices of orbitals to excite to in MOM (+/- for alpha/beta). Type: array; Default: No Default. MP2_AMP_TYPE (DFOCC)¶DFOCC — The algorithm that used to handle mp2 amplitudes. The DIRECT option means compute amplitudes on the fly * whenever they are necessary. Type: string; Possible Values: DIRECT, CONV; Default: DIRECT. MP2_AMPS_PRINT (CCENERGY)¶CCENERGY — Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. MP2_CCSD_METHOD (PSIMRCC)¶PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC)¶PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY)¶CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2)¶DFMP2 — OS Scale. Type: double; Default: 6.0. MP2_OS_SCALE (DFOCC)¶DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SCALE_OS (FNOCC)¶FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. MP2_SOS_SCALE (DFOCC)¶DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:170087,Performance,optimiz,optimized-,170087,"_CCSD_METHOD (PSIMRCC)¶PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC)¶PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY)¶CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2)¶DFMP2 — OS Scale. Type: double; Default: 6.0. MP2_OS_SCALE (DFOCC)¶DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SCALE_OS (FNOCC)¶FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. MP2_SOS_SCALE (DFOCC)¶DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY)¶CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (DFMP2)¶DFMP2 — SS Scale. Type: double; Default: 1.0. MP2_SS_SCALE (DFOCC)¶DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:170938,Performance,optimiz,optimized,170938,"LE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY)¶CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (DFMP2)¶DFMP2 — SS Scale. Type: double; Default: 1.0. MP2_SS_SCALE (DFOCC)¶DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:172324,Performance,perform,performed,172324,"d HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC)¶MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC)¶MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC)¶MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC)¶MRCC (Expert) —",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:179590,Performance,perform,perform,179590,"Type: boolean; Default: false. OCC_ORBS_PRINT (OCC)¶OCC — Do print OCC orbital energies?. Type: boolean; Default: false. OCC_PERCENTAGE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE. Type: double; Default: 99.0. OCC_TOLERANCE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. OCC_TOLERANCE (SAPT)¶SAPT — Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. ODC_GUESS (DCT)¶DCT — Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OEPROP (DFOCC)¶DFOCC — Do compute one electron properties?. Type: boolean; Default: false. OEPROP (OCC)¶OCC — Do compute one electron properties?. Type: boolean; Default: false. OFFDIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the off-diagonal corrections in (T) computations?. Type: boolean; Default: true. OMEGA (CCRESPONSE)¶CCRESPONSE — Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. OMEGA_ERF (MINTS)¶MINTS — Omega scaling for Erf and Erfc. Type: double; Default: 0.20. ONEPDM (CCDENSITY)¶CCDENSITY — Do compute one-particle density matrix?. ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:181906,Performance,optimiz,optimization,181906,"RID_DUMP (CCDENSITY)¶CCDENSITY — Write one-particle density matrix on a grid to file opdm.dx. Type: boolean; Default: false. ONEPDM_GRID_STEPSIZE (CCDENSITY)¶CCDENSITY — Step size (Angstrom) for one-particle density matrix values on a grid. Type: double; Default: 0.1. ONEPOT_GRID_READ (SCF)¶SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC)¶DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DCT)¶DCT — Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possi",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:182316,Performance,optimiz,optimization,182316,"ing factor used in MSD. Type: double; Default: 0.01. OPDM (DCT)¶DCT — Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:182500,Performance,optimiz,optimization,182500,"ons. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG o",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:182838,Performance,perform,performed,182838,"?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC)¶OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:183124,Performance,optimiz,optimize,183124,"ses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC)¶OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:183201,Performance,optimiz,optimize,183201,"DUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC)¶OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCT)¶DCT (Exper",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:193924,Performance,perform,perform,193924,"perties to compute. Type: array; Default: No Default. PROPERTIES_ORIGIN (GLOBALS)¶GLOBALS — Either a set of 3 coordinates or a string describing the origin about which one-electron properties are computed. Type: array; Default: No Default. PROPERTY (CCENERGY)¶CCENERGY — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. PROPERTY (CCRESPONSE)¶CCRESPONSE — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC)¶PSIMRCC — The type of perturbation theory computation to perform. Type: string; Default: SECOND_ORDER. PUREAM (GLOBALS)¶GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCT)¶DCT — Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulan",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:195135,Performance,perform,perform,195135,"tes into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCT)¶DCT — Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP)¶EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI)¶DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in th",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:195215,Performance,perform,perform,195215,"ntrols whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP)¶EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI)¶DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:200701,Performance,perform,performing,200701," TWOCON, MCSCF, GENERAL; Default: RHF. REFERENCE (SCF)¶SCF — Reference wavefunction type. Cfour Interface: Keyword translates into CFOUR_REFERENCE. Type: string; Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. REFERENCE_SYM (DETCI)¶DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC)¶DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC)¶DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS)¶GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCT)¶DCT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAXED (OCC)¶OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY)¶CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:201634,Performance,optimiz,optimizations,201634,"S (DCT)¶DCT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAXED (OCC)¶OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY)¶CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE)¶CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI)¶DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM)¶CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted doubly-occupied orbita",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:202659,Performance,optimiz,optimized,202659,"old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE)¶CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI)¶DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM)¶CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING)¶OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING)¶OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING)¶OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM)¶CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:202876,Performance,optimiz,optimized,202876,"ing that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE)¶CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI)¶DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM)¶CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING)¶OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING)¶OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING)¶OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM)¶CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_MOGRAD_CONVERGENCE (DF",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:214640,Performance,optimiz,optimized,214640,"SCREENING (SAPT)¶SAPT — Do use Combined Schwarz Approximation Maximum (CSAM) screening on two-electron integrals. This is a slightly tighter bound than that of default Schwarz screening. Type: string; Possible Values: SCHWARZ, CSAM; Default: CSAM. SCS_CCSD (CCENERGY)¶CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CCSD (FNOCC)¶FNOCC — Do SCS-CCSD?. Type: boolean; Default: false. SCS_CEPA (FNOCC)¶FNOCC — Do SCS-CEPA? Note that the scaling factors will be identical to those for SCS-CCSD. Type: boolean; Default: false. SCS_MP2 (CCENERGY)¶CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_MP2 (FNOCC)¶FNOCC — Do SCS-MP2?. Type: boolean; Default: false. SCS_TYPE (DFOCC)¶DFOCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCS_TYPE (OCC)¶OCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCSN_MP2 (CCENERGY)¶CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SEKINO (CCLAMBDA)¶CCLAMBDA — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEKINO (CCRESPONSE)¶CCRESPONSE — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEM_MAXITER (ADC)¶ADC — Maximum iteration number in simultaneous expansion method. This option is only available for the built-in ADC backend. Type: integer; Default: 30. SEMICANONICAL (CCENERGY)¶CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCEOM)¶CCEOM — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCTRANSORT)¶CCTRANSORT — Force conversion of ROHF MOs to semicanonical MOs to run UHF-based energies. Type: boolean; Default: false. SEMICANONICAL (CCTRIPLES)¶CCTRIPLES — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SF_RESTRICT (DETCI)¶DETCI (Expert) — Do eliminate determinants not valid for s",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:218374,Performance,perform,perform,218374,"lt: JACOBI. SOLVER_PRECONDITION_MAXITER (CPHF)¶CPHF — Solver precondition max steps. Type: integer; Default: 1. SOLVER_PRECONDITION_STEPS (CPHF)¶CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF)¶CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF)¶CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC)¶DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC)¶OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF)¶SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF)¶SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF)¶SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SPINADAPT_ENERGIES (CCENERGY)¶CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:218487,Performance,perform,perform,218487,"OLVER_PRECONDITION_STEPS (CPHF)¶CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF)¶CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF)¶CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC)¶DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC)¶OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF)¶SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF)¶SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF)¶SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SPINADAPT_ENERGIES (CCENERGY)¶CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custo",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:220127,Performance,perform,perform,220127,"for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCT)¶DCT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the sub",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:220202,Performance,perform,performed,220202," CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCT)¶DCT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if thi",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:220320,Performance,perform,perform,220320," conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCT)¶DCT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCT)¶DCT (Expert) — The number of Hessian eigenvalues computed d",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:221648,Performance,optimiz,optimization,221648,"hich is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCT)¶DCT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCT)¶DCT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING)¶OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SUMMATION_FIELDS (PE)¶PE — Summation scheme for field computations, can be direct or fmm. Type: string; Possible Values: DIRECT, FMM; Default: DIRECT. SYMM_TOL (OPTKING)¶OPTKING — Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. SYMMETRIZE (OCC)¶OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO)¶THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY)¶CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY)¶CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM)¶CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR)¶CCH",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:3864,Safety,avoid,avoid,3864,"isk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA)¶CCLAMBDA — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT)¶CCTRANSORT — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCT)¶DCT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\(\langle VV|| VV \rangle\)) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AUXILIARY_BOND_FACTOR (OPTKING)¶OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI)¶DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI)¶DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:27822,Safety,safe,safe,27822," OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR)¶CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:87721,Safety,hazard,hazardous,87721,". Type: string; Possible Values: CONV; Default: CONV. CIBLKS_PRINT (DETCI)¶DETCI — Do print a summary of the CI blocks?. Type: boolean; Default: false. CIS_AMPLITUDE_CUTOFF (CPHF)¶CPHF — Minimum singles amplitude to print in CIS analysis. Type: double; Default: 0.15. COLLAPSE_SIZE (DETCI)¶DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM)¶CCEOM — When collapsing Davidson subspace, whether to also include the previous approximate solution (for each root)? This doubles the number of resulting vectors but generally improves convergence. Type: boolean; Default: true. COLLAPSE_WITH_LAST_CC3 (CCEOM)¶CCEOM — Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. COMPLEX_TOLERANCE (CCEOM)¶CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC)¶DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the targ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:89976,Safety,safe,safety,89976," type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT)¶SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. COUPLING (PSIMRCC)¶PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC)¶PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING)¶OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF)¶CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF)¶CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS)¶GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (GLOBALS)¶GLOBALS — Directory to which to write cube files. Default is the input file directory. Type: string; Default: No Default. CUBEPROP_ISOCONTOUR_THRESHOLD (GLOBALS)¶GLOBALS — Fraction of density captured by adaptive isocontour values. Type: double; Default: 0.85. CUBEPROP_ORBITALS (GLOBALS)¶GLOBALS — List of orbital indices for which cube files are generated (1-based, \(+\) for alpha, \(-\) for beta). All orbitals computed if empty. Type: array; Default: No Default. CUBEPROP_TASKS (GLOBALS)¶GLOBALS — Properties to compute. Valid tasks include: DENSITY - Da, Db, Dt, Ds; ESP - Dt, E",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:111021,Safety,avoid,avoid,111021,"ault: 2. DMRG_CASPT2_CALC (DMRG)¶DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG)¶DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG)¶DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG)¶DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG)¶DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG)¶DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG)¶DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG)¶DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT (DMRG)¶DMRG — Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG)¶DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG)¶DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG)¶DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG)¶DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (DMRG)",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:129141,Safety,safe,safety,129141,"ATH (FISAPT)¶FISAPT — Filepath to drop F-SAPT data within input file directory. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT)¶FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT)¶FISAPT — Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction). Type: boolean; Default: true. FISAPT_FSSAPT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop sSAPT0 exchange-scaling F-SAPT data within input file directory. Type: string; Default: s-fsapt/. FISAPT_LINK_ASSIGNMENT (FISAPT)¶FISAPT — Where do sigma links go (to C or to AB)?. Type: string; Possible Values: C, AB; Default: C. FISAPT_LINK_SELECTION (FISAPT)¶FISAPT — Specification algorithm for link bonds in ISAPT. Type: string; Possible Values: AUTOMATIC, MANUAL; Default: AUTOMATIC. FISAPT_MANUAL_LINKS (FISAPT)¶FISAPT — Manual link bond specification [[Atom1, Atom2], …]. Type: array; Default: No Default. FISAPT_MEM_SAFETY_FACTOR (FISAPT)¶FISAPT (Expert) — Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. FISAPT_PLOT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop scalar data within input file directory. Type: string; Default: plot/. FIXED_BEND (OPTKING)¶OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING)¶OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING)¶OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence cr",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:132953,Safety,redund,redundant,132953,"coefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. FRAC_DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF)¶SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF)¶SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF)¶SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF)¶SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF)¶SCF — The occupations of the orbital indices specified above (\(0.0\le {\rm occ} \le 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING)¶OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FRAG_REF_ATOMS (OPTKING)¶OPTKING — Which atoms define the reference points for interfragment coordinates?. Type: array; Default: No Default. FREEZE_CORE (GLOBALS)¶GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total numbe",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:182130,Safety,redund,redundant,182130,"Type: double; Default: 0.1. ONEPOT_GRID_READ (SCF)¶SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC)¶DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DCT)¶DCT — Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orb",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:207385,Safety,redund,redundant,207385,")¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF)¶SCF (Expert) — SAD guess density decomposition threshold. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF density in the SAD guess, analogous to D_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF)¶SCF — Convergence crit",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:212436,Safety,safe,safety,212436,"p module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; Default: false. SAVE_JK (SCF)¶SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF)¶SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR (SCF)¶SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_PROPERTIES (SCF)¶SCF — SCF Properties to calculate after an energy evaluation. Note, this keyword is not used for property evaluations. Type: array; Default: No Default. SCF_TYPE (CPHF)¶CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCF_TYPE (GLOBALS)¶GLOBALS — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK; Default: PK. SCHMIDT",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:212772,Safety,safe,safety,212772," Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; Default: false. SAVE_JK (SCF)¶SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF)¶SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR (SCF)¶SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_PROPERTIES (SCF)¶SCF — SCF Properties to calculate after an energy evaluation. Note, this keyword is not used for property evaluations. Type: array; Default: No Default. SCF_TYPE (CPHF)¶CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCF_TYPE (GLOBALS)¶GLOBALS — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK; Default: PK. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM)¶CCEOM — Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCREENING (SAPT)¶SAPT — Do use Combined Schwarz Approximation Maximum (CSAM) screening on two-electron integrals. This is a slightly tighter b",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:44035,Security,access,access,44035,"tes, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR)¶CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR)¶CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR)¶CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR)¶CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are split, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR)¶CFOUR — Specifies the field strength for a perturbation (defined within a %perturbation section). The value must be given as an integer, and the field strength used by the program will be then the value of the keyword \(\times 10^{-6}\). Type: integer; Default: 0. CFOUR_FOCK (CFOUR)¶CFOUR — This option is used to control the algorithm used for construction of the Fock matrix in SCF calculations. PK (=0) uses the PK-supermatrix approach while ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:52668,Security,access,access,52668,"as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR)¶CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR)¶CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Defa",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:6053,Testability,benchmark,benchmarking,6053,"INTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT)¶SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF)¶SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF)¶SCF — Accelerate convergence by performing a preliminary SCF with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the Defaults small basis set 3-21G, pcseg-0, or def2-SV(P). Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS)¶GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. BENCH (GLOBALS)¶GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI)¶DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BORDER (PE)¶PE — Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_N_REDIST (PE)¶PE — number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER (PE)¶PE — order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_REDIST_POL (PE)¶PE — redistribute polarizabilities? If false, polarizabilities are removed ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:54549,Testability,test,tested,54549,"r higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (CFOUR)¶CFOUR — Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below \(10^{-N}\), where \(N\) is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY (CFOUR)¶CFOUR — The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR)¶CFOUR — Determines the algorithm used to solve linear equations ( \(\Lambda\) and derivative \(T\) and \(\Lambda\) ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC (CFOUR)¶CFOUR — This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR)¶CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR)¶CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: I",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:60460,Testability,log,logical,60460,"l be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR)¶CFOUR — Specifies the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the \(\alpha\) and \(\beta\) sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the \(^2A_1\) water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that v",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:64552,Testability,test,testing,64552,"ing. Default: STANDARD except for ROHF-CCSD(T) and ROHF-MP4 calculations for which SEMICANONICAL is the default. Type: string; Possible Values: STANDARD, SEMICANONICAL; Default: STANDARD. CFOUR_PERT_ORB (CFOUR)¶CFOUR — Specifies the type of perturbed orbitals used in energy derivative calculations. STANDARD means that the gradient formulation assumes that the perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal. CANONICAL means that the perturbed orbitals are assumed to be canonical. This keyword is set automatically to CANONICAL in derivative calculations with methods which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T] and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL requests a canonical perturbed-orbital treatment only for the occupied-occupied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR)¶CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR)¶CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, whic",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:103818,Testability,log,logarithmic,103818,"SCF)¶SCF — The gradient regularized asymptotic correction beta value. Type: double; Default: 40.0. DFT_GRAC_C_FUNC (SCF)¶SCF (Expert) — The gradient regularized asymptotic correction functional corr form. Type: string; Default: XC_LDA_C_VWN. DFT_GRAC_SHIFT (SCF)¶SCF — The gradient regularized asymptotic correction shift value. Type: double; Default: 0.0. DFT_GRAC_X_FUNC (SCF)¶SCF (Expert) — The gradient regularized asymptotic correction functional exch form. Type: string; Default: XC_GGA_X_LB. DFT_GRID_NAME (SCF)¶SCF (Expert) — The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_NUCLEAR_SCHEME (SCF)¶SCF — Nuclear Scheme. Type: string; Possible Values: TREUTLER, BECKE, NAIVE, STRATMANN, SBECKE; Default: TREUTLER. DFT_OMEGA (SCF)¶SCF — The DFT Range-separation parameter. Type: double; Default: 0.0. DFT_OMEGA_C (SCF)¶SCF — The DFT Correlation Range-separation parameter. Type: double; Default: 0.0. DFT_PRUNING_ALPHA (SCF)¶SCF (Expert) — Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME (SCF)¶SCF — Select approach for pruning. Options ROBUST and TREUTLER prune based on regions (proximity to nucleus) while FLAT P_GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER prune based on decaying functions (experts only!). The recommended scheme is ROBUST. Type: string; Default: NONE. DFT_RADIAL_POINTS (SCF)¶SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Def",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:167385,Testability,test,test,167385," used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 6. MO_MAXITER (DFOCC)¶DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC)¶OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF)¶MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC)¶OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_STEP_MAX (DFOCC)¶DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC)¶OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC)¶OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF)¶CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC)¶OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS)¶GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DFOCC)¶DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (SCF)¶SCF — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOM_OCC (SCF)¶SCF — The absolute indices of orbitals to exci",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:201115,Testability,test,tested,201115,"I vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC)¶DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC)¶DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS)¶GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCT)¶DCT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAXED (OCC)¶OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY)¶CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:222009,Testability,test,testing,222009," in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCT)¶DCT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCT)¶DCT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING)¶OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SUMMATION_FIELDS (PE)¶PE — Summation scheme for field computations, can be direct or fmm. Type: string; Possible Values: DIRECT, FMM; Default: DIRECT. SYMM_TOL (OPTKING)¶OPTKING — Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. SYMMETRIZE (OCC)¶OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO)¶THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY)¶CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY)¶CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM)¶CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR)¶CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDM (DETCI)¶DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:224979,Testability,test,test,224979,"g irreps when symmetry is used. Type: array; Default: No Default. TDSCF_TDA (SCF)¶SCF — Run with Tamm-Dancoff approximation (TDA), uses random-phase approximation (RPA) when false. Type: boolean; Default: false. TDSCF_TDM_PRINT (SCF)¶SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Def",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:225067,Testability,test,test,225067,"Run with Tamm-Dancoff approximation (TDA), uses random-phase approximation (RPA) when false. Type: boolean; Default: false. TDSCF_TDM_PRINT (SCF)¶SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC)¶PSIMRCC (Expert) — Do use Tikhonow regularization ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:228346,Testability,test,testing,228346,"ce for iterative triples excitations?. Type: boolean; Default: false. TRIPLES_IABC_TYPE (DFOCC)¶DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC)¶FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. TURN_ON_ACTV (MCSCF)¶MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF)¶SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UPDATE (DETCI)¶DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC)¶FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC)¶PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC)¶PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI)¶DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM)¶CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM)¶CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR)¶CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: fal",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:19642,Usability,simpl,simply,19642,"ly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR)¶CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR)¶CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in “parallel” (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. CFOUR_ANH_DERIVATIVES (CFOUR)¶CFOUR — Specifies whether the anharmonic force field is calculated using analytic gradients (=FIRST) or analytic Hessians (=SECOND). Type: string; Possible Values: FIRST, SECOND; Default: SECOND. CFOUR_ANH_STEPSIZE (CFOUR)¶CFOUR — Controls the stepsize used in anharmonic force field calculations. The value is specified in reduced normal coordinates, which are dimensionless. The actual stepsize used in the calculation is \(\times 10",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:37622,Usability,clear,clearly,37622,"eyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF. Type: string; Possible Values: OFF, EXPECTATION, UNRELAXED, RESPONSE; Default: No Default. CFOUR_ESTATE_SYM (CFOUR)¶CFOUR — Specifies the number of excited states which are to be determined in each irreducible representation of the computational subgroup. The program attempts to find all of the lowest roots, but this is not guaranteed because the eigenvalue problem is not solved by direct matrix diagonalization, but rather by an iterative (modified Davidson) algorithm. For excited state gradient calculations, only one root (clearly) is used. In such a case, one and only one non-zero entry in the string can be used, and this value is usually set to one (i.e. 0/1/0/0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:69608,Usability,simpl,simply,69608,"tual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR)¶CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR)¶CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR)¶CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR)¶CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR)¶CFOUR — Specifies the type of SCF ca",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:8097,Availability,avail,available,8097,"¶PE — minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT (PE)¶PE — unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_TYPE (PE)¶PE — border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BRIANQC_ENABLE (GLOBALS)¶GLOBALS — Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC)¶FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC)¶ADC — How to cache quantities within the DPD library. This option is only available for the built-in ADC backend. Type: integer; Default: 2. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a valu",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:13084,Availability,error,error,13084,"onicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING)¶OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI)¶DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM)¶CCEOM — Do turn on root following for CC3. Type: boolean; Default: false. CC_A_RAS3_MAX (DETCI)¶DETCI — maximum number of alpha electrons in RAS III, for CC. Type: integer; Default: -1. CC_B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III, for CC. Type: integer; Default: -1. CC_DIIS_MAX_VECS (DFOCC)¶DFOCC — Maximum number of vectors used in amplitude DIIS. Type: integer; Default: 6. CC_DIIS_MAX_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 6. CC_DIIS_MIN_VECS (DFOCC)¶DFOCC — Minimum number of vectors used in amplitude DIIS. Type: integer; Default: 2. CC_DIIS_MIN_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 2. CC_EX_LEVEL (DETCI)¶DETCI — The CC excitation level. Type: integer; Default: 2. CC_FIX_EXTERNAL (DETCI)¶DETCI (Expert) — Do fix amplitudes involving RAS I or RAS IV? Useful in mixed MP2-CC methods. Type: boolean; Default: false. CC_FIX_EXTERNAL_MIN (DETCI)¶DETCI (Expert) — Number of external indices before amplitude gets fixed by CC_FIX_EXTERNAL. Experimental. Type: integer; Default: 1. CC_LAMBDA (DFOCC)¶DFOCC — Do solve lambda amplitude equations?. Type: boolean; Default: false. CC_MACRO (DETCI)¶DETCI (Expert) — CC_MACRO = [ [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], … ] Optional additional restrictions on allowed excitations in coupled-cluster computations, based on macroconfiguration ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:13294,Availability,error,error,13294,"uch that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING)¶OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI)¶DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM)¶CCEOM — Do turn on root following for CC3. Type: boolean; Default: false. CC_A_RAS3_MAX (DETCI)¶DETCI — maximum number of alpha electrons in RAS III, for CC. Type: integer; Default: -1. CC_B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III, for CC. Type: integer; Default: -1. CC_DIIS_MAX_VECS (DFOCC)¶DFOCC — Maximum number of vectors used in amplitude DIIS. Type: integer; Default: 6. CC_DIIS_MAX_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 6. CC_DIIS_MIN_VECS (DFOCC)¶DFOCC — Minimum number of vectors used in amplitude DIIS. Type: integer; Default: 2. CC_DIIS_MIN_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 2. CC_EX_LEVEL (DETCI)¶DETCI — The CC excitation level. Type: integer; Default: 2. CC_FIX_EXTERNAL (DETCI)¶DETCI (Expert) — Do fix amplitudes involving RAS I or RAS IV? Useful in mixed MP2-CC methods. Type: boolean; Default: false. CC_FIX_EXTERNAL_MIN (DETCI)¶DETCI (Expert) — Number of external indices before amplitude gets fixed by CC_FIX_EXTERNAL. Experimental. Type: integer; Default: 1. CC_LAMBDA (DFOCC)¶DFOCC — Do solve lambda amplitude equations?. Type: boolean; Default: false. CC_MACRO (DETCI)¶DETCI (Expert) — CC_MACRO = [ [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], … ] Optional additional restrictions on allowed excitations in coupled-cluster computations, based on macroconfiguration selection. For each sub-array, [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], eliminate cluster amplitudes in which: [the excitation level (holes in I + II) is equal to ex_lvl] AND [there are more than max_hole",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:17068,Availability,toler,tolerance,17068,"GLOBALS)¶GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI)¶DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI)¶DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI)¶DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI)¶DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI)¶DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:17719,Availability,error,error,17719,"ctor from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI)¶DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calcul",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:17819,Availability,error,error,17819,"to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitatio",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:17917,Availability,error,error,17917," Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:24821,Availability,avail,available,24821,"sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR)¶CFOUR — Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR)¶CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR)¶CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR)¶CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR)¶CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR)¶CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:24912,Availability,avail,available,24912,"x in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR)¶CFOUR — Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR)¶CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR)¶CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR)¶CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR)¶CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR)¶CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:25853,Availability,avail,available,25853," file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR)¶CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR)¶CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR)¶CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR)¶CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. CFOUR_CC_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR)¶CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:27141,Availability,avail,available,27141,"Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR)¶CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR)¶CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy(",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:27403,Availability,avail,available,27403,"FOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR)¶CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from act",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:31060,Availability,error,error,31060,"rently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR)¶CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR)¶CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR)¶CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:31520,Availability,avail,available,31520,"or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR)¶CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR)¶CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually ne",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:31695,Availability,avail,available,31695,"are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR)¶CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR)¶CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computat",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:31934,Availability,avail,available,31934," of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR)¶CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) deriva",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:33762,Availability,toler,tolerant,33762,"etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR)¶CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63,64]. Type: array; Default: No Default. CFOUR_ECP (CFOUR)¶CFOUR — Specifies whether effective core potentials (pseudopotentials) are used (ON, =1) or not (OFF, =0). Type: boolean; Default: false. CFOUR_EIGENVECTOR (CFOUR)¶CFOUR — Specifies which eigenvector of the totally symmetric part of the block-factored Hessian is to be followed uphill in a transition state search. Eigenvectors are indexed by their eigenvalues – the lowest eigenvalue is 1, the next lowest is 2, etc. The default is 1, which should always be used if you are not looking for a specific transition state which you know corresponds to motion along a different mode. In the future, relatively sophisticated generation of a guessed eigenvector will be implemented, but this is the way things are for now. Of course, this keyword has no meaning if CFOUR_METHOD is not set to TS. Type: integer; Default: 1. CFOUR_EL_ANHARM (CFOUR)¶CFOUR — Experimental use, ON = 1 requests t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:35912,Availability,avail,available,35912,"non-iterative triples corrections are applied after various types of EOM-CCSD calculation. Works with CFOUR_EXCITE set to EOMIP, might work with EOMEE, certainly doesn’t work with EOMEA. Use with great caution, preferably after having a few drinks. Type: boolean; Default: false. CFOUR_ESTATE_CONV (CFOUR)¶CFOUR — Specifies the threshold used in converging CC-LR/EOM-CC calculations. The iterative diagonalization is continued until the RMS residual falls below \(10^{-N}\) with \(N\) as the value specified with this keyword. Type: integer; Default: 5. CFOUR_ESTATE_MAXCYC (CFOUR)¶CFOUR — The maximum number of expansion vectors used in the solution of EOMCC equations (Default: 20, hard-coded to 4 in triples calculations). Type: integer; Default: 20. CFOUR_ESTATE_PROP (CFOUR)¶CFOUR — This keyword applies only to EOM-CC calculations and specifies whether any excited or ionized state one-electron properties are to be calculated. Proper use of this keyword requires a relatively advanced knowledge of quantum chemistry and the available options are discussed here. The options are: OFF (=0) [no properties or transition moments are calculated]; EXPECTATION (=1) [transition moments and dipole strengths are calculated along with selected one-electron properties which are evaluated as expectation values]; UNRELAXED (=2) [selected one-electron properties are calculated in an approximation that neglects relaxation of molecular orbitals]; RESPONSE (=3) [selected one-electron properties are calculated as analytic first derivatives of the energy]. Except for EOMCC calculations on two-electron systems (which are exact), properties obtained by the three approaches will not be equivalent. The default value for this keyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evalu",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:38547,Availability,toler,tolerant,38547,"an iterative (modified Davidson) algorithm. For excited state gradient calculations, only one root (clearly) is used. In such a case, one and only one non-zero entry in the string can be used, and this value is usually set to one (i.e. 0/1/0/0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR)¶CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR)¶CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR)¶CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculatio",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:38912,Availability,avail,available,38912,"a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR)¶CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR)¶CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR)¶CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR)¶CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatm",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:41486,Availability,avail,available,41486,"itched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be aware that for some atoms, the calculation has to be run in lower symmetry or even without symmetry. (Default : 0). Type: integer; Default: 0. CFOUR_FD_CALCTYPE (CFOUR)¶CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energies (dipole moment derivatives are not evaluated); while MIXED (=2) evaluates 1x1 blocks of symmetry-blocked force constants by second differences pf energies and all other elements by first differences of gradients. the GRADONLY and MIXED approaches may, of course, only be used hwen using computational methods for which analytic gradients are available. Type: string; Possible Values: GRADONLY, ENERONLY, MIXED; Default: GRADONLY. CFOUR_FD_IRREPS (CFOUR)¶CFOUR — Requests that only vibrational frequencies of certain symmetry types are evaluated in a VIBRATION=FINDIF calculation. The numbers of the irreducible representations for which vibrational analysis is to be performed are separated by slashes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without sta",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:46499,Availability,avail,available,46499,"y the valence electrons (ON =1) are considered. This keyword provides an alternative to the CFOUR_DROPMO keyword, as it allows frozen-core calculation without explicitly specifying the corresponding inner-shell orbitals. Type: boolean; Default: false. CFOUR_FROZEN_VIRT (CFOUR)¶CFOUR — Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energy needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR)¶CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR)¶CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENB",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:49606,Availability,avail,available,49606,"mber of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:52129,Availability,avail,available,52129,"as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR)¶CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR)¶CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Defa",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:56604,Availability,avail,available,56604," core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR)¶CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR)¶CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:58089,Availability,error,error,58089,"multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CF",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:61112,Availability,toler,tolerant,61112,"xample of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the \(^2A_1\) water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR)¶CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD appr",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:80481,Availability,avail,available,80481,"uadruply- or pentuply-degenerate representations. Extending the code to those cases is probably straightforward, and the reader is encouraged to do so if (s)he is so inclined. SYM_CHECK=0 “forces” the high-symmetry solution. SYM_CHECK=OVERRIDE (=1) doesn’t. The latter is the default. Type: boolean; Default: true. CFOUR_SYMMETRY (CFOUR)¶CFOUR — Specifies what subgroup of the full point group is to be used in the energy and/or gradient calculation (the computational point group). OFF (=1) forces a no symmetry run (in \(C_1\) ) and ON (=0) runs the calculation in the largest self-adjoint subgroup ( \(D_{2h}\) and its subgroups). Type: boolean; Default: true. CFOUR_T3_EXTRAPOL (CFOUR)¶CFOUR — Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module xecc. Type: boolean; Default: false. CFOUR_TAMP_SUM (CFOUR)¶CFOUR — Specifies how often the largest \(t\) amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc. Type: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR)¶CFOUR — Specifies whether to calculate finite-temperature thermodynamic corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives abbreviated output; and VERBOSE (=2) gives elaborate output that is separated by translation, rotation and vibration. Default: ON (currently not available in public version). Type: string; Possible Values: OFF, ON, VERBOSE; Default: ON. CFOUR_TRANS_INV (CFOUR)¶CFOUR — Specifies whether or not translational invariance is exploited in geometrical derivative calculations. USE(=0) specifies that translational invariance is exploited, while IGNORE (=1) turns ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:81166,Availability,avail,available,81166,")¶CFOUR — Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module xecc. Type: boolean; Default: false. CFOUR_TAMP_SUM (CFOUR)¶CFOUR — Specifies how often the largest \(t\) amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc. Type: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR)¶CFOUR — Specifies whether to calculate finite-temperature thermodynamic corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives abbreviated output; and VERBOSE (=2) gives elaborate output that is separated by translation, rotation and vibration. Default: ON (currently not available in public version). Type: string; Possible Values: OFF, ON, VERBOSE; Default: ON. CFOUR_TRANS_INV (CFOUR)¶CFOUR — Specifies whether or not translational invariance is exploited in geometrical derivative calculations. USE(=0) specifies that translational invariance is exploited, while IGNORE (=1) turns it off. Type: string; Possible Values: USE, IGNORE; Default: USE. CFOUR_TREAT_PERT (CFOUR)¶CFOUR — Specifies whether in a correlated NMR chemical shift calculations all perturbations are treated at once or sequentially. Available option are SIMULTANEOUS (=0) and SEQUENTIAL (=1). The latter is at least preferred for large-scale calculations, as it has less demands on the available disk space. Type: string; Possible Values: SIMULTANEOUS, SEQUENTIAL; Default: SIMULTANEOUS. CFOUR_UIJ_THRESHOLD (CFOUR)¶CFOUR — Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coeffi",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:81852,Availability,avail,available,81852,"ype: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR)¶CFOUR — Specifies whether to calculate finite-temperature thermodynamic corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives abbreviated output; and VERBOSE (=2) gives elaborate output that is separated by translation, rotation and vibration. Default: ON (currently not available in public version). Type: string; Possible Values: OFF, ON, VERBOSE; Default: ON. CFOUR_TRANS_INV (CFOUR)¶CFOUR — Specifies whether or not translational invariance is exploited in geometrical derivative calculations. USE(=0) specifies that translational invariance is exploited, while IGNORE (=1) turns it off. Type: string; Possible Values: USE, IGNORE; Default: USE. CFOUR_TREAT_PERT (CFOUR)¶CFOUR — Specifies whether in a correlated NMR chemical shift calculations all perturbations are treated at once or sequentially. Available option are SIMULTANEOUS (=0) and SEQUENTIAL (=1). The latter is at least preferred for large-scale calculations, as it has less demands on the available disk space. Type: string; Possible Values: SIMULTANEOUS, SEQUENTIAL; Default: SIMULTANEOUS. CFOUR_UIJ_THRESHOLD (CFOUR)¶CFOUR — Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR)¶CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANG",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:84815,Availability,toler,tolerance,84815,"s are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTRAN (CFOUR)¶CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR)¶CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR)¶CFOUR — The tolerance for storing transformed integrals. Integrals less than \(10^{-N}\) are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR)¶CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_ZFIELD (CFOUR)¶CFOUR — Specifies the Z-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CHOLESKY (DFOCC)¶DFOCC — Do Cholesky decomposition of the ERI tensor. Type: boolean; Default: false. CHOLESKY_TOLERANCE (DFOCC)¶DFOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLE",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:85714,Availability,toler,tolerance,85714,"lon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR)¶CFOUR — The tolerance for storing transformed integrals. Integrals less than \(10^{-N}\) are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR)¶CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_ZFIELD (CFOUR)¶CFOUR — Specifies the Z-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CHOLESKY (DFOCC)¶DFOCC — Do Cholesky decomposition of the ERI tensor. Type: boolean; Default: false. CHOLESKY_TOLERANCE (DFOCC)¶DFOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (FNOCC)¶FNOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1e-4. CI_DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the CI coefficients?. Type: boolean; Default: false. CI_FILE_START (DETCI)¶DETCI (Expert) — What file do we start at for hd/c/s/d CIvects? Should be 350 for normal CI calculations and 354 if we are going to do a second monomer. Type: integer; Default: 350. CI_MAXITER (DETCI)¶DETCI — Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. CI_NUM_THREADS (DETCI)¶DETCI (Expert) — Number of threads for DETCI. Type: integer; Default: 1. CI_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module Redundancies for det",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:85841,Availability,toler,tolerance,85841,"ntegrals. Integrals less than \(10^{-N}\) are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR)¶CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_ZFIELD (CFOUR)¶CFOUR — Specifies the Z-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CHOLESKY (DFOCC)¶DFOCC — Do Cholesky decomposition of the ERI tensor. Type: boolean; Default: false. CHOLESKY_TOLERANCE (DFOCC)¶DFOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (FNOCC)¶FNOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1e-4. CI_DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the CI coefficients?. Type: boolean; Default: false. CI_FILE_START (DETCI)¶DETCI (Expert) — What file do we start at for hd/c/s/d CIvects? Should be 350 for normal CI calculations and 354 if we are going to do a second monomer. Type: integer; Default: 350. CI_MAXITER (DETCI)¶DETCI — Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. CI_NUM_THREADS (DETCI)¶DETCI (Expert) — Number of threads for DETCI. Type: integer; Default: 1. CI_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module Redundancies for details. Type: string; Possible Values: CONV; Default: CONV. CIBLKS_PRINT (DETCI)¶DETCI — Do print a summary of the CI blocks?. Ty",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:87835,Availability,toler,tolerance,87835,"the CI blocks?. Type: boolean; Default: false. CIS_AMPLITUDE_CUTOFF (CPHF)¶CPHF — Minimum singles amplitude to print in CIS analysis. Type: double; Default: 0.15. COLLAPSE_SIZE (DETCI)¶DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM)¶CCEOM — When collapsing Davidson subspace, whether to also include the previous approximate solution (for each root)? This doubles the number of resulting vectors but generally improves convergence. Type: boolean; Default: true. COLLAPSE_WITH_LAST_CC3 (CCEOM)¶CCEOM — Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. COMPLEX_TOLERANCE (CCEOM)¶CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC)¶DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:89211,Availability,avail,available,89211,"lt: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC)¶PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT)¶SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. COUPLING (PSIMRCC)¶PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC)¶PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING)¶OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF)¶CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF)¶CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS)¶GLOBALS — List of basis function indices ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:92605,Availability,avail,available,92605,"xpert) — CubicScalarGrid maximum number of grid points per evaluation block. Type: integer; Default: 1000. CUBIC_GRID_OVERAGE (FISAPT)¶FISAPT — CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. CUBIC_GRID_OVERAGE (GLOBALS)¶GLOBALS — CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. CUBIC_GRID_SPACING (FISAPT)¶FISAPT — CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to 0.2 bohr each. Type: array; Default: No Default. CUBIC_GRID_SPACING (GLOBALS)¶GLOBALS — CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to 0.2 bohr each. Type: array; Default: No Default. CUTOFF (DFOCC)¶DFOCC — Cutoff value for numerical procedures. Type: integer; Default: 8. CUTOFF (OCC)¶OCC — Cutoff value for numerical procedures. Type: integer; Default: 14. CUTOFF_AMPS_PRINT (ADC)¶ADC — Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. D_CONVERGENCE (FISAPT)¶FISAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. D_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for density, as measured by the orbital gradient. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF density, defined as the RMS or maximum absolute value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMP_INDUCED (PE)¶PE — Enable Thole damping for induced moments. Type: boolean; Default: false. DAMP_MULTIPOLE (PE)¶PE — Enable Thole damping for ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:96495,Availability,error,error,96495,"als from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algorithm to use for the DCT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CCDENSITY)¶CCDENSITY — Reproducing energies from densities ?. Type: integer; Default: 0. DEBUG (CPHF)¶CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS)¶GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT)¶CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT)¶SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT)¶SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP)¶EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS)¶GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI)¶DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC)¶FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS)¶GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCT (DCT)¶DCT — Auxiliary basis set for DCT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT)¶SAPT — Auxiliary basis set for SAPT Elst10 and Ex",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:96514,Availability,error,error,96514,"als from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algorithm to use for the DCT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CCDENSITY)¶CCDENSITY — Reproducing energies from densities ?. Type: integer; Default: 0. DEBUG (CPHF)¶CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS)¶GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT)¶CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT)¶SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT)¶SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP)¶EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS)¶GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI)¶DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC)¶FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS)¶GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCT (DCT)¶DCT — Auxiliary basis set for DCT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT)¶SAPT — Auxiliary basis set for SAPT Elst10 and Ex",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:100188,Availability,down,down,100188,"ns. Defaults to a JKFIT basis. Type: string; Possible Values: basis string; Default: No Default. DF_BUMP_R0 (SCF)¶SCF — Bump function min radius. Type: double; Default: 0.0. DF_BUMP_R1 (SCF)¶SCF — Bump function max radius. Type: double; Default: 0.0. DF_DOMAINS (SCF)¶SCF — FastDF geometric fitting domain selection algorithm. Type: string; Possible Values: DIATOMIC, SPHERES; Default: DIATOMIC. DF_FITTING_CONDITION (SCF)¶SCF (Expert) — Fitting Condition, i.e. eigenvalue threshold for RI basis. Analogous to S_TOLERANCE. Type: double; Default: 1.0e-10. DF_INTS_IO (DFMP2)¶DFMP2 (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_IO (SCF)¶SCF (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_NUM_THREADS (DFMP2)¶DFMP2 — Number of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. DF_INTS_NUM_THREADS (SCF)¶SCF — Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC (SCF)¶SCF — FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_SCF_GUESS (SCF)¶SCF — Do a density fitting SCF calculation to converge the orbitals before switching to the use of exact integrals in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. DF_THETA (SCF)¶SCF — FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. DFCC (FNOCC)¶FNOCC — Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. DFMP2_MEM_FACTOR (DFMP2)¶DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE (DFMP2)¶DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE (DFMP2)",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:101035,Availability,error,error,101035,"te integrals with. 0 is wild card. Type: integer; Default: 0. DF_INTS_NUM_THREADS (SCF)¶SCF — Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC (SCF)¶SCF — FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_SCF_GUESS (SCF)¶SCF — Do a density fitting SCF calculation to converge the orbitals before switching to the use of exact integrals in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. DF_THETA (SCF)¶SCF — FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. DFCC (FNOCC)¶FNOCC — Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. DFMP2_MEM_FACTOR (DFMP2)¶DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE (DFMP2)¶DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE (DFMP2)¶DFMP2 — Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DFT_ALPHA (SCF)¶SCF — The DFT Exact-exchange parameter. Type: double; Default: 0.0. DFT_ALPHA_C (SCF)¶SCF — The DFT Correlation hybrid parameter. Type: double; Default: 0.0. DFT_BASIS_TOLERANCE (SCF)¶SCF — DFT basis cutoff. Type: conv double; Default: 1.0e-12. DFT_BLOCK_MAX_POINTS (SCF)¶SCF (Expert) — The maximum number of grid points per evaluation block. Type: integer; Default: 256. DFT_BLOCK_MAX_RADIUS (SCF)¶SCF (Expert) — The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS (SCF)¶SCF (Expert) — The minimum number of grid points per evaluation block. Type: integer; Default: 100. DFT_BLOCK_SCHEME (SCF)¶SCF (Expert) — The blocking scheme for DFT. Type: string; Possible Values: NAIV",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:101179,Availability,error,error,101179,"memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC (SCF)¶SCF — FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_SCF_GUESS (SCF)¶SCF — Do a density fitting SCF calculation to converge the orbitals before switching to the use of exact integrals in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. DF_THETA (SCF)¶SCF — FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. DFCC (FNOCC)¶FNOCC — Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. DFMP2_MEM_FACTOR (DFMP2)¶DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE (DFMP2)¶DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE (DFMP2)¶DFMP2 — Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DFT_ALPHA (SCF)¶SCF — The DFT Exact-exchange parameter. Type: double; Default: 0.0. DFT_ALPHA_C (SCF)¶SCF — The DFT Correlation hybrid parameter. Type: double; Default: 0.0. DFT_BASIS_TOLERANCE (SCF)¶SCF — DFT basis cutoff. Type: conv double; Default: 1.0e-12. DFT_BLOCK_MAX_POINTS (SCF)¶SCF (Expert) — The maximum number of grid points per evaluation block. Type: integer; Default: 256. DFT_BLOCK_MAX_RADIUS (SCF)¶SCF (Expert) — The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS (SCF)¶SCF (Expert) — The minimum number of grid points per evaluation block. Type: integer; Default: 100. DFT_BLOCK_SCHEME (SCF)¶SCF (Expert) — The blocking scheme for DFT. Type: string; Possible Values: NAIVE, OCTREE; Default: OCTREE. DFT_BS_RADIUS_ALPHA (SCF)¶SCF — Factor for effective BS radius in radial grid. Type: double; Default: 1.0. DFT_DENSITY_TOL",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:106038,Availability,robust,robust,106038,"RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIAGONALIZE_HEFF (PSIMRCC)¶PSIMRCC — Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIE_IF_NOT_CONVERGED (GLOBALS)¶GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY)¶CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA)¶CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE)¶CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI)¶DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to a",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:107500,Availability,error,error,107500,"RGED (GLOBALS)¶GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY)¶CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA)¶CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE)¶CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI)¶DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Defa",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:107620,Availability,error,error,107620,"NERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA)¶CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE)¶CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI)¶DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:107829,Availability,error,error,107829,"CCRESPONSE)¶CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI)¶DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: b",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:107945,Availability,error,error,107945,"CI)¶DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is perfor",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:108069,Availability,error,error,108069,"Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: intege",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:108185,Availability,error,error,108185,"rue. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector bel",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:108311,Availability,error,error,108311,")¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equatio",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:108431,Availability,error,error,108431,teger; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer,MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:108547,Availability,error,error,108547,ype: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOC,MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:108663,Availability,error,error,108663,"n. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, C",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:108770,Availability,error,error,108770,": 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for f",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:108796,Availability,robust,robust,108796,": 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for f",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:108812,Availability,error,error,108812,": 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for f",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:109169,Availability,error,error,109169,"_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF)¶SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS)¶GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG)¶DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:109612,Availability,avail,available,109612,"Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF)¶SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS)¶GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG)¶DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG)¶DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG)¶DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG)¶DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG)¶DMRG — Whether or not to use DIIS for DMRG. Type: ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:110696,Availability,checkpoint,checkpoint,110696,". Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF)¶SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS)¶GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG)¶DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG)¶DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG)¶DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG)¶DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG)¶DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG)¶DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG)¶DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG)¶DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT (DMRG)¶DMRG — Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG)¶DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:111743,Availability,checkpoint,checkpoints,111743,"k (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG)¶DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG)¶DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT (DMRG)¶DMRG — Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG)¶DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG)¶DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG)¶DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG)¶DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (DMRG)¶DMRG — Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG)¶DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG)¶DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG)¶DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG)¶DMRG — Maximu",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:112951,Availability,toler,tolerances,112951,"rix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (DMRG)¶DMRG — Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG)¶DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG)¶DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG)¶DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG)¶DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG)¶DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG)¶DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG)¶DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG)¶DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG)¶DMRG — The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES (DMRG)¶DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG)¶DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT)¶SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC)¶DFOCC — Do apply D",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:114508,Availability,error,error,114508,"STATES (DMRG)¶DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG)¶DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT)¶SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC)¶DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC)¶OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Dispersion terms. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: b",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:115046,Availability,error,error,115046,"extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Dispersion terms. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — Th",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:115579,Availability,error,error,115579,"(Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:121705,Availability,avail,available,121705,"he extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING)¶OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM)¶CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. EOM_REFERENCE (CCEOM)¶CCEOM — Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR)¶CCHBAR — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EP2_CONVERGENCE (DFEP2)¶DFEP2 — What is the maximum number of iterations?. Type: conv double; Default: 5.e-5. EP2_MAXITER (DFEP2)¶DFEP2 — What is the maximum number of iterations?. Type: integer; Default: 20. EP2_NUM_EA (DFEP2)¶DFEP2 — Number of Electron Affinities to compute, starting with the LUMO. Type: integer; Default: 0. EP2_NUM_IP (DFEP2)¶DFEP2 — Number of Ionization Potentials to compute, starting with the HOMO. Type: integer; Default: 3. EP2_ORBITALS (DFEP2)¶DFEP2 — Explicitly pick orbitals to use in the EP2 method, overrides EP2_NUM_IP and EP2_NUM_EA options. Input array should be [[orb1, orb2], [], …] for each irrep. Type: array; Defau",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:132418,Availability,checkpoint,checkpoint,132418," specifies arrays containing the absolute alpha string indices (A_i below), absolute beta indices (B_i below), and CI coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], …]. Type: array; Default: No Default. FORCE_RESTART (CCENERGY)¶CCENERGY (Expert) — Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. FORCE_TWOCON (MCSCF)¶MCSCF — Do attempt to force a two configuration solution by starting with CI coefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. FRAC_DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF)¶SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF)¶SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF)¶SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF)¶SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF)¶SCF — The occupations of the orbital indices specified above (\(0.0\le {\rm occ} \le 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING)¶OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FRAG_REF_ATOMS (OPTKING)¶OPTKING — Which atoms define the reference points for interfragment coordinates?. Type: array; Default: No Default. FREEZE_CORE (GLOBALS)¶GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragme",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:132953,Availability,redundant,redundant,132953,"coefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. FRAC_DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF)¶SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF)¶SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF)¶SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF)¶SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF)¶SCF — The occupations of the orbital indices specified above (\(0.0\le {\rm occ} \le 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING)¶OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FRAG_REF_ATOMS (OPTKING)¶OPTKING — Which atoms define the reference points for interfragment coordinates?. Type: array; Default: No Default. FREEZE_CORE (GLOBALS)¶GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total numbe",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:140041,Availability,avail,available,140041,"ESS (SCF)¶SCF — The type of guess orbitals. Defaults to READ for geometry optimizations after the first step, to CORE for single atoms, and to SAD otherwise. The HUCKEL guess employs on-the-fly calculations like SAD, as described in doi:10.1021/acs.jctc.8b01089 which also describes the SAP guess. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, HUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI)¶DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI)¶DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI)¶DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:150023,Availability,error,error,150023,"KING)¶OPTKING — IRC step size in bohr(amu)\(^{1/2}\). Type: double; Default: 0.2. IRC_STOP (OPTKING)¶OPTKING — Decide when to stop IRC calculations. Type: string; Possible Values: ASK, STOP, GO; Default: STOP. ISOTROPIC_POL (PE)¶PE — Make polarizabilities isotropic. Type: boolean; Default: false. ISTOP (DETCI)¶DETCI — Do stop DETCI after string information is formed and before integrals are read?. Type: boolean; Default: false. JOBTYPE (CCLAMBDA)¶CCLAMBDA (Expert) — Type of job being performed. Type: string; Default: No Default. KEEP_INTCOS (OPTKING)¶OPTKING — Keep internal coordinate definition file. Type: boolean; Default: false. KIND (ADC)¶ADC — The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. LEVEL_SHIFT (DFOCC)¶DFOCC — Level shift to aid convergence. Type: double; Default: 0.02. LEVEL_SHIFT (MCSCF)¶MCSCF — Level shift to aid convergence. Type: double; Default: 0.0. LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 0.02. LEVEL_SHIFT (SCF)¶SCF — Do use a level shift?. Type: double; Default: 0.0. LEVEL_SHIFT_CUTOFF (SCF)¶SCF — DIIS error at which to stop applying the level shift. Type: double; Default: 1e-2. LINEAR (CCRESPONSE)¶CCRESPONSE — Do Bartlett size-extensive linear model?. Type: boolean; Default: false. LINEQ_SOLVER (DFOCC)¶DFOCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. LINEQ_SOLVER (OCC)¶OCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. LINESEARCH_STATIC_MAX (OPTKING)¶OPTKING — If doing a static line search, this fixes the largest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.100. LINESEARCH_STATIC_MIN (OPTKING)¶OPTKING — If doing a static line search, this fixes the shortest step, whose largest change in an internal co",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:150177,Availability,error,error,150177,"; Possible Values: ASK, STOP, GO; Default: STOP. ISOTROPIC_POL (PE)¶PE — Make polarizabilities isotropic. Type: boolean; Default: false. ISTOP (DETCI)¶DETCI — Do stop DETCI after string information is formed and before integrals are read?. Type: boolean; Default: false. JOBTYPE (CCLAMBDA)¶CCLAMBDA (Expert) — Type of job being performed. Type: string; Default: No Default. KEEP_INTCOS (OPTKING)¶OPTKING — Keep internal coordinate definition file. Type: boolean; Default: false. KIND (ADC)¶ADC — The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. LEVEL_SHIFT (DFOCC)¶DFOCC — Level shift to aid convergence. Type: double; Default: 0.02. LEVEL_SHIFT (MCSCF)¶MCSCF — Level shift to aid convergence. Type: double; Default: 0.0. LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 0.02. LEVEL_SHIFT (SCF)¶SCF — Do use a level shift?. Type: double; Default: 0.0. LEVEL_SHIFT_CUTOFF (SCF)¶SCF — DIIS error at which to stop applying the level shift. Type: double; Default: 1e-2. LINEAR (CCRESPONSE)¶CCRESPONSE — Do Bartlett size-extensive linear model?. Type: boolean; Default: false. LINEQ_SOLVER (DFOCC)¶DFOCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. LINEQ_SOLVER (OCC)¶OCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. LINESEARCH_STATIC_MAX (OPTKING)¶OPTKING — If doing a static line search, this fixes the largest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.100. LINESEARCH_STATIC_MIN (OPTKING)¶OPTKING — If doing a static line search, this fixes the shortest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.001. LINESEARCH_STATIC_N (OPTKING)¶OPTKING — If doing a static line search, scan this many points.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:155900,Availability,avail,available,155900,"RS (FISAPT)¶FISAPT — IBO Stars procedure. Type: boolean; Default: false. LOCAL_MAXITER (FISAPT)¶FISAPT — Maximum iterations in localization. Type: integer; Default: 1000. LOCAL_MAXITER (SCF)¶SCF — The maxiter on the orbital localization procedure. Type: integer; Default: 200. LOCAL_METHOD (CCENERGY)¶CCENERGY — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METHOD (CCEOM)¶CCEOM — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METHOD (CCLAMBDA)¶CCLAMBDA — Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_METHOD (CCRESPONSE)¶CCRESPONSE — Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_PAIRDEF (CCENERGY)¶CCENERGY — Definition of local pair domains, default is BP, Boughton-Pulay. Type: string; Possible Values: BP, RESPONSE; Default: BP. LOCAL_PAIRDEF (CCLAMBDA)¶CCLAMBDA — Definition of local pair domains. Type: string; Default: No Default. LOCAL_PAIRDEF (CCRESPONSE)¶CCRESPONSE — Definition of local pair domains. Type: string; Default: NONE. LOCAL_PRECONDITIONER (CCEOM)¶CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT)¶FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY)¶CCENERGY — Desired treatment of “weak pai",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:156107,Availability,avail,available,156107,"r on the orbital localization procedure. Type: integer; Default: 200. LOCAL_METHOD (CCENERGY)¶CCENERGY — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METHOD (CCEOM)¶CCEOM — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METHOD (CCLAMBDA)¶CCLAMBDA — Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_METHOD (CCRESPONSE)¶CCRESPONSE — Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_PAIRDEF (CCENERGY)¶CCENERGY — Definition of local pair domains, default is BP, Boughton-Pulay. Type: string; Possible Values: BP, RESPONSE; Default: BP. LOCAL_PAIRDEF (CCLAMBDA)¶CCLAMBDA — Definition of local pair domains. Type: string; Default: No Default. LOCAL_PAIRDEF (CCRESPONSE)¶CCRESPONSE — Definition of local pair domains. Type: string; Default: NONE. LOCAL_PRECONDITIONER (CCEOM)¶CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT)¶FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY)¶CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to cor",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:157764,Availability,avail,available,157764," atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY)¶CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM)¶CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA)¶CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE)¶CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC)¶PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI)¶DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI)¶DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2)¶DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS)¶GLOBALS (Expert) — Number of columns to print in calls to Matrix::print",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:157989,Availability,avail,available,157989," treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM)¶CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA)¶CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE)¶CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC)¶PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI)¶DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI)¶DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2)¶DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS)¶GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIIS",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:160529,Availability,avail,available,160529,"ximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. MAX_MEM_BUF (SCF)¶SCF — Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MAX_MOGRAD_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired E_CONVERGENCE. The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MAX_MOGRAD_CONVERGENCE (OCC)¶OCC — Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired E_CONVERGENCE. The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MAX_NUM_VECS (ADC)¶ADC — Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. MAX_NUM_VECS (DETCI)¶DETCI — Maximum number of Davidson subspace vectors which can be held on disk for the CI coefficient and sigma vectors. (There is one H(diag) vector and the number of D vectors is equal to the number of roots). When the number of vectors on disk reaches the value of MAX_NUM_VECS, the Davidson subspace will be collapsed to COLLAPSE_SIZE vectors for each root. This is very helpful for saving disk space. Defaults to CI_MAXITER * NUM_ROOTS + NUM_INIT_VECS. Type: integer; Default: 0. MAX_RADIAL_MOMENT (GLOBALS)¶GLOBALS — Maximum Radial Moment to Calculate. Type: integer; Default: 4. MAXITER (ADC)¶ADC — Maximum number of iterations. Type: integer; Default: 50. MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. MAXITER (CCEOM)¶CCEOM — Maximum number of iterations. Type: integer; Default: 80. MAXITER (CCLAMBDA)¶CCLAMBDA — Maximum number of iterations. Type:",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:163356,Availability,error,error,163356,"50. MAXITER (SCF)¶SCF — Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MBIS_D_CONVERGENCE (GLOBALS)¶GLOBALS — MBIS Convergence Criteria. Type: conv double; Default: 1.0e-8. MBIS_MAXITER (GLOBALS)¶GLOBALS — Maximum Number of MBIS Iterations. Type: integer; Default: 500. MBIS_PRUNING_SCHEME (GLOBALS)¶GLOBALS — Pruning scheme for MBIS Grid. Type: string; Default: ROBUST. MBIS_RADIAL_POINTS (GLOBALS)¶GLOBALS — MBIS Number of Radial Points. Type: integer; Default: 75. MBIS_SPHERICAL_POINTS (GLOBALS)¶GLOBALS — MBIS Number of Spherical Points. Type: integer; Default: 302. MCSCF_ALGORITHM (DETCI)¶DETCI — Convergence algorithm to utilize. Two-Step, Augmented Hessian, or One-Step. Defaults to TS for RASSCF. Type: string; Possible Values: TS, AH; Default: TS. MCSCF_CI_CLEANUP (DETCI)¶DETCI — Cleanup the CI info at the end of a run?. Type: boolean; Default: true. MCSCF_DIIS_ERROR_TYPE (DETCI)¶DETCI — DIIS error vector type either, the AO orbital gradient or the orbital rotation update matrix. Type: string; Possible Values: GRAD, UPDATE; Default: GRAD. MCSCF_DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation for TS convergence. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of DIIS vectors for TS convergence. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI)¶DETCI — Iteration to turn on DIIS for TS convergence. Type: integer; Default: 3. MCSCF_DPD_CLEANUP (DETCI)¶DETCI — Cleanup the DPD MCSCF object at the end of a run?. Type: boolean; Default: true. MCSCF_E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI)¶DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI)¶DETCI — Maximum value in the",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:164241,Availability,avail,available,164241,"CI_CLEANUP (DETCI)¶DETCI — Cleanup the CI info at the end of a run?. Type: boolean; Default: true. MCSCF_DIIS_ERROR_TYPE (DETCI)¶DETCI — DIIS error vector type either, the AO orbital gradient or the orbital rotation update matrix. Type: string; Possible Values: GRAD, UPDATE; Default: GRAD. MCSCF_DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation for TS convergence. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of DIIS vectors for TS convergence. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI)¶DETCI — Iteration to turn on DIIS for TS convergence. Type: integer; Default: 3. MCSCF_DPD_CLEANUP (DETCI)¶DETCI — Cleanup the DPD MCSCF object at the end of a run?. Type: boolean; Default: true. MCSCF_E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI)¶DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI)¶DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI)¶DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_ROTATE (DETCI)¶DETCI — Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals. Type: array; Default: No Default. MCSCF_SO_START_E (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-4. MCSCF_SO_START_GRAD (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on RMS of orbi",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:165429,Availability,avail,available,165429,"re scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI)¶DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_ROTATE (DETCI)¶DETCI — Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals. Type: array; Default: No Default. MCSCF_SO_START_E (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-4. MCSCF_SO_START_GRAD (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on RMS of orbital gradient. Type: double; Default: 1e-4. MCSCF_TYPE (DETCI)¶DETCI — Method to handle the two-electron integrals. Type: string; Possible Values: DF, CONV, AO; Default: CONV. MEMORY (ADC)¶ADC — The amount of memory available (in Mb) This option is only available for the built-in ADC backend. Type: integer; Default: 1000. MIN_CCD_DIISVECS (SAPT)¶SAPT — Minimum number of vectors used in CCD-DIIS. Type: integer; Default: 4. MINAO_BASIS (FISAPT)¶FISAPT (Expert) — MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. MIXED (DETCI)¶DETCI (Expert) — Do allow “mixed” RAS II/RAS III excitations into the CI space? If FALSE, then if there are any electrons in RAS III, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MIXED4 (DETCI)¶DETCI (Expert) — Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC)¶DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC)¶OCC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:165467,Availability,avail,available,165467,"re scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI)¶DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_ROTATE (DETCI)¶DETCI — Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals. Type: array; Default: No Default. MCSCF_SO_START_E (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-4. MCSCF_SO_START_GRAD (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on RMS of orbital gradient. Type: double; Default: 1e-4. MCSCF_TYPE (DETCI)¶DETCI — Method to handle the two-electron integrals. Type: string; Possible Values: DF, CONV, AO; Default: CONV. MEMORY (ADC)¶ADC — The amount of memory available (in Mb) This option is only available for the built-in ADC backend. Type: integer; Default: 1000. MIN_CCD_DIISVECS (SAPT)¶SAPT — Minimum number of vectors used in CCD-DIIS. Type: integer; Default: 4. MINAO_BASIS (FISAPT)¶FISAPT (Expert) — MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. MIXED (DETCI)¶DETCI (Expert) — Do allow “mixed” RAS II/RAS III excitations into the CI space? If FALSE, then if there are any electrons in RAS III, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MIXED4 (DETCI)¶DETCI (Expert) — Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC)¶DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC)¶OCC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:166480,Availability,error,error,166480,"or the built-in ADC backend. Type: integer; Default: 1000. MIN_CCD_DIISVECS (SAPT)¶SAPT — Minimum number of vectors used in CCD-DIIS. Type: integer; Default: 4. MINAO_BASIS (FISAPT)¶FISAPT (Expert) — MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. MIXED (DETCI)¶DETCI (Expert) — Do allow “mixed” RAS II/RAS III excitations into the CI space? If FALSE, then if there are any electrons in RAS III, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MIXED4 (DETCI)¶DETCI (Expert) — Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC)¶DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 6. MO_MAXITER (DFOCC)¶DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC)¶OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF)¶MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC)¶OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_STEP_MAX (DFOCC)¶DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC)¶OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC)¶OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF)¶CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:169586,Availability,error,error,169586,"orbitals to excite to in MOM (+/- for alpha/beta). Type: array; Default: No Default. MP2_AMP_TYPE (DFOCC)¶DFOCC — The algorithm that used to handle mp2 amplitudes. The DIRECT option means compute amplitudes on the fly * whenever they are necessary. Type: string; Possible Values: DIRECT, CONV; Default: DIRECT. MP2_AMPS_PRINT (CCENERGY)¶CCENERGY — Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. MP2_CCSD_METHOD (PSIMRCC)¶PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC)¶PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY)¶CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2)¶DFMP2 — OS Scale. Type: double; Default: 6.0. MP2_OS_SCALE (DFOCC)¶DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SCALE_OS (FNOCC)¶FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. MP2_SOS_SCALE (DFOCC)¶DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY)¶CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (DFMP2)¶DFMP2 — SS Scale. Type: double; Default: 1.0. MP2_SS_SCALE (DFOCC)¶DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:169976,Availability,error,error,169976,"starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. MP2_CCSD_METHOD (PSIMRCC)¶PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC)¶PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY)¶CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2)¶DFMP2 — OS Scale. Type: double; Default: 6.0. MP2_OS_SCALE (DFOCC)¶DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SCALE_OS (FNOCC)¶FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. MP2_SOS_SCALE (DFOCC)¶DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY)¶CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (DFMP2)¶DFMP2 — SS Scale. Type: double; Default: 1.0. MP2_SS_SCALE (DFOCC)¶DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type:",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:170196,Availability,error,error,170196,"UESS (PSIMRCC)¶PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY)¶CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2)¶DFMP2 — OS Scale. Type: double; Default: 6.0. MP2_OS_SCALE (DFOCC)¶DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SCALE_OS (FNOCC)¶FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. MP2_SOS_SCALE (DFOCC)¶DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY)¶CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (DFMP2)¶DFMP2 — SS Scale. Type: double; Default: 1.0. MP2_SS_SCALE (DFOCC)¶DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:170538,Availability,error,error,170538,"S_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SCALE_OS (FNOCC)¶FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. MP2_SOS_SCALE (DFOCC)¶DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY)¶CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (DFMP2)¶DFMP2 — SS Scale. Type: double; Default: 1.0. MP2_SS_SCALE (DFOCC)¶DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = tru",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:171505,Availability,avail,available,171505," — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:171575,Availability,avail,available,171575," — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:173958,Availability,avail,available,173958,"o otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC)¶MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC)¶MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC)¶MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI)¶DETCI — Do use the \(M_s = 0\) component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI)¶DETCI — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (DFOCC)¶DFOCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (FNOCC)¶FNOCC — Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. NAT_ORBS (OCC)¶OCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS_T2 (SAPT)¶SAPT — Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3 ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:175632,Availability,avail,available,175632,"ype: boolean; Default: false. NAT_ORBS_T2 (SAPT)¶SAPT — Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3 (SAPT)¶SAPT — Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4 (SAPT)¶SAPT — Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NEW_TRIPLES (CCENERGY)¶CCENERGY — Do use new triples?. Type: boolean; Default: true. NEW_TRIPLES (CCEOM)¶CCEOM — Do use new triples?. Type: boolean; Default: true. NEWTON_CONVERGENCE (ADC)¶ADC — The convergence criterion for pole searching step. This option is only available for the built-in ADC backend. Type: conv double; Default: 1e-7. NL_DISPERSION_PARAMETERS (SCF)¶SCF — Parameters defining the -NL/-V dispersion correction. First b, then C. Type: array; Default: No Default. NO_DFILE (DETCI)¶DETCI (Expert) — Do use the last vector space in the BVEC file to write scratch DVEC rather than using a separate DVEC file? (Only possible if NUM_ROOTS = 1.). Type: boolean; Default: false. NO_SINGLES (PSIMRCC)¶PSIMRCC — Do disregard updating single excitation amplitudes?. Type: boolean; Default: false. NORM_TOLERANCE (ADC)¶ADC — The cutoff norm of residual vector in SEM step. This option is only available for the built-in ADC backend. Type: conv double; Default: 1e-6. NORMAL_MODES_WRITE (FINDIF)¶FINDIF — Do write a file containing the normal modes in Molden format? If so, the filename will end in .molden_normal_modes, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: bool",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:176266,Availability,avail,available,176266,"D T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NEW_TRIPLES (CCENERGY)¶CCENERGY — Do use new triples?. Type: boolean; Default: true. NEW_TRIPLES (CCEOM)¶CCEOM — Do use new triples?. Type: boolean; Default: true. NEWTON_CONVERGENCE (ADC)¶ADC — The convergence criterion for pole searching step. This option is only available for the built-in ADC backend. Type: conv double; Default: 1e-7. NL_DISPERSION_PARAMETERS (SCF)¶SCF — Parameters defining the -NL/-V dispersion correction. First b, then C. Type: array; Default: No Default. NO_DFILE (DETCI)¶DETCI (Expert) — Do use the last vector space in the BVEC file to write scratch DVEC rather than using a separate DVEC file? (Only possible if NUM_ROOTS = 1.). Type: boolean; Default: false. NO_SINGLES (PSIMRCC)¶PSIMRCC — Do disregard updating single excitation amplitudes?. Type: boolean; Default: false. NORM_TOLERANCE (ADC)¶ADC — The cutoff norm of residual vector in SEM step. This option is only available for the built-in ADC backend. Type: conv double; Default: 1e-6. NORMAL_MODES_WRITE (FINDIF)¶FINDIF — Do write a file containing the normal modes in Molden format? If so, the filename will end in .molden_normal_modes, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. NUM_AMPS_PRINT (ADC)¶ADC — Number of components of transition amplitudes printed. This option is only available for the built-in ADC backend. Type: integer; Default: 5. NUM_AMPS_PRINT (CCENERGY)¶CCENERGY — Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. NUM_AMPS_PRINT (CCEOM)¶CCEOM — Number of important CC amplitudes to print. Type: integer; Default: 5. NUM_AMPS_PRINT (CCLAMBDA)¶CCLAMBDA — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. NUM_AMPS_PRINT (CCRESPONSE)¶CCRESPONSE — Number of import",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:176764,Availability,avail,available,176764," dispersion correction. First b, then C. Type: array; Default: No Default. NO_DFILE (DETCI)¶DETCI (Expert) — Do use the last vector space in the BVEC file to write scratch DVEC rather than using a separate DVEC file? (Only possible if NUM_ROOTS = 1.). Type: boolean; Default: false. NO_SINGLES (PSIMRCC)¶PSIMRCC — Do disregard updating single excitation amplitudes?. Type: boolean; Default: false. NORM_TOLERANCE (ADC)¶ADC — The cutoff norm of residual vector in SEM step. This option is only available for the built-in ADC backend. Type: conv double; Default: 1e-6. NORMAL_MODES_WRITE (FINDIF)¶FINDIF — Do write a file containing the normal modes in Molden format? If so, the filename will end in .molden_normal_modes, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. NUM_AMPS_PRINT (ADC)¶ADC — Number of components of transition amplitudes printed. This option is only available for the built-in ADC backend. Type: integer; Default: 5. NUM_AMPS_PRINT (CCENERGY)¶CCENERGY — Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. NUM_AMPS_PRINT (CCEOM)¶CCEOM — Number of important CC amplitudes to print. Type: integer; Default: 5. NUM_AMPS_PRINT (CCLAMBDA)¶CCLAMBDA — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. NUM_AMPS_PRINT (CCRESPONSE)¶CCRESPONSE — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 5. NUM_AMPS_PRINT (DETCI)¶DETCI — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. NUM_CORE_ORBITALS (ADC)¶ADC — Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_DETS_PRINT (DETCI)¶DETCI — Number of important determinants to print. Type: integer; D",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:177624,Availability,avail,available,177624,. Type: boolean; Default: false. NUM_AMPS_PRINT (ADC)¶ADC — Number of components of transition amplitudes printed. This option is only available for the built-in ADC backend. Type: integer; Default: 5. NUM_AMPS_PRINT (CCENERGY)¶CCENERGY — Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. NUM_AMPS_PRINT (CCEOM)¶CCEOM — Number of important CC amplitudes to print. Type: integer; Default: 5. NUM_AMPS_PRINT (CCLAMBDA)¶CCLAMBDA — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. NUM_AMPS_PRINT (CCRESPONSE)¶CCRESPONSE — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 5. NUM_AMPS_PRINT (DETCI)¶DETCI — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. NUM_CORE_ORBITALS (ADC)¶ADC — Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_DETS_PRINT (DETCI)¶DETCI — Number of important determinants to print. Type: integer; Default: 20. NUM_FROZEN_DOCC (GLOBALS)¶GLOBALS — The number of core orbitals to freeze in later correlated computations. This trumps FREEZE_CORE. Type: integer; Default: 0. NUM_FROZEN_UOCC (GLOBALS)¶GLOBALS — The number of virtual orbitals to freeze in later correlated computations. Type: integer; Default: 0. NUM_GUESSES (ADC)¶ADC — Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. NUM_INIT_VECS (DETCI)¶DETCI (Expert) — The number of initial vectors to use in the CI iterative procedure. Defaults to the number of roots. Type: integer; Default: 0. NUM_ROOTS (DETCI)¶DETCI — number of CI roots to find. Type: integer; Default: 1. OCC_ORBS_PRINT (DFOCC)¶DFOCC — Do print OCC orbital energies?. Type: boolean,MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:178245,Availability,avail,available,178245,SPONSE — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 5. NUM_AMPS_PRINT (DETCI)¶DETCI — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. NUM_CORE_ORBITALS (ADC)¶ADC — Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. NUM_DETS_PRINT (DETCI)¶DETCI — Number of important determinants to print. Type: integer; Default: 20. NUM_FROZEN_DOCC (GLOBALS)¶GLOBALS — The number of core orbitals to freeze in later correlated computations. This trumps FREEZE_CORE. Type: integer; Default: 0. NUM_FROZEN_UOCC (GLOBALS)¶GLOBALS — The number of virtual orbitals to freeze in later correlated computations. Type: integer; Default: 0. NUM_GUESSES (ADC)¶ADC — Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. NUM_INIT_VECS (DETCI)¶DETCI (Expert) — The number of initial vectors to use in the CI iterative procedure. Defaults to the number of roots. Type: integer; Default: 0. NUM_ROOTS (DETCI)¶DETCI — number of CI roots to find. Type: integer; Default: 1. OCC_ORBS_PRINT (DFOCC)¶DFOCC — Do print OCC orbital energies?. Type: boolean; Default: false. OCC_ORBS_PRINT (OCC)¶OCC — Do print OCC orbital energies?. Type: boolean; Default: false. OCC_PERCENTAGE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE. Type: double; Default: 99.0. OCC_TOLERANCE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE w,MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:179692,Availability,avail,available,179692,"?. Type: boolean; Default: false. OCC_PERCENTAGE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE. Type: double; Default: 99.0. OCC_TOLERANCE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. OCC_TOLERANCE (SAPT)¶SAPT — Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. ODC_GUESS (DCT)¶DCT — Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OEPROP (DFOCC)¶DFOCC — Do compute one electron properties?. Type: boolean; Default: false. OEPROP (OCC)¶OCC — Do compute one electron properties?. Type: boolean; Default: false. OFFDIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the off-diagonal corrections in (T) computations?. Type: boolean; Default: true. OMEGA (CCRESPONSE)¶CCRESPONSE — Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. OMEGA_ERF (MINTS)¶MINTS — Omega scaling for Erf and Erfc. Type: double; Default: 0.20. ONEPDM (CCDENSITY)¶CCDENSITY — Do compute one-particle density matrix?. Type: boolean; Default: false. ONEPDM (DFMP2)¶DFMP2 — Do compute one-particle density ma",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:182130,Availability,redundant,redundant,182130,"Type: double; Default: 0.1. ONEPOT_GRID_READ (SCF)¶SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC)¶DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DCT)¶DCT — Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orb",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:182381,Availability,avail,available,182381,"pute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:184952,Availability,avail,available,184952,"tion. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCT)¶DCT (Expert) — The shift applied to the denominator in the orbital update iterations. Type: double; Default: 0.0. ORBITALS_WRITE (SCF)¶SCF — File name (case sensitive) to which to serialize Wavefunction orbital data. Type: string; Default: No Default. ORTH_TYPE (DFOCC)¶DFOCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. ORTH_TYPE (OCC)¶OCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. OS_SCALE (OCC)¶OCC — A custom scaling parameter for opposite-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. OVERLAP_CHECK (CCEOM)¶CCEOM — Report overlaps with old excited-state wave functions, if available, and store current wave functions for later use. Type: boolean; Default: false. P (THERMO)¶THERMO — Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. PAIR_ENERGIES_PRINT (CCENERGY)¶CCENERGY — Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. PARALLEL (SCF)¶SCF (Expert) — Do run in parallel?. Type: boolean; Default: false. PARENT_SYMMETRY (GLOBALS)¶GLOBALS (Expert) — For displacements, symmetry (Schoenflies symbol) of ‘parent’ (undisplaced) reference molecule. Internal use only for finite difference. Type: string; Default: No Default. PCG_BETA_TYPE (DFOCC)¶DFOCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_BETA_TYPE (OCC)¶OCC — Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere). Type: string; Possible Values: FLETCHER_REEVES, P",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:187453,Availability,error,error,187453,"pe: conv double; Default: 1e-6. PCG_MAXITER (DFOCC)¶DFOCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 50. PCG_MAXITER (OCC)¶OCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 30. PCM (GLOBALS)¶GLOBALS — PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_CC_TYPE (PCM)¶PCM — PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. PCM_SCF_TYPE (PCM)¶PCM (Expert) — Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCMSOLVER_PARSED_FNAME (PCM)¶PCM (Expert) — Name of the PCMSolver input file as parsed by pcmsolver.py. Type: string; Default: No Default. PE (GLOBALS)¶GLOBALS — PE boolean for polarizable embedding module. Type: boolean; Default: false. PE_ECP (PE)¶PE — use PE(ECP) repulsive potentials. Type: boolean; Default: false. PERTURB_CBS (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: false. PERTURB_CBS_COUPLING (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. PERTURB_DIPOLE (SCF)¶SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF)¶SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI)¶DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = H_0 + z H_1\). Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF)¶SCF — Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH (SCF)¶SCF — The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:187569,Availability,error,error,187569,"ations. Type: integer; Default: 50. PCG_MAXITER (OCC)¶OCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 30. PCM (GLOBALS)¶GLOBALS — PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_CC_TYPE (PCM)¶PCM — PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. PCM_SCF_TYPE (PCM)¶PCM (Expert) — Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCMSOLVER_PARSED_FNAME (PCM)¶PCM (Expert) — Name of the PCMSolver input file as parsed by pcmsolver.py. Type: string; Default: No Default. PE (GLOBALS)¶GLOBALS — PE boolean for polarizable embedding module. Type: boolean; Default: false. PE_ECP (PE)¶PE — use PE(ECP) repulsive potentials. Type: boolean; Default: false. PERTURB_CBS (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: false. PERTURB_CBS_COUPLING (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. PERTURB_DIPOLE (SCF)¶SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF)¶SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI)¶DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = H_0 + z H_1\). Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF)¶SCF — Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH (SCF)¶SCF — The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS (SCF)¶SCF — Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:189297,Availability,avail,available,189297,"f the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS (SCF)¶SCF — Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. PK_ALGO (SCF)¶SCF (Expert) — Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF)¶SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF)¶SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF)¶SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. POINTS (FINDIF)¶FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC)¶ADC — Maximum iteration number in pole searching. This option is only available for the built-in ADC backend. Type: integer; Default: 20. POTFILE (PE)¶PE — Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; Default: potfile.pot. PPL_TYPE (DFOCC)¶DFOCC — Type of the CCSD PPL term. Type: string; Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO; Default: AUTO. PR (ADC)¶ADC — Do use the partial renormalization scheme for the ground state wavefunction? * This option is only available for the built-in ADC backend. Type: boolean; Default: false. PRECONDITIONER (DETCI)¶DETCI — This specifies the type of preconditioner to use in the selected diagonalization method. The valid options are: DAVIDSON which approximates the Hamiltonian matrix by the diagonal elements; H0BLOCK_INV which uses an exact Hamiltonian of H0_BLOCKSIZE and explicitly inverts it; GEN_DAVIDSON which does a spectral decomposition of H0BLOCK; ITER_INV using an iterative approach to obtain the correction vector of H0BLOCK. The H0BLOCK_INV, GEN_DAVIDSON, ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:189755,Availability,avail,available,189755,"ORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF)¶SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF)¶SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF)¶SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. POINTS (FINDIF)¶FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC)¶ADC — Maximum iteration number in pole searching. This option is only available for the built-in ADC backend. Type: integer; Default: 20. POTFILE (PE)¶PE — Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; Default: potfile.pot. PPL_TYPE (DFOCC)¶DFOCC — Type of the CCSD PPL term. Type: string; Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO; Default: AUTO. PR (ADC)¶ADC — Do use the partial renormalization scheme for the ground state wavefunction? * This option is only available for the built-in ADC backend. Type: boolean; Default: false. PRECONDITIONER (DETCI)¶DETCI — This specifies the type of preconditioner to use in the selected diagonalization method. The valid options are: DAVIDSON which approximates the Hamiltonian matrix by the diagonal elements; H0BLOCK_INV which uses an exact Hamiltonian of H0_BLOCKSIZE and explicitly inverts it; GEN_DAVIDSON which does a spectral decomposition of H0BLOCK; ITER_INV using an iterative approach to obtain the correction vector of H0BLOCK. The H0BLOCK_INV, GEN_DAVIDSON, and ITER_INV approaches are all formally equivalent but the ITER_INV is less computationally expensive. Default is DAVIDSON. Type: string; Possible Values: LANCZOS, DAVIDSON, GEN_DAVIDSON, H0BLOCK, ITER_INV, EVANGELISTI; Default: DAVIDSON. PRINT (CPHF)¶CPHF — The amount of information printed to the output file. Type: integer; Default: 1. PRINT (EFP)¶EFP — The amount of information printed to the output file",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:196748,Availability,error,error,196748,"efault: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA)¶CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE)¶CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC)¶FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC)¶OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF)¶SCF — Number of radial grid points for spherical potential integration. Type: integer; Default: 100. RADIUS (SCF)¶SCF — Radius (bohr) of a hard-sphere external potential. Type: double",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:196903,Availability,error,error,196903,"c default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA)¶CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE)¶CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC)¶FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC)¶OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF)¶SCF — Number of radial grid points for spherical potential integration. Type: integer; Default: 100. RADIUS (SCF)¶SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; D",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:207385,Availability,redundant,redundant,207385,")¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF)¶SCF (Expert) — SAD guess density decomposition threshold. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF density in the SAD guess, analogous to D_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF)¶SCF — Convergence crit",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:212288,Availability,avail,available,212288,"nomer B GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_MP2_DISP_ALG (SAPT)¶SAPT (Expert) — Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; Default: false. SAVE_JK (SCF)¶SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF)¶SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR (SCF)¶SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_PROPERTIES (SCF)¶SCF — SCF Properties to calculate after an energy evaluation. Note, this keyword is not used for property evaluations. Type: array; Default: No Default. SCF_TYPE (CPHF)¶CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCF_TYPE (GLOBALS)¶GLOBALS — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calcul",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:215020,Availability,avail,available,215020,"false. SCS_CEPA (FNOCC)¶FNOCC — Do SCS-CEPA? Note that the scaling factors will be identical to those for SCS-CCSD. Type: boolean; Default: false. SCS_MP2 (CCENERGY)¶CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_MP2 (FNOCC)¶FNOCC — Do SCS-MP2?. Type: boolean; Default: false. SCS_TYPE (DFOCC)¶DFOCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCS_TYPE (OCC)¶OCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCSN_MP2 (CCENERGY)¶CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SEKINO (CCLAMBDA)¶CCLAMBDA — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEKINO (CCRESPONSE)¶CCRESPONSE — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEM_MAXITER (ADC)¶ADC — Maximum iteration number in simultaneous expansion method. This option is only available for the built-in ADC backend. Type: integer; Default: 30. SEMICANONICAL (CCENERGY)¶CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCEOM)¶CCEOM — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCTRANSORT)¶CCTRANSORT — Force conversion of ROHF MOs to semicanonical MOs to run UHF-based energies. Type: boolean; Default: false. SEMICANONICAL (CCTRIPLES)¶CCTRIPLES — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SF_RESTRICT (DETCI)¶DETCI (Expert) — Do eliminate determinants not valid for spin-complete spin-flip CI’s? [see J. S. Sears et al, J. Chem. Phys. 118, 9084-9094 (2003)]. Type: boolean; Default: false. SIGMA_OVERLAP (DETCI)¶DETCI (Expert) — Do print the sigma overlap matrix? Not generally useful. Type: boolean; Default: false. SINGLES_PRINT (CCEOM)¶CCEOM — Do print information on the iterative solution to the single-excitation EOM-CC problem used as a guess to full EOM-CC?. Type",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:221995,Availability,toler,tolerance,221995," in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCT)¶DCT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCT)¶DCT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING)¶OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SUMMATION_FIELDS (PE)¶PE — Summation scheme for field computations, can be direct or fmm. Type: string; Possible Values: DIRECT, FMM; Default: DIRECT. SYMM_TOL (OPTKING)¶OPTKING — Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. SYMMETRIZE (OCC)¶OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO)¶THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY)¶CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY)¶CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM)¶CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR)¶CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDM (DETCI)¶DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:227763,Availability,avail,available,227763,"Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. TRANSLATE_PSI4 (CFOUR)¶CFOUR — Do translate set Psi4 options to their cfour counterparts. Type: boolean; Default: true. TREE_EXPANSION_ORDER (PE)¶PE — Expansion order of the multipoles for FMM. Type: integer; Default: 5. TREE_THETA (PE)¶PE — Opening angle theta. Type: double; Default: 0.5. TRIPLES_ALGORITHM (PSIMRCC)¶PSIMRCC — The type of algorithm to use for (T) computations. Type: string; Possible Values: SPIN_ADAPTED, RESTRICTED, UNRESTRICTED; Default: RESTRICTED. TRIPLES_DIIS (PSIMRCC)¶PSIMRCC — Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. TRIPLES_IABC_TYPE (DFOCC)¶DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC)¶FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. TURN_ON_ACTV (MCSCF)¶MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF)¶SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UPDATE (DETCI)¶DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC)¶FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC)¶PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC)¶PSIMRCC (Expert) — Whether to use spin",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:1989,Deployability,update,updates,1989," irrep (in Cotton order) so a user can specify the number of retained natural orbitals rather than determining them with OCC_TOLERANCE. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING)¶OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: true. AEL (CCDENSITY)¶CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT)¶SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT)¶SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCT)¶DCT — Algorithm to use for the density cumulant and orbital updates in the DCT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: SIMULTANEOUS. ANALYZE (CCENERGY)¶CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE)¶CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY)¶CCDENSITY — The algorithm to use for the \(\left\langle VV||VV\right \rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY)¶CCENERGY (Expert) — The algorithm to use for the \(\left\langle VV||VV\right\rangle\) terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:11803,Deployability,release,release,11803,"CC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING)¶OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI)¶DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM)¶CCEOM — Do turn on root following for CC3. Type: boolean; Default: false. CC_A_RAS3_MAX (DETCI)¶DETCI — maximum number of alpha electrons in RAS III, for CC. Type: int",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:16305,Deployability,update,update,16305,". Type: double; Default: 1.27. CC_RAS34_MAX (DETCI)¶DETCI — maximum number of electrons in RAS III + IV, for CC. Type: integer; Default: -1. CC_RAS3_MAX (DETCI)¶DETCI — maximum number of electrons in RAS III, for CC. Type: integer; Default: -1. CC_RAS4_MAX (DETCI)¶DETCI — maximum number of electrons in RAS IV, for CC. Type: integer; Default: -1. CC_SCALE_OS (FNOCC)¶FNOCC — Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. CC_SS_SCALE (CCENERGY)¶CCENERGY — Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. CC_TIMINGS (FNOCC)¶FNOCC — Do time each cc diagram?. Type: boolean; Default: false. CC_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI)¶DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI)¶DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI)¶DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI)¶DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI)¶DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:17584,Deployability,configurat,configurations,17584,"e variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI)¶DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI)¶DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\r",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:22693,Deployability,release,release,22693,"ests calculation of only those cubic constants of the form \(\phi_{nij}\), where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are not sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (i.e. HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form \(\phi_{ijkl}\), which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR)¶CFOUR — Can be used to control the algorithm used by CFOUR when terms involving \(\langle ab||cd\rangle\) molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:26646,Deployability,continuous,continuous,26646,": 10. CFOUR_CALC_LEVEL (CFOUR)¶CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. CFOUR_CC_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR)¶CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR)¶CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kalla",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:50527,Deployability,integrat,integration,50527,"ion where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR)¶CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR)¶CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR)¶CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:66356,Deployability,release,release,66356,"rnal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR)¶CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR)¶CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR)¶CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orb",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:66456,Deployability,release,release,66456,"rnal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR)¶CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR)¶CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR)¶CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orb",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:70819,Deployability,configurat,configurational,70819,"etrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR)¶CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR)¶CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR)¶CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR)¶CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin contribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-orbit corrections), SF-DPT6 (scalar-relativistic part of sixth-order direct perturbation theory), SFREE (spin-free treatment), X2C1E (spin-free X2C-1e treatment), or DPT (synonym with DPT2). Type:",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:82897,Deployability,update,update,82897,"ce. Type: string; Possible Values: SIMULTANEOUS, SEQUENTIAL; Default: SIMULTANEOUS. CFOUR_UIJ_THRESHOLD (CFOUR)¶CFOUR — Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR)¶CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR)¶CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR)¶CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:83027,Deployability,update,updates,83027,"es the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR)¶CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR)¶CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR)¶CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTR",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:94277,Deployability,update,update,94277,"ee Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMP_INDUCED (PE)¶PE — Enable Thole damping for induced moments. Type: boolean; Default: false. DAMP_MULTIPOLE (PE)¶PE — Enable Thole damping for multipole fields. Type: boolean; Default: false. DAMPING_CONVERGENCE (SCF)¶SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_FACTOR_INDUCED (PE)¶PE — Thole damping factor for induced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE (PE)¶PE — Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:94319,Deployability,update,update,94319,"ee Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMP_INDUCED (PE)¶PE — Enable Thole damping for induced moments. Type: boolean; Default: false. DAMP_MULTIPOLE (PE)¶PE — Enable Thole damping for multipole fields. Type: boolean; Default: false. DAMPING_CONVERGENCE (SCF)¶SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_FACTOR_INDUCED (PE)¶PE — Thole damping factor for induced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE (PE)¶PE — Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:94357,Deployability,update,update,94357,"ee Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMP_INDUCED (PE)¶PE — Enable Thole damping for induced moments. Type: boolean; Default: false. DAMP_MULTIPOLE (PE)¶PE — Enable Thole damping for multipole fields. Type: boolean; Default: false. DAMPING_CONVERGENCE (SCF)¶SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_FACTOR_INDUCED (PE)¶PE — Thole damping factor for induced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE (PE)¶PE — Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:94674,Deployability,update,updates,94674," Type: boolean; Default: false. DAMPING_CONVERGENCE (SCF)¶SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_FACTOR_INDUCED (PE)¶PE — Thole damping factor for induced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE (PE)¶PE — Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCT_FUNCTIONAL (DCT)¶DCT — Chooses appropriate DCT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCT_GUESS (DCT)¶DCT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: s",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:94707,Deployability,update,update,94707,"reshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_FACTOR_INDUCED (PE)¶PE — Thole damping factor for induced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE (PE)¶PE — Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCT_FUNCTIONAL (DCT)¶DCT — Chooses appropriate DCT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCT_GUESS (DCT)¶DCT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algori",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:94745,Deployability,update,update,94745,"reshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_FACTOR_INDUCED (PE)¶PE — Thole damping factor for induced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE (PE)¶PE — Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCT_FUNCTIONAL (DCT)¶DCT — Chooses appropriate DCT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCT_GUESS (DCT)¶DCT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algori",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:95068,Deployability,update,updates,95068,"duced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE (PE)¶PE — Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCT_FUNCTIONAL (DCT)¶DCT — Chooses appropriate DCT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCT_GUESS (DCT)¶DCT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algorithm to use for the DCT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CCDENSITY)¶CCDENSITY — Reproducing energies from densities ?. Type: integer; Default: 0. DEBUG (CPHF)¶CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBA",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:95101,Deployability,update,update,95101,"amping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCT_FUNCTIONAL (DCT)¶DCT — Chooses appropriate DCT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCT_GUESS (DCT)¶DCT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algorithm to use for the DCT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CCDENSITY)¶CCDENSITY — Reproducing energies from densities ?. Type: integer; Default: 0. DEBUG (CPHF)¶CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS)¶GLOBALS (Expert) — The amount of information to print to the output file. Type: int",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:95139,Deployability,update,update,95139,"amping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF)¶SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCT_FUNCTIONAL (DCT)¶DCT — Chooses appropriate DCT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCT_GUESS (DCT)¶DCT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algorithm to use for the DCT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CCDENSITY)¶CCDENSITY — Reproducing energies from densities ?. Type: integer; Default: 0. DEBUG (CPHF)¶CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS)¶GLOBALS (Expert) — The amount of information to print to the output file. Type: int",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:105044,Deployability,integrat,integration,105044,"GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER prune based on decaying functions (experts only!). The recommended scheme is ROBUST. Type: string; Default: NONE. DFT_RADIAL_POINTS (SCF)¶SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:105149,Deployability,integrat,integration,105149,"y!). The recommended scheme is ROBUST. Type: string; Default: NONE. DFT_RADIAL_POINTS (SCF)¶SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:105295,Deployability,integrat,integration,105295,": integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGO",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:112444,Deployability,update,update,112444,"tive space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG)¶DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG)¶DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG)¶DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG)¶DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (DMRG)¶DMRG — Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG)¶DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG)¶DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG)¶DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG)¶DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG)¶DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG)¶DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG)¶DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG)¶DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG)¶DMRG — The noise prefactors for successive DMRG in",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:131873,Deployability,configurat,configuration,131873,"ALE (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI)¶DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root with the closest overlap. The user specifies arrays containing the absolute alpha string indices (A_i below), absolute beta indices (B_i below), and CI coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], …]. Type: array; Default: No Default. FORCE_RESTART (CCENERGY)¶CCENERGY (Expert) — Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. FORCE_TWOCON (MCSCF)¶MCSCF — Do attempt to force a two configuration solution by starting with CI coefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. FRAC_DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF)¶SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF)¶SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF)¶SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF)¶SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF)¶SCF — The occupations of the orbital indices specified above (\(0.0\le {\rm occ} \le 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING)¶OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary differen",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:142077,Deployability,update,update,142077,"trix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI)¶DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING)¶OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING)¶OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING)¶OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI)¶DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_K",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:143702,Deployability,update,update,143702,"rs. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC)¶PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC)¶DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING)¶OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING)¶OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING)¶OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF)¶FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:143889,Deployability,update,update,143889,"n back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC)¶PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC)¶DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING)¶OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING)¶OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING)¶OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF)¶FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI)¶DET",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:144032,Deployability,update,update,144032,"NINGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC)¶PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC)¶DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING)¶OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING)¶OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING)¶OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF)¶FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI)¶DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:144282,Deployability,update,update,144282,"FF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC)¶PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC)¶DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING)¶OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING)¶OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING)¶OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF)¶FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI)¶DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. INDUCED_CONVERGENCE (",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:144510,Deployability,update,update,144510,"?. Type: boolean; Default: false. HESS_TYPE (DFOCC)¶DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING)¶OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING)¶OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING)¶OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF)¶FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI)¶DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. INDUCED_CONVERGENCE (PE)¶PE — Threshold for induced moments convergence. Type: conv double; Default: 1e-8. INTCOS_GENERATE_EXIT (OPTKING)¶OPTKING — Do only generate the internal coordinates and then stop?. Type: ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:163430,Deployability,update,update,163430,"50. MAXITER (SCF)¶SCF — Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MBIS_D_CONVERGENCE (GLOBALS)¶GLOBALS — MBIS Convergence Criteria. Type: conv double; Default: 1.0e-8. MBIS_MAXITER (GLOBALS)¶GLOBALS — Maximum Number of MBIS Iterations. Type: integer; Default: 500. MBIS_PRUNING_SCHEME (GLOBALS)¶GLOBALS — Pruning scheme for MBIS Grid. Type: string; Default: ROBUST. MBIS_RADIAL_POINTS (GLOBALS)¶GLOBALS — MBIS Number of Radial Points. Type: integer; Default: 75. MBIS_SPHERICAL_POINTS (GLOBALS)¶GLOBALS — MBIS Number of Spherical Points. Type: integer; Default: 302. MCSCF_ALGORITHM (DETCI)¶DETCI — Convergence algorithm to utilize. Two-Step, Augmented Hessian, or One-Step. Defaults to TS for RASSCF. Type: string; Possible Values: TS, AH; Default: TS. MCSCF_CI_CLEANUP (DETCI)¶DETCI — Cleanup the CI info at the end of a run?. Type: boolean; Default: true. MCSCF_DIIS_ERROR_TYPE (DETCI)¶DETCI — DIIS error vector type either, the AO orbital gradient or the orbital rotation update matrix. Type: string; Possible Values: GRAD, UPDATE; Default: GRAD. MCSCF_DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation for TS convergence. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of DIIS vectors for TS convergence. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI)¶DETCI — Iteration to turn on DIIS for TS convergence. Type: integer; Default: 3. MCSCF_DPD_CLEANUP (DETCI)¶DETCI — Cleanup the DPD MCSCF object at the end of a run?. Type: boolean; Default: true. MCSCF_E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI)¶DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI)¶DETCI — Maximum value in the",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:184258,Deployability,update,update,184258,"ls?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC)¶OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCT)¶DCT (Expert) — The shift applied to the denominator in the orbital update iterations. Type: double; Default: 0.0. ORBITALS_WRITE (SCF)¶SCF — File name (case sensitive) to which to serialize Wavefunction orbital data. Type: string; Default: No Default. ORTH_TYPE (DFOCC)¶DFOCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. ORTH_TYPE (OCC)¶OCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. OS_SCALE (OCC)¶OCC — A custom scaling parameter for opposite-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. OVERLAP_CHECK (CCEOM)¶CCEOM — Report overlaps with old excited-state wave functions, if available, and store current wave functions for later use. Type: boolean; Default: false. P (THERMO)¶THERMO — Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. PAIR_ENERGIES_PRINT (CCENERGY)¶CCE",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:188526,Deployability,integrat,integration,188526,"alse. PERTURB_CBS_COUPLING (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. PERTURB_DIPOLE (SCF)¶SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF)¶SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI)¶DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = H_0 + z H_1\). Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF)¶SCF — Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH (SCF)¶SCF — The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS (SCF)¶SCF — Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. PK_ALGO (SCF)¶SCF (Expert) — Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF)¶SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF)¶SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF)¶SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. POINTS (FINDIF)¶FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC)¶ADC — Maximum iteration number in pole searching. This option is only available for the built-in ADC backend. Type: integer; Default: 20. POTFILE (PE)¶PE — Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:194869,Deployability,update,updates,194869,"CC)¶PSIMRCC — The type of perturbation theory computation to perform. Type: string; Default: SECOND_ORDER. PUREAM (GLOBALS)¶GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCT)¶DCT — Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP)¶EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI)¶DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:194894,Deployability,update,updated,194894,"CC)¶PSIMRCC — The type of perturbation theory computation to perform. Type: string; Default: SECOND_ORDER. PUREAM (GLOBALS)¶GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCT)¶DCT — Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP)¶EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI)¶DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:194993,Deployability,update,updated,194993,")¶GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCT)¶DCT — Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP)¶EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI)¶DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change)",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:196608,Deployability,update,updates,196608," I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA)¶CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE)¶CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC)¶FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC)¶OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF)¶SCF — Number of radial grid points for spherical poten",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:196712,Deployability,update,updates,196712,"efault: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA)¶CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE)¶CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC)¶FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC)¶OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF)¶SCF — Number of radial grid points for spherical potential integration. Type: integer; Default: 100. RADIUS (SCF)¶SCF — Radius (bohr) of a hard-sphere external potential. Type: double",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:197605,Deployability,integrat,integration,197605,"esidual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC)¶FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC)¶OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF)¶SCF — Number of radial grid points for spherical potential integration. Type: integer; Default: 100. RADIUS (SCF)¶SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS2 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS3 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS34_MAX (DETCI)¶DETCI — maximum number of electrons in RAS III + IV. Type: integer; Default: -1. RAS3_MAX (DETCI)¶DETCI — maximum number of electrons in RAS III. Type: integer; Default: -1. RAS4 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS4. Type: array; Default: No Default. RAS4_MAX (DETCI)¶DETCI — maximum number of electrons in RAS IV. Type: integer; Default: -1. READ_SCF_3INDEX (DFOCC)¶DFOCC — Do r",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:200720,Deployability,update,update,200720," TWOCON, MCSCF, GENERAL; Default: RHF. REFERENCE (SCF)¶SCF — Reference wavefunction type. Cfour Interface: Keyword translates into CFOUR_REFERENCE. Type: string; Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. REFERENCE_SYM (DETCI)¶DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC)¶DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC)¶DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS)¶GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCT)¶DCT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAXED (OCC)¶OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY)¶CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:201851,Deployability,update,updates,201851,"butions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY)¶CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE)¶CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI)¶DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM)¶CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:206579,Deployability,install,installation,206579,"CF)¶MCSCF (Expert) — For orbital rotations after convergence, number of the second orbital (1-based) to rotate. Type: integer; Default: 2. ROTATIONAL_SYMMETRY_NUMBER (THERMO)¶THERMO — Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING)¶OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC)¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\ran",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:211611,Deployability,integrat,integration,211611,"T_EXCH_DISP_SCALE_SCHEME (SAPT)¶SAPT — Scheme for approximating exchange-dispersion for SAPT-DFT. NONE Use unscaled Exch-Disp2,u . FIXED Use a fixed factor SAPT_DFT_EXCH_DISP_FIXED_SCALE to scale Exch-Disp2,u . DISP Use the ratio of Disp2,r and Disp2,u to scale Exch-Disp2,u . Type: string; Possible Values: NONE, FIXED, DISP; Default: DISP. SAPT_DFT_FUNCTIONAL (SAPT)¶SAPT (Expert) — Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION (SAPT)¶SAPT (Expert) — How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_GRAC_SHIFT_A (SAPT)¶SAPT — Monomer A GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_GRAC_SHIFT_B (SAPT)¶SAPT — Monomer B GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_MP2_DISP_ALG (SAPT)¶SAPT (Expert) — Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; D",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:211755,Deployability,integrat,integration,211755,"factor SAPT_DFT_EXCH_DISP_FIXED_SCALE to scale Exch-Disp2,u . DISP Use the ratio of Disp2,r and Disp2,u to scale Exch-Disp2,u . Type: string; Possible Values: NONE, FIXED, DISP; Default: DISP. SAPT_DFT_FUNCTIONAL (SAPT)¶SAPT (Expert) — Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION (SAPT)¶SAPT (Expert) — How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_GRAC_SHIFT_A (SAPT)¶SAPT — Monomer A GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_GRAC_SHIFT_B (SAPT)¶SAPT — Monomer B GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_MP2_DISP_ALG (SAPT)¶SAPT (Expert) — Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; Default: false. SAVE_JK (SCF)¶SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF)¶SCF — Save the UHF NOs. Type: boo",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:225207,Deployability,integrat,integration,225207,"ult: false. TDSCF_TDM_PRINT (SCF)¶SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC)¶PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF)¶SCF (Expert) — The tile size for the distribut",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:225777,Deployability,update,update,225777,"ts are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC)¶PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF)¶SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DETCI)¶DETCI (Expert) — Do compute two-particle density matrix if not otherwise required? Warning: This will hold 4 dense active TPDM’s in memory. Type: boolean; Default: false. TPDM_ABCD_TYPE (OCC)¶OCC — How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algorithm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:228095,Deployability,update,update,228095,"utations. Type: string; Possible Values: SPIN_ADAPTED, RESTRICTED, UNRESTRICTED; Default: RESTRICTED. TRIPLES_DIIS (PSIMRCC)¶PSIMRCC — Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. TRIPLES_IABC_TYPE (DFOCC)¶DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC)¶FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. TURN_ON_ACTV (MCSCF)¶MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF)¶SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UPDATE (DETCI)¶DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC)¶FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC)¶PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC)¶PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI)¶DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM)¶CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:228697,Deployability,configurat,configurations,228697,"d automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. TURN_ON_ACTV (MCSCF)¶MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF)¶SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UPDATE (DETCI)¶DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC)¶FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC)¶PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC)¶PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI)¶DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM)¶CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM)¶CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR)¶CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. WCOMBINE (SCF)¶SCF — combine omega exchange and Hartree–Fock exchange into one matrix for efficiency? Default is True for MemDFJK (itself the default for SCF_TYPE DF), False otherwise as not yet implemented. Type: boolean; Default: false. WFN (CCDENSITY)¶CCDENSITY (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (CCENERGY)¶CCENERGY (Expert) — Wavefuncti",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:232154,Deployability,update,updated,232154," Type: string; Default: SCF. WFN (DETCI)¶DETCI (Expert) — Wavefunction type. This should be set automatically from the calling Psithon function. Type: string; Possible Values: DETCI, CI, ZAPTN, DETCAS, CASSCF, RASSCF; Default: DETCI. WFN (GLOBALS)¶GLOBALS (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (SCF)¶SCF (Expert) — Wavefunction type. Type: string; Possible Values: SCF; Default: SCF. WFN_SYM (MCSCF)¶MCSCF — The symmetry of the SCF wavefunction. Type: string; Default: 1. WFN_SYM (PSIMRCC)¶PSIMRCC — The symmetry of the target wavefunction, specified either by Schönflies symbol, or irrep number (in Cotton ordering). Type: string; Default: 1. WFN_TYPE (DFOCC)¶DFOCC — Type of the wavefunction. Type: string; Default: DF-OMP2. WFN_TYPE (OCC)¶OCC — Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. WRITE_NOS (CCDENSITY)¶CCDENSITY — Do write natural orbitals (molden). Type: boolean; Default: false. WRITER_FILE_LABEL (GLOBALS)¶GLOBALS — Base filename for text files written by PSI, such as the MOLDEN output file, the Hessian file, the internal coordinate file, etc. Use the add_str_i function to make this string case sensitive. Type: string; Default: No Default. XI (CCDENSITY)¶CCDENSITY — Do compute Xi?. Type: boolean; Default: false. XI_CONNECT (CCDENSITY)¶CCDENSITY (Expert) — Do require \(\bar{H}\) and \(R\) to be connected?. Type: boolean; Default: false. ZERO_INTERNAL_AMPS (PSIMRCC)¶PSIMRCC — Do zero the internal amplitudes, i.e., those that map reference determinants onto each other?. Type: boolean; Default: true. ZETA (CCDENSITY)¶CCDENSITY — Do use zeta?. Type: boolean; Default: false. ZETA (CCLAMBDA)¶CCLAMBDA — Do use zeta?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; Keywords by Alpha. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:2008,Energy Efficiency,energy,energy,2008," irrep (in Cotton order) so a user can specify the number of retained natural orbitals rather than determining them with OCC_TOLERANCE. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING)¶OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: true. AEL (CCDENSITY)¶CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT)¶SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT)¶SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCT)¶DCT — Algorithm to use for the density cumulant and orbital updates in the DCT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: SIMULTANEOUS. ANALYZE (CCENERGY)¶CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE)¶CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY)¶CCDENSITY — The algorithm to use for the \(\left\langle VV||VV\right \rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY)¶CCENERGY (Expert) — The algorithm to use for the \(\left\langle VV||VV\right\rangle\) terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:2063,Energy Efficiency,efficient,efficient,2063,"TOLERANCE. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING)¶OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: true. AEL (CCDENSITY)¶CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT)¶SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT)¶SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCT)¶DCT — Algorithm to use for the density cumulant and orbital updates in the DCT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: SIMULTANEOUS. ANALYZE (CCENERGY)¶CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE)¶CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY)¶CCDENSITY — The algorithm to use for the \(\left\langle VV||VV\right \rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY)¶CCENERGY (Expert) — The algorithm to use for the \(\left\langle VV||VV\right\rangle\) terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should onl",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:4062,Energy Efficiency,reduce,reduces,4062,"ts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA)¶CCLAMBDA — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT)¶CCTRANSORT — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCT)¶DCT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\(\langle VV|| VV \rangle\)) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AUXILIARY_BOND_FACTOR (OPTKING)¶OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI)¶DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI)¶DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2)¶DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS)¶MINTS — Primary basis set. Available basis sets. Type: string; Poss",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:4116,Energy Efficiency,reduce,reduce,4116,"ts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA)¶CCLAMBDA — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT)¶CCTRANSORT — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCT)¶DCT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\(\langle VV|| VV \rangle\)) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AUXILIARY_BOND_FACTOR (OPTKING)¶OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI)¶DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI)¶DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2)¶DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS)¶MINTS — Primary basis set. Available basis sets. Type: string; Poss",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:4139,Energy Efficiency,energy,energy,4139,"ts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA)¶CCLAMBDA — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT)¶CCTRANSORT — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCT)¶DCT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\(\langle VV|| VV \rangle\)) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AUXILIARY_BOND_FACTOR (OPTKING)¶OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI)¶DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI)¶DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2)¶DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS)¶MINTS — Primary basis set. Available basis sets. Type: string; Poss",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:6855,Energy Efficiency,charge,charges,6855,"ult: No Default. BCCD_MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. BENCH (GLOBALS)¶GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI)¶DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BORDER (PE)¶PE — Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_N_REDIST (PE)¶PE — number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER (PE)¶PE — order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_REDIST_POL (PE)¶PE — redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. BORDER_RMIN (PE)¶PE — minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT (PE)¶PE — unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_TYPE (PE)¶PE — border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BRIANQC_ENABLE (GLOBALS)¶GLOBALS — Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC)¶FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:16589,Energy Efficiency,energy,energy,16589,"ETCI — maximum number of electrons in RAS IV, for CC. Type: integer; Default: -1. CC_SCALE_OS (FNOCC)¶FNOCC — Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. CC_SS_SCALE (CCENERGY)¶CCENERGY — Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. CC_TIMINGS (FNOCC)¶FNOCC — Do time each cc diagram?. Type: boolean; Default: false. CC_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI)¶DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI)¶DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI)¶DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI)¶DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI)¶DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:17176,Energy Efficiency,energy,energy,17176,"s. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI)¶DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI)¶DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI)¶DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI)¶DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI)¶DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:18612,Energy Efficiency,reduce,reduces,18612,"lude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR)¶CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR)¶CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:18767,Energy Efficiency,energy,energy,18767,"le; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR)¶CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR)¶CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations be",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:18819,Energy Efficiency,energy,energy,18819,"le; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR)¶CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR)¶CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations be",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:20574,Energy Efficiency,reduce,reduced,20574,"LQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in “parallel” (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. CFOUR_ANH_DERIVATIVES (CFOUR)¶CFOUR — Specifies whether the anharmonic force field is calculated using analytic gradients (=FIRST) or analytic Hessians (=SECOND). Type: string; Possible Values: FIRST, SECOND; Default: SECOND. CFOUR_ANH_STEPSIZE (CFOUR)¶CFOUR — Controls the stepsize used in anharmonic force field calculations. The value is specified in reduced normal coordinates, which are dimensionless. The actual stepsize used in the calculation is \(\times 10^6\) the integer value specified. Type: integer; Default: 50000. CFOUR_ANH_SYMMETRY (CFOUR)¶CFOUR — Specifies whether non-abelian symmetry is to be exploited in determining displacements for CFOUR_ANHARMONIC =VIBROT or VPT2 calculations. If set to NONABELIAN (=0), maximum advantage will be taken of symmetry and the full set of cubic force constants will be generated from a skeleton set by application of the totally symmetric projection operator. If set to ABELIAN (=1), only the operations of the abelian subgroup will be exploited. Note: It is important to point out that the symmetrization currently works only for cubic constants. Therefore, if you require quartic force constants (for frequency calculations), you must use the ABELIAN option. Moreover, the latter work for only asymmetric tops and linear molecules. Type: string; Possible Values: ABELIAN, NONABELIAN; Default: ABELIAN. CFOUR_AN",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:22504,Energy Efficiency,energy,energy,22504,"if you require quartic force constants (for frequency calculations), you must use the ABELIAN option. Moreover, the latter work for only asymmetric tops and linear molecules. Type: string; Possible Values: ABELIAN, NONABELIAN; Default: ABELIAN. CFOUR_ANHARMONIC (CFOUR)¶CFOUR — Specifies treatment of anharmonic effects by calculating cubic and/or quartic force fields. VIBROT (=3) requests calculation of only those cubic constants of the form \(\phi_{nij}\), where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are not sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (i.e. HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form \(\phi_{ijkl}\), which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR)¶CFOUR — Can be used to control the algorithm used by CFOUR when terms involving \(\langle ab||cd\rangle\) molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectori",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:23525,Energy Efficiency,reduce,reduced,23525,"s of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR)¶CFOUR — Can be used to control the algorithm used by CFOUR when terms involving \(\langle ab||cd\rangle\) molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e.g., IBM-RS6000, HP-735, SGI-Indigo, DEC alphastations)). SPARSE_AO (=2) uses a sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR)¶C",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:24124,Energy Efficiency,reduce,reduced,24124,"ulated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e.g., IBM-RS6000, HP-735, SGI-Indigo, DEC alphastations)). SPARSE_AO (=2) uses a sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR)¶CFOUR — Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR)¶CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR)¶CFOUR — experimen",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:25780,Energy Efficiency,energy,energy,25780,"is (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR)¶CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR)¶CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR)¶CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR)¶CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. CFOUR_CC_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR)¶CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best resu",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:28126,Energy Efficiency,energy,energy,28126,"ns are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR)¶CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction sche",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:28167,Energy Efficiency,energy,energy,28167,"ns are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR)¶CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction sche",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:28360,Energy Efficiency,charge,charge,28360,"T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR)¶CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral prog",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:31852,Energy Efficiency,energy,energy,31852," array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR)¶CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR)¶CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZE",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:32239,Energy Efficiency,energy,energy,32239,"s. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR)¶CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR)¶CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:32711,Energy Efficiency,energy,energy,32711,"able, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR)¶CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 I",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:33247,Energy Efficiency,energy,energy,33247,"ot energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR)¶CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63,64]. Type: array; Default: No Default. CFOUR_ECP (CFOUR)¶CFOUR — Specifies whether effective core potentials (pseudopotentials) are used (ON, =1) or not (OFF, =0). Type: boolean; Default: false. CFOUR_EIGENVECTOR (CFOUR)¶CFOUR — Specifies which eigenvector of the totally symmetric part of the block-factored Hessian is to be followed uphill in a transition state search. Eigenvectors are indexed by their eigenvalues – t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:33294,Energy Efficiency,energy,energy,33294,"ot energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR)¶CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63,64]. Type: array; Default: No Default. CFOUR_ECP (CFOUR)¶CFOUR — Specifies whether effective core potentials (pseudopotentials) are used (ON, =1) or not (OFF, =0). Type: boolean; Default: false. CFOUR_EIGENVECTOR (CFOUR)¶CFOUR — Specifies which eigenvector of the totally symmetric part of the block-factored Hessian is to be followed uphill in a transition state search. Eigenvectors are indexed by their eigenvalues – t",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:36424,Energy Efficiency,energy,energy,36424,"UR — Specifies the threshold used in converging CC-LR/EOM-CC calculations. The iterative diagonalization is continued until the RMS residual falls below \(10^{-N}\) with \(N\) as the value specified with this keyword. Type: integer; Default: 5. CFOUR_ESTATE_MAXCYC (CFOUR)¶CFOUR — The maximum number of expansion vectors used in the solution of EOMCC equations (Default: 20, hard-coded to 4 in triples calculations). Type: integer; Default: 20. CFOUR_ESTATE_PROP (CFOUR)¶CFOUR — This keyword applies only to EOM-CC calculations and specifies whether any excited or ionized state one-electron properties are to be calculated. Proper use of this keyword requires a relatively advanced knowledge of quantum chemistry and the available options are discussed here. The options are: OFF (=0) [no properties or transition moments are calculated]; EXPECTATION (=1) [transition moments and dipole strengths are calculated along with selected one-electron properties which are evaluated as expectation values]; UNRELAXED (=2) [selected one-electron properties are calculated in an approximation that neglects relaxation of molecular orbitals]; RESPONSE (=3) [selected one-electron properties are calculated as analytic first derivatives of the energy]. Except for EOMCC calculations on two-electron systems (which are exact), properties obtained by the three approaches will not be equivalent. The default value for this keyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF. Type: string; Possible Values: OFF, EXPECTATION, UNRELAXED, RESPONSE; Default: No Default. CFOUR_ES",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:42877,Energy Efficiency,adapt,adapted,42877,"hes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR)¶CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR)¶CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR)¶CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:43080,Energy Efficiency,energy,energy,43080,"sentations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR)¶CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR)¶CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR)¶CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR)¶CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 by",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:43664,Energy Efficiency,adapt,adapted,43664," desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR)¶CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR)¶CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR)¶CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR)¶CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR)¶CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are split, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR)¶CFOUR — Specifies the field strength for a perturbation (defin",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:46003,Energy Efficiency,energy,energy,46003,"constructs the matrix directly from the basis function integrals. In general, PK is somewhat faster, but results in considerable use of disk space when out-of-core algorithms are required. (Default: FOCK). Type: string; Possible Values: PK, AO; Default: No Default. CFOUR_FREQ_ALGORITHM (CFOUR)¶CFOUR — FREQ_ALGORIT experimental use. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. CFOUR_FROZEN_CORE (CFOUR)¶CFOUR — Specifies whether in the correlation treatment all electron (OFF =0) or only the valence electrons (ON =1) are considered. This keyword provides an alternative to the CFOUR_DROPMO keyword, as it allows frozen-core calculation without explicitly specifying the corresponding inner-shell orbitals. Type: boolean; Default: false. CFOUR_FROZEN_VIRT (CFOUR)¶CFOUR — Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energy needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR)¶CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR)¶CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in th",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:49544,Energy Efficiency,efficient,efficient,49544,"mber of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:49655,Energy Efficiency,energy,energy,49655,"mber of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:49744,Energy Efficiency,energy,energy,49744,"y optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR)¶CFOUR — Where the initial ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:52049,Energy Efficiency,reduce,reduce,52049,"CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR)¶CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR)¶CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:52782,Energy Efficiency,energy,energy,52782,"icular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR)¶CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR)¶CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR)¶CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (C",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:52818,Energy Efficiency,energy,energy,52818,"icular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR)¶CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR)¶CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR)¶CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (C",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:56542,Energy Efficiency,efficient,efficient,56542," core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR)¶CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR)¶CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:58795,Energy Efficiency,energy,energy,58795,"ATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR)¶CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR)¶CFOUR — Specifies the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducib",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:58940,Energy Efficiency,energy,energy,58940,"ive eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR)¶CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR)¶CFOUR — Specifies the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the ref",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:60904,Energy Efficiency,energy,energy,60904,"mmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the \(\alpha\) and \(\beta\) sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the \(^2A_1\) water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR)¶CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-re",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:62028,Energy Efficiency,adapt,adapted,62028,"lution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR)¶CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The two-determinant CC method for open-shell singlet states can be activated by TD-CC (=8). Type: string; Possible Values: SPIN-ORBITAL, SR-CC, PSA-CC_FULL, SR-CC_FULL, TD-CC; Default: SPIN-ORBITAL. CFOUR_OPT_MAXCYC (CFOUR)¶CFOUR — Identical to CFOUR_GEO_MAXCYC. Type: integer; Default: 50. CFOUR_ORBITALS (CFOUR)¶CFOUR — Specifies the type of molecular orbitals used in post-HF calculations. STANDARD (=0) requests usage of the orbitals (from a corresponding HF-SCF calculation) without any modification. These are in the case of RHF/UHF the usual canonical HF orbitals a",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:63896,Energy Efficiency,energy,energy,63896," case of RHF/UHF the usual canonical HF orbitals and in the case of ROHF calculations the standard ROHF-orbitals with equal spatial parts for both the \(\alpha\) and the \(\beta\) spin orbitals. SEMICANONICAL (=1) forces in ROHF type calculations a transformation to so-called semicanonical orbitals which diagonalize the occupied-occupied and virtual-virtual blocks of the usual Fock-matrices. The use of semicanonical orbitals is, for example, required for ROHF-CCSD(T) calculations and for those calculations also automatically set. LOCAL requests a localization of the HF orbitals and this is currently done according to the Pipek-Mezey localization criterion. Note that it is strongly recommended not to use this keyword unless you know what are you doing. Default: STANDARD except for ROHF-CCSD(T) and ROHF-MP4 calculations for which SEMICANONICAL is the default. Type: string; Possible Values: STANDARD, SEMICANONICAL; Default: STANDARD. CFOUR_PERT_ORB (CFOUR)¶CFOUR — Specifies the type of perturbed orbitals used in energy derivative calculations. STANDARD means that the gradient formulation assumes that the perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal. CANONICAL means that the perturbed orbitals are assumed to be canonical. This keyword is set automatically to CANONICAL in derivative calculations with methods which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T] and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL requests a canonical perturbed-orbital treatment only for the occupied-occupied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:65476,Energy Efficiency,energy,energy,65476,"ied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR)¶CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR)¶CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, which includes some useful information such as SCF eigenvectors, Fock matrix elements, etc. Type: integer; Default: 0. CFOUR_PROP_INTEGRAL (CFOUR)¶CFOUR — Allows storage of property integrals computed in xvdint on internal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR)¶CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release rep",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:65487,Energy Efficiency,energy,energy,65487,"ied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR)¶CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR)¶CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, which includes some useful information such as SCF eigenvectors, Fock matrix elements, etc. Type: integer; Default: 0. CFOUR_PROP_INTEGRAL (CFOUR)¶CFOUR — Allows storage of property integrals computed in xvdint on internal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR)¶CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release rep",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:73702,Energy Efficiency,energy,energy,73702,"ant matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR)¶CFOUR — Offers the possibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR)¶CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> UHF stabilities leads to a UHF solution. To converge the SCF roots associated with such instabilities, one must run the calculation in reduced symmetry and as a closed-shell UHF case, respectively. Value n directs the program to follow the vector associated with the nth lowest eigenvalue having the proper symmetry (totally symmetric) and spin (RHF–>RHF or UHF–>UHF) properties. 0 means use the lowest eigenvalue. Type: integer; Default: 0. CFOUR_SAVE_INTS (CFOUR)¶CFOUR — Tells CFOUR whether to delete large files (AO integrals and MOINTS file for now) when they are no longer needed. OFF (=0) They will not be saved, ON (=1) they will be saved. Type: boolean",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:74101,Energy Efficiency,reduce,reduced,74101,"sibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR)¶CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> UHF stabilities leads to a UHF solution. To converge the SCF roots associated with such instabilities, one must run the calculation in reduced symmetry and as a closed-shell UHF case, respectively. Value n directs the program to follow the vector associated with the nth lowest eigenvalue having the proper symmetry (totally symmetric) and spin (RHF–>RHF or UHF–>UHF) properties. 0 means use the lowest eigenvalue. Type: integer; Default: 0. CFOUR_SAVE_INTS (CFOUR)¶CFOUR — Tells CFOUR whether to delete large files (AO integrals and MOINTS file for now) when they are no longer needed. OFF (=0) They will not be saved, ON (=1) they will be saved. Type: boolean; Default: false. CFOUR_SCALE_ON (CFOUR)¶CFOUR — Controls whether step scaling is based on the absolute step length (1-norm) (=0 or MAG(S)) or the largest individual step in the internal coordinate space (=1 or MAX(S)). Type: string; Possible Values: MAG(S), MAX(S); Default: MAG(S). CFOUR_SCF_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for the HF-SCF equations. Equations are considered converged when the maximum change in density matrix elem",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:77396,Energy Efficiency,energy,energy,77396,"terface: Keyword subject to translation from value of MAXITER unless set explicitly. Type: integer; Default: 150. CFOUR_SD_FIELD (CFOUR)¶CFOUR — Specifies the strength of a spin-dipole perturbation as required for finite-field calculations of the SD contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the SD strength used by the program will be the value of the keyword \(\times 10^{-6}\). (Default : 0, currently not implemented). Type: integer; Default: 0. CFOUR_SPHERICAL (CFOUR)¶CFOUR — Specifies whether spherical harmonic (5d, 7f, 9g, etc.) or Cartesian (6d, 10f, 15g, etc.) basis functions are to be used. ON (= 1) uses spherical harmonics, OFF (= 0) uses Cartesians. Psi4 Interface: Keyword set according to basis design when BASIS is used instead of CFOUR_BASIS. Keyword subject to translation from value of PUREAM unless set explicitly. Type: boolean; Default: true. CFOUR_SPIN_FLIP (CFOUR)¶CFOUR — Controls whether excitation energy calculations allow for a “spin flip” which changes the \(M_s\) quantum number. Such calculations have some advantages for biradicals and are currently implemented (together with gradients) for CIS and CIS(D) calculations. Options are OFF and ON. Type: boolean; Default: false. CFOUR_SPIN_ORBIT (CFOUR)¶CFOUR — Experimental Use! ON (=1) requests calculation of one-electron spin-orbit integrals. MEANSO additionally gives a mean-field treatment of the two-electron terms (spin-orbit mean field treatment as described Mol. Phys. 98, 1823-1833 (2000)). Type: string; Possible Values: ON, MEANSO, OFF; Default: OFF. CFOUR_SPIN_SCAL (CFOUR)¶CFOUR — ON (=1) requests the spin-component scaled variant of the MP2 approach. This keyword has only an effect when CFOUR_CALC_LEVEL =MP2 is specified and must be used together with CFOUR_REFERENCE =UHF. Type: boolean; Default: false. CFOUR_SPINROTATION (CFOUR)¶CFOUR — Specifies whether nuclear spin-rotation tensors are computed within a NMR chemical shift calculati",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:79893,Energy Efficiency,energy,energy,79893,"ing CFOUR_SYMMETRY =OFF in the input. The DEFAULT option (which is the default) uses the highest order Abelian subgroup. Type: string; Possible Values: DEFAULT, C1, C2, CS, CI, C2V, C2H, D2, D2H, OFF; Default: DEFAULT. CFOUR_SYM_CHECK (CFOUR)¶CFOUR — In principle can be used to force the SCF to converge a solution for which the density matrix transforms as the totally symmetric representation of the point group (i.e. no broken symmetry solutions). The code seems to work in most cases, but has currently been implemented for point groups with E type representation and not for those with triply-, quadruply- or pentuply-degenerate representations. Extending the code to those cases is probably straightforward, and the reader is encouraged to do so if (s)he is so inclined. SYM_CHECK=0 “forces” the high-symmetry solution. SYM_CHECK=OVERRIDE (=1) doesn’t. The latter is the default. Type: boolean; Default: true. CFOUR_SYMMETRY (CFOUR)¶CFOUR — Specifies what subgroup of the full point group is to be used in the energy and/or gradient calculation (the computational point group). OFF (=1) forces a no symmetry run (in \(C_1\) ) and ON (=0) runs the calculation in the largest self-adjoint subgroup ( \(D_{2h}\) and its subgroups). Type: boolean; Default: true. CFOUR_T3_EXTRAPOL (CFOUR)¶CFOUR — Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module xecc. Type: boolean; Default: false. CFOUR_TAMP_SUM (CFOUR)¶CFOUR — Specifies how often the largest \(t\) amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc. Type: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR)¶CFOUR",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:83619,Energy Efficiency,adapt,adapted,83619,"eloper version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR)¶CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR)¶CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR)¶CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTRAN (CFOUR)¶CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR)¶C",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:88710,Energy Efficiency,charge,charge,88710,"help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. COMPLEX_TOLERANCE (CCEOM)¶CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC)¶DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC)¶PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT)¶SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. COUPLING (PSIMRCC)¶PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC)¶PSIMRCC — Do include the terms that couple the reference dete",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:89380,Energy Efficiency,energy,energy,89380,"t: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC)¶PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT)¶SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. COUPLING (PSIMRCC)¶PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC)¶PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING)¶OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF)¶CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF)¶CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS)¶GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (G",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:90590,Energy Efficiency,adapt,adaptive,90590,"es: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC)¶PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING)¶OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF)¶CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF)¶CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS)¶GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (GLOBALS)¶GLOBALS — Directory to which to write cube files. Default is the input file directory. Type: string; Default: No Default. CUBEPROP_ISOCONTOUR_THRESHOLD (GLOBALS)¶GLOBALS — Fraction of density captured by adaptive isocontour values. Type: double; Default: 0.85. CUBEPROP_ORBITALS (GLOBALS)¶GLOBALS — List of orbital indices for which cube files are generated (1-based, \(+\) for alpha, \(-\) for beta). All orbitals computed if empty. Type: array; Default: No Default. CUBEPROP_TASKS (GLOBALS)¶GLOBALS — Properties to compute. Valid tasks include: DENSITY - Da, Db, Dt, Ds; ESP - Dt, ESP; ORBITALS - Psi_a_N, Psi_b_N; BASIS_FUNCTIONS - Phi_N; LOL - LOLa, LOLb; ELF - ELFa, ELFb; FRONTIER_ORBITALS - Psi_a_N_HOMO + Psi_a_N_LUMO; DUAL_DESCRIPTOR - DUAL_N_HOMO-M_LUMO. Type: array; Default: No Default. CUBIC_BASIS_TOLERANCE (FISAPT)¶FISAPT (Expert) — CubicScalarGrid basis cutoff. Type: conv double; Default: 1.0e-12. CUBIC_BASIS_TOLERANCE (GLOBALS)¶GLOBALS (Expert) — CubicScalarGrid basis cutoff. Type: conv double; Default: 1.0e-12. CUBIC_BLOCK_MAX_POINTS (FISAPT)¶FISAPT (Expert) — CubicScalarGrid maximum number of grid points per evaluation block. Type: integer; Default: 1",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:96376,Energy Efficiency,efficient,efficient,96376,"CTIONAL (DCT)¶DCT — Chooses appropriate DCT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCT_GUESS (DCT)¶DCT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algorithm to use for the DCT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CCDENSITY)¶CCDENSITY — Reproducing energies from densities ?. Type: integer; Default: 0. DEBUG (CPHF)¶CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS)¶GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT)¶CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT)¶SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT)¶SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP)¶EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS)¶GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI)¶DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC)¶FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS)¶GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCT (DCT)¶DCT — Auxiliary basis se",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:96561,Energy Efficiency,energy,energy,96561,"als from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DCT_TYPE (DCT)¶DCT — What algorithm to use for the DCT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CCDENSITY)¶CCDENSITY — Reproducing energies from densities ?. Type: integer; Default: 0. DEBUG (CPHF)¶CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS)¶GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT)¶CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT)¶SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT)¶SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP)¶EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS)¶GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI)¶DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC)¶FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS)¶GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCT (DCT)¶DCT — Auxiliary basis set for DCT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT)¶SAPT — Auxiliary basis set for SAPT Elst10 and Ex",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:106542,Energy Efficiency,energy,energy,106542,"sed in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIAGONALIZE_HEFF (PSIMRCC)¶PSIMRCC — Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIE_IF_NOT_CONVERGED (GLOBALS)¶GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY)¶CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA)¶CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE)¶CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI)¶DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored fo",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:107127,Energy Efficiency,energy,energy,107127,"re \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIAGONALIZE_HEFF (PSIMRCC)¶PSIMRCC — Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIE_IF_NOT_CONVERGED (GLOBALS)¶GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY)¶CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA)¶CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE)¶CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI)¶DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS e",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:110102,Energy Efficiency,energy,energy,110102,"ERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF)¶SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS)¶GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG)¶DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG)¶DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG)¶DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG)¶DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG)¶DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG)¶DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG)¶DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG)¶DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouter",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:110411,Energy Efficiency,energy,energy,110411,"art using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF)¶SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS)¶GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG)¶DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG)¶DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG)¶DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG)¶DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG)¶DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG)¶DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG)¶DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG)¶DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:113096,Energy Efficiency,energy,energy,113096,"tion. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG)¶DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG)¶DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG)¶DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG)¶DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG)¶DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG)¶DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG)¶DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG)¶DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG)¶DMRG — The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES (DMRG)¶DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG)¶DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT)¶SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC)¶DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC)¶OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:113541,Energy Efficiency,reduce,reduced,113541," density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG)¶DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG)¶DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG)¶DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG)¶DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG)¶DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG)¶DMRG — The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES (DMRG)¶DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG)¶DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT)¶SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC)¶DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC)¶OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Dispersion terms. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:114803,Energy Efficiency,energy,energy,114803,"ype: boolean; Default: true. DO_CCD_DISP (SAPT)¶SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC)¶DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC)¶OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Dispersion terms. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean;",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:115099,Energy Efficiency,energy,energy,115099,"ue. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Dispersion terms. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per i",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:115336,Energy Efficiency,energy,energy,115336,"nf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA o",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:115632,Energy Efficiency,energy,energy,115632,"n SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SINGLETS (CPHF)¶CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:116422,Energy Efficiency,energy,energy,116422," optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criteri",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:116581,Energy Efficiency,energy,energy,116581,"ved in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:116787,Energy Efficiency,energy,energy,116787,"alse. DO_TRIPLETS (CPHF)¶CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CON",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:117024,Energy Efficiency,energy,energy,117024,"efault: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. S",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:117220,Energy Efficiency,energy,energy,117220,"ation (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:117415,Energy Efficiency,energy,energy,117415,"C — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PS",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:117613,Energy Efficiency,energy,energy,117613,y. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAP,MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:117896,Energy Efficiency,energy,energy,117896," for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergen",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:117992,Energy Efficiency,energy,energy,117992,"-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:118225,Energy Efficiency,energy,energy,118225,"nce criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:118424,Energy Efficiency,energy,energy,118424,"nce criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: O",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:118617,Energy Efficiency,energy,energy,118617,"CF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen gro",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:118804,Energy Efficiency,energy,energy,118804,"NVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Defa",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:119112,Energy Efficiency,energy,energy,119112,"mes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:119452,Energy Efficiency,energy,energy,119452,"st-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP comput",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:119695,Energy Efficiency,charge,charge,119695,"f the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:119714,Energy Efficiency,energy,energy,119714,"f the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:119843,Energy Efficiency,energy,energy,119843,"ence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koop",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:119950,Energy Efficiency,energy,energy,119950," EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the di",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:120282,Energy Efficiency,energy,energy,120282,"d Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING)¶OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:120416,Energy Efficiency,energy,energy,120416,"FP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING)¶OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM)¶CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the gu",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:121060,Energy Efficiency,energy,energy,121060," EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING)¶OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM)¶CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. EOM_REFERENCE (CCEOM)¶CCEOM — Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR)¶CCHBAR — Reference wavefunction type for EOM computations. Type: string; Default",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:127638,Energy Efficiency,charge,charge,127638,"TCI)¶DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI)¶DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta string numbers of the target determinant. This could be useful for trying to exclude states that have a nonzero CI coefficient for the given determinant. However, this option was experimental and may not be effective. Type: array; Default: No Default. FINAL_GEOM_WRITE (OPTKING)¶OPTKING — Do save and print the geometry from the last projected step at the end of a geometry optimization? Otherwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. FISAPT_CHARGE_COMPLETENESS (FISAPT)¶FISAPT — Amount of fragment charge completeness to distinguish link bonds. Type: double; Default: 0.8. FISAPT_DO_FSAPT (FISAPT)¶FISAPT — Do an F-SAPT analysis?. Type: boolean; Default: true. FISAPT_DO_FSAPT_DISP (FISAPT)¶FISAPT — Do F-SAPT Dispersion?. Type: boolean; Default: true. FISAPT_DO_PLOT (FISAPT)¶FISAPT — Plot a scalar-field analysis. Type: boolean; Default: false. FISAPT_FSAPT_EXCH_SCALE (FISAPT)¶FISAPT — Do F-SAPT exchange scaling? (ratio of S^infty to S^2). Type: boolean; Default: true. FISAPT_FSAPT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop F-SAPT data within input file directory. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT)¶FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT)¶FISAPT — Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction). Type: boolean; Default: true. FISAPT_FSSAPT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop sSAPT0 exchange-scaling F-SAPT data within input file directo",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:133369,Energy Efficiency,charge,charges,133369,"to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF)¶SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF)¶SCF — The occupations of the orbital indices specified above (\(0.0\le {\rm occ} \le 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING)¶OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FRAG_REF_ATOMS (OPTKING)¶OPTKING — Which atoms define the reference points for interfragment coordinates?. Type: array; Default: No Default. FREEZE_CORE (GLOBALS)¶GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE, 1, 0, -1, -2, -3; Default: FALSE. FREEZE_CORE (SAPT)¶SAPT — The scope of core orbitals to freeze in evaluation of SAPT \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPT",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:133967,Energy Efficiency,energy,energy,133967,"gment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FRAG_REF_ATOMS (OPTKING)¶OPTKING — Which atoms define the reference points for interfragment coordinates?. Type: array; Default: No Default. FREEZE_CORE (GLOBALS)¶GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE, 1, 0, -1, -2, -3; Default: FALSE. FREEZE_CORE (SAPT)¶SAPT — The scope of core orbitals to freeze in evaluation of SAPT \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPTKING)¶OPTKING — Do freeze all interfragment modes?. Type: boolean; Default: false. FREEZE_INTRAFRAG (OPTKING)¶OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING)¶OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING)¶OPTKING — Specify atom and X, XY, XYZ, … to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to b",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:140944,Energy Efficiency,energy,energy,140944,"ess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI)¶DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI)¶DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI)¶DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI)¶DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING)¶OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING)¶OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:142449,Energy Efficiency,energy,energy,142449," this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI)¶DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING)¶OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING)¶OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING)¶OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI)¶DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC)¶PSIMRCC — Do print the effective Hamiltonian?. Type: ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:142645,Energy Efficiency,energy,energy,142645,"ESS_SIZE (DETCI)¶DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING)¶OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING)¶OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING)¶OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI)¶DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC)¶PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC)¶DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_E",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:154648,Energy Efficiency,power,power,154648,"l domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.01. LOCAL_DO_SINGLES (CCEOM)¶CCEOM —. Type: boolean; Default: true. LOCAL_FILTER_SINGLES (CCEOM)¶CCEOM — Do apply local filtering to singles amplitudes?. Type: boolean; Default: true. LOCAL_FILTER_SINGLES (CCLAMBDA)¶CCLAMBDA — Do apply local filtering to single de-excitation (\(\lambda 1\) amplitudes?. Type: boolean; Default: true. LOCAL_FILTER_SINGLES (CCRESPONSE)¶CCRESPONSE — Do apply local filtering to single excitation amplitudes?. Type: boolean; Default: false. LOCAL_GHOST (CCEOM)¶CCEOM — Permit ghost atoms to hold projected atomic orbitals to include in the virtual space in local-EOM-CCSD calculations. Type: integer; Default: -1. LOCAL_IBO_CONDITION (FISAPT)¶FISAPT (Expert) — Condition number to use in IBO metric inversions. Type: double; Default: 1.0e-7. LOCAL_IBO_POWER (FISAPT)¶FISAPT — IBO localization metric power. Type: integer; Default: 4. LOCAL_IBO_STARS (FISAPT)¶FISAPT — IBO Centers for Pi Degeneracy. Type: array; Default: No Default. LOCAL_IBO_STARS_COMPLETENESS (FISAPT)¶FISAPT — IBO Charge metric for classification as Pi. Type: double; Default: 0.90. LOCAL_IBO_USE_STARS (FISAPT)¶FISAPT — IBO Stars procedure. Type: boolean; Default: false. LOCAL_MAXITER (FISAPT)¶FISAPT — Maximum iterations in localization. Type: integer; Default: 1000. LOCAL_MAXITER (SCF)¶SCF — The maxiter on the orbital localization procedure. Type: integer; Default: 200. LOCAL_METHOD (CCENERGY)¶CCENERGY — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METHOD (CCEOM)¶CCEOM — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. W",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:157145,Energy Efficiency,energy,energy,157145,"selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_PAIRDEF (CCENERGY)¶CCENERGY — Definition of local pair domains, default is BP, Boughton-Pulay. Type: string; Possible Values: BP, RESPONSE; Default: BP. LOCAL_PAIRDEF (CCLAMBDA)¶CCLAMBDA — Definition of local pair domains. Type: string; Default: No Default. LOCAL_PAIRDEF (CCRESPONSE)¶CCRESPONSE — Definition of local pair domains. Type: string; Default: NONE. LOCAL_PRECONDITIONER (CCEOM)¶CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT)¶FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY)¶CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM)¶CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA)¶CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE)¶CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC)¶PSIMRCC — Do",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:157537,Energy Efficiency,energy,energy,157537,"E — Definition of local pair domains. Type: string; Default: NONE. LOCAL_PRECONDITIONER (CCEOM)¶CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT)¶FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY)¶CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM)¶CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA)¶CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE)¶CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC)¶PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI)¶DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI)¶DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be pe",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:158470,Energy Efficiency,energy,energy,158470,"uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA)¶CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE)¶CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC)¶PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI)¶DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI)¶DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2)¶DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS)¶GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT)¶SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING)",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:159389,Energy Efficiency,energy,energy,159389," iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2)¶DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS)¶GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT)¶SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. MAX_MEM_BUF (SCF)¶SCF — Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MAX_MOGRAD_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired E_CONVERGENCE. The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MAX_MOGRAD_CONVERGENCE (OCC)¶OCC — Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired E_CONVERGENCE. The listed default will be used for the default value of E_CONVERGENCE. Type: conv d",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:161765,Energy Efficiency,energy,energy,161765,"e H(diag) vector and the number of D vectors is equal to the number of roots). When the number of vectors on disk reaches the value of MAX_NUM_VECS, the Davidson subspace will be collapsed to COLLAPSE_SIZE vectors for each root. This is very helpful for saving disk space. Defaults to CI_MAXITER * NUM_ROOTS + NUM_INIT_VECS. Type: integer; Default: 0. MAX_RADIAL_MOMENT (GLOBALS)¶GLOBALS — Maximum Radial Moment to Calculate. Type: integer; Default: 4. MAXITER (ADC)¶ADC — Maximum number of iterations. Type: integer; Default: 50. MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. MAXITER (CCEOM)¶CCEOM — Maximum number of iterations. Type: integer; Default: 80. MAXITER (CCLAMBDA)¶CCLAMBDA — Maximum number of iterations. Type: integer; Default: 50. MAXITER (CCRESPONSE)¶CCRESPONSE — Maximum number of iterations to converge perturbed amplitude equations. Type: integer; Default: 50. MAXITER (DCT)¶DCT — Maximum number of macro- or micro-iterations for both energy and response equations. Type: integer; Default: 40. MAXITER (FISAPT)¶FISAPT — Maximum number of iterations for CPHF. Type: integer; Default: 50. MAXITER (FNOCC)¶FNOCC — Maximum number of CC iterations. Type: integer; Default: 100. MAXITER (MCSCF)¶MCSCF — Maximum number of iterations. Type: integer; Default: 100. MAXITER (PE)¶PE — Maximum number of iterations for induced moments. Type: integer; Default: 50. MAXITER (PSIMRCC)¶PSIMRCC — Maximum number of iterations to determine the amplitudes. Type: integer; Default: 100. MAXITER (SAPT)¶SAPT — Maximum number of CPHF iterations. Type: integer; Default: 50. MAXITER (SCF)¶SCF — Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MBIS_D_CONVERGENCE (GLOBALS)¶GLOBALS — MBIS Convergence Criteria. Type: conv double; Default: 1.0e-8. MBIS_MAXITER (GLOBALS)¶GLOBALS — Maximum Number of MBIS Iterations. Type: integer; Default: 500. MBIS_PRUNING_SCHEME (GLO",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:164018,Energy Efficiency,energy,energy,164018,". Type: integer; Default: 302. MCSCF_ALGORITHM (DETCI)¶DETCI — Convergence algorithm to utilize. Two-Step, Augmented Hessian, or One-Step. Defaults to TS for RASSCF. Type: string; Possible Values: TS, AH; Default: TS. MCSCF_CI_CLEANUP (DETCI)¶DETCI — Cleanup the CI info at the end of a run?. Type: boolean; Default: true. MCSCF_DIIS_ERROR_TYPE (DETCI)¶DETCI — DIIS error vector type either, the AO orbital gradient or the orbital rotation update matrix. Type: string; Possible Values: GRAD, UPDATE; Default: GRAD. MCSCF_DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation for TS convergence. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of DIIS vectors for TS convergence. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI)¶DETCI — Iteration to turn on DIIS for TS convergence. Type: integer; Default: 3. MCSCF_DPD_CLEANUP (DETCI)¶DETCI — Cleanup the DPD MCSCF object at the end of a run?. Type: boolean; Default: true. MCSCF_E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI)¶DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI)¶DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI)¶DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_ROTATE (DETCI)¶DETCI — Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals. Type: array; Default: No Default. MCSCF_SO_START_E (DETCI)¶DE",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:165057,Energy Efficiency,energy,energy,165057,"nergy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI)¶DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI)¶DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI)¶DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_ROTATE (DETCI)¶DETCI — Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals. Type: array; Default: No Default. MCSCF_SO_START_E (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-4. MCSCF_SO_START_GRAD (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on RMS of orbital gradient. Type: double; Default: 1e-4. MCSCF_TYPE (DETCI)¶DETCI — Method to handle the two-electron integrals. Type: string; Possible Values: DF, CONV, AO; Default: CONV. MEMORY (ADC)¶ADC — The amount of memory available (in Mb) This option is only available for the built-in ADC backend. Type: integer; Default: 1000. MIN_CCD_DIISVECS (SAPT)¶SAPT — Minimum number of vectors used in CCD-DIIS. Type: integer; Default: 4. MINAO_BASIS (FISAPT)¶FISAPT (Expert) — MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. MIXED (DETCI)¶DETCI (Expert) — Do allow “mixed” RAS II/RAS III excitations into the CI space? If FALSE, then if there are any electrons in RAS III, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MIXED4 (DETCI)¶DETC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:171462,Energy Efficiency,energy,energy,171462," — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:171494,Energy Efficiency,energy,energy,171494," — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:171564,Energy Efficiency,energy,energy,171564," — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:172449,Energy Efficiency,energy,energy,172449,"AVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC)¶MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC)¶MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC)¶MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC)¶MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:173977,Energy Efficiency,energy,energy,173977,"o otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC)¶MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC)¶MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC)¶MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI)¶DETCI — Do use the \(M_s = 0\) component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI)¶DETCI — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (DFOCC)¶DFOCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (FNOCC)¶FNOCC — Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. NAT_ORBS (OCC)¶OCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS_T2 (SAPT)¶SAPT — Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3 ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:186978,Energy Efficiency,charge,charges,186978,"lt: FLETCHER_REEVES. PCG_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for residual vector of preconditioned conjugate gradient method. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve R_CONVERGENCE residual convergence. The listed default will be used for the default value of R_CONVERGENCE. Type: conv double; Default: 1e-7. PCG_CONVERGENCE (OCC)¶OCC — Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_MAXITER (DFOCC)¶DFOCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 50. PCG_MAXITER (OCC)¶OCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 30. PCM (GLOBALS)¶GLOBALS — PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_CC_TYPE (PCM)¶PCM — PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. PCM_SCF_TYPE (PCM)¶PCM (Expert) — Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCMSOLVER_PARSED_FNAME (PCM)¶PCM (Expert) — Name of the PCMSolver input file as parsed by pcmsolver.py. Type: string; Default: No Default. PE (GLOBALS)¶GLOBALS — PE boolean for polarizable embedding module. Type: boolean; Default: false. PE_ECP (PE)¶PE — use PE(ECP) repulsive potentials. Type: boolean; Default: false. PERTURB_CBS (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: false. PERTURB_CBS_COUPLING (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. PERTURB_DIPOLE (SCF)¶SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF)¶SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI)¶DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:195441,Energy Efficiency,reduce,reduce,195441,"me methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP)¶EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI)¶DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA)¶CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE)¶CCRESPONSE — Convergence criterion for wavefunction (change) in p",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:206949,Energy Efficiency,energy,energy,206949," Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING)¶OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC)¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLES",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:207043,Energy Efficiency,energy,energy,207043," unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING)¶OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC)¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalue to allow before linear ",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:207137,Energy Efficiency,energy,energy,207137,"symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING)¶OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC)¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF)¶SCF (Expe",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:208405,Energy Efficiency,energy,energy,208405,"of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF)¶SCF (Expert) — SAD guess density decomposition threshold. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF density in the SAD guess, analogous to D_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy in the SAD guess, analogous to E_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF)¶SCF (Expert) — Do force an even distribution of occupations across the last partially occupied orbital shell?. Type: boolean; Default: true. SAD_MAXITER (SCF)¶SCF (Expert) — Maximum number of atomic SCF iterations within SAD. Type: integer; Default: 50. SAD_PRINT (SCF)¶SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE (SCF)¶SCF (Expert) — SCF type used for atomic calculations in SAD guess. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK; Default: DF. SAD_SPIN_AVERAGE (SCF)¶SCF (Expert) — Do use spin-averaged occupations instead of atomic ground spin state in fractional SAD?. Type: boolean; Default: true. SAPT (SCF)¶SCF (Expert) — Are going to do SAPT? If so, what part?. Type: string; Default: FALSE. SAPT0_E10 (SAPT)¶SAPT (Expert) — For SAPT0 only, compute only first-order electros",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:212898,Energy Efficiency,energy,energy,212898,"he LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; Default: false. SAVE_JK (SCF)¶SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF)¶SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR (SCF)¶SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_PROPERTIES (SCF)¶SCF — SCF Properties to calculate after an energy evaluation. Note, this keyword is not used for property evaluations. Type: array; Default: No Default. SCF_TYPE (CPHF)¶CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCF_TYPE (GLOBALS)¶GLOBALS — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK; Default: PK. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM)¶CCEOM — Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCREENING (SAPT)¶SAPT — Do use Combined Schwarz Approximation Maximum (CSAM) screening on two-electron integrals. This is a slightly tighter bound than that of default Schwarz screening. Type: string; Possible Values: SCHWARZ, CSAM; Default: CSAM. SC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:218833,Energy Efficiency,energy,energy,218833,"lvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC)¶DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC)¶OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF)¶SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF)¶SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF)¶SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SPINADAPT_ENERGIES (CCENERGY)¶CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SC",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:219018,Energy Efficiency,adapt,adapted,219018," SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF)¶SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF)¶SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF)¶SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SPINADAPT_ENERGIES (CCENERGY)¶CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subsp",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:219143,Energy Efficiency,energy,energy,219143,"oolean; Default: false. SOSCF_CONV (SCF)¶SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF)¶SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SPINADAPT_ENERGIES (CCENERGY)¶CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stabilit",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:220860,Energy Efficiency,energy,energy,220860,"PT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCT)¶DCT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCT)¶DCT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCT)¶DCT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING)¶OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SUMMATION_FIELDS (P",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:224666,Energy Efficiency,energy,energy,224666,"1e-4. TDSCF_STATES (SCF)¶SCF — Number of roots (excited states) we should seek to converge. This can be either an integer (total number of states to seek) or a list (number of states per irrep). The latter is only valid if the system has symmetry. Furthermore, the total number of states will be redistributed among irreps when symmetry is used. Type: array; Default: No Default. TDSCF_TDA (SCF)¶SCF — Run with Tamm-Dancoff approximation (TDA), uses random-phase approximation (RPA) when false. Type: boolean; Default: false. TDSCF_TDM_PRINT (SCF)¶SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:225415,Energy Efficiency,energy,energy,225415,"tation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC)¶PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF)¶SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DETCI)¶DETCI (Expert) — Do compute two-particle density matrix if not otherwise required? Warning: This will hold 4 dense active TPDM’s in memory. Type: boolean; Default: false.",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html:6172,Integrability,rout,routines,6172,"T)¶SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF)¶SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF)¶SCF — Accelerate convergence by performing a preliminary SCF with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the Defaults small basis set 3-21G, pcseg-0, or def2-SV(P). Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS)¶GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. BENCH (GLOBALS)¶GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI)¶DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BORDER (PE)¶PE — Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_N_REDIST (PE)¶PE — number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER (PE)¶PE — order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_REDIST_POL (PE)¶PE — redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. BORDER_RMIN (PE)¶PE — minimum radius from QM atoms to MM sites to be taken into ac",MatchSource.WIKI,psi4manual/1.4.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c.html
